// Generated by Haxe 5.0.0-alpha.1+0620b1b
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.trim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	var s1 = r > 0 ? HxOverrides.substr(s,0,l - r) : s;
	var l = s1.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s1,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s1,r,l - r);
	} else {
		return s1;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__:true,__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr,__params__:function(){ return [this.c];}}; },$_._hx_name="TClass",$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="TEnum",$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c;
	var _g = e.__constructs__[index];
	if(_g == null) {
		c = null;
	} else {
		var ctor = _g;
		c = ctor._hx_name;
	}
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var aparams = a.__params__();
		var bparams = b.__params__();
		var _g = 0;
		var _g1 = aparams.length;
		while(_g < _g1) {
			var i = _g++;
			if(!Type.enumEq(aparams[i],bparams[i])) {
				return false;
			}
		}
	} catch( _g ) {
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	if(e.__params__ != null) {
		return e.__params__();
	} else {
		return [];
	}
};
var TypeInfoData_$go2hx_$ = function() {
	var _g = new haxe_ds_StringMap();
	var value = stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.unicode.utf8.Utf8_t_acceptrange.T_acceptRange",[],stdgo__$internal_internal_reflect_GoType.structType([new stdgo__$internal_internal_reflect_FieldType("_lo",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(8);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("_hi",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(8);
	}},"",false,false)]),false,{ get : function() {
		return null;
	}});
	_g.h["stdgo._internal.unicode.utf8.Utf8_t_acceptrange.T_acceptRange"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_valueerror.ValueError",[new stdgo__$internal_internal_reflect_MethodType("error",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}})],stdgo__$internal_internal_reflect_GoType.structType([new stdgo__$internal_internal_reflect_FieldType("method",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(17);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("kind",{ get : function() {
		return stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_kind.Kind"];
	}},"",false,false)]),false,{ get : function() {
		return null;
	}});
	_g.h["stdgo._internal.reflect.Reflect_valueerror.ValueError"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_value.Value",[new stdgo__$internal_internal_reflect_MethodType("equal",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("comparable_",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("canConvert",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_type_.Type_"]];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("convert",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_type_.Type_"]];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("clear",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("grow",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("unsafePointer",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(18)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("unsafeAddr",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(12)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("uint",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(11)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("canUint",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("type",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_type_.Type_"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("trySend",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("tryRecv",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value"),stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("string",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("slice3",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2),stdgo__$internal_internal_reflect_GoType.basic(2),stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("slice",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2),stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setString",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setPointer",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(18)];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setUint",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(11)];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setMapIndex",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value"),stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setCap",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setLen",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setInt",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(6)];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setFloat",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(14)];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setComplex",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(16)];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setBytes",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.sliceType({ get : function() {
				return stdgo__$internal_internal_reflect_GoType.basic(8);
			}})];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setBool",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("set",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("send",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("recv",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value"),stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("pointer",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(12)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("overflowUint",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(11)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("overflowInt",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(6)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("overflowFloat",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(14)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("overflowComplex",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(16)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("numField",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("methodByName",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("numMethod",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("method",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("mapRange",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.refType({ get : function() {
				return stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_mapiter.MapIter"];
			}})];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setIterValue",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.refType({ get : function() {
				return stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_mapiter.MapIter"];
			}})];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setIterKey",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.refType({ get : function() {
				return stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_mapiter.MapIter"];
			}})];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("mapKeys",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.sliceType({ get : function() {
				return stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value");
			}})];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("mapIndex",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("len",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("kind",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_kind.Kind"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("setZero",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("isZero",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("isValid",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("isNil",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("interfaceData",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.arrayType({ get : function() {
				return stdgo__$internal_internal_reflect_GoType.basic(12);
			}},-1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("interface_",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.interfaceType(true,[])];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("canInterface",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("int_",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(6)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("canInt",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("index",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("float_",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(14)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("canFloat",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("fieldByNameFunc",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
				return [stdgo__$internal_internal_reflect_GoType.basic(17)];
			}},{ get : function() {
				return [stdgo__$internal_internal_reflect_GoType.basic(1)];
			}},{ get : function() {
				return stdgo__$internal_internal_reflect_GoType.invalidType;
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("fieldByName",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("fieldByIndexErr",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.sliceType({ get : function() {
				return stdgo__$internal_internal_reflect_GoType.basic(2);
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value"),stdgo__$internal_internal_TypeInfo.names.h["stdgo.Error.Error"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("fieldByIndex",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.sliceType({ get : function() {
				return stdgo__$internal_internal_reflect_GoType.basic(2);
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("field",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("elem",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("complex",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(16)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("canComplex",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("close",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("cap",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("callSlice",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.sliceType({ get : function() {
				return stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value");
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.sliceType({ get : function() {
				return stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value");
			}})];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("call",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.sliceType({ get : function() {
				return stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value");
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.sliceType({ get : function() {
				return stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value");
			}})];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("canSet",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("canAddr",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("bytes",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.sliceType({ get : function() {
				return stdgo__$internal_internal_reflect_GoType.basic(8);
			}})];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("bool_",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("addr",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}})],stdgo__$internal_internal_reflect_GoType.structType([new stdgo__$internal_internal_reflect_FieldType("value",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.interfaceType(true,[]);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("underlyingIndex",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(2);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("canAddrBool",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(1);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("notSetBool",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(1);
	}},"",false,false)]),false,{ get : function() {
		return null;
	}});
	_g.h["stdgo._internal.reflect.Reflect_value.Value"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[new stdgo__$internal_internal_reflect_MethodType("align",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("fieldAlign",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("method",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Method")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("methodByName",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Method"),stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("numMethod",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("name",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("pkgPath",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("size",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(12)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("string",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("kind",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_kind.Kind"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("implements_",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("assignableTo",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("convertibleTo",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("comparable_",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("bits",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("chanDir",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_chandir.ChanDir"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("isVariadic",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("elem",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("field",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_structfield.StructField"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("fieldByIndex",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.sliceType({ get : function() {
				return stdgo__$internal_internal_reflect_GoType.basic(2);
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_structfield.StructField"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("fieldByName",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_structfield.StructField"],stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("fieldByNameFunc",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
				return [stdgo__$internal_internal_reflect_GoType.basic(17)];
			}},{ get : function() {
				return [stdgo__$internal_internal_reflect_GoType.basic(1)];
			}},{ get : function() {
				return stdgo__$internal_internal_reflect_GoType.invalidType;
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_structfield.StructField"],stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("in_",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("key",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("len",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("numField",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("numIn",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("numOut",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("out",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}})],stdgo__$internal_internal_reflect_GoType.interfaceType(false,[new stdgo__$internal_internal_reflect_MethodType("align",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("fieldAlign",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("method",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Method")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("methodByName",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Method"),stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("numMethod",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("name",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("pkgPath",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("size",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(12)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("string",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("kind",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_kind.Kind"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("implements_",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("assignableTo",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("convertibleTo",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("comparable_",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("bits",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("chanDir",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_chandir.ChanDir"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("isVariadic",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("elem",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("field",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_structfield.StructField"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("fieldByIndex",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.sliceType({ get : function() {
				return stdgo__$internal_internal_reflect_GoType.basic(2);
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_structfield.StructField"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("fieldByName",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_structfield.StructField"],stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("fieldByNameFunc",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
				return [stdgo__$internal_internal_reflect_GoType.basic(17)];
			}},{ get : function() {
				return [stdgo__$internal_internal_reflect_GoType.basic(1)];
			}},{ get : function() {
				return stdgo__$internal_internal_reflect_GoType.invalidType;
			}})];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_structfield.StructField"],stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("in_",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("key",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("len",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("numField",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("numIn",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("numOut",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("out",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(2)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
				return null;
			}})];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}})]),false,{ get : function() {
		return null;
	}});
	_g.h["stdgo._internal.reflect.Reflect_type_.Type_"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_structtag.StructTag",[new stdgo__$internal_internal_reflect_MethodType("lookup",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17),stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("get",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}})],stdgo__$internal_internal_reflect_GoType.basic(17),false,{ get : function() {
		return null;
	}});
	_g.h["stdgo._internal.reflect.Reflect_structtag.StructTag"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_structfield.StructField",[new stdgo__$internal_internal_reflect_MethodType("isExported",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}})],stdgo__$internal_internal_reflect_GoType.structType([new stdgo__$internal_internal_reflect_FieldType("name",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(17);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("pkgPath",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(17);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("type",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_type_.Type_",[],stdgo__$internal_internal_reflect_GoType.invalidType,false,{ get : function() {
			return null;
		}});
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("tag",{ get : function() {
		return stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_structtag.StructTag"];
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("offset",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(12);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("index",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.sliceType({ get : function() {
			return stdgo__$internal_internal_reflect_GoType.basic(2);
		}});
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("anonymous",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(1);
	}},"",false,false)]),false,{ get : function() {
		return null;
	}});
	_g.h["stdgo._internal.reflect.Reflect_structfield.StructField"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_method.Method",[new stdgo__$internal_internal_reflect_MethodType("isExported",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}})],stdgo__$internal_internal_reflect_GoType.structType([new stdgo__$internal_internal_reflect_FieldType("name",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(17);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("pkgPath",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(17);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("type",{ get : function() {
		return stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_type_.Type_"];
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("func",{ get : function() {
		return stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.reflect.Reflect_value.Value"];
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("index",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(2);
	}},"",false,false)]),false,{ get : function() {
		return null;
	}});
	_g.h["stdgo._internal.reflect.Reflect_method.Method"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_mapiter.MapIter",[new stdgo__$internal_internal_reflect_MethodType("reset",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("next",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(1)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("value",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("key",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.previouslyNamed("reflect.Value")];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}})],stdgo__$internal_internal_reflect_GoType.structType([]),false,{ get : function() {
		return null;
	}});
	_g.h["stdgo._internal.reflect.Reflect_mapiter.MapIter"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_kind.Kind",[new stdgo__$internal_internal_reflect_MethodType("string",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}})],stdgo__$internal_internal_reflect_GoType.basic(7),false,{ get : function() {
		return null;
	}});
	_g.h["stdgo._internal.reflect.Reflect_kind.Kind"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.reflect.Reflect_chandir.ChanDir",[new stdgo__$internal_internal_reflect_MethodType("string",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}})],stdgo__$internal_internal_reflect_GoType.basic(2),false,{ get : function() {
		return null;
	}});
	_g.h["stdgo._internal.reflect.Reflect_chandir.ChanDir"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("stdgo._internal.math.bits.Bits_t_errorstring.T_errorString",[new stdgo__$internal_internal_reflect_MethodType("error",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}}),new stdgo__$internal_internal_reflect_MethodType("runtimeError",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}})],stdgo__$internal_internal_reflect_GoType.basic(17),false,{ get : function() {
		return null;
	}});
	_g.h["stdgo._internal.math.bits.Bits_t_errorstring.T_errorString"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("stdgo.Error.Error",[new stdgo__$internal_internal_reflect_MethodType("error",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}})],stdgo__$internal_internal_reflect_GoType.interfaceType(false,[new stdgo__$internal_internal_reflect_MethodType("error",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(17)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	}})]),false,{ get : function() {
		return null;
	}});
	_g.h["stdgo.Error.Error"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("_internal.github_dot_com.charmbracelet.harmonica.Harmonica_vector.Vector",[],stdgo__$internal_internal_reflect_GoType.structType([new stdgo__$internal_internal_reflect_FieldType("x",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(14);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("y",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(14);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("z",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(14);
	}},"",false,false)]),false,{ get : function() {
		return null;
	}});
	_g.h["_internal.github_dot_com.charmbracelet.harmonica.Harmonica_vector.Vector"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("_internal.github_dot_com.charmbracelet.harmonica.Harmonica_spring.Spring",[new stdgo__$internal_internal_reflect_MethodType("update",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(14),stdgo__$internal_internal_reflect_GoType.basic(14),stdgo__$internal_internal_reflect_GoType.basic(14)];
		}},{ get : function() {
			return [stdgo__$internal_internal_reflect_GoType.basic(14),stdgo__$internal_internal_reflect_GoType.basic(14)];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}})],stdgo__$internal_internal_reflect_GoType.structType([new stdgo__$internal_internal_reflect_FieldType("_posPosCoef",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(14);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("_posVelCoef",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(14);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("_velPosCoef",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(14);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("_velVelCoef",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(14);
	}},"",false,false)]),false,{ get : function() {
		return null;
	}});
	_g.h["_internal.github_dot_com.charmbracelet.harmonica.Harmonica_spring.Spring"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("_internal.github_dot_com.charmbracelet.harmonica.Harmonica_projectile.Projectile",[new stdgo__$internal_internal_reflect_MethodType("acceleration",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["_internal.github_dot_com.charmbracelet.harmonica.Harmonica_vector.Vector"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("velocity",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["_internal.github_dot_com.charmbracelet.harmonica.Harmonica_vector.Vector"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("position",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["_internal.github_dot_com.charmbracelet.harmonica.Harmonica_point.Point"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}}),new stdgo__$internal_internal_reflect_MethodType("update",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.signature(false,{ get : function() {
			return [];
		}},{ get : function() {
			return [stdgo__$internal_internal_TypeInfo.names.h["_internal.github_dot_com.charmbracelet.harmonica.Harmonica_point.Point"]];
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_GoType.invalidType;
		}});
	}},{ get : function() {
		return null;
	}})],stdgo__$internal_internal_reflect_GoType.structType([new stdgo__$internal_internal_reflect_FieldType("_pos",{ get : function() {
		return stdgo__$internal_internal_TypeInfo.names.h["_internal.github_dot_com.charmbracelet.harmonica.Harmonica_point.Point"];
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("_vel",{ get : function() {
		return stdgo__$internal_internal_TypeInfo.names.h["_internal.github_dot_com.charmbracelet.harmonica.Harmonica_vector.Vector"];
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("_acc",{ get : function() {
		return stdgo__$internal_internal_TypeInfo.names.h["_internal.github_dot_com.charmbracelet.harmonica.Harmonica_vector.Vector"];
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("_deltaTime",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(14);
	}},"",false,false)]),false,{ get : function() {
		return null;
	}});
	_g.h["_internal.github_dot_com.charmbracelet.harmonica.Harmonica_projectile.Projectile"] = value;
	var value = stdgo__$internal_internal_reflect_GoType.named("_internal.github_dot_com.charmbracelet.harmonica.Harmonica_point.Point",[],stdgo__$internal_internal_reflect_GoType.structType([new stdgo__$internal_internal_reflect_FieldType("x",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(14);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("y",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(14);
	}},"",false,false),new stdgo__$internal_internal_reflect_FieldType("z",{ get : function() {
		return stdgo__$internal_internal_reflect_GoType.basic(14);
	}},"",false,false)]),false,{ get : function() {
		return null;
	}});
	_g.h["_internal.github_dot_com.charmbracelet.harmonica.Harmonica_point.Point"] = value;
	this.names = _g;
};
$hxClasses["TypeInfoData_go2hx_"] = TypeInfoData_$go2hx_$;
TypeInfoData_$go2hx_$.__name__ = "TypeInfoData_go2hx_";
TypeInfoData_$go2hx_$.prototype = {
	__class__: TypeInfoData_$go2hx_$
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var stdgo_GoFloat64 = {};
stdgo_GoFloat64.toInt = function(this1) {
	if(isNaN(this1)) {
		return -2147483648;
	}
	return this1 | 0;
};
stdgo_GoFloat64.add = function(a,b) {
	return a + b;
};
stdgo_GoFloat64.div = function(a,b) {
	if(stdgo_GoFloat64.eq(b,0)) {
		var flip = stdgo_GoFloat64.gte(a,0);
		if(stdgo__$internal_math_Math_$signbit_signbit(b)) {
			flip = !flip;
		}
		if(flip) {
			return Infinity;
		} else {
			return -Infinity;
		}
	}
	return a / b;
};
stdgo_GoFloat64.mul = function(a,b) {
	return a * b;
};
stdgo_GoFloat64.sub = function(a,b) {
	return a - b;
};
stdgo_GoFloat64.eq = function(a,b) {
	return a == b;
};
stdgo_GoFloat64.gt = function(a,b) {
	return a > b;
};
stdgo_GoFloat64.gte = function(a,b) {
	return a >= b;
};
stdgo_GoFloat64.lt = function(a,b) {
	return a < b;
};
stdgo_GoFloat64.neg = function(t) {
	return t * -1;
};
function stdgo__$internal_math_Math_$nextafter_nextafter(_x,_y) {
	var _r = 0;
	if(stdgo__$internal_math_Math_$isnan_isNaN(_x) || stdgo__$internal_math_Math_$isnan_isNaN(_y)) {
		_r = stdgo__$internal_math_Math_$nan_naN();
	} else if(stdgo_GoFloat64.eq(_x,_y)) {
		_r = _x;
	} else if(stdgo_GoFloat64.eq(_x,0)) {
		_r = stdgo__$internal_math_Math_$copysign_copysign(stdgo__$internal_math_Math_$float64frombits_float64frombits(new haxe__$Int64__$_$_$Int64(0,1)),_y);
	} else if(stdgo_GoFloat64.gt(_y,_x) == stdgo_GoFloat64.gt(_x,0)) {
		_r = stdgo__$internal_math_Math_$float64frombits_float64frombits(stdgo_GoUInt64.add(stdgo__$internal_math_Math_$float64bits_float64bits(_x),new haxe__$Int64__$_$_$Int64(0,1)));
	} else {
		_r = stdgo__$internal_math_Math_$float64frombits_float64frombits(stdgo_GoUInt64.sub(stdgo__$internal_math_Math_$float64bits_float64bits(_x),new haxe__$Int64__$_$_$Int64(0,1)));
	}
	return _r;
}
function stdgo__$internal_math_Math_$isnan_isNaN(_f) {
	return isNaN(_f);
}
function stdgo__$internal_math_Math_$nan_naN() {
	return NaN;
}
function stdgo__$internal_math_Math_$copysign_copysign(_f,_sign) {
	return stdgo__$internal_math_Math_$float64frombits_float64frombits(stdgo_GoUInt64.or(stdgo_GoUInt64.and(stdgo__$internal_math_Math_$float64bits_float64bits(_f),stdgo_GoUInt64.xor(new haxe__$Int64__$_$_$Int64(-2147483648,0),stdgo_GoNumber_ofIntUInt64(-1))),stdgo_GoUInt64.and(stdgo__$internal_math_Math_$float64bits_float64bits(_sign),new haxe__$Int64__$_$_$Int64(-2147483648,0))));
}
function stdgo__$internal_math_Math_$float64frombits_float64frombits(_b) {
	var bits = new haxe_io_Bytes(new ArrayBuffer(8));
	var low = _b.low;
	var high = _b.high;
	bits.b[0] = low & 255;
	bits.b[1] = low >> 8 & 255;
	bits.b[2] = low >> 16 & 255;
	bits.b[3] = low >> 24 & 255;
	bits.b[4] = high & 255;
	bits.b[5] = high >> 8 & 255;
	bits.b[6] = high >> 16 & 255;
	bits.b[7] = high >> 24 & 255;
	return bits.getDouble(0);
}
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var stdgo_GoUInt64 = {};
stdgo_GoUInt64.gt = function(a,b) {
	return haxe_UInt64.gt(a,b);
};
stdgo_GoUInt64.gte = function(a,b) {
	return haxe_UInt64.gte(a,b);
};
stdgo_GoUInt64.lt = function(a,b) {
	return haxe_UInt64.lt(a,b);
};
stdgo_GoUInt64.shr = function(a,b) {
	if(stdgo_GoUInt64.lt(b,stdgo_GoNumber_ofIntUInt64(0)) || stdgo_GoUInt64.gte(b,stdgo_GoNumber_ofIntUInt64(64))) {
		if(stdgo_GoUInt64.lt(a,stdgo_GoNumber_ofIntUInt64(0))) {
			return stdgo_GoNumber_ofIntUInt64(-1);
		} else {
			return stdgo_GoNumber_ofIntUInt64(0);
		}
	}
	return haxe_UInt64.shr(a,stdgo_GoNumber_toIntInt64(b));
};
stdgo_GoUInt64.shl = function(a,b) {
	if(stdgo_GoUInt64.lt(b,stdgo_GoNumber_ofIntUInt64(0)) || stdgo_GoUInt64.gte(b,stdgo_GoNumber_ofIntUInt64(64))) {
		return stdgo_GoNumber_ofIntUInt64(0);
	}
	return haxe_UInt64.shl(a,stdgo_GoNumber_toIntInt64(b));
};
stdgo_GoUInt64.neq = function(a,b) {
	return haxe_UInt64.neq(a,b);
};
stdgo_GoUInt64.equals = function(a,b) {
	return haxe_UInt64.eq(a,b);
};
stdgo_GoUInt64.add = function(a,b) {
	return haxe_UInt64.add(a,b);
};
stdgo_GoUInt64.sub = function(a,b) {
	return haxe_UInt64.sub(a,b);
};
stdgo_GoUInt64.mul = function(a,b) {
	return haxe_UInt64.mul(a,b);
};
stdgo_GoUInt64.and = function(a,b) {
	return haxe_UInt64.and(a,b);
};
stdgo_GoUInt64.or = function(a,b) {
	return haxe_UInt64.or(a,b);
};
stdgo_GoUInt64.xor = function(a,b) {
	return haxe_UInt64.xor(a,b);
};
stdgo_GoUInt64.mod = function(a,b) {
	return haxe_UInt64.mod(a,b);
};
stdgo_GoUInt64.div = function(a,b) {
	if(stdgo_GoUInt64.equals(b,stdgo_GoNumber_ofIntUInt64(0))) {
		throw haxe_Exception.thrown(stdgo_Error__divideError == null ? new stdgo_AnyInterfaceData(null,new stdgo__$internal_internal_reflect__$Type(stdgo__$internal_internal_reflect_GoType.basic(25))) : new stdgo_AnyInterfaceData(stdgo_Error__divideError,stdgo_Error__divideError.__underlying__().type));
	}
	return haxe_UInt64.div(a,b);
};
var haxe_UInt64 = {};
haxe_UInt64.add = function(lhs,rhs) {
	var high = lhs.high + rhs.high | 0;
	var low = lhs.low + rhs.low | 0;
	if(haxe_Int32.ucompare(low,lhs.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
haxe_UInt64.mul = function(lhs,rhs) {
	var mask = 65535;
	var al = lhs.low & mask;
	var ah = lhs.low >>> 16;
	var bl = rhs.low & mask;
	var bh = rhs.low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(lhs.low,rhs.high) + haxe_Int32._mul(lhs.high,rhs.low) | 0) | 0;
	return new haxe__$Int64__$_$_$Int64(high,low);
};
haxe_UInt64.mod = function(lhs,rhs) {
	return haxe_Int64.divMod(lhs,rhs).modulus;
};
haxe_UInt64.sub = function(lhs,rhs) {
	var high = lhs.high - rhs.high | 0;
	var low = lhs.low - rhs.low | 0;
	if(haxe_Int32.ucompare(lhs.low,rhs.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
haxe_UInt64.div = function(lhs,rhs) {
	if(!(lhs.high < 0) && !(rhs.high < 0)) {
		return haxe_Int64.divMod(lhs,rhs).quotient;
	}
	if(lhs.high < 0) {
		if(rhs.high < 0) {
			var v = lhs.high - rhs.high | 0;
			if(v == 0) {
				v = haxe_Int32.ucompare(lhs.low,rhs.low);
			}
			if((lhs.high < 0 ? rhs.high < 0 ? v : -1 : rhs.high >= 0 ? v : 1) < 0) {
				return new haxe__$Int64__$_$_$Int64(0,0);
			} else {
				return new haxe__$Int64__$_$_$Int64(0,1);
			}
		} else {
			var pt1 = new haxe__$Int64__$_$_$Int64(2147483647,-1);
			var pt2 = new haxe__$Int64__$_$_$Int64(lhs.high & pt1.high,lhs.low & pt1.low);
			var rem = new haxe__$Int64__$_$_$Int64(0,1);
			var b = haxe_Int64.divMod(pt1,rhs).modulus;
			var high = rem.high + b.high | 0;
			var low = rem.low + b.low | 0;
			if(haxe_Int32.ucompare(low,rem.low) < 0) {
				var ret = high++;
				high = high | 0;
			}
			rem = new haxe__$Int64__$_$_$Int64(high,low);
			var b = haxe_Int64.divMod(pt2,rhs).modulus;
			var high = rem.high + b.high | 0;
			var low = rem.low + b.low | 0;
			if(haxe_Int32.ucompare(low,rem.low) < 0) {
				var ret = high++;
				high = high | 0;
			}
			rem = new haxe__$Int64__$_$_$Int64(high,low);
			var v = haxe_Int32.ucompare(rem.high,rhs.high);
			if((v != 0 ? v : haxe_Int32.ucompare(rem.low,rhs.low)) >= 0) {
				rem = new haxe__$Int64__$_$_$Int64(0,1);
			} else {
				rem = new haxe__$Int64__$_$_$Int64(0,0);
			}
			pt1 = haxe_Int64.divMod(pt1,rhs).quotient;
			pt2 = haxe_Int64.divMod(pt2,rhs).quotient;
			var high = pt2.high + rem.high | 0;
			var low = pt2.low + rem.low | 0;
			if(haxe_Int32.ucompare(low,pt2.low) < 0) {
				var ret = high++;
				high = high | 0;
			}
			var b_high = high;
			var b_low = low;
			var high = pt1.high + b_high | 0;
			var low = pt1.low + b_low | 0;
			if(haxe_Int32.ucompare(low,pt1.low) < 0) {
				var ret = high++;
				high = high | 0;
			}
			return new haxe__$Int64__$_$_$Int64(high,low);
		}
	} else {
		return new haxe__$Int64__$_$_$Int64(0,0);
	}
};
haxe_UInt64.or = function(lhs,rhs) {
	return new haxe__$Int64__$_$_$Int64(lhs.high | rhs.high,lhs.low | rhs.low);
};
haxe_UInt64.xor = function(lhs,rhs) {
	return new haxe__$Int64__$_$_$Int64(lhs.high ^ rhs.high,lhs.low ^ rhs.low);
};
haxe_UInt64.and = function(lhs,rhs) {
	return new haxe__$Int64__$_$_$Int64(lhs.high & rhs.high,lhs.low & rhs.low);
};
haxe_UInt64.shl = function(lhs,rhs) {
	var a = lhs;
	var b = rhs;
	b &= 63;
	if(b == 0) {
		return new haxe__$Int64__$_$_$Int64(a.high,a.low);
	} else if(b < 32) {
		return new haxe__$Int64__$_$_$Int64(a.high << b | a.low >>> 32 - b,a.low << b);
	} else {
		return new haxe__$Int64__$_$_$Int64(a.low << b - 32,0);
	}
};
haxe_UInt64.shr = function(lhs,rhs) {
	var a = lhs;
	var b = rhs;
	b &= 63;
	if(b == 0) {
		return new haxe__$Int64__$_$_$Int64(a.high,a.low);
	} else if(b < 32) {
		return new haxe__$Int64__$_$_$Int64(a.high >>> b,a.high << 32 - b | a.low >>> b);
	} else {
		return new haxe__$Int64__$_$_$Int64(0,a.high >>> b - 32);
	}
};
haxe_UInt64.gt = function(lhs,rhs) {
	var a = lhs;
	var b_high = 0;
	var b_low = 0;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	var aNeg = (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) < 0;
	var a = rhs;
	var b_high = 0;
	var b_low = 0;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	var bNeg = (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		var a = lhs;
		var b = rhs;
		var v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
	}
};
haxe_UInt64.gte = function(lhs,rhs) {
	var a = lhs;
	var b_high = 0;
	var b_low = 0;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	var aNeg = (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) < 0;
	var a = rhs;
	var b_high = 0;
	var b_low = 0;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	var bNeg = (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		var a = lhs;
		var b = rhs;
		var v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
	}
};
haxe_UInt64.lt = function(lhs,rhs) {
	return haxe_UInt64.gt(rhs,lhs);
};
haxe_UInt64.eq = function(a,b) {
	var a1 = a;
	var b1 = b;
	if(a1.high == b1.high) {
		return a1.low == b1.low;
	} else {
		return false;
	}
};
haxe_UInt64.neq = function(a,b) {
	return !haxe_UInt64.eq(a,b);
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
function stdgo__$internal_math_Math_$float64bits_float64bits(_f) {
	var bits = new haxe_io_Bytes(new ArrayBuffer(8));
	bits.setDouble(0,_f);
	return new haxe__$Int64__$_$_$Int64(bits.b[4] | bits.b[5] << 8 | bits.b[6] << 16 | bits.b[7] << 24,bits.b[0] | bits.b[1] << 8 | bits.b[2] << 16 | bits.b[3] << 24);
}
function stdgo_GoNumber_ofIntUInt64(x) {
	return new haxe__$Int64__$_$_$Int64(x >> 31,x);
}
function stdgo_GoNumber_ofUIntUInt64(x) {
	var y = x;
	if(y < 0) {
		var u = new haxe__$Int64__$_$_$Int64(0,2147483647);
		u = haxe_UInt64.mul(u,new haxe__$Int64__$_$_$Int64(0,2));
		var x1 = y + 2;
		u = haxe_UInt64.add(u,new haxe__$Int64__$_$_$Int64(x1 >> 31,x1));
		return u;
	}
	return new haxe__$Int64__$_$_$Int64(x >> 31,x);
}
function stdgo_GoNumber_toIntInt64(x) {
	return x.low;
}
function stdgo_GoNumber_toInt64UInt64(x) {
	return x;
}
function stdgo_GoNumber_toUInt64Int64(x) {
	return new haxe__$Int64__$_$_$Int64(x.high,x.low);
}
function stdgo_GoNumber_clampInt16(x) {
	x &= 65535;
	if((x & 32768) != 0) {
		return -65536 + x;
	}
	return x;
}
function stdgo_GoNumber_clampUInt8(x) {
	return x & 255;
}
function stdgo_GoNumber_clampUInt16(x) {
	return x & 65535;
}
function stdgo_GoNumber_clampUInt(x) {
	return x >>> 0;
}
function stdgo_GoNumber_shiftGuard(x) {
	if(x <= 255) {
		return x < 0;
	} else {
		return true;
	}
}
function stdgo_GoNumber_clampInt8(x) {
	x &= 255;
	if((x & 128) != 0) {
		return -256 + x;
	}
	return x;
}
function stdgo_GoNumber_ofIntInt64(x) {
	return new haxe__$Int64__$_$_$Int64(x >> 31,x);
}
var haxe_Int32 = {};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
function _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$fps_fPS(_n) {
	return stdgo__$internal_time_Duration_$static_$extension.seconds(stdgo_GoInt64.div(new haxe__$Int64__$_$_$Int64(0,1000000000),stdgo_GoNumber_ofIntInt64(_n)));
}
var _$internal_github_$dot_$com_charmbracelet_harmonica_Vector = function(x,y,z) {
	this.z = 0;
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(z != null) {
		this.z = z;
	}
};
$hxClasses["_internal.github_dot_com.charmbracelet.harmonica.Vector"] = _$internal_github_$dot_$com_charmbracelet_harmonica_Vector;
_$internal_github_$dot_$com_charmbracelet_harmonica_Vector.__name__ = "_internal.github_dot_com.charmbracelet.harmonica.Vector";
_$internal_github_$dot_$com_charmbracelet_harmonica_Vector.prototype = {
	__copy__: function() {
		return new _$internal_github_$dot_$com_charmbracelet_harmonica_Vector(this.x,this.y,this.z);
	}
	,__class__: _$internal_github_$dot_$com_charmbracelet_harmonica_Vector
};
function _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$newspring_newSpring(_deltaTime,_angularFrequency,_dampingRatio) {
	var _s = new _$internal_github_$dot_$com_charmbracelet_harmonica_Spring(null,null,null,null);
	_angularFrequency = stdgo__$internal_math_Math_$max_max(0,_angularFrequency);
	_dampingRatio = stdgo__$internal_math_Math_$max_max(0,_dampingRatio);
	stdgo_Go.println(stdgo_GoFloat64.toInt(stdgo_GoFloat64.mul(_angularFrequency,1000)),stdgo_GoFloat64.toInt(stdgo_GoFloat64.mul(_$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$_$epsilon__epsilon,1000)));
	if(stdgo_GoFloat64.lt(_angularFrequency,_$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$_$epsilon__epsilon)) {
		_s._posPosCoef = 1;
		_s._posVelCoef = 0;
		_s._velPosCoef = 0;
		_s._velVelCoef = 1;
		stdgo_Go.println(stdgo_GoString.ofString("here"));
		_s = _s != null ? _s.__copy__() : null;
		return _s;
	}
	if(stdgo_GoFloat64.gt(_dampingRatio,stdgo_GoFloat64.add(1,_$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$_$epsilon__epsilon))) {
		var __0 = stdgo_GoFloat64.mul(stdgo_GoFloat64.neg(_angularFrequency),_dampingRatio);
		var __1 = stdgo_GoFloat64.mul(_angularFrequency,stdgo__$internal_math_Math_$sqrt_sqrt(stdgo_GoFloat64.sub(stdgo_GoFloat64.mul(_dampingRatio,_dampingRatio),1)));
		var __2 = stdgo_GoFloat64.sub(__0,__1);
		var __3 = stdgo_GoFloat64.add(__0,__1);
		var __4 = stdgo__$internal_math_Math_$exp_exp(stdgo_GoFloat64.mul(__2,_deltaTime));
		var __5 = stdgo__$internal_math_Math_$exp_exp(stdgo_GoFloat64.mul(__3,_deltaTime));
		var __6 = stdgo_GoFloat64.div(1,stdgo_GoFloat64.mul(2,__1));
		var __7 = stdgo_GoFloat64.mul(__4,__6);
		var __8 = stdgo_GoFloat64.mul(__5,__6);
		var __9 = stdgo_GoFloat64.mul(__2,__7);
		var __10 = stdgo_GoFloat64.mul(__3,__8);
		var _z2e2_Over_TwoZb = __10;
		var _z1e1_Over_TwoZb = __9;
		var _e2_Over_TwoZb = __8;
		var _e1_Over_TwoZb = __7;
		var _invTwoZb = __6;
		var _e2 = __5;
		var _e1 = __4;
		var _z2 = __3;
		var _z1 = __2;
		var _zb = __1;
		var _za = __0;
		_s._posPosCoef = stdgo_GoFloat64.add(stdgo_GoFloat64.sub(stdgo_GoFloat64.mul(_e1_Over_TwoZb,_z2),_z2e2_Over_TwoZb),_e2);
		_s._posVelCoef = stdgo_GoFloat64.add(stdgo_GoFloat64.neg(_e1_Over_TwoZb),_e2_Over_TwoZb);
		_s._velPosCoef = stdgo_GoFloat64.mul(stdgo_GoFloat64.add(stdgo_GoFloat64.sub(_z1e1_Over_TwoZb,_z2e2_Over_TwoZb),_e2),_z2);
		_s._velVelCoef = stdgo_GoFloat64.add(stdgo_GoFloat64.neg(_z1e1_Over_TwoZb),_z2e2_Over_TwoZb);
	} else if(stdgo_GoFloat64.lt(_dampingRatio,stdgo_GoFloat64.sub(1,_$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$_$epsilon__epsilon))) {
		var __0 = stdgo_GoFloat64.mul(_angularFrequency,_dampingRatio);
		var __1 = stdgo_GoFloat64.mul(_angularFrequency,stdgo__$internal_math_Math_$sqrt_sqrt(stdgo_GoFloat64.sub(1,stdgo_GoFloat64.mul(_dampingRatio,_dampingRatio))));
		var __2 = stdgo__$internal_math_Math_$exp_exp(stdgo_GoFloat64.mul(stdgo_GoFloat64.neg(__0),_deltaTime));
		var __3 = stdgo__$internal_math_Math_$cos_cos(stdgo_GoFloat64.mul(__1,_deltaTime));
		var __4 = stdgo__$internal_math_Math_$sin_sin(stdgo_GoFloat64.mul(__1,_deltaTime));
		var __5 = stdgo_GoFloat64.div(1,__1);
		var __6 = stdgo_GoFloat64.mul(__2,__4);
		var __7 = stdgo_GoFloat64.mul(__2,__3);
		var __8 = stdgo_GoFloat64.mul(stdgo_GoFloat64.mul(stdgo_GoFloat64.mul(__2,__0),__4),__5);
		var _expOmegaZetaSin_Over_Alpha = __8;
		var _expCos = __7;
		var _expSin = __6;
		var _invAlpha = __5;
		var _sinTerm = __4;
		var _cosTerm = __3;
		var _expTerm = __2;
		var _alpha = __1;
		var _omegaZeta = __0;
		_s._posPosCoef = stdgo_GoFloat64.add(_expCos,_expOmegaZetaSin_Over_Alpha);
		_s._posVelCoef = stdgo_GoFloat64.mul(_expSin,_invAlpha);
		_s._velPosCoef = stdgo_GoFloat64.sub(stdgo_GoFloat64.mul(stdgo_GoFloat64.neg(_expSin),_alpha),stdgo_GoFloat64.mul(_omegaZeta,_expOmegaZetaSin_Over_Alpha));
		_s._velVelCoef = stdgo_GoFloat64.sub(_expCos,_expOmegaZetaSin_Over_Alpha);
	} else {
		var __0 = stdgo__$internal_math_Math_$exp_exp(stdgo_GoFloat64.mul(stdgo_GoFloat64.neg(_angularFrequency),_deltaTime));
		var __1 = stdgo_GoFloat64.mul(_deltaTime,__0);
		var __2 = stdgo_GoFloat64.mul(__1,_angularFrequency);
		var _timeExpFreq = __2;
		var _timeExp = __1;
		var _expTerm = __0;
		_s._posPosCoef = stdgo_GoFloat64.add(_timeExpFreq,_expTerm);
		_s._posVelCoef = _timeExp;
		_s._velPosCoef = stdgo_GoFloat64.mul(stdgo_GoFloat64.neg(_angularFrequency),_timeExpFreq);
		_s._velVelCoef = stdgo_GoFloat64.add(stdgo_GoFloat64.neg(_timeExpFreq),_expTerm);
	}
	stdgo_Go.println(stdgo_GoFloat64.toInt(stdgo_GoFloat64.mul(_s._velPosCoef,1000)),stdgo_GoFloat64.toInt(stdgo_GoFloat64.mul(_s._velPosCoef,1000)),stdgo_GoFloat64.toInt(stdgo_GoFloat64.mul(_s._posPosCoef,1000)),stdgo_GoFloat64.toInt(stdgo_GoFloat64.mul(_s._posVelCoef,1000)));
	_s = _s != null ? _s.__copy__() : null;
	return _s;
}
var _$internal_github_$dot_$com_charmbracelet_harmonica_Point = function(x,y,z) {
	this.z = 0;
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(z != null) {
		this.z = z;
	}
};
$hxClasses["_internal.github_dot_com.charmbracelet.harmonica.Point"] = _$internal_github_$dot_$com_charmbracelet_harmonica_Point;
_$internal_github_$dot_$com_charmbracelet_harmonica_Point.__name__ = "_internal.github_dot_com.charmbracelet.harmonica.Point";
_$internal_github_$dot_$com_charmbracelet_harmonica_Point.prototype = {
	__copy__: function() {
		return new _$internal_github_$dot_$com_charmbracelet_harmonica_Point(this.x,this.y,this.z);
	}
	,__class__: _$internal_github_$dot_$com_charmbracelet_harmonica_Point
};
var _$internal_github_$dot_$com_charmbracelet_harmonica_Point_$static_$extension = function() { };
$hxClasses["_internal.github_dot_com.charmbracelet.harmonica.Point_static_extension"] = _$internal_github_$dot_$com_charmbracelet_harmonica_Point_$static_$extension;
_$internal_github_$dot_$com_charmbracelet_harmonica_Point_$static_$extension.__name__ = "_internal.github_dot_com.charmbracelet.harmonica.Point_static_extension";
var _$internal_github_$dot_$com_charmbracelet_harmonica_Projectile = function(_pos,_vel,_acc,_deltaTime) {
	this._deltaTime = 0;
	this._acc = new _$internal_github_$dot_$com_charmbracelet_harmonica_Vector(null,null,null);
	this._vel = new _$internal_github_$dot_$com_charmbracelet_harmonica_Vector(null,null,null);
	this._pos = new _$internal_github_$dot_$com_charmbracelet_harmonica_Point(null,null,null);
	if(_pos != null) {
		this._pos = _pos;
	}
	if(_vel != null) {
		this._vel = _vel;
	}
	if(_acc != null) {
		this._acc = _acc;
	}
	if(_deltaTime != null) {
		this._deltaTime = _deltaTime;
	}
};
$hxClasses["_internal.github_dot_com.charmbracelet.harmonica.Projectile"] = _$internal_github_$dot_$com_charmbracelet_harmonica_Projectile;
_$internal_github_$dot_$com_charmbracelet_harmonica_Projectile.__name__ = "_internal.github_dot_com.charmbracelet.harmonica.Projectile";
_$internal_github_$dot_$com_charmbracelet_harmonica_Projectile.prototype = {
	__class__: _$internal_github_$dot_$com_charmbracelet_harmonica_Projectile
};
var _$internal_github_$dot_$com_charmbracelet_harmonica_Projectile_$static_$extension = function() { };
$hxClasses["_internal.github_dot_com.charmbracelet.harmonica.Projectile_static_extension"] = _$internal_github_$dot_$com_charmbracelet_harmonica_Projectile_$static_$extension;
_$internal_github_$dot_$com_charmbracelet_harmonica_Projectile_$static_$extension.__name__ = "_internal.github_dot_com.charmbracelet.harmonica.Projectile_static_extension";
_$internal_github_$dot_$com_charmbracelet_harmonica_Projectile_$static_$extension.acceleration = function(_p) {
	var _p1 = _p;
	var tmp = _p1;
	var tmp1;
	if(tmp != null) {
		tmp1 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = tmp1._acc;
	if(tmp != null) {
		return tmp.__copy__();
	} else {
		return null;
	}
};
_$internal_github_$dot_$com_charmbracelet_harmonica_Projectile_$static_$extension.velocity = function(_p) {
	var _p1 = _p;
	var tmp = _p1;
	var tmp1;
	if(tmp != null) {
		tmp1 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = tmp1._vel;
	if(tmp != null) {
		return tmp.__copy__();
	} else {
		return null;
	}
};
_$internal_github_$dot_$com_charmbracelet_harmonica_Projectile_$static_$extension.position = function(_p) {
	var _p1 = _p;
	var tmp = _p1;
	var tmp1;
	if(tmp != null) {
		tmp1 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = tmp1._pos;
	if(tmp != null) {
		return tmp.__copy__();
	} else {
		return null;
	}
};
_$internal_github_$dot_$com_charmbracelet_harmonica_Projectile_$static_$extension.update = function(_p) {
	var _p1 = _p;
	var tmp = _p1;
	var tmp1;
	if(tmp != null) {
		tmp1 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = _p1;
	var tmp2;
	if(tmp != null) {
		tmp2 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = tmp2._pos.x;
	var tmp2 = _p1;
	var tmp3;
	if(tmp2 != null) {
		tmp3 = tmp2;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp2 = tmp3._vel.x;
	var tmp3 = _p1;
	var tmp4;
	if(tmp3 != null) {
		tmp4 = tmp3;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp3 = stdgo_GoFloat64.mul(tmp2,tmp4._deltaTime);
	tmp1._pos.x = stdgo_GoFloat64.add(tmp,tmp3);
	var tmp = _p1;
	var tmp1;
	if(tmp != null) {
		tmp1 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = _p1;
	var tmp2;
	if(tmp != null) {
		tmp2 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = tmp2._pos.y;
	var tmp2 = _p1;
	var tmp3;
	if(tmp2 != null) {
		tmp3 = tmp2;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp2 = tmp3._vel.y;
	var tmp3 = _p1;
	var tmp4;
	if(tmp3 != null) {
		tmp4 = tmp3;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp3 = stdgo_GoFloat64.mul(tmp2,tmp4._deltaTime);
	tmp1._pos.y = stdgo_GoFloat64.add(tmp,tmp3);
	var tmp = _p1;
	var tmp1;
	if(tmp != null) {
		tmp1 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = _p1;
	var tmp2;
	if(tmp != null) {
		tmp2 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = tmp2._pos.z;
	var tmp2 = _p1;
	var tmp3;
	if(tmp2 != null) {
		tmp3 = tmp2;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp2 = tmp3._vel.z;
	var tmp3 = _p1;
	var tmp4;
	if(tmp3 != null) {
		tmp4 = tmp3;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp3 = stdgo_GoFloat64.mul(tmp2,tmp4._deltaTime);
	tmp1._pos.z = stdgo_GoFloat64.add(tmp,tmp3);
	var tmp = _p1;
	var tmp1;
	if(tmp != null) {
		tmp1 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = _p1;
	var tmp2;
	if(tmp != null) {
		tmp2 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = tmp2._vel.x;
	var tmp2 = _p1;
	var tmp3;
	if(tmp2 != null) {
		tmp3 = tmp2;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp2 = tmp3._acc.x;
	var tmp3 = _p1;
	var tmp4;
	if(tmp3 != null) {
		tmp4 = tmp3;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp3 = stdgo_GoFloat64.mul(tmp2,tmp4._deltaTime);
	tmp1._vel.x = stdgo_GoFloat64.add(tmp,tmp3);
	var tmp = _p1;
	var tmp1;
	if(tmp != null) {
		tmp1 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = _p1;
	var tmp2;
	if(tmp != null) {
		tmp2 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = tmp2._vel.y;
	var tmp2 = _p1;
	var tmp3;
	if(tmp2 != null) {
		tmp3 = tmp2;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp2 = tmp3._acc.y;
	var tmp3 = _p1;
	var tmp4;
	if(tmp3 != null) {
		tmp4 = tmp3;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp3 = stdgo_GoFloat64.mul(tmp2,tmp4._deltaTime);
	tmp1._vel.y = stdgo_GoFloat64.add(tmp,tmp3);
	var tmp = _p1;
	var tmp1;
	if(tmp != null) {
		tmp1 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = _p1;
	var tmp2;
	if(tmp != null) {
		tmp2 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = tmp2._vel.z;
	var tmp2 = _p1;
	var tmp3;
	if(tmp2 != null) {
		tmp3 = tmp2;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp2 = tmp3._acc.z;
	var tmp3 = _p1;
	var tmp4;
	if(tmp3 != null) {
		tmp4 = tmp3;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp3 = stdgo_GoFloat64.mul(tmp2,tmp4._deltaTime);
	tmp1._vel.z = stdgo_GoFloat64.add(tmp,tmp3);
	var tmp = _p1;
	var tmp1;
	if(tmp != null) {
		tmp1 = tmp;
	} else {
		throw haxe_Exception.thrown("null pointer dereference");
	}
	var tmp = tmp1._pos;
	if(tmp != null) {
		return tmp.__copy__();
	} else {
		return null;
	}
};
var _$internal_github_$dot_$com_charmbracelet_harmonica_Spring = function(_posPosCoef,_posVelCoef,_velPosCoef,_velVelCoef) {
	this._velVelCoef = 0;
	this._velPosCoef = 0;
	this._posVelCoef = 0;
	this._posPosCoef = 0;
	if(_posPosCoef != null) {
		this._posPosCoef = _posPosCoef;
	}
	if(_posVelCoef != null) {
		this._posVelCoef = _posVelCoef;
	}
	if(_velPosCoef != null) {
		this._velPosCoef = _velPosCoef;
	}
	if(_velVelCoef != null) {
		this._velVelCoef = _velVelCoef;
	}
};
$hxClasses["_internal.github_dot_com.charmbracelet.harmonica.Spring"] = _$internal_github_$dot_$com_charmbracelet_harmonica_Spring;
_$internal_github_$dot_$com_charmbracelet_harmonica_Spring.__name__ = "_internal.github_dot_com.charmbracelet.harmonica.Spring";
_$internal_github_$dot_$com_charmbracelet_harmonica_Spring.prototype = {
	__copy__: function() {
		return new _$internal_github_$dot_$com_charmbracelet_harmonica_Spring(this._posPosCoef,this._posVelCoef,this._velPosCoef,this._velVelCoef);
	}
	,__class__: _$internal_github_$dot_$com_charmbracelet_harmonica_Spring
};
var _$internal_github_$dot_$com_charmbracelet_harmonica_Spring_$static_$extension = function() { };
$hxClasses["_internal.github_dot_com.charmbracelet.harmonica.Spring_static_extension"] = _$internal_github_$dot_$com_charmbracelet_harmonica_Spring_$static_$extension;
_$internal_github_$dot_$com_charmbracelet_harmonica_Spring_$static_$extension.__name__ = "_internal.github_dot_com.charmbracelet.harmonica.Spring_static_extension";
_$internal_github_$dot_$com_charmbracelet_harmonica_Spring_$static_$extension.update = function(_s,_pos,_vel,_equilibriumPos) {
	var _s1 = _s != null ? _s.__copy__() : null;
	var _newPos = 0;
	var _newVel = 0;
	var _oldPos = stdgo_GoFloat64.sub(_pos,_equilibriumPos);
	var _oldVel = _vel;
	_newPos = stdgo_GoFloat64.add(stdgo_GoFloat64.add(stdgo_GoFloat64.mul(_oldPos,_s1._posPosCoef),stdgo_GoFloat64.mul(_oldVel,_s1._posVelCoef)),_equilibriumPos);
	_newVel = stdgo_GoFloat64.add(stdgo_GoFloat64.mul(_oldPos,_s1._velPosCoef),stdgo_GoFloat64.mul(_oldVel,_s1._velVelCoef));
	var __tmp__ = { _0 : _newPos, _1 : _newVel};
	_newPos = __tmp__._0;
	_newVel = __tmp__._1;
	return __tmp__;
};
var _$internal_github_$dot_$com_charmbracelet_harmonica_Vector_$static_$extension = function() { };
$hxClasses["_internal.github_dot_com.charmbracelet.harmonica.Vector_static_extension"] = _$internal_github_$dot_$com_charmbracelet_harmonica_Vector_$static_$extension;
_$internal_github_$dot_$com_charmbracelet_harmonica_Vector_$static_$extension.__name__ = "_internal.github_dot_com.charmbracelet.harmonica.Vector_static_extension";
var h3d_IDrawable = function() { };
$hxClasses["h3d.IDrawable"] = h3d_IDrawable;
h3d_IDrawable.__name__ = "h3d.IDrawable";
h3d_IDrawable.__isInterface__ = true;
var hxd_App = function() {
	var _gthis = this;
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.engine = engine;
		engine.onReady = $bind(this,this.setup);
		haxe_Timer.delay($bind(this,this.setup),0);
	} else {
		hxd_System.start(function() {
			engine = new h3d_Engine();
			_gthis.engine = engine;
			engine.onReady = $bind(_gthis,_gthis.setup);
			engine.init();
		});
	}
};
$hxClasses["hxd.App"] = hxd_App;
hxd_App.__name__ = "hxd.App";
hxd_App.__interfaces__ = [h3d_IDrawable];
hxd_App.staticHandler = function() {
};
hxd_App.prototype = {
	onResize: function() {
	}
	,onContextLost: function() {
		if(this.s3d != null) {
			this.s3d.onContextLost();
		}
	}
	,render: function(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	,mark: function(name) {
		this.s3d.mark(name);
	}
	,setup: function() {
		var _gthis = this;
		var initDone = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onContextLost = $bind(this,this.onContextLost);
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d_scene_Scene();
		this.s2d = new h2d_Scene();
		this.s2d.mark = $bind(this,this.mark);
		this.sevents = new hxd_SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd_Timer.skip();
			_gthis.mainLoop();
			hxd_System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd_Key.initialize();
		});
	}
	,loadAssets: function(onLoaded) {
		onLoaded();
	}
	,init: function() {
	}
	,mainLoop: function() {
		hxd_Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd_Timer.dt);
		if(this.isDisposed) {
			return;
		}
		var dt = hxd_Timer.dt;
		if(this.s2d != null) {
			this.s2d.setElapsedTime(dt);
		}
		if(this.s3d != null) {
			this.s3d.setElapsedTime(dt);
		}
		this.engine.render(this);
	}
	,update: function(dt) {
	}
	,__class__: hxd_App
};
var cases_App = function() {
	this.maxSpeed = 0.0;
	this.flying = false;
	this.forcePull = false;
	this.held = false;
	this.yVelocity = 0.0;
	this.xVelocity = 0.0;
	this.radius = 100;
	this.fps = null;
	this.circle = null;
	this.spring = null;
	hxd_App.call(this);
};
$hxClasses["cases.App"] = cases_App;
cases_App.__name__ = "cases.App";
cases_App.__super__ = hxd_App;
cases_App.prototype = $extend(hxd_App.prototype,{
	init: function() {
		this.fps = new h2d_Text(hxd_res_DefaultFont.get(),this.s2d);
		var _this = this.fps;
		var _this1 = this.fps;
		_this1.posChanged = true;
		_this.posChanged = true;
		_this.scaleX = _this1.scaleY = 3;
		this.circle = new h2d_Graphics(this.s2d);
		this.circle.beginFill(16777215);
		this.circle.drawCircle(0,0,this.radius,7);
		haxe_Log.trace(this.s2d.width,{ fileName : "samples/cases/Harmonica.hx", lineNumber : 24, className : "cases.App", methodName : "init"});
		haxe_Log.trace(this.s2d.height,{ fileName : "samples/cases/Harmonica.hx", lineNumber : 25, className : "cases.App", methodName : "init"});
		this.circle.endFill();
		this.normal();
	}
	,normal: function() {
		var _n = 60;
		var _deltaTime = _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$fps_fPS(_n);
		var _angularFrequency = 6.0;
		var _dampingRatio = 0.5;
		this.spring = _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$newspring_newSpring(_deltaTime,_angularFrequency,_dampingRatio);
	}
	,jitter: function() {
		var fh = this.circle;
		var v = fh.x + (-10 + Std.random(20));
		fh.posChanged = true;
		fh.x = v;
		var fh = this.circle;
		var v = fh.y + (-10 + Std.random(20));
		fh.posChanged = true;
		fh.y = v;
	}
	,update: function(dt) {
		this.fps.set_text("fps: " + Math.ceil(Math.min(this.engine.get_fps(),60)));
		var $window = hxd_Window.getInstance();
		if(!$window.get_isFocused()) {
			this.xVelocity = 0;
			this.yVelocity = 0;
			return;
		}
		var dx = Math.abs(this.circle.x - $window.get_mouseX());
		var dy = Math.abs(this.circle.y - $window.get_mouseY());
		var dz = 0.;
		if(dz == null) {
			dz = 0.;
		}
		var dis = Math.sqrt(dx * dx + dy * dy + dz * dz);
		if(Math.abs(dis) < this.radius * 4) {
			if(this.flying && Math.abs(this.xVelocity) < 600 && Math.abs(this.yVelocity) < 600) {
				this.normal();
				this.flying = false;
			}
		}
		if(hxd_Key.isDown(0)) {
			if(dis < 100) {
				if(!this.held && !this.flying) {
					var _n = 60;
					var _deltaTime = _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$fps_fPS(_n);
					var _angularFrequency = 20;
					var _dampingRatio = 0.5;
					this.spring = _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$newspring_newSpring(_deltaTime,_angularFrequency,_dampingRatio);
					this.forcePull = false;
					this.held = true;
				}
			} else if(!this.forcePull && !this.held) {
				var _n = 60;
				var _deltaTime = _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$fps_fPS(_n);
				var _angularFrequency = 10;
				var _dampingRatio = 0.5;
				this.spring = _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$newspring_newSpring(_deltaTime,_angularFrequency,_dampingRatio);
				this.forcePull = true;
				this.held = false;
				this.flying = false;
			}
		} else {
			if(this.held && !this.forcePull) {
				var _n = 60;
				var _deltaTime = _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$fps_fPS(_n);
				var _angularFrequency = 2.8;
				var _dampingRatio = 0.2;
				this.spring = _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$newspring_newSpring(_deltaTime,_angularFrequency,_dampingRatio);
				this.held = false;
				this.flying = true;
				this.xVelocity *= 2;
				this.yVelocity *= 2;
			}
			if(this.forcePull) {
				var _n = 60;
				var _deltaTime = _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$fps_fPS(_n);
				var _angularFrequency = 2.8;
				var _dampingRatio = 0.2;
				this.spring = _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$newspring_newSpring(_deltaTime,_angularFrequency,_dampingRatio);
			}
			this.forcePull = false;
		}
		if(this.held) {
			var fh = this.fps;
			fh.set_text(fh.text + "\nrelease to throw!");
		}
		var fh = this.fps;
		fh.set_text(fh.text + ("\n max speed: " + (this.maxSpeed | 0)));
		if(this.maxSpeed < Math.abs(this.xVelocity)) {
			this.maxSpeed = Math.abs(this.xVelocity);
		}
		if(this.maxSpeed < Math.abs(this.yVelocity)) {
			this.maxSpeed = Math.abs(this.yVelocity);
		}
		var data = github_$dot_$com_charmbracelet_harmonica_Spring_$static_$extension.update(this.spring,this.circle.x,this.xVelocity,$window.get_mouseX());
		var _this = this.circle;
		_this.posChanged = true;
		_this.x = data._0;
		this.xVelocity = data._1;
		var data = github_$dot_$com_charmbracelet_harmonica_Spring_$static_$extension.update(this.spring,this.circle.y,this.yVelocity,$window.get_mouseY());
		var _this = this.circle;
		_this.posChanged = true;
		_this.y = data._0;
		this.yVelocity = data._1;
		var fh = this.circle;
		fh.posChanged = true;
		fh.rotation += this.xVelocity / 1000 / 8;
		var _this = this.circle;
		var v = 1 - 0.5 * (Math.min(this.yVelocity,2000) / 4000);
		_this.posChanged = true;
		_this.scaleY = v;
		var _this = this.circle;
		var v = 1 + 0.25 * (Math.min(this.xVelocity,2000) / 4000);
		_this.posChanged = true;
		_this.scaleX = v;
		if(this.circle.x > $window.get_width() + this.radius * 2) {
			var _this = this.circle;
			_this.posChanged = true;
			_this.x = -this.radius * 2;
		}
		if(this.circle.x < -this.radius * 2) {
			var _this = this.circle;
			var v = $window.get_width();
			_this.posChanged = true;
			_this.x = v + this.radius * 2;
		}
		if(this.circle.y > $window.get_height() + this.radius * 2) {
			var _this = this.circle;
			_this.posChanged = true;
			_this.y = -this.radius * 2;
		}
		if(this.circle.y < -this.radius * 2) {
			var _this = this.circle;
			var v = $window.get_height();
			_this.posChanged = true;
			_this.y = v + this.radius * 2;
		}
		if(this.flying && !this.held && !this.forcePull) {
			this.jitter();
		}
	}
	,onResize: function() {
		if(this.circle == null) {
			return;
		}
		var _this = this.circle;
		_this.posChanged = true;
		_this.x = this.s2d.width / 2 | 0;
		var _this = this.circle;
		_this.posChanged = true;
		_this.y = this.s2d.height / 2 | 0;
	}
	,__class__: cases_App
});
function cases_Harmonica_main() {
	var canvas = window.document.createElement("canvas");
	canvas.id = "webgl";
	canvas.style.setProperty("width","100%");
	canvas.style.setProperty("height","100%");
	window.document.body.appendChild(canvas);
	new cases_App();
}
var format_gif_Block = $hxEnums["format.gif.Block"] = { __ename__:true,__constructs__:null
	,BFrame: ($_=function(frame) { return {_hx_index:0,frame:frame,__enum__:"format.gif.Block",toString:$estr,__params__:function(){ return [this.frame];}}; },$_._hx_name="BFrame",$_)
	,BExtension: ($_=function(extension) { return {_hx_index:1,extension:extension,__enum__:"format.gif.Block",toString:$estr,__params__:function(){ return [this.extension];}}; },$_._hx_name="BExtension",$_)
	,BEOF: {_hx_name:"BEOF",_hx_index:2,__enum__:"format.gif.Block",toString:$estr}
};
format_gif_Block.__constructs__ = [format_gif_Block.BFrame,format_gif_Block.BExtension,format_gif_Block.BEOF];
format_gif_Block.__empty_constructs__ = [format_gif_Block.BEOF];
var format_gif_Extension = $hxEnums["format.gif.Extension"] = { __ename__:true,__constructs__:null
	,EGraphicControl: ($_=function(gce) { return {_hx_index:0,gce:gce,__enum__:"format.gif.Extension",toString:$estr,__params__:function(){ return [this.gce];}}; },$_._hx_name="EGraphicControl",$_)
	,EComment: ($_=function(text) { return {_hx_index:1,text:text,__enum__:"format.gif.Extension",toString:$estr,__params__:function(){ return [this.text];}}; },$_._hx_name="EComment",$_)
	,EText: ($_=function(pte) { return {_hx_index:2,pte:pte,__enum__:"format.gif.Extension",toString:$estr,__params__:function(){ return [this.pte];}}; },$_._hx_name="EText",$_)
	,EApplicationExtension: ($_=function(ext) { return {_hx_index:3,ext:ext,__enum__:"format.gif.Extension",toString:$estr,__params__:function(){ return [this.ext];}}; },$_._hx_name="EApplicationExtension",$_)
	,EUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.gif.Extension",toString:$estr,__params__:function(){ return [this.id,this.data];}}; },$_._hx_name="EUnknown",$_)
};
format_gif_Extension.__constructs__ = [format_gif_Extension.EGraphicControl,format_gif_Extension.EComment,format_gif_Extension.EText,format_gif_Extension.EApplicationExtension,format_gif_Extension.EUnknown];
format_gif_Extension.__empty_constructs__ = [];
var format_gif_ApplicationExtension = $hxEnums["format.gif.ApplicationExtension"] = { __ename__:true,__constructs__:null
	,AENetscapeLooping: ($_=function(loops) { return {_hx_index:0,loops:loops,__enum__:"format.gif.ApplicationExtension",toString:$estr,__params__:function(){ return [this.loops];}}; },$_._hx_name="AENetscapeLooping",$_)
	,AEUnknown: ($_=function(name,version,data) { return {_hx_index:1,name:name,version:version,data:data,__enum__:"format.gif.ApplicationExtension",toString:$estr,__params__:function(){ return [this.name,this.version,this.data];}}; },$_._hx_name="AEUnknown",$_)
};
format_gif_ApplicationExtension.__constructs__ = [format_gif_ApplicationExtension.AENetscapeLooping,format_gif_ApplicationExtension.AEUnknown];
format_gif_ApplicationExtension.__empty_constructs__ = [];
var format_gif_Version = $hxEnums["format.gif.Version"] = { __ename__:true,__constructs__:null
	,GIF87a: {_hx_name:"GIF87a",_hx_index:0,__enum__:"format.gif.Version",toString:$estr}
	,GIF89a: {_hx_name:"GIF89a",_hx_index:1,__enum__:"format.gif.Version",toString:$estr}
	,Unknown: ($_=function(version) { return {_hx_index:2,version:version,__enum__:"format.gif.Version",toString:$estr,__params__:function(){ return [this.version];}}; },$_._hx_name="Unknown",$_)
};
format_gif_Version.__constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a,format_gif_Version.Unknown];
format_gif_Version.__empty_constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a];
var format_gif_DisposalMethod = $hxEnums["format.gif.DisposalMethod"] = { __ename__:true,__constructs__:null
	,UNSPECIFIED: {_hx_name:"UNSPECIFIED",_hx_index:0,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,NO_ACTION: {_hx_name:"NO_ACTION",_hx_index:1,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,FILL_BACKGROUND: {_hx_name:"FILL_BACKGROUND",_hx_index:2,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,RENDER_PREVIOUS: {_hx_name:"RENDER_PREVIOUS",_hx_index:3,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,UNDEFINED: ($_=function(index) { return {_hx_index:4,index:index,__enum__:"format.gif.DisposalMethod",toString:$estr,__params__:function(){ return [this.index];}}; },$_._hx_name="UNDEFINED",$_)
};
format_gif_DisposalMethod.__constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS,format_gif_DisposalMethod.UNDEFINED];
format_gif_DisposalMethod.__empty_constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS];
var format_gif_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.gif.Reader"] = format_gif_Reader;
format_gif_Reader.__name__ = "format.gif.Reader";
format_gif_Reader.prototype = {
	read: function() {
		var b = 71;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 73;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 70;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var gifVer = this.i.readString(3);
		var version = format_gif_Version.GIF89a;
		switch(gifVer) {
		case "87a":
			version = format_gif_Version.GIF87a;
			break;
		case "89a":
			version = format_gif_Version.GIF89a;
			break;
		default:
			version = format_gif_Version.Unknown(gifVer);
		}
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packedField = this.i.readByte();
		var bgIndex = this.i.readByte();
		var pixelAspectRatio = this.i.readByte();
		if(pixelAspectRatio != 0) {
			pixelAspectRatio = (pixelAspectRatio + 15) / 64;
		} else {
			pixelAspectRatio = 1;
		}
		var lsd = { width : width, height : height, hasGlobalColorTable : (packedField & 128) == 128, colorResolution : (packedField & 112) >>> 4, sorted : (packedField & 8) == 8, globalColorTableSize : 2 << (packedField & 7), backgroundColorIndex : bgIndex, pixelAspectRatio : pixelAspectRatio};
		var gct = null;
		if(lsd.hasGlobalColorTable) {
			gct = this.readColorTable(lsd.globalColorTableSize);
		}
		var blocks = new haxe_ds_List();
		while(true) {
			var b = this.readBlock();
			blocks.add(b);
			if(b == format_gif_Block.BEOF) {
				break;
			}
		}
		return { version : version, logicalScreenDescriptor : lsd, globalColorTable : gct, blocks : blocks};
	}
	,readBlock: function() {
		var blockID = this.i.readByte();
		switch(blockID) {
		case 33:
			return this.readExtension();
		case 44:
			return this.readImage();
		case 59:
			return format_gif_Block.BEOF;
		}
		return format_gif_Block.BEOF;
	}
	,readImage: function() {
		var x = this.i.readUInt16();
		var y = this.i.readUInt16();
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packed = this.i.readByte();
		var localColorTable = (packed & 128) == 128;
		var interlaced = (packed & 64) == 64;
		var sorted = (packed & 32) == 32;
		var localColorTableSize = 2 << (packed & 7);
		var lct = null;
		if(localColorTable) {
			lct = this.readColorTable(localColorTableSize);
		}
		return format_gif_Block.BFrame({ x : x, y : y, width : width, height : height, localColorTable : localColorTable, interlaced : interlaced, sorted : sorted, localColorTableSize : localColorTableSize, pixels : this.readPixels(width,height,interlaced), colorTable : lct});
	}
	,readPixels: function(width,height,interlaced) {
		var input = this.i;
		var pixelsCount = width * height;
		var pixels = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
		var minCodeSize = input.readByte();
		var blockSize = input.readByte() - 1;
		var bits = input.readByte();
		var bitsCount = 8;
		var clearCode = 1 << minCodeSize;
		var eoiCode = clearCode + 1;
		var codeSize = minCodeSize + 1;
		var codeSizeLimit = 1 << codeSize;
		var codeMask = codeSizeLimit - 1;
		var baseDict = [];
		var _g = 0;
		var _g1 = clearCode;
		while(_g < _g1) {
			var i = _g++;
			baseDict[i] = [i];
		}
		var dict = [];
		var dictLen = clearCode + 2;
		var newRecord;
		var i = 0;
		var code = 0;
		var last;
		while(i < pixelsCount) {
			last = code;
			while(bitsCount < codeSize) {
				if(blockSize == 0) {
					break;
				}
				bits |= input.readByte() << bitsCount;
				bitsCount += 8;
				--blockSize;
				if(blockSize == 0) {
					blockSize = input.readByte();
				}
			}
			code = bits & codeMask;
			bits >>= codeSize;
			bitsCount -= codeSize;
			if(code == clearCode) {
				dict = baseDict.slice();
				dictLen = clearCode + 2;
				codeSize = minCodeSize + 1;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
				continue;
			}
			if(code == eoiCode) {
				break;
			}
			if(code < dictLen) {
				if(last != clearCode) {
					newRecord = dict[last].slice();
					newRecord.push(dict[code][0]);
					dict[dictLen++] = newRecord;
				}
			} else {
				if(code != dictLen) {
					throw haxe_Exception.thrown("Invalid LZW code. Excepted: " + dictLen + ", got: " + code);
				}
				newRecord = dict[last].slice();
				newRecord.push(newRecord[0]);
				dict[dictLen++] = newRecord;
			}
			newRecord = dict[code];
			var _g = 0;
			while(_g < newRecord.length) {
				var item = newRecord[_g];
				++_g;
				pixels.b[i++] = item;
			}
			if(dictLen == codeSizeLimit && codeSize < 12) {
				++codeSize;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
			}
		}
		while(blockSize > 0) {
			input.readByte();
			--blockSize;
			if(blockSize == 0) {
				blockSize = input.readByte();
			}
		}
		while(i < pixelsCount) pixels.b[i++] = 0;
		if(interlaced) {
			var buffer = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
			var offset = this.deinterlace(pixels,buffer,8,0,0,width,height);
			offset = this.deinterlace(pixels,buffer,8,4,offset,width,height);
			offset = this.deinterlace(pixels,buffer,4,2,offset,width,height);
			this.deinterlace(pixels,buffer,2,1,offset,width,height);
			pixels = buffer;
		}
		return pixels;
	}
	,deinterlace: function(input,output,step,y,offset,width,height) {
		while(y < height) {
			output.blit(y * width,input,offset,width);
			offset += width;
			y += step;
		}
		return offset;
	}
	,readExtension: function() {
		var subId = this.i.readByte();
		switch(subId) {
		case 1:
			if(this.i.readByte() != 12) {
				throw haxe_Exception.thrown("Incorrect size of Plain Text Extension introducer block.");
			}
			var tmp = this.i.readUInt16();
			var tmp1 = this.i.readUInt16();
			var tmp2 = this.i.readUInt16();
			var tmp3 = this.i.readUInt16();
			var tmp4 = this.i.readByte();
			var tmp5 = this.i.readByte();
			var tmp6 = this.i.readByte();
			var tmp7 = this.i.readByte();
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EText({ textGridX : tmp, textGridY : tmp1, textGridWidth : tmp2, textGridHeight : tmp3, charCellWidth : tmp4, charCellHeight : tmp5, textForegroundColorIndex : tmp6, textBackgroundColorIndex : tmp7, text : bytes.toString()}));
		case 249:
			if(this.i.readByte() != 4) {
				throw haxe_Exception.thrown("Incorrect Graphic Control Extension block size!");
			}
			var packed = this.i.readByte();
			var disposalMethod;
			switch((packed & 28) >> 2) {
			case 0:
				disposalMethod = format_gif_DisposalMethod.UNSPECIFIED;
				break;
			case 1:
				disposalMethod = format_gif_DisposalMethod.NO_ACTION;
				break;
			case 2:
				disposalMethod = format_gif_DisposalMethod.FILL_BACKGROUND;
				break;
			case 3:
				disposalMethod = format_gif_DisposalMethod.RENDER_PREVIOUS;
				break;
			default:
				disposalMethod = format_gif_DisposalMethod.UNDEFINED((packed & 28) >> 2);
			}
			var b = format_gif_Block.BExtension(format_gif_Extension.EGraphicControl({ disposalMethod : disposalMethod, userInput : (packed & 2) == 2, hasTransparentColor : (packed & 1) == 1, delay : this.i.readUInt16(), transparentIndex : this.i.readByte()}));
			this.i.readByte();
			return b;
		case 254:
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EComment(bytes.toString()));
		case 255:
			return this.readApplicationExtension();
		default:
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EUnknown(subId,bytes));
		}
	}
	,readApplicationExtension: function() {
		if(this.i.readByte() != 11) {
			throw haxe_Exception.thrown("Incorrect size of Application Extension introducer block.");
		}
		var name = this.i.readString(8);
		var version = this.i.readString(3);
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		var data = bytes;
		if(name == "NETSCAPE" && version == "2.0" && data.b[0] == 1) {
			return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AENetscapeLooping(data.b[1] | data.b[2] << 8)));
		}
		return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AEUnknown(name,version,data)));
	}
	,readColorTable: function(size) {
		size *= 3;
		var output = new haxe_io_Bytes(new ArrayBuffer(size));
		var c = 0;
		while(c < size) {
			var v = this.i.readByte();
			output.b[c] = v;
			var v1 = this.i.readByte();
			output.b[c + 1] = v1;
			var v2 = this.i.readByte();
			output.b[c + 2] = v2;
			c += 3;
		}
		return output;
	}
	,__class__: format_gif_Reader
};
var format_gif_Tools = function() { };
$hxClasses["format.gif.Tools"] = format_gif_Tools;
format_gif_Tools.__name__ = "format.gif.Tools";
format_gif_Tools.extractFullBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw haxe_Exception.thrown("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g3 = pixels.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index + 2];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
format_gif_Tools.extractFullRGBA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw haxe_Exception.thrown("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g3 = pixels.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index + 2];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
var format_png_Color = $hxEnums["format.png.Color"] = { __ename__:true,__constructs__:null
	,ColGrey: ($_=function(alpha) { return {_hx_index:0,alpha:alpha,__enum__:"format.png.Color",toString:$estr,__params__:function(){ return [this.alpha];}}; },$_._hx_name="ColGrey",$_)
	,ColTrue: ($_=function(alpha) { return {_hx_index:1,alpha:alpha,__enum__:"format.png.Color",toString:$estr,__params__:function(){ return [this.alpha];}}; },$_._hx_name="ColTrue",$_)
	,ColIndexed: {_hx_name:"ColIndexed",_hx_index:2,__enum__:"format.png.Color",toString:$estr}
};
format_png_Color.__constructs__ = [format_png_Color.ColGrey,format_png_Color.ColTrue,format_png_Color.ColIndexed];
format_png_Color.__empty_constructs__ = [format_png_Color.ColIndexed];
var format_png_Chunk = $hxEnums["format.png.Chunk"] = { __ename__:true,__constructs__:null
	,CEnd: {_hx_name:"CEnd",_hx_index:0,__enum__:"format.png.Chunk",toString:$estr}
	,CHeader: ($_=function(h) { return {_hx_index:1,h:h,__enum__:"format.png.Chunk",toString:$estr,__params__:function(){ return [this.h];}}; },$_._hx_name="CHeader",$_)
	,CData: ($_=function(b) { return {_hx_index:2,b:b,__enum__:"format.png.Chunk",toString:$estr,__params__:function(){ return [this.b];}}; },$_._hx_name="CData",$_)
	,CPalette: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"format.png.Chunk",toString:$estr,__params__:function(){ return [this.b];}}; },$_._hx_name="CPalette",$_)
	,CUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.png.Chunk",toString:$estr,__params__:function(){ return [this.id,this.data];}}; },$_._hx_name="CUnknown",$_)
};
format_png_Chunk.__constructs__ = [format_png_Chunk.CEnd,format_png_Chunk.CHeader,format_png_Chunk.CData,format_png_Chunk.CPalette,format_png_Chunk.CUnknown];
format_png_Chunk.__empty_constructs__ = [format_png_Chunk.CEnd];
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
$hxClasses["format.png.Reader"] = format_png_Reader;
format_png_Reader.__name__ = "format.png.Reader";
format_png_Reader.prototype = {
	read: function() {
		var b = 137;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 80;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 78;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 71;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 13;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 10;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 26;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 10;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var l = new haxe_ds_List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw haxe_Exception.thrown("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw haxe_Exception.thrown("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c_crc = -1;
			var tmp = (c_crc ^ HxOverrides.cca(id,0)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,1)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,2)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,3)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var b = data.b.bufferValue;
			var _g = 0;
			var _g1 = data.length;
			while(_g < _g1) {
				var i = _g++;
				var tmp = (c_crc ^ b.bytes[i]) & 255;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				c_crc = c_crc >>> 8 ^ tmp;
			}
			if((c_crc ^ -1) != crc) {
				throw haxe_Exception.thrown("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
$hxClasses["format.png.Tools"] = format_png_Tools;
format_png_Tools.__name__ = "format.png.Tools";
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 1) {
			var h = c.h;
			return h;
		}
	}
	throw haxe_Exception.thrown("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 3) {
			var b = c.b;
			return b;
		}
	}
	return null;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw haxe_Exception.thrown("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g = h.color;
	switch(_g._hx_index) {
	case 0:
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g_head = d.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var t = val;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g1 = 0;
		var _g2 = h.height;
		while(_g1 < _g2) {
			var y = _g1++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g3 = 0;
					var _g4 = width;
					while(_g3 < _g4) {
						var x = _g3++;
						var v = data.b[r++];
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = data.b[r++];
					}
				} else {
					var _g5 = 0;
					var _g6 = width;
					while(_g5 < _g6) {
						var x1 = _g5++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g7 = 0;
					var _g8 = width;
					while(_g7 < _g8) {
						var x2 = _g7++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						ca += data.b[r++];
						bgra.b[w++] = ca;
					}
				} else {
					var _g9 = 0;
					var _g10 = width;
					while(_g9 < _g10) {
						var x3 = _g9++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g11 = 0;
					var _g12 = width;
					while(_g11 < _g12) {
						var x4 = _g11++;
						var v2 = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						var va = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = va;
					}
				} else {
					var _g13 = 0;
					var _g14 = width;
					while(_g13 < _g14) {
						var x5 = _g13++;
						var v3 = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g15 = 0;
					var _g16 = width;
					while(_g15 < _g16) {
						var x6 = _g15++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = ca1;
					}
				} else {
					var _g17 = 0;
					var _g18 = width;
					while(_g17 < _g18) {
						var x7 = _g17++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 4:
				var stride2 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g19 = 0;
					var _g20 = width;
					while(_g19 < _g20) {
						var x8 = _g19++;
						var b = y == 0 ? 0 : bgra.b[w - stride2];
						var c = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k = cv2 + b - c;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						var pos = r++;
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b : c) + data.b[pos] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						var b1 = y == 0 ? 0 : bgra.b[w - stride2];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k1 = ca2 + b1 - c1;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b1;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c1;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						var pos1 = r++;
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b1 : c1) + data.b[pos1] & 255;
						bgra.b[w++] = ca2;
					}
				} else {
					var _g21 = 0;
					var _g22 = width;
					while(_g21 < _g22) {
						var x9 = _g21++;
						var b2 = y == 0 ? 0 : bgra.b[w - stride2];
						var c2 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k2 = cv2 + b2 - c2;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b2;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c2;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						var pos2 = r++;
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b2 : c2) + data.b[pos2] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 4 : 3) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha) {
			var _g_head = d.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var t = val;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 6) {
							alphaRed = data1.b[1];
							alphaGreen = data1.b[3];
							alphaBlue = data1.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca = 0;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g2 = 0;
					var _g3 = width;
					while(_g2 < _g3) {
						var x = _g2++;
						bgra.b[w++] = data.b[r + 2];
						bgra.b[w++] = data.b[r + 1];
						bgra.b[w++] = data.b[r];
						bgra.b[w++] = data.b[r + 3];
						r += 4;
					}
				} else {
					var _g4 = 0;
					var _g5 = width;
					while(_g4 < _g5) {
						var x1 = _g4++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb;
						cg = data.b[r + 1];
						bgra.b[w++] = cg;
						cr = data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				if(alpha) {
					var _g6 = 0;
					var _g7 = width;
					while(_g6 < _g7) {
						var x2 = _g6++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						ca += data.b[r + 3];
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g8 = 0;
					var _g9 = width;
					while(_g8 < _g9) {
						var x3 = _g8++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g10 = 0;
					var _g11 = width;
					while(_g10 < _g11) {
						var x4 = _g10++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride];
						++w;
						r += 4;
					}
				} else {
					var _g12 = 0;
					var _g13 = width;
					while(_g12 < _g13) {
						var x5 = _g12++;
						cb = data.b[r + 2] + bgra.b[w - stride];
						bgra.b[w] = cb;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride];
						bgra.b[w] = cg;
						++w;
						cr = data.b[r] + bgra.b[w - stride];
						bgra.b[w] = cr;
						++w;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g14 = 0;
					var _g15 = width;
					while(_g14 < _g15) {
						var x6 = _g14++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cr;
						ca = data.b[r + 3] + (ca + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g16 = 0;
					var _g17 = width;
					while(_g16 < _g17) {
						var x7 = _g16++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride2 = width * 4 * flipY1;
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				if(alpha) {
					var _g18 = 0;
					var _g19 = width;
					while(_g18 < _g19) {
						var x8 = _g18++;
						var b = y == 0 ? 0 : bgra.b[w - stride2];
						var c = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k = cb + b - c;
						var pa = k - cb;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						cb = (pa <= pb && pa <= pc ? cb : pb <= pc ? b : c) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b1 = y == 0 ? 0 : bgra.b[w - stride2];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k1 = cg + b1 - c1;
						var pa1 = k1 - cg;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b1;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c1;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						cg = (pa1 <= pb1 && pa1 <= pc1 ? cg : pb1 <= pc1 ? b1 : c1) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b2 = y == 0 ? 0 : bgra.b[w - stride2];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k2 = cr + b2 - c2;
						var pa2 = k2 - cr;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b2;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c2;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						cr = (pa2 <= pb2 && pa2 <= pc2 ? cr : pb2 <= pc2 ? b2 : c2) + data.b[r] & 255;
						bgra.b[w++] = cr;
						var b3 = y == 0 ? 0 : bgra.b[w - stride2];
						var c3 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k3 = ca + b3 - c3;
						var pa3 = k3 - ca;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b3;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c3;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						ca = (pa3 <= pb3 && pa3 <= pc3 ? ca : pb3 <= pc3 ? b3 : c3) + data.b[r + 3] & 255;
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g20 = 0;
					var _g21 = width;
					while(_g20 < _g21) {
						var x9 = _g20++;
						var b4 = y == 0 ? 0 : bgra.b[w - stride2];
						var c4 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k4 = cb + b4 - c4;
						var pa4 = k4 - cb;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b4;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c4;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cb = (pa4 <= pb4 && pa4 <= pc4 ? cb : pb4 <= pc4 ? b4 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b5 = y == 0 ? 0 : bgra.b[w - stride2];
						var c5 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k5 = cg + b5 - c5;
						var pa5 = k5 - cg;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b5;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c5;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cg = (pa5 <= pb5 && pa5 <= pc5 ? cg : pb5 <= pc5 ? b5 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b6 = y == 0 ? 0 : bgra.b[w - stride2];
						var c6 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k6 = cr + b6 - c6;
						var pa6 = k6 - cr;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b6;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c6;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						cr = (pa6 <= pb6 && pa6 <= pc6 ? cr : pb6 <= pc6 ? b6 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw haxe_Exception.thrown("PNG Palette is missing");
		}
		var alpha = null;
		var _g_head = d.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var t = val;
			if(t._hx_index == 4) {
				if(t.id == "tRNS") {
					var data1 = t.data;
					alpha = data1;
					break;
				}
			}
		}
		if(alpha != null && alpha.length < 1 << h.colbits) {
			var alpha2 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha2.blit(0,alpha,0,alpha.length);
			alpha2.fill(alpha.length,alpha2.length - alpha.length,255);
			alpha = alpha2;
		}
		var width = h.width;
		var stride = Math.ceil(width * h.colbits / 8) + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var rline = stride - 1;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			if(f == 0) {
				r += rline;
				continue;
			}
			switch(f) {
			case 1:
				var c = 0;
				var _g2 = 0;
				var _g3 = width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = data.b[r];
					c += v;
					data.b[r++] = c & 255;
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : rline + 1;
				var _g4 = 0;
				var _g5 = width;
				while(_g4 < _g5) {
					var x1 = _g4++;
					var v1 = data.b[r];
					data.b[r] = v1 + data.b[r - stride];
					++r;
				}
				break;
			case 3:
				var c1 = 0;
				var stride1 = y == 0 ? 0 : rline + 1;
				var _g6 = 0;
				var _g7 = width;
				while(_g6 < _g7) {
					var x2 = _g6++;
					var v2 = data.b[r];
					c1 = v2 + (c1 + data.b[r - stride1] >> 1) & 255;
					data.b[r++] = c1;
				}
				break;
			case 4:
				var stride2 = rline + 1;
				var c2 = 0;
				var _g8 = 0;
				var _g9 = width;
				while(_g8 < _g9) {
					var x3 = _g8++;
					var v3 = data.b[r];
					var numChannels = 1;
					if(numChannels == null) {
						numChannels = 4;
					}
					var b = y == 0 ? 0 : data.b[r - stride2];
					var c3 = x3 == 0 || y == 0 ? 0 : data.b[r - stride2 - numChannels];
					var k = c2 + b - c3;
					var pa = k - c2;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c3;
					if(pc < 0) {
						pc = -pc;
					}
					c2 = (pa <= pb && pa <= pc ? c2 : pb <= pc ? b : c3) + v3 & 255;
					data.b[r++] = c2;
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
		}
		var r = 0;
		if(h.colbits == 8) {
			var _g = 0;
			var _g1 = h.height;
			while(_g < _g1) {
				var y = _g++;
				++r;
				var _g2 = 0;
				var _g3 = h.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var c = data.b[r++];
					bgra.b[w++] = pal.b[c * 3 + 2];
					bgra.b[w++] = pal.b[c * 3 + 1];
					bgra.b[w++] = pal.b[c * 3];
					bgra.b[w++] = alpha != null ? alpha.b[c] : 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g = 0;
			var _g1 = h.height;
			while(_g < _g1) {
				var y = _g++;
				++r;
				var bits = 0;
				var nbits = 0;
				var v;
				var _g2 = 0;
				var _g3 = h.width;
				while(_g2 < _g3) {
					var x = _g2++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r++];
						nbits += 8;
					}
					var c = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c * 3 + 2];
					bgra.b[w++] = pal.b[c * 3 + 1];
					bgra.b[w++] = pal.b[c * 3];
					bgra.b[w++] = alpha != null ? alpha.b[c] : 255;
				}
				w += lineDelta;
			}
		} else {
			throw haxe_Exception.thrown(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
format_png_Tools.extract = function(d,output,expandAlpha) {
	if(expandAlpha == null) {
		expandAlpha = false;
	}
	var h = format_png_Tools.getHeader(d);
	var hasAlpha = false;
	var channels;
	var _g = h.color;
	switch(_g._hx_index) {
	case 0:
		var alpha = _g.alpha;
		hasAlpha = alpha;
		channels = alpha ? 2 : 1;
		break;
	case 1:
		var alpha = _g.alpha;
		hasAlpha = alpha;
		channels = alpha ? 4 : 3;
		break;
	case 2:
		throw haxe_Exception.thrown("assert");
	}
	if(expandAlpha && hasAlpha) {
		expandAlpha = false;
	}
	var bpp = h.colbits >> 3;
	var outChannels = expandAlpha ? channels + 1 : channels;
	if(output == null) {
		output = new haxe_io_Bytes(new ArrayBuffer(outChannels * bpp * h.width * h.height));
	}
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw haxe_Exception.thrown("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var width = h.width;
	var ncomps = channels * bpp;
	var upperLine = outChannels * bpp * width;
	var leftPixel = outChannels * bpp;
	if(data.length < h.height * (ncomps * width + 1)) {
		throw haxe_Exception.thrown("Not enough data");
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = ncomps;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(0);
	}
	var tmp = _g;
	var _g = 0;
	var _g1 = h.height;
	while(_g < _g1) {
		var y = _g++;
		var f = data.b[r++];
		if(f != 0 && f != 2) {
			var _g2 = 0;
			var _g3 = ncomps;
			while(_g2 < _g3) {
				var i = _g2++;
				tmp[i] = 0;
			}
		}
		switch(f) {
		case 0:
			var _g4 = 0;
			var _g5 = width;
			while(_g4 < _g5) {
				var x = _g4++;
				var _g6 = 0;
				var _g7 = ncomps;
				while(_g6 < _g7) {
					var i1 = _g6++;
					output.b[w++] = data.b[r++];
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		case 1:
			var _g8 = 0;
			var _g9 = width;
			while(_g8 < _g9) {
				var x1 = _g8++;
				var _g10 = 0;
				var _g11 = ncomps;
				while(_g10 < _g11) {
					var i2 = _g10++;
					tmp[i2] += data.b[r++];
					output.b[w++] = tmp[i2];
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		case 2:
			var stride = y == 0 ? 0 : upperLine;
			var _g12 = 0;
			var _g13 = width;
			while(_g12 < _g13) {
				var x2 = _g12++;
				var _g14 = 0;
				var _g15 = ncomps;
				while(_g14 < _g15) {
					var i3 = _g14++;
					var v = data.b[r++] + output.b[w - stride];
					output.b[w++] = v;
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		case 3:
			var stride1 = y == 0 ? 0 : upperLine;
			var _g16 = 0;
			var _g17 = width;
			while(_g16 < _g17) {
				var x3 = _g16++;
				var _g18 = 0;
				var _g19 = ncomps;
				while(_g18 < _g19) {
					var i4 = _g18++;
					tmp[i4] = data.b[r++] + (tmp[i4] + output.b[w - stride1] >> 1) & 255;
					output.b[w++] = tmp[i4];
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		case 4:
			var _g20 = 0;
			var _g21 = width;
			while(_g20 < _g21) {
				var x4 = _g20++;
				var _g22 = 0;
				var _g23 = ncomps;
				while(_g22 < _g23) {
					var i5 = _g22++;
					var prev = tmp[i5];
					var b = y == 0 ? 0 : output.b[w - upperLine];
					var c = x4 == 0 || y == 0 ? 0 : output.b[w - upperLine - leftPixel];
					var k = prev + b - c;
					var pa = k - prev;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c;
					if(pc < 0) {
						pc = -pc;
					}
					var pos = r++;
					tmp[i5] = (pa <= pb && pa <= pc ? prev : pb <= pc ? b : c) + data.b[pos] & 255;
					output.b[w++] = tmp[i5];
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		default:
			throw haxe_Exception.thrown("Invalid filter " + f);
		}
	}
	if(h.colbits == 16) {
		var w = 0;
		var _g = 0;
		var _g1 = h.height * width * outChannels;
		while(_g < _g1) {
			var x = _g++;
			var a = output.b[w];
			var b = output.b[w + 1];
			output.b[w++] = b;
			output.b[w++] = a;
		}
	}
	return output;
};
var format_tga_ImageOrigin = $hxEnums["format.tga.ImageOrigin"] = { __ename__:true,__constructs__:null
	,BottomLeft: {_hx_name:"BottomLeft",_hx_index:0,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,BottomRight: {_hx_name:"BottomRight",_hx_index:1,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopLeft: {_hx_name:"TopLeft",_hx_index:2,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopRight: {_hx_name:"TopRight",_hx_index:3,__enum__:"format.tga.ImageOrigin",toString:$estr}
};
format_tga_ImageOrigin.__constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
format_tga_ImageOrigin.__empty_constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
var format_tga_ImageType = $hxEnums["format.tga.ImageType"] = { __ename__:true,__constructs__:null
	,NoImage: {_hx_name:"NoImage",_hx_index:0,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedColorMapped: {_hx_name:"UncompressedColorMapped",_hx_index:1,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedTrueColor: {_hx_name:"UncompressedTrueColor",_hx_index:2,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedBlackAndWhite: {_hx_name:"UncompressedBlackAndWhite",_hx_index:3,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthColorMapped: {_hx_name:"RunLengthColorMapped",_hx_index:4,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthTrueColor: {_hx_name:"RunLengthTrueColor",_hx_index:5,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthBlackAndWhite: {_hx_name:"RunLengthBlackAndWhite",_hx_index:6,__enum__:"format.tga.ImageType",toString:$estr}
	,Unknown: ($_=function(type) { return {_hx_index:7,type:type,__enum__:"format.tga.ImageType",toString:$estr,__params__:function(){ return [this.type];}}; },$_._hx_name="Unknown",$_)
};
format_tga_ImageType.__constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite,format_tga_ImageType.Unknown];
format_tga_ImageType.__empty_constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite];
var format_tga_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.tga.Reader"] = format_tga_Reader;
format_tga_Reader.__name__ = "format.tga.Reader";
format_tga_Reader.prototype = {
	read: function() {
		var idLength = this.i.readByte();
		var header = this.readHeader();
		var id = idLength == 0 ? "" : this.i.readString(idLength);
		var colorMap = this.readColorMapData(header);
		return { header : header, imageId : id, colorMapData : colorMap, imageData : this.readImageData(header,colorMap), developerData : null};
	}
	,readHeader: function() {
		var colorMapType = this.i.readByte();
		var dataType;
		var dataId = this.i.readByte();
		switch(dataId) {
		case 0:
			dataType = format_tga_ImageType.NoImage;
			break;
		case 1:
			dataType = format_tga_ImageType.UncompressedColorMapped;
			break;
		case 2:
			dataType = format_tga_ImageType.UncompressedTrueColor;
			break;
		case 3:
			dataType = format_tga_ImageType.UncompressedBlackAndWhite;
			break;
		case 9:
			dataType = format_tga_ImageType.RunLengthColorMapped;
			break;
		case 10:
			dataType = format_tga_ImageType.RunLengthTrueColor;
			break;
		case 11:
			dataType = format_tga_ImageType.RunLengthBlackAndWhite;
			break;
		default:
			dataType = format_tga_ImageType.Unknown(dataId);
		}
		var colorMapOrigin = this.i.readInt16();
		var colorMapLength = this.i.readInt16();
		var colorMapDepth = this.i.readByte();
		var xOrigin = this.i.readInt16();
		var yOrigin = this.i.readInt16();
		var width = this.i.readInt16();
		var height = this.i.readInt16();
		var depth = this.i.readByte();
		var descriptor = this.i.readByte();
		var origin;
		switch(descriptor & 48) {
		case 16:
			origin = format_tga_ImageOrigin.BottomRight;
			break;
		case 32:
			origin = format_tga_ImageOrigin.TopLeft;
			break;
		case 48:
			origin = format_tga_ImageOrigin.TopRight;
			break;
		default:
			origin = format_tga_ImageOrigin.BottomLeft;
		}
		return { colorMapType : colorMapType, imageType : dataType, colorMapFirstIndex : colorMapOrigin, colorMapLength : colorMapLength, colorMapEntrySize : colorMapDepth, xOrigin : xOrigin, yOrigin : yOrigin, width : width, height : height, bitsPerPixel : depth, alphaChannelBits : descriptor & 15, imageOrigin : origin};
	}
	,readColorMapData: function(header) {
		if(header.colorMapType == 0) {
			return null;
		}
		return this.readPixels(header.colorMapEntrySize,header.colorMapLength,header.alphaChannelBits,false);
	}
	,readImageData: function(header,colorMap) {
		switch(header.imageType._hx_index) {
		case 0:
			return null;
		case 1:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,false);
		case 2:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 3:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 4:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,true);
		case 5:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		case 6:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		default:
			throw haxe_Exception.thrown("Unsupported image data type!");
		}
	}
	,readPixels: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var list = new Array(amount);
		var alpha = alphaChannelBits != 0;
		var bitFieldSize = bitsPerPixel / 3 | 0;
		if(bitFieldSize > 8) {
			bitFieldSize = 8;
		}
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixel2);
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			parsePixel = $bind(this,this.parsePixel3);
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			parsePixel = $bind(this,this.parsePixel4);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readMono: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var list = new Array(amount);
		var alpha = alphaChannelBits != 0;
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixelGreyAlpha);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readIndexes: function(bitsPerPixel,amount,colorMap,offset,rle) {
		var list = new Array(amount);
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var i = 0;
			var rleChunk;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = colorMap[offset + readEntry()];
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = colorMap[offset + readEntry()];
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = colorMap[offset + readEntry()];
			}
		}
		return list;
	}
	,parsePixel1: function(value,alpha) {
		return value << 16 | value << 8 | value;
	}
	,parsePixelGreyAlpha: function(value,alpha) {
		return (alpha ? (value & 65280) << 16 : 0) | this.parsePixel1(value & 255,false);
	}
	,parsePixel2: function(value,alpha) {
		return (alpha ? (value & 32768) == 1 ? -16777216 : 0 : 0) | (((value & 31744) >> 10) / 31 * 255 | 0) << 16 | (((value & 992) >> 5) / 31 * 255 | 0) << 8 | ((value & 31) / 31 * 255 | 0);
	}
	,parsePixel3: function(value,alpha) {
		return value;
	}
	,parsePixel4: function(value,alpha) {
		return value;
	}
	,__class__: format_tga_Reader
};
var format_tools_Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format_tools_Inflate;
format_tools_Inflate.__name__ = "format.tools.Inflate";
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var github_$dot_$com_charmbracelet_harmonica_Spring_$static_$extension = function() { };
$hxClasses["github_dot_com.charmbracelet.harmonica.Spring_static_extension"] = github_$dot_$com_charmbracelet_harmonica_Spring_$static_$extension;
github_$dot_$com_charmbracelet_harmonica_Spring_$static_$extension.__name__ = "github_dot_com.charmbracelet.harmonica.Spring_static_extension";
github_$dot_$com_charmbracelet_harmonica_Spring_$static_$extension.update = function(_s,_pos,_vel,_equilibriumPos) {
	var _pos1 = _pos;
	var _vel1 = _vel;
	var _equilibriumPos1 = _equilibriumPos;
	var obj = _$internal_github_$dot_$com_charmbracelet_harmonica_Spring_$static_$extension.update(_s,_pos1,_vel1,_equilibriumPos1);
	return { _0 : obj._0, _1 : obj._1};
};
var github_$dot_$com_charmbracelet_harmonica_Harmonica = function() { };
$hxClasses["github_dot_com.charmbracelet.harmonica.Harmonica"] = github_$dot_$com_charmbracelet_harmonica_Harmonica;
github_$dot_$com_charmbracelet_harmonica_Harmonica.__name__ = "github_dot_com.charmbracelet.harmonica.Harmonica";
github_$dot_$com_charmbracelet_harmonica_Harmonica.fPS = function(_n) {
	var _n1 = _n;
	return _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$fps_fPS(_n1);
};
var h2d_col_PointImpl = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.PointImpl"] = h2d_col_PointImpl;
h2d_col_PointImpl.__name__ = "h2d.col.PointImpl";
h2d_col_PointImpl.prototype = {
	__class__: h2d_col_PointImpl
};
var h2d_Object = function(parent) {
	this.blendMode = h2d_BlendMode.Alpha;
	this.alpha = 1.;
	this.visible = true;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.matA = 1;
	this.matB = 0;
	this.matC = 0;
	this.matD = 1;
	this.absX = 0;
	this.absY = 0;
	this.posChanged = parent != null;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h2d.Object"] = h2d_Object;
h2d_Object.__name__ = "h2d.Object";
h2d_Object.prototype = {
	getBounds: function(relativeTo,out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		var n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			var c = this.children[0];
			if(c.visible) {
				c.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(!c.visible) {
				continue;
			}
			c.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	,addBounds: function(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			var x = dx * this.matA + dy * this.matC + this.absX;
			var y = dx * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = (dx + width) * this.matA + dy * this.matC + this.absX;
			var y = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = dx * this.matA + (dy + height) * this.matC + this.absX;
			var y = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			var y = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		var r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		var det = 1 / r;
		var rA = relativeTo.matD * det;
		var rB = -relativeTo.matB * det;
		var rC = -relativeTo.matC * det;
		var rD = relativeTo.matA * det;
		var rX = this.absX - relativeTo.absX;
		var rY = this.absY - relativeTo.absY;
		var x = dx * this.matA + dy * this.matC + rX;
		var y = dx * this.matB + dy * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + dy * this.matC + rX;
		y = (dx + width) * this.matB + dy * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = dx * this.matA + (dy + height) * this.matC + rX;
		y = dx * this.matB + (dy + height) * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d_col_PointImpl(0.,0.);
		}
		var px = pt.x * this.matA + pt.y * this.matC + this.absX;
		var py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h2d_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,set_visible: function(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	,addChild: function(s) {
		this.addChildAt(s,this.children.length);
	}
	,addChildAt: function(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == s) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			var old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onHierarchyMoved(true);
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onHierarchyMoved(parentChanged);
		}
	}
	,onAdd: function() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		var i = this.children.length - 1;
		while(i >= 0) {
			var c = this.children[i--];
			if(c != null) {
				c.onRemove();
			}
		}
	}
	,removeChild: function(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	,draw: function(ctx) {
	}
	,sync: function(ctx) {
		var changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	,calcAbsPos: function() {
		if(this.parent == null) {
			var cr;
			var sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				var cr = Math.cos(this.rotation);
				var sr = Math.sin(this.rotation);
				var tmpA = this.scaleX * cr;
				var tmpB = this.scaleX * sr;
				var tmpC = this.scaleY * -sr;
				var tmpD = this.scaleY * cr;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	,emitTile: function(ctx,tile) {
		if(h2d_Object.nullDrawable == null) {
			h2d_Object.nullDrawable = new h2d_Drawable(null);
		}
		h2d_Object.nullDrawable.smooth = this.filter != null && this.filter.smooth ? true : null;
		h2d_Object.nullDrawable.absX = this.absX;
		h2d_Object.nullDrawable.absY = this.absY;
		h2d_Object.nullDrawable.matA = this.matA;
		h2d_Object.nullDrawable.matB = this.matB;
		h2d_Object.nullDrawable.matC = this.matC;
		h2d_Object.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d_Object.nullDrawable,tile);
	}
	,clipBounds: function(ctx,bounds,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1.;
		}
		if(scaleX == null) {
			scaleX = 1.;
		}
		var view = ctx.tmpBounds;
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			var tmpA = this.matA * f1.x + this.matB * f1.y;
			var tmpB = this.matA * f2.x + this.matB * f2.y;
			var tmpC = this.matC * f1.x + this.matD * f1.y;
			var tmpD = this.matC * f2.x + this.matD * f2.y;
			var tmpX = this.absX * f1.x + this.absY * f1.y + f1.z;
			var tmpY = this.absX * f2.x + this.absY * f2.y + f2.z;
			matA = (tmpA * ctx.viewA + tmpB * ctx.viewC) / scaleX;
			matB = (tmpA * ctx.viewB + tmpB * ctx.viewD) / scaleY;
			matC = (tmpC * ctx.viewA + tmpD * ctx.viewC) / scaleX;
			matD = (tmpC * ctx.viewB + tmpD * ctx.viewD) / scaleY;
			absX = tmpX * ctx.viewA + tmpY * ctx.viewC + ctx.viewX;
			absY = tmpX * ctx.viewB + tmpY * ctx.viewD + ctx.viewY;
		} else {
			matA = (this.matA * ctx.viewA + this.matB * ctx.viewC) / scaleX;
			matB = (this.matA * ctx.viewB + this.matB * ctx.viewD) / scaleY;
			matC = (this.matC * ctx.viewA + this.matD * ctx.viewC) / scaleX;
			matD = (this.matC * ctx.viewB + this.matD * ctx.viewD) / scaleY;
			absX = this.absX * ctx.viewA + this.absY * ctx.viewC + ctx.viewX;
			absY = this.absX * ctx.viewB + this.absY * ctx.viewD + ctx.viewY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = bounds.xMin;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMax;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMin;
		var y = bounds.yMax;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMax;
		var y = bounds.yMax;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		if(view.xMin < -1) {
			view.xMin = -1;
		}
		if(view.yMin < -1) {
			view.yMin = -1;
		}
		if(view.xMax > 1) {
			view.xMax = 1;
		}
		if(view.yMax > 1) {
			view.yMax = 1;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		var sxMin = view.xMin;
		var syMin = view.yMin;
		var sxMax = view.xMax;
		var syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = sxMin;
		var y = syMin;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMax;
		var y = syMin;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMin;
		var y = syMax;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMax;
		var y = syMax;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var a = bounds.xMin;
		var b = view.xMin;
		bounds.xMin = a < b ? b : a;
		var a = bounds.yMin;
		var b = view.yMin;
		bounds.yMin = a < b ? b : a;
		var a = bounds.xMax;
		var b = view.xMax;
		bounds.xMax = a > b ? b : a;
		var a = bounds.yMax;
		var b = view.yMax;
		bounds.yMax = a > b ? b : a;
	}
	,drawFilters: function(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		var bounds = ctx.tmpBounds;
		var total = new h2d_col_Bounds();
		this.filter.sync(ctx,this);
		var scaleX;
		var scaleY;
		if(this.filter.useScreenResolution) {
			var s = ctx.scene;
			scaleX = s.viewportScaleX * this.filter.resolutionScale;
			scaleY = s.viewportScaleY * this.filter.resolutionScale;
		} else {
			scaleX = this.filter.resolutionScale;
			scaleY = this.filter.resolutionScale;
		}
		if(this.filter.autoBounds) {
			var maxExtent = this.filter.boundsExtend;
			if(maxExtent >= 0) {
				this.getBounds(this,bounds);
				bounds.xMin = bounds.xMin * scaleX - maxExtent;
				bounds.yMin = bounds.yMin * scaleY - maxExtent;
				bounds.xMax = bounds.xMax * scaleX + maxExtent;
				bounds.yMax = bounds.yMax * scaleY + maxExtent;
				if(bounds.xMin < total.xMin) {
					total.xMin = bounds.xMin;
				}
				if(bounds.xMax > total.xMax) {
					total.xMax = bounds.xMax;
				}
				if(bounds.yMin < total.yMin) {
					total.yMin = bounds.yMin;
				}
				if(bounds.yMax > total.yMax) {
					total.yMax = bounds.yMax;
				}
			}
		} else {
			var scale = h2d_Object.tmpPoint;
			var _this = scale;
			var x = scaleX;
			var y = scaleY;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			this.filter.getBounds(this,bounds,scale);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
			scaleX = scale.x;
			scaleY = scale.y;
		}
		ctx.setFilterScale(scaleX,scaleY);
		this.clipBounds(ctx,total,scaleX,scaleY);
		var xMin = Math.floor(total.xMin + 1e-10);
		var yMin = Math.floor(total.yMin + 1e-10);
		var width = Math.ceil(total.xMax - xMin - 1e-10);
		var height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			ctx.popFilter();
			return;
		}
		var t = ctx.textures.allocTarget("filterTemp",width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		var oldAlpha = ctx.globalAlpha;
		var shader = ctx.baseShader;
		var _this = shader.filterMatrixA__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var oldA_x = x1;
		var oldA_y = y1;
		var oldA_z = z1;
		var _this = shader.filterMatrixB__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var oldB_x = x1;
		var oldB_y = y1;
		var oldB_z = z1;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var invA = this.matD * invDet * scaleX;
		var invB = -this.matB * invDet * scaleY;
		var invC = -this.matC * invDet * scaleX;
		var invD = this.matA * invDet * scaleY;
		var invX = -(this.absX * invA + this.absY * invC);
		var invY = -(this.absX * invB + this.absY * invD);
		var _this = shader.filterMatrixA__;
		var x = invA;
		var y = invC;
		var z = invX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = shader.filterMatrixB__;
		var x = invB;
		var y = invD;
		var z = invY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		ctx.globalAlpha = 1;
		this.drawContent(ctx);
		var finalTile = h2d_Tile.fromTexture(t);
		finalTile.dx = xMin / scaleX;
		finalTile.dy = yMin / scaleY;
		var prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != null) {
			if(finalTile != prev) {
				finalTile.dx = (finalTile.dx + xMin) / scaleX;
				finalTile.dy = (finalTile.dy + yMin) / scaleY;
			}
			finalTile.width /= scaleX;
			finalTile.height /= scaleY;
		}
		var _this = shader.filterMatrixA__;
		_this.x = oldA_x;
		_this.y = oldA_y;
		_this.z = oldA_z;
		var _this = shader.filterMatrixB__;
		_this.x = oldB_x;
		_this.y = oldB_y;
		_this.z = oldB_z;
		ctx.popTarget();
		ctx.popFilter();
		ctx.globalAlpha = oldAlpha;
		if(finalTile == null) {
			return;
		}
		this.drawFiltered(ctx,finalTile);
	}
	,drawFiltered: function(ctx,tile) {
		var oldAlpha = ctx.globalAlpha;
		ctx.currentBlend = null;
		ctx.inFilterBlend = this.blendMode;
		ctx.globalAlpha *= this.alpha;
		this.emitTile(ctx,tile);
		ctx.globalAlpha = oldAlpha;
		ctx.inFilterBlend = null;
		ctx.currentBlend = null;
	}
	,drawRec: function(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null && this.filter.get_enable()) {
			this.drawFilters(ctx);
		} else {
			var old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			this.drawContent(ctx);
			ctx.globalAlpha = old;
		}
	}
	,drawContent: function(ctx) {
		if(ctx.front2back) {
			var i = this.children.length;
			while(i-- > 0) this.children[i].drawRec(ctx);
			this.draw(ctx);
		} else {
			this.draw(ctx);
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.drawRec(ctx);
			}
		}
	}
	,contentChanged: function(s) {
	}
	,__class__: h2d_Object
};
var h2d_Drawable = function(parent) {
	h2d_Object.call(this,parent);
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.color = new h3d_Vector4Impl(x,y,z,w);
};
$hxClasses["h2d.Drawable"] = h2d_Drawable;
h2d_Drawable.__name__ = "h2d.Drawable";
h2d_Drawable.__super__ = h2d_Object;
h2d_Drawable.prototype = $extend(h2d_Object.prototype,{
	drawFiltered: function(ctx,tile) {
		var old = this.shaders;
		this.shaders = null;
		h2d_Object.prototype.drawFiltered.call(this,ctx,tile);
		this.shaders = old;
	}
	,addShader: function(s) {
		if(s == null) {
			throw haxe_Exception.thrown("Can't add null shader");
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,emitTile: function(ctx,tile) {
		if(tile == null) {
			tile = new h2d_Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
	}
	,__class__: h2d_Drawable
});
var h2d_BlendMode = $hxEnums["h2d.BlendMode"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h2d.BlendMode",toString:$estr}
	,Alpha: {_hx_name:"Alpha",_hx_index:1,__enum__:"h2d.BlendMode",toString:$estr}
	,Add: {_hx_name:"Add",_hx_index:2,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaAdd: {_hx_name:"AlphaAdd",_hx_index:3,__enum__:"h2d.BlendMode",toString:$estr}
	,SoftAdd: {_hx_name:"SoftAdd",_hx_index:4,__enum__:"h2d.BlendMode",toString:$estr}
	,Multiply: {_hx_name:"Multiply",_hx_index:5,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaMultiply: {_hx_name:"AlphaMultiply",_hx_index:6,__enum__:"h2d.BlendMode",toString:$estr}
	,Erase: {_hx_name:"Erase",_hx_index:7,__enum__:"h2d.BlendMode",toString:$estr}
	,Screen: {_hx_name:"Screen",_hx_index:8,__enum__:"h2d.BlendMode",toString:$estr}
	,Sub: {_hx_name:"Sub",_hx_index:9,__enum__:"h2d.BlendMode",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:10,__enum__:"h2d.BlendMode",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:11,__enum__:"h2d.BlendMode",toString:$estr}
};
h2d_BlendMode.__constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
h2d_BlendMode.__empty_constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
var h2d_Camera = function(scene) {
	this.followRotation = false;
	this.posChanged = true;
	this.x = 0;
	this.posChanged = true;
	this.y = 0;
	this.posChanged = true;
	this.scaleX = 1;
	this.posChanged = true;
	this.scaleY = 1;
	this.posChanged = true;
	this.rotation = 0;
	this.posChanged = true;
	this.anchorX = 0;
	this.posChanged = true;
	this.anchorY = 0;
	this.viewX = 0;
	this.viewY = 0;
	this.viewW = 1;
	this.viewH = 1;
	this.visible = true;
	if(scene != null) {
		scene.addCamera(this);
	}
};
$hxClasses["h2d.Camera"] = h2d_Camera;
h2d_Camera.__name__ = "h2d.Camera";
h2d_Camera.prototype = {
	layerVisible: function(layer) {
		return true;
	}
	,enter: function(ctx) {
		ctx.pushCamera(this);
		if(this.clipViewport) {
			var old = ctx.inFilter;
			ctx.inFilter = null;
			ctx.pushRenderZone(this.viewX * this.scene.width,this.viewY * this.scene.height,this.viewW * this.scene.width,this.viewH * this.scene.height);
			ctx.inFilter = old;
		}
	}
	,exit: function(ctx) {
		if(this.clipViewport) {
			var old = ctx.inFilter;
			ctx.inFilter = null;
			ctx.popRenderZone();
			ctx.inFilter = old;
		}
		ctx.popCamera();
	}
	,sync: function(ctx,force) {
		if(force == null) {
			force = false;
		}
		if(this.scene == null) {
			return;
		}
		if(this.follow != null) {
			this.posChanged = true;
			this.x = this.follow.absX;
			this.posChanged = true;
			this.y = this.follow.absY;
			if(this.followRotation) {
				this.posChanged = true;
				this.rotation = -this.follow.rotation;
			}
		}
		if(this.posChanged || force) {
			if(this.rotation == 0) {
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				var cr = Math.cos(this.rotation);
				var sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = Math.round(-(this.x * this.matA + this.y * this.matC) + this.scene.width * this.anchorX * this.viewW + this.scene.width * this.viewX);
			this.absY = Math.round(-(this.x * this.matB + this.y * this.matD) + this.scene.height * this.anchorY * this.viewH + this.scene.height * this.viewY);
			this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
			this.posChanged = false;
		}
	}
	,eventToCamera: function(e) {
		var x = (e.relX - this.scene.offsetX) / this.scene.viewportScaleX - this.absX;
		var y = (e.relY - this.scene.offsetY) / this.scene.viewportScaleY - this.absY;
		e.relX = (x * this.matD - y * this.matC) * this.invDet;
		e.relY = (-x * this.matB + y * this.matA) * this.invDet;
	}
	,__class__: h2d_Camera
};
var h2d_Kerning = function(c,o) {
	this.prevChar = c;
	this.offset = o;
};
$hxClasses["h2d.Kerning"] = h2d_Kerning;
h2d_Kerning.__name__ = "h2d.Kerning";
h2d_Kerning.prototype = {
	__class__: h2d_Kerning
};
var h2d_FontChar = function(t,w) {
	this.t = t;
	this.width = w;
};
$hxClasses["h2d.FontChar"] = h2d_FontChar;
h2d_FontChar.__name__ = "h2d.FontChar";
h2d_FontChar.prototype = {
	addKerning: function(prevChar,offset) {
		var k = new h2d_Kerning(prevChar,offset);
		k.next = this.kerning;
		this.kerning = k;
	}
	,getKerningOffset: function(prevChar) {
		var k = this.kerning;
		while(k != null) {
			if(k.prevChar == prevChar) {
				return k.offset;
			}
			k = k.next;
		}
		return 0;
	}
	,__class__: h2d_FontChar
};
var h2d_FontType = $hxEnums["h2d.FontType"] = { __ename__:true,__constructs__:null
	,BitmapFont: {_hx_name:"BitmapFont",_hx_index:0,__enum__:"h2d.FontType",toString:$estr}
	,SignedDistanceField: ($_=function(channel,alphaCutoff,smoothing) { return {_hx_index:1,channel:channel,alphaCutoff:alphaCutoff,smoothing:smoothing,__enum__:"h2d.FontType",toString:$estr,__params__:function(){ return [this.channel,this.alphaCutoff,this.smoothing];}}; },$_._hx_name="SignedDistanceField",$_)
};
h2d_FontType.__constructs__ = [h2d_FontType.BitmapFont,h2d_FontType.SignedDistanceField];
h2d_FontType.__empty_constructs__ = [h2d_FontType.BitmapFont];
var h2d_Font = function(name,size,type) {
	this.name = name;
	this.size = size;
	this.initSize = size;
	this.glyphs = new haxe_ds_IntMap();
	this.defaultChar = this.nullChar = new h2d_FontChar(new h2d_Tile(null,0,0,0,0),0);
	this.charset = hxd_Charset.getDefault();
	if(name != null) {
		this.tilePath = haxe_io_Path.withExtension(name,"png");
	}
	if(type == null) {
		this.type = h2d_FontType.BitmapFont;
	} else {
		this.type = type;
	}
};
$hxClasses["h2d.Font"] = h2d_Font;
h2d_Font.__name__ = "h2d.Font";
h2d_Font.prototype = {
	calcBaseLine: function() {
		var padding = 0;
		var space = this.glyphs.h[32];
		if(space != null) {
			padding = space.t.height * .5;
		}
		var a = this.glyphs.h[65];
		if(a == null) {
			a = this.glyphs.h[97];
		}
		if(a == null) {
			a = this.glyphs.h[48];
		}
		if(a == null) {
			return this.lineHeight - 2 - padding;
		}
		return a.t.dy + a.t.height - padding;
	}
	,__class__: h2d_Font
};
var h2d_GPoint = function() {
};
$hxClasses["h2d.GPoint"] = h2d_GPoint;
h2d_GPoint.__name__ = "h2d.GPoint";
h2d_GPoint.prototype = {
	load: function(x,y,r,g,b,a) {
		this.x = x;
		this.y = y;
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	}
	,__class__: h2d_GPoint
};
var h3d_prim_Primitive = function() {
	this.refCount = 0;
};
$hxClasses["h3d.prim.Primitive"] = h3d_prim_Primitive;
h3d_prim_Primitive.__name__ = "h3d.prim.Primitive";
h3d_prim_Primitive.prototype = {
	triCount: function() {
		if(this.indexes != null) {
			return this.indexes.vertices / 3 | 0;
		} else if(this.buffer == null) {
			return 0;
		} else {
			return this.buffer.vertices / 3 | 0;
		}
	}
	,getBounds: function() {
		throw haxe_Exception.thrown("not implemented for " + Std.string(this));
	}
	,incref: function() {
		this.refCount++;
	}
	,decref: function() {
		this.refCount--;
		if(this.refCount <= 0) {
			this.refCount = 0;
			this.dispose();
		}
	}
	,alloc: function(engine) {
		throw haxe_Exception.thrown("not implemented");
	}
	,selectMaterial: function(material,lod) {
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			var b = this.buffer;
			engine.renderBuffer(b,engine.mem.getTriIndexes(b.vertices),3,0,-1);
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__.split(".").pop();
	}
	,lodCount: function() {
		return 1;
	}
	,screenRatioToLod: function(screenRatio) {
		return 0;
	}
	,__class__: h3d_prim_Primitive
};
var h2d__$Graphics_GraphicsContent = function() {
	h3d_prim_Primitive.call(this);
	this.buffers = [];
	this.state = new h2d_impl_BatchDrawState();
	this.allocPos = hxd_impl_AllocPos.make();
};
$hxClasses["h2d._Graphics.GraphicsContent"] = h2d__$Graphics_GraphicsContent;
h2d__$Graphics_GraphicsContent.__name__ = "h2d._Graphics.GraphicsContent";
h2d__$Graphics_GraphicsContent.__super__ = h3d_prim_Primitive;
h2d__$Graphics_GraphicsContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	setTile: function(tile) {
		if(tile != null) {
			this.state.setTexture(tile.innerTex);
		}
	}
	,next: function() {
		var nvect = this.tmp.pos >> 3;
		if(nvect < 32768) {
			return false;
		}
		this.buffers.push({ buf : this.tmp, idx : this.index, vbuf : null, ibuf : null, state : this.state});
		this.tmp = hxd__$FloatBuffer_Float32Expand._new(0);
		this.index = new Array(0);
		var tex = this.state.tail.texture;
		this.state = new h2d_impl_BatchDrawState();
		this.state.setTexture(tex);
		h3d_prim_Primitive.prototype.dispose.call(this);
		return true;
	}
	,alloc: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		var alloc = hxd_impl_Allocator.get();
		this.buffer = alloc.ofFloats(this.tmp,hxd_BufferFormat.get_XY_UV_RGBA());
		this.buffer.allocPos = this.allocPos;
		this.indexes = alloc.ofIndexes(this.index);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf == null || b.vbuf.vbuf == null) {
				b.vbuf = alloc.ofFloats(b.buf,hxd_BufferFormat.get_XY_UV_RGBA());
			}
			if(b.ibuf == null || b.ibuf.vbuf == null) {
				b.ibuf = alloc.ofIndexes(b.idx);
			}
		}
		this.bufferDirty = false;
		this.indexDirty = false;
	}
	,doRender: function(ctx) {
		if(this.index.length == 0) {
			return;
		}
		this.flush();
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.state.drawIndexed(ctx,b.vbuf,b.ibuf);
		}
		this.state.drawIndexed(ctx,this.buffer,this.indexes);
	}
	,flush: function() {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(h3d_Engine.CURRENT);
		} else {
			var allocator = hxd_impl_Allocator.get();
			if(this.bufferDirty) {
				allocator.disposeBuffer(this.buffer);
				this.buffer = allocator.ofFloats(this.tmp,hxd_BufferFormat.get_XY_UV_RGBA());
				this.bufferDirty = false;
			}
			if(this.indexDirty) {
				allocator.disposeIndexBuffer(this.indexes);
				this.indexes = allocator.ofIndexes(this.index);
				this.indexDirty = false;
			}
		}
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf != null) {
				hxd_impl_Allocator.get().disposeBuffer(b.vbuf);
			}
			if(b.ibuf != null) {
				hxd_impl_Allocator.get().disposeIndexBuffer(b.ibuf);
			}
			b.vbuf = null;
			b.ibuf = null;
			b.state.clear();
		}
		if(this.buffer != null) {
			hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			this.buffer = null;
		}
		if(this.indexes != null) {
			hxd_impl_Allocator.get().disposeIndexBuffer(this.indexes);
			this.indexes = null;
		}
		this.state.clear();
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,clear: function() {
		this.dispose();
		this.tmp = hxd__$FloatBuffer_Float32Expand._new(0);
		this.index = new Array(0);
		this.buffers = [];
	}
	,__class__: h2d__$Graphics_GraphicsContent
});
var h2d_Graphics = function(parent) {
	this.bevel = 0.25;
	this.my = 0.;
	this.mx = 0.;
	this.md = 1.;
	this.mc = 0.;
	this.mb = 0.;
	this.ma = 1.;
	h2d_Drawable.call(this,parent);
	this.content = new h2d__$Graphics_GraphicsContent();
	this.tile = h2d_Tile.fromColor(16777215);
	this.clear();
};
$hxClasses["h2d.Graphics"] = h2d_Graphics;
h2d_Graphics.__name__ = "h2d.Graphics";
h2d_Graphics.__super__ = h2d_Drawable;
h2d_Graphics.prototype = $extend(h2d_Drawable.prototype,{
	onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		this.clear();
	}
	,clear: function() {
		this.content.clear();
		this.tmpPoints = [];
		this.pindex = 0;
		this.lineSize = 0;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.yMax = -Infinity;
		this.xMax = -Infinity;
		this.xMinSize = Infinity;
		this.yMinSize = Infinity;
		this.yMaxSize = -Infinity;
		this.xMaxSize = -Infinity;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			if(forSize) {
				this.addBounds(relativeTo,out,this.xMinSize,this.yMinSize,this.xMaxSize - this.xMinSize,this.yMaxSize - this.yMinSize);
			} else {
				this.addBounds(relativeTo,out,this.xMin,this.yMin,this.xMax - this.xMin,this.yMax - this.yMin);
			}
		}
	}
	,isConvex: function(points) {
		var first = true;
		var sign = false;
		var _g = 0;
		var _g1 = points.length;
		while(_g < _g1) {
			var i = _g++;
			var p1 = points[i];
			var p2 = points[(i + 1) % points.length];
			var p3 = points[(i + 2) % points.length];
			var s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
			if(first) {
				first = false;
				sign = s;
			} else if(sign != s) {
				return false;
			}
		}
		return true;
	}
	,flushLine: function(start) {
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		this.content.setTile(h2d_Tile.fromColor(16777215));
		var closed = p.x == prev.x && p.y == prev.y;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			var gp = new h2d_GPoint();
			gp.load(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,0,0,0,0);
			pts.push(gp);
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			var gp = new h2d_GPoint();
			gp.load(p.x * 2 - pNext.x,p.y * 2 - pNext.y,0,0,0,0);
			prev = gp;
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			if(size < 0.1) {
				size = 0.1;
			}
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			if(size > this.bevel) {
				var _this = this.content;
				var x = p.x + nx;
				var y = p.y + ny;
				var r = p.r;
				var g = p.g;
				var b = p.b;
				var a = p.a;
				var this1 = _this.tmp;
				if(this1.pos == this1.array.length) {
					var newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = x;
				var this2 = _this.tmp;
				if(this2.pos == this2.array.length) {
					var newSize1 = this2.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(this2.array);
					this2.array = newArray1;
				}
				this2.array[this2.pos++] = y;
				var this3 = _this.tmp;
				if(this3.pos == this3.array.length) {
					var newSize2 = this3.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(this3.array);
					this3.array = newArray2;
				}
				this3.array[this3.pos++] = 0;
				var this4 = _this.tmp;
				if(this4.pos == this4.array.length) {
					var newSize3 = this4.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(this4.array);
					this4.array = newArray3;
				}
				this4.array[this4.pos++] = 0;
				var this5 = _this.tmp;
				if(this5.pos == this5.array.length) {
					var newSize4 = this5.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(this5.array);
					this5.array = newArray4;
				}
				this5.array[this5.pos++] = r;
				var this6 = _this.tmp;
				if(this6.pos == this6.array.length) {
					var newSize5 = this6.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(this6.array);
					this6.array = newArray5;
				}
				this6.array[this6.pos++] = g;
				var this7 = _this.tmp;
				if(this7.pos == this7.array.length) {
					var newSize6 = this7.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(this7.array);
					this7.array = newArray6;
				}
				this7.array[this7.pos++] = b;
				var this8 = _this.tmp;
				if(this8.pos == this8.array.length) {
					var newSize7 = this8.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(this8.array);
					this8.array = newArray7;
				}
				this8.array[this8.pos++] = a;
				_this.bufferDirty = true;
				var _this1 = this.content;
				var x1 = p.x - nx;
				var y1 = p.y - ny;
				var r1 = p.r;
				var g1 = p.g;
				var b1 = p.b;
				var a1 = p.a;
				var this9 = _this1.tmp;
				if(this9.pos == this9.array.length) {
					var newSize8 = this9.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(this9.array);
					this9.array = newArray8;
				}
				this9.array[this9.pos++] = x1;
				var this10 = _this1.tmp;
				if(this10.pos == this10.array.length) {
					var newSize9 = this10.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(this10.array);
					this10.array = newArray9;
				}
				this10.array[this10.pos++] = y1;
				var this11 = _this1.tmp;
				if(this11.pos == this11.array.length) {
					var newSize10 = this11.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(this11.array);
					this11.array = newArray10;
				}
				this11.array[this11.pos++] = 0;
				var this12 = _this1.tmp;
				if(this12.pos == this12.array.length) {
					var newSize11 = this12.array.length << 1;
					if(newSize11 < 128) {
						newSize11 = 128;
					}
					var newArray11 = new Float32Array(newSize11);
					newArray11.set(this12.array);
					this12.array = newArray11;
				}
				this12.array[this12.pos++] = 0;
				var this13 = _this1.tmp;
				if(this13.pos == this13.array.length) {
					var newSize12 = this13.array.length << 1;
					if(newSize12 < 128) {
						newSize12 = 128;
					}
					var newArray12 = new Float32Array(newSize12);
					newArray12.set(this13.array);
					this13.array = newArray12;
				}
				this13.array[this13.pos++] = r1;
				var this14 = _this1.tmp;
				if(this14.pos == this14.array.length) {
					var newSize13 = this14.array.length << 1;
					if(newSize13 < 128) {
						newSize13 = 128;
					}
					var newArray13 = new Float32Array(newSize13);
					newArray13.set(this14.array);
					this14.array = newArray13;
				}
				this14.array[this14.pos++] = g1;
				var this15 = _this1.tmp;
				if(this15.pos == this15.array.length) {
					var newSize14 = this15.array.length << 1;
					if(newSize14 < 128) {
						newSize14 = 128;
					}
					var newArray14 = new Float32Array(newSize14);
					newArray14.set(this15.array);
					this15.array = newArray14;
				}
				this15.array[this15.pos++] = b1;
				var this16 = _this1.tmp;
				if(this16.pos == this16.array.length) {
					var newSize15 = this16.array.length << 1;
					if(newSize15 < 128) {
						newSize15 = 128;
					}
					var newArray15 = new Float32Array(newSize15);
					newArray15.set(this16.array);
					this16.array = newArray15;
				}
				this16.array[this16.pos++] = a1;
				_this1.bufferDirty = true;
				var pnext = i == last ? start : this.pindex + 2;
				if(i < count - 1 || closed) {
					var _this2 = this.content;
					_this2.index.push(this.pindex);
					var _this3 = _this2.state;
					_this3.tail.count += 1;
					_this3.totalCount += 1;
					_this2.indexDirty = true;
					var _this4 = this.content;
					_this4.index.push(this.pindex + 1);
					var _this5 = _this4.state;
					_this5.tail.count += 1;
					_this5.totalCount += 1;
					_this4.indexDirty = true;
					var _this6 = this.content;
					_this6.index.push(pnext);
					var _this7 = _this6.state;
					_this7.tail.count += 1;
					_this7.totalCount += 1;
					_this6.indexDirty = true;
					var _this8 = this.content;
					_this8.index.push(this.pindex + 1);
					var _this9 = _this8.state;
					_this9.tail.count += 1;
					_this9.totalCount += 1;
					_this8.indexDirty = true;
					var _this10 = this.content;
					_this10.index.push(pnext);
					var _this11 = _this10.state;
					_this11.tail.count += 1;
					_this11.totalCount += 1;
					_this10.indexDirty = true;
					var _this12 = this.content;
					_this12.index.push(pnext + 1);
					var _this13 = _this12.state;
					_this13.tail.count += 1;
					_this13.totalCount += 1;
					_this12.indexDirty = true;
				}
				this.pindex += 2;
			} else {
				var n0x = next.x - p.x;
				var n0y = next.y - p.y;
				var sign = n0x * nx + n0y * ny;
				var nnx = -ny;
				var nny = nx;
				var size1 = nnx * nx1 * ns1 + nny * ny1 * ns1;
				var d1 = this.lineSize * 0.5 / size1;
				nnx *= d1;
				nny *= d1;
				var pnext1 = i == last ? start : this.pindex + 3;
				if(sign > 0) {
					var _this14 = this.content;
					var x2 = p.x + nx;
					var y2 = p.y + ny;
					var r2 = p.r;
					var g2 = p.g;
					var b2 = p.b;
					var a2 = p.a;
					var this17 = _this14.tmp;
					if(this17.pos == this17.array.length) {
						var newSize16 = this17.array.length << 1;
						if(newSize16 < 128) {
							newSize16 = 128;
						}
						var newArray16 = new Float32Array(newSize16);
						newArray16.set(this17.array);
						this17.array = newArray16;
					}
					this17.array[this17.pos++] = x2;
					var this18 = _this14.tmp;
					if(this18.pos == this18.array.length) {
						var newSize17 = this18.array.length << 1;
						if(newSize17 < 128) {
							newSize17 = 128;
						}
						var newArray17 = new Float32Array(newSize17);
						newArray17.set(this18.array);
						this18.array = newArray17;
					}
					this18.array[this18.pos++] = y2;
					var this19 = _this14.tmp;
					if(this19.pos == this19.array.length) {
						var newSize18 = this19.array.length << 1;
						if(newSize18 < 128) {
							newSize18 = 128;
						}
						var newArray18 = new Float32Array(newSize18);
						newArray18.set(this19.array);
						this19.array = newArray18;
					}
					this19.array[this19.pos++] = 0;
					var this20 = _this14.tmp;
					if(this20.pos == this20.array.length) {
						var newSize19 = this20.array.length << 1;
						if(newSize19 < 128) {
							newSize19 = 128;
						}
						var newArray19 = new Float32Array(newSize19);
						newArray19.set(this20.array);
						this20.array = newArray19;
					}
					this20.array[this20.pos++] = 0;
					var this21 = _this14.tmp;
					if(this21.pos == this21.array.length) {
						var newSize20 = this21.array.length << 1;
						if(newSize20 < 128) {
							newSize20 = 128;
						}
						var newArray20 = new Float32Array(newSize20);
						newArray20.set(this21.array);
						this21.array = newArray20;
					}
					this21.array[this21.pos++] = r2;
					var this22 = _this14.tmp;
					if(this22.pos == this22.array.length) {
						var newSize21 = this22.array.length << 1;
						if(newSize21 < 128) {
							newSize21 = 128;
						}
						var newArray21 = new Float32Array(newSize21);
						newArray21.set(this22.array);
						this22.array = newArray21;
					}
					this22.array[this22.pos++] = g2;
					var this23 = _this14.tmp;
					if(this23.pos == this23.array.length) {
						var newSize22 = this23.array.length << 1;
						if(newSize22 < 128) {
							newSize22 = 128;
						}
						var newArray22 = new Float32Array(newSize22);
						newArray22.set(this23.array);
						this23.array = newArray22;
					}
					this23.array[this23.pos++] = b2;
					var this24 = _this14.tmp;
					if(this24.pos == this24.array.length) {
						var newSize23 = this24.array.length << 1;
						if(newSize23 < 128) {
							newSize23 = 128;
						}
						var newArray23 = new Float32Array(newSize23);
						newArray23.set(this24.array);
						this24.array = newArray23;
					}
					this24.array[this24.pos++] = a2;
					_this14.bufferDirty = true;
					var _this15 = this.content;
					var x3 = p.x - nnx;
					var y3 = p.y - nny;
					var r3 = p.r;
					var g3 = p.g;
					var b3 = p.b;
					var a3 = p.a;
					var this25 = _this15.tmp;
					if(this25.pos == this25.array.length) {
						var newSize24 = this25.array.length << 1;
						if(newSize24 < 128) {
							newSize24 = 128;
						}
						var newArray24 = new Float32Array(newSize24);
						newArray24.set(this25.array);
						this25.array = newArray24;
					}
					this25.array[this25.pos++] = x3;
					var this26 = _this15.tmp;
					if(this26.pos == this26.array.length) {
						var newSize25 = this26.array.length << 1;
						if(newSize25 < 128) {
							newSize25 = 128;
						}
						var newArray25 = new Float32Array(newSize25);
						newArray25.set(this26.array);
						this26.array = newArray25;
					}
					this26.array[this26.pos++] = y3;
					var this27 = _this15.tmp;
					if(this27.pos == this27.array.length) {
						var newSize26 = this27.array.length << 1;
						if(newSize26 < 128) {
							newSize26 = 128;
						}
						var newArray26 = new Float32Array(newSize26);
						newArray26.set(this27.array);
						this27.array = newArray26;
					}
					this27.array[this27.pos++] = 0;
					var this28 = _this15.tmp;
					if(this28.pos == this28.array.length) {
						var newSize27 = this28.array.length << 1;
						if(newSize27 < 128) {
							newSize27 = 128;
						}
						var newArray27 = new Float32Array(newSize27);
						newArray27.set(this28.array);
						this28.array = newArray27;
					}
					this28.array[this28.pos++] = 0;
					var this29 = _this15.tmp;
					if(this29.pos == this29.array.length) {
						var newSize28 = this29.array.length << 1;
						if(newSize28 < 128) {
							newSize28 = 128;
						}
						var newArray28 = new Float32Array(newSize28);
						newArray28.set(this29.array);
						this29.array = newArray28;
					}
					this29.array[this29.pos++] = r3;
					var this30 = _this15.tmp;
					if(this30.pos == this30.array.length) {
						var newSize29 = this30.array.length << 1;
						if(newSize29 < 128) {
							newSize29 = 128;
						}
						var newArray29 = new Float32Array(newSize29);
						newArray29.set(this30.array);
						this30.array = newArray29;
					}
					this30.array[this30.pos++] = g3;
					var this31 = _this15.tmp;
					if(this31.pos == this31.array.length) {
						var newSize30 = this31.array.length << 1;
						if(newSize30 < 128) {
							newSize30 = 128;
						}
						var newArray30 = new Float32Array(newSize30);
						newArray30.set(this31.array);
						this31.array = newArray30;
					}
					this31.array[this31.pos++] = b3;
					var this32 = _this15.tmp;
					if(this32.pos == this32.array.length) {
						var newSize31 = this32.array.length << 1;
						if(newSize31 < 128) {
							newSize31 = 128;
						}
						var newArray31 = new Float32Array(newSize31);
						newArray31.set(this32.array);
						this32.array = newArray31;
					}
					this32.array[this32.pos++] = a3;
					_this15.bufferDirty = true;
					var _this16 = this.content;
					var x4 = p.x + nnx;
					var y4 = p.y + nny;
					var r4 = p.r;
					var g4 = p.g;
					var b4 = p.b;
					var a4 = p.a;
					var this33 = _this16.tmp;
					if(this33.pos == this33.array.length) {
						var newSize32 = this33.array.length << 1;
						if(newSize32 < 128) {
							newSize32 = 128;
						}
						var newArray32 = new Float32Array(newSize32);
						newArray32.set(this33.array);
						this33.array = newArray32;
					}
					this33.array[this33.pos++] = x4;
					var this34 = _this16.tmp;
					if(this34.pos == this34.array.length) {
						var newSize33 = this34.array.length << 1;
						if(newSize33 < 128) {
							newSize33 = 128;
						}
						var newArray33 = new Float32Array(newSize33);
						newArray33.set(this34.array);
						this34.array = newArray33;
					}
					this34.array[this34.pos++] = y4;
					var this35 = _this16.tmp;
					if(this35.pos == this35.array.length) {
						var newSize34 = this35.array.length << 1;
						if(newSize34 < 128) {
							newSize34 = 128;
						}
						var newArray34 = new Float32Array(newSize34);
						newArray34.set(this35.array);
						this35.array = newArray34;
					}
					this35.array[this35.pos++] = 0;
					var this36 = _this16.tmp;
					if(this36.pos == this36.array.length) {
						var newSize35 = this36.array.length << 1;
						if(newSize35 < 128) {
							newSize35 = 128;
						}
						var newArray35 = new Float32Array(newSize35);
						newArray35.set(this36.array);
						this36.array = newArray35;
					}
					this36.array[this36.pos++] = 0;
					var this37 = _this16.tmp;
					if(this37.pos == this37.array.length) {
						var newSize36 = this37.array.length << 1;
						if(newSize36 < 128) {
							newSize36 = 128;
						}
						var newArray36 = new Float32Array(newSize36);
						newArray36.set(this37.array);
						this37.array = newArray36;
					}
					this37.array[this37.pos++] = r4;
					var this38 = _this16.tmp;
					if(this38.pos == this38.array.length) {
						var newSize37 = this38.array.length << 1;
						if(newSize37 < 128) {
							newSize37 = 128;
						}
						var newArray37 = new Float32Array(newSize37);
						newArray37.set(this38.array);
						this38.array = newArray37;
					}
					this38.array[this38.pos++] = g4;
					var this39 = _this16.tmp;
					if(this39.pos == this39.array.length) {
						var newSize38 = this39.array.length << 1;
						if(newSize38 < 128) {
							newSize38 = 128;
						}
						var newArray38 = new Float32Array(newSize38);
						newArray38.set(this39.array);
						this39.array = newArray38;
					}
					this39.array[this39.pos++] = b4;
					var this40 = _this16.tmp;
					if(this40.pos == this40.array.length) {
						var newSize39 = this40.array.length << 1;
						if(newSize39 < 128) {
							newSize39 = 128;
						}
						var newArray39 = new Float32Array(newSize39);
						newArray39.set(this40.array);
						this40.array = newArray39;
					}
					this40.array[this40.pos++] = a4;
					_this16.bufferDirty = true;
					var _this17 = this.content;
					_this17.index.push(this.pindex);
					var _this18 = _this17.state;
					_this18.tail.count += 1;
					_this18.totalCount += 1;
					_this17.indexDirty = true;
					var _this19 = this.content;
					_this19.index.push(pnext1);
					var _this20 = _this19.state;
					_this20.tail.count += 1;
					_this20.totalCount += 1;
					_this19.indexDirty = true;
					var _this21 = this.content;
					_this21.index.push(this.pindex + 2);
					var _this22 = _this21.state;
					_this22.tail.count += 1;
					_this22.totalCount += 1;
					_this21.indexDirty = true;
					var _this23 = this.content;
					_this23.index.push(this.pindex + 2);
					var _this24 = _this23.state;
					_this24.tail.count += 1;
					_this24.totalCount += 1;
					_this23.indexDirty = true;
					var _this25 = this.content;
					_this25.index.push(pnext1);
					var _this26 = _this25.state;
					_this26.tail.count += 1;
					_this26.totalCount += 1;
					_this25.indexDirty = true;
					var _this27 = this.content;
					_this27.index.push(pnext1 + 1);
					var _this28 = _this27.state;
					_this28.tail.count += 1;
					_this28.totalCount += 1;
					_this27.indexDirty = true;
				} else {
					var _this29 = this.content;
					var x5 = p.x + nnx;
					var y5 = p.y + nny;
					var r5 = p.r;
					var g5 = p.g;
					var b5 = p.b;
					var a5 = p.a;
					var this41 = _this29.tmp;
					if(this41.pos == this41.array.length) {
						var newSize40 = this41.array.length << 1;
						if(newSize40 < 128) {
							newSize40 = 128;
						}
						var newArray40 = new Float32Array(newSize40);
						newArray40.set(this41.array);
						this41.array = newArray40;
					}
					this41.array[this41.pos++] = x5;
					var this42 = _this29.tmp;
					if(this42.pos == this42.array.length) {
						var newSize41 = this42.array.length << 1;
						if(newSize41 < 128) {
							newSize41 = 128;
						}
						var newArray41 = new Float32Array(newSize41);
						newArray41.set(this42.array);
						this42.array = newArray41;
					}
					this42.array[this42.pos++] = y5;
					var this43 = _this29.tmp;
					if(this43.pos == this43.array.length) {
						var newSize42 = this43.array.length << 1;
						if(newSize42 < 128) {
							newSize42 = 128;
						}
						var newArray42 = new Float32Array(newSize42);
						newArray42.set(this43.array);
						this43.array = newArray42;
					}
					this43.array[this43.pos++] = 0;
					var this44 = _this29.tmp;
					if(this44.pos == this44.array.length) {
						var newSize43 = this44.array.length << 1;
						if(newSize43 < 128) {
							newSize43 = 128;
						}
						var newArray43 = new Float32Array(newSize43);
						newArray43.set(this44.array);
						this44.array = newArray43;
					}
					this44.array[this44.pos++] = 0;
					var this45 = _this29.tmp;
					if(this45.pos == this45.array.length) {
						var newSize44 = this45.array.length << 1;
						if(newSize44 < 128) {
							newSize44 = 128;
						}
						var newArray44 = new Float32Array(newSize44);
						newArray44.set(this45.array);
						this45.array = newArray44;
					}
					this45.array[this45.pos++] = r5;
					var this46 = _this29.tmp;
					if(this46.pos == this46.array.length) {
						var newSize45 = this46.array.length << 1;
						if(newSize45 < 128) {
							newSize45 = 128;
						}
						var newArray45 = new Float32Array(newSize45);
						newArray45.set(this46.array);
						this46.array = newArray45;
					}
					this46.array[this46.pos++] = g5;
					var this47 = _this29.tmp;
					if(this47.pos == this47.array.length) {
						var newSize46 = this47.array.length << 1;
						if(newSize46 < 128) {
							newSize46 = 128;
						}
						var newArray46 = new Float32Array(newSize46);
						newArray46.set(this47.array);
						this47.array = newArray46;
					}
					this47.array[this47.pos++] = b5;
					var this48 = _this29.tmp;
					if(this48.pos == this48.array.length) {
						var newSize47 = this48.array.length << 1;
						if(newSize47 < 128) {
							newSize47 = 128;
						}
						var newArray47 = new Float32Array(newSize47);
						newArray47.set(this48.array);
						this48.array = newArray47;
					}
					this48.array[this48.pos++] = a5;
					_this29.bufferDirty = true;
					var _this30 = this.content;
					var x6 = p.x - nx;
					var y6 = p.y - ny;
					var r6 = p.r;
					var g6 = p.g;
					var b6 = p.b;
					var a6 = p.a;
					var this49 = _this30.tmp;
					if(this49.pos == this49.array.length) {
						var newSize48 = this49.array.length << 1;
						if(newSize48 < 128) {
							newSize48 = 128;
						}
						var newArray48 = new Float32Array(newSize48);
						newArray48.set(this49.array);
						this49.array = newArray48;
					}
					this49.array[this49.pos++] = x6;
					var this50 = _this30.tmp;
					if(this50.pos == this50.array.length) {
						var newSize49 = this50.array.length << 1;
						if(newSize49 < 128) {
							newSize49 = 128;
						}
						var newArray49 = new Float32Array(newSize49);
						newArray49.set(this50.array);
						this50.array = newArray49;
					}
					this50.array[this50.pos++] = y6;
					var this51 = _this30.tmp;
					if(this51.pos == this51.array.length) {
						var newSize50 = this51.array.length << 1;
						if(newSize50 < 128) {
							newSize50 = 128;
						}
						var newArray50 = new Float32Array(newSize50);
						newArray50.set(this51.array);
						this51.array = newArray50;
					}
					this51.array[this51.pos++] = 0;
					var this52 = _this30.tmp;
					if(this52.pos == this52.array.length) {
						var newSize51 = this52.array.length << 1;
						if(newSize51 < 128) {
							newSize51 = 128;
						}
						var newArray51 = new Float32Array(newSize51);
						newArray51.set(this52.array);
						this52.array = newArray51;
					}
					this52.array[this52.pos++] = 0;
					var this53 = _this30.tmp;
					if(this53.pos == this53.array.length) {
						var newSize52 = this53.array.length << 1;
						if(newSize52 < 128) {
							newSize52 = 128;
						}
						var newArray52 = new Float32Array(newSize52);
						newArray52.set(this53.array);
						this53.array = newArray52;
					}
					this53.array[this53.pos++] = r6;
					var this54 = _this30.tmp;
					if(this54.pos == this54.array.length) {
						var newSize53 = this54.array.length << 1;
						if(newSize53 < 128) {
							newSize53 = 128;
						}
						var newArray53 = new Float32Array(newSize53);
						newArray53.set(this54.array);
						this54.array = newArray53;
					}
					this54.array[this54.pos++] = g6;
					var this55 = _this30.tmp;
					if(this55.pos == this55.array.length) {
						var newSize54 = this55.array.length << 1;
						if(newSize54 < 128) {
							newSize54 = 128;
						}
						var newArray54 = new Float32Array(newSize54);
						newArray54.set(this55.array);
						this55.array = newArray54;
					}
					this55.array[this55.pos++] = b6;
					var this56 = _this30.tmp;
					if(this56.pos == this56.array.length) {
						var newSize55 = this56.array.length << 1;
						if(newSize55 < 128) {
							newSize55 = 128;
						}
						var newArray55 = new Float32Array(newSize55);
						newArray55.set(this56.array);
						this56.array = newArray55;
					}
					this56.array[this56.pos++] = a6;
					_this30.bufferDirty = true;
					var _this31 = this.content;
					var x7 = p.x - nnx;
					var y7 = p.y - nny;
					var r7 = p.r;
					var g7 = p.g;
					var b7 = p.b;
					var a7 = p.a;
					var this57 = _this31.tmp;
					if(this57.pos == this57.array.length) {
						var newSize56 = this57.array.length << 1;
						if(newSize56 < 128) {
							newSize56 = 128;
						}
						var newArray56 = new Float32Array(newSize56);
						newArray56.set(this57.array);
						this57.array = newArray56;
					}
					this57.array[this57.pos++] = x7;
					var this58 = _this31.tmp;
					if(this58.pos == this58.array.length) {
						var newSize57 = this58.array.length << 1;
						if(newSize57 < 128) {
							newSize57 = 128;
						}
						var newArray57 = new Float32Array(newSize57);
						newArray57.set(this58.array);
						this58.array = newArray57;
					}
					this58.array[this58.pos++] = y7;
					var this59 = _this31.tmp;
					if(this59.pos == this59.array.length) {
						var newSize58 = this59.array.length << 1;
						if(newSize58 < 128) {
							newSize58 = 128;
						}
						var newArray58 = new Float32Array(newSize58);
						newArray58.set(this59.array);
						this59.array = newArray58;
					}
					this59.array[this59.pos++] = 0;
					var this60 = _this31.tmp;
					if(this60.pos == this60.array.length) {
						var newSize59 = this60.array.length << 1;
						if(newSize59 < 128) {
							newSize59 = 128;
						}
						var newArray59 = new Float32Array(newSize59);
						newArray59.set(this60.array);
						this60.array = newArray59;
					}
					this60.array[this60.pos++] = 0;
					var this61 = _this31.tmp;
					if(this61.pos == this61.array.length) {
						var newSize60 = this61.array.length << 1;
						if(newSize60 < 128) {
							newSize60 = 128;
						}
						var newArray60 = new Float32Array(newSize60);
						newArray60.set(this61.array);
						this61.array = newArray60;
					}
					this61.array[this61.pos++] = r7;
					var this62 = _this31.tmp;
					if(this62.pos == this62.array.length) {
						var newSize61 = this62.array.length << 1;
						if(newSize61 < 128) {
							newSize61 = 128;
						}
						var newArray61 = new Float32Array(newSize61);
						newArray61.set(this62.array);
						this62.array = newArray61;
					}
					this62.array[this62.pos++] = g7;
					var this63 = _this31.tmp;
					if(this63.pos == this63.array.length) {
						var newSize62 = this63.array.length << 1;
						if(newSize62 < 128) {
							newSize62 = 128;
						}
						var newArray62 = new Float32Array(newSize62);
						newArray62.set(this63.array);
						this63.array = newArray62;
					}
					this63.array[this63.pos++] = b7;
					var this64 = _this31.tmp;
					if(this64.pos == this64.array.length) {
						var newSize63 = this64.array.length << 1;
						if(newSize63 < 128) {
							newSize63 = 128;
						}
						var newArray63 = new Float32Array(newSize63);
						newArray63.set(this64.array);
						this64.array = newArray63;
					}
					this64.array[this64.pos++] = a7;
					_this31.bufferDirty = true;
					var _this32 = this.content;
					_this32.index.push(this.pindex + 1);
					var _this33 = _this32.state;
					_this33.tail.count += 1;
					_this33.totalCount += 1;
					_this32.indexDirty = true;
					var _this34 = this.content;
					_this34.index.push(pnext1);
					var _this35 = _this34.state;
					_this35.tail.count += 1;
					_this35.totalCount += 1;
					_this34.indexDirty = true;
					var _this36 = this.content;
					_this36.index.push(this.pindex + 2);
					var _this37 = _this36.state;
					_this37.tail.count += 1;
					_this37.totalCount += 1;
					_this36.indexDirty = true;
					var _this38 = this.content;
					_this38.index.push(this.pindex + 1);
					var _this39 = _this38.state;
					_this39.tail.count += 1;
					_this39.totalCount += 1;
					_this38.indexDirty = true;
					var _this40 = this.content;
					_this40.index.push(pnext1);
					var _this41 = _this40.state;
					_this41.tail.count += 1;
					_this41.totalCount += 1;
					_this40.indexDirty = true;
					var _this42 = this.content;
					_this42.index.push(pnext1 + 1);
					var _this43 = _this42.state;
					_this43.tail.count += 1;
					_this43.totalCount += 1;
					_this42.indexDirty = true;
				}
				var _this44 = this.content;
				_this44.index.push(this.pindex);
				var _this45 = _this44.state;
				_this45.tail.count += 1;
				_this45.totalCount += 1;
				_this44.indexDirty = true;
				var _this46 = this.content;
				_this46.index.push(this.pindex + 1);
				var _this47 = _this46.state;
				_this47.tail.count += 1;
				_this47.totalCount += 1;
				_this46.indexDirty = true;
				var _this48 = this.content;
				_this48.index.push(this.pindex + 2);
				var _this49 = _this48.state;
				_this49.tail.count += 1;
				_this49.totalCount += 1;
				_this48.indexDirty = true;
				this.pindex += 3;
			}
			prev = p;
			p = next;
		}
		this.content.setTile(this.tile);
	}
	,flushFill: function(i0) {
		if(this.tmpPoints.length < 3) {
			return;
		}
		var pts = this.tmpPoints;
		var p0 = pts[0];
		var p1 = pts[pts.length - 1];
		var last = null;
		var tmp;
		var f = p0.x - p1.x;
		if((f < 0 ? -f : f) < 1e-9) {
			var f = p0.y - p1.y;
			tmp = (f < 0 ? -f : f) < 1e-9;
		} else {
			tmp = false;
		}
		if(tmp) {
			last = pts.pop();
		}
		if(this.isConvex(pts)) {
			var _g = 1;
			var _g1 = pts.length - 1;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.content;
				_this.index.push(i0);
				var _this1 = _this.state;
				_this1.tail.count += 1;
				_this1.totalCount += 1;
				_this.indexDirty = true;
				var _this2 = this.content;
				_this2.index.push(i0 + i);
				var _this3 = _this2.state;
				_this3.tail.count += 1;
				_this3.totalCount += 1;
				_this2.indexDirty = true;
				var _this4 = this.content;
				_this4.index.push(i0 + i + 1);
				var _this5 = _this4.state;
				_this5.tail.count += 1;
				_this5.totalCount += 1;
				_this4.indexDirty = true;
			}
		} else {
			var ear = h2d_Graphics.EARCUT;
			if(ear == null) {
				ear = new hxd_earcut_Earcut();
				h2d_Graphics.EARCUT = ear;
			}
			var _g = 0;
			var _g1 = ear.triangulate_h2d_GPoint(pts);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var _this = this.content;
				_this.index.push(i + i0);
				var _this1 = _this.state;
				_this1.tail.count += 1;
				_this1.totalCount += 1;
				_this.indexDirty = true;
			}
		}
		if(last != null) {
			pts.push(last);
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.doFill) {
			this.flushFill(this.pindex);
			this.pindex += this.tmpPoints.length;
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		if(this.lineSize > 0) {
			this.flushLine(this.pindex);
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		this.tmpPoints = [];
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		this.flush();
		this.tile = h2d_Tile.fromColor(16777215);
		this.content.setTile(this.tile);
		var alpha1 = alpha;
		if(alpha1 == null) {
			alpha1 = 1.;
		}
		this.curA = alpha1;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
		this.doFill = true;
	}
	,endFill: function() {
		this.flush();
		this.doFill = false;
	}
	,drawCircle: function(cx,cy,radius,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		this.flush();
		if(nsegments == 0) {
			var f = radius * 3.14 * 2 / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = 6.28318530717958623 / nsegments;
		var _g = 0;
		var _g1 = nsegments + 1;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle;
			var x = cx + Math.cos(a) * radius;
			var y = cy + Math.sin(a) * radius;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.flush();
	}
	,addVertex: function(x,y,r,g,b,a,u,v) {
		if(v == null) {
			v = 0.;
		}
		if(u == null) {
			u = 0.;
		}
		var half = this.lineSize / 2.0;
		if(x - half < this.xMin) {
			this.xMin = x - half;
		}
		if(y - half < this.yMin) {
			this.yMin = y - half;
		}
		if(x + half > this.xMax) {
			this.xMax = x + half;
		}
		if(y + half > this.yMax) {
			this.yMax = y + half;
		}
		if(x < this.xMinSize) {
			this.xMinSize = x;
		}
		if(y < this.yMinSize) {
			this.yMinSize = y;
		}
		if(x > this.xMaxSize) {
			this.xMaxSize = x;
		}
		if(y > this.yMaxSize) {
			this.yMaxSize = y;
		}
		if(this.doFill) {
			var _this = this.content;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = x;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = y;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = u;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = v;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = r;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = g;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = b;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = a;
			_this.bufferDirty = true;
		}
		var gp = new h2d_GPoint();
		gp.load(x,y,this.lineR,this.lineG,this.lineB,this.lineA);
		this.tmpPoints.push(gp);
	}
	,draw: function(ctx) {
		if(!ctx.beginDrawBatchState(this)) {
			return;
		}
		this.content.doRender(ctx);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		this.flush();
		this.content.flush();
	}
	,__class__: h2d_Graphics
});
var hxd_Interactive = function() { };
$hxClasses["hxd.Interactive"] = hxd_Interactive;
hxd_Interactive.__name__ = "hxd.Interactive";
hxd_Interactive.__isInterface__ = true;
hxd_Interactive.prototype = {
	__class__: hxd_Interactive
};
var h2d_Interactive = function(width,height,parent,shape) {
	this.shapeY = 0;
	this.shapeX = 0;
	this.lastClickFrame = -1;
	this.mouseDownButton = -1;
	this.allowMultiClick = false;
	this.enableRightButton = false;
	this.propagateEvents = false;
	this.cancelEvents = false;
	this.cursor = hxd_Cursor.Button;
	h2d_Object.call(this,parent);
	this.width = width;
	this.height = height;
	this.shape = shape;
};
$hxClasses["h2d.Interactive"] = h2d_Interactive;
h2d_Interactive.__name__ = "h2d.Interactive";
h2d_Interactive.__interfaces__ = [hxd_Interactive];
h2d_Interactive.__super__ = h2d_Object;
h2d_Interactive.prototype = $extend(h2d_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h2d_Object.prototype.onAdd.call(this);
	}
	,draw: function(ctx) {
		this.maskedBounds = ctx.getCurrentRenderZone(this.maskedBounds);
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d_Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Object.prototype.onHierarchyMoved.call(this,parentChanged);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = this.getScene();
			if(this.scene != null) {
				this.scene.addEventTarget(this);
			}
		}
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		h2d_Object.prototype.onRemove.call(this);
	}
	,checkBounds: function(e) {
		switch(e.kind._hx_index) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.maskedBounds != null && this.checkBounds(e)) {
			var x = e.relX;
			var y = e.relY;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var pt = new h2d_col_PointImpl(x,y);
			this.localToGlobal(pt);
			if(pt.x < this.maskedBounds.xMin || pt.y < this.maskedBounds.yMin || pt.x > this.maskedBounds.xMax || pt.y > this.maskedBounds.yMax) {
				e.cancel = true;
				return;
			}
		}
		if(this.shape == null && this.isEllipse && this.checkBounds(e)) {
			var cx = this.width * 0.5;
			var cy = this.height * 0.5;
			var dx = (e.relX - cx) / cx;
			var dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
				if(e.cancel) {
					this.mouseDownButton = -1;
				}
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				var frame = hxd_Timer.frameCount;
				if(this.mouseDownButton == e.button && (this.lastClickFrame != frame || this.allowMultiClick)) {
					this.onClick(e);
					this.lastClickFrame = frame;
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			e.propagate = true;
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,calcAbsPos: function() {
		h2d_Object.prototype.calcAbsPos.call(this);
		this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h2d_Interactive
});
var h2d_Layers = function(parent) {
	h2d_Object.call(this,parent);
	this.layersIndexes = [];
	this.layerCount = 0;
};
$hxClasses["h2d.Layers"] = h2d_Layers;
h2d_Layers.__name__ = "h2d.Layers";
h2d_Layers.__super__ = h2d_Object;
h2d_Layers.prototype = $extend(h2d_Object.prototype,{
	addChild: function(s) {
		this.add(s,-1);
	}
	,add: function(s,layer,index) {
		if(index == null) {
			index = -1;
		}
		if(layer == null) {
			layer = -1;
		}
		if(s.parent == this) {
			var old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		if(layer == -1) {
			layer = this.layerCount == 0 ? 0 : this.layerCount - 1;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		if(index != -1) {
			if(layer == 0) {
				var b = this.layersIndexes[layer];
				var b1 = index > b ? b : index;
				h2d_Object.prototype.addChildAt.call(this,s,0 < b1 ? b1 : 0);
			} else if(index < 0) {
				h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer - 1]);
			} else {
				var a = this.layersIndexes[layer - 1] + index;
				var b = this.layersIndexes[layer];
				h2d_Object.prototype.addChildAt.call(this,s,a > b ? b : a);
			}
		} else {
			h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer]);
		}
		var _g = layer;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			this.layersIndexes[i]++;
		}
	}
	,addChildAt: function(s,index) {
		this.add(s,-1,index);
	}
	,removeChild: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				s.posChanged = true;
				if(s.parentContainer != null) {
					s.setParentContainer(null);
				}
				var k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				if(this.parentContainer != null) {
					this.parentContainer.contentChanged(this);
				}
				break;
			}
		}
	}
	,__class__: h2d_Layers
});
var h3d_impl_RenderContext = function() {
	this.shaderBuffers = new h3d_shader_Buffers();
	this.engine = h3d_Engine.CURRENT;
	this.frame = 0;
	this.time = 0.;
	this.elapsedTime = 1. / hxd_System.getDefaultFrameRate();
	this.textures = new h3d_impl_TextureCache();
	this.globals = new hxsl_Globals();
};
$hxClasses["h3d.impl.RenderContext"] = h3d_impl_RenderContext;
h3d_impl_RenderContext.__name__ = "h3d.impl.RenderContext";
h3d_impl_RenderContext.get = function() {
	return h3d_impl_RenderContext.inst;
};
h3d_impl_RenderContext.prototype = {
	setCurrent: function() {
		h3d_impl_RenderContext.inst = this;
	}
	,clearCurrent: function() {
		if(h3d_impl_RenderContext.inst == this) {
			h3d_impl_RenderContext.inst = null;
		} else {
			throw haxe_Exception.thrown("Context has changed");
		}
	}
	,fillRec: function(v,type,out,pos) {
		switch(type._hx_index) {
		case 1:
			out[pos] = v;
			return 1;
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			var _gsize = type.size;
			if(_gsize == 4) {
				var v1 = v;
				out[pos++] = v1.x;
				out[pos++] = v1.y;
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				return 4;
			} else {
				var n = _gsize;
				var v1 = v;
				out[pos++] = v1.x;
				out[pos++] = v1.y;
				if(n == 3) {
					out[pos++] = v1.z;
				}
				return n;
			}
			break;
		case 6:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = m._41;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = m._42;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = m._43;
			out[pos++] = m._14;
			out[pos++] = m._24;
			out[pos++] = m._34;
			out[pos++] = m._44;
			return 16;
		case 8:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = m._41;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = m._42;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = m._43;
			return 12;
		case 13:
			var vl = type.vl;
			var tot = 0;
			var _g = 0;
			while(_g < vl.length) {
				var vv = vl[_g];
				++_g;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 15:
			var _gt = type.t;
			var _gsize = type.size;
			switch(_gt._hx_index) {
			case 3:
				if(_gsize._hx_index == 0) {
					var len = _gsize.v;
					var v1 = v;
					var size = 0;
					var count = v1.length < len ? v1.length : len;
					var _g = 0;
					var _g1 = count;
					while(_g < _g1) {
						var i = _g++;
						out[pos++] = v1[i];
					}
					return len;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 5:
				if(_gt.size == 4) {
					if(_gt.t._hx_index == 1) {
						if(_gsize._hx_index == 0) {
							var len = _gsize.v;
							var v1 = v;
							var _g = 0;
							var _g1 = len;
							while(_g < _g1) {
								var i = _g++;
								var n = v1[i];
								if(n == null) {
									break;
								}
								out[pos++] = n.x;
								out[pos++] = n.y;
								out[pos++] = n.z;
								out[pos++] = n.w;
							}
							return len * 4;
						} else {
							throw haxe_Exception.thrown("assert " + Std.string(type));
						}
					} else if(_gsize._hx_index == 0) {
						var t = _gt;
						var len = _gsize.v;
						var v1 = v;
						var size = 0;
						var _g = 0;
						var _g1 = len;
						while(_g < _g1) {
							var i = _g++;
							var n = v1[i];
							if(n == null) {
								break;
							}
							size = this.fillRec(n,t,out,pos);
							pos += size;
						}
						return len * size;
					} else {
						throw haxe_Exception.thrown("assert " + Std.string(type));
					}
				} else if(_gsize._hx_index == 0) {
					var t = _gt;
					var len = _gsize.v;
					var v1 = v;
					var size = 0;
					var _g = 0;
					var _g1 = len;
					while(_g < _g1) {
						var i = _g++;
						var n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 8:
				if(_gsize._hx_index == 0) {
					var len = _gsize.v;
					var v1 = v;
					var _g = 0;
					var _g1 = len;
					while(_g < _g1) {
						var i = _g++;
						var m = v1[i];
						if(m == null) {
							break;
						}
						out[pos++] = m._11;
						out[pos++] = m._21;
						out[pos++] = m._31;
						out[pos++] = m._41;
						out[pos++] = m._12;
						out[pos++] = m._22;
						out[pos++] = m._32;
						out[pos++] = m._42;
						out[pos++] = m._13;
						out[pos++] = m._23;
						out[pos++] = m._33;
						out[pos++] = m._43;
					}
					return len * 12;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			default:
				if(_gsize._hx_index == 0) {
					var t = _gt;
					var len = _gsize.v;
					var v1 = v;
					var size = 0;
					var _g = 0;
					var _g1 = len;
					while(_g < _g1) {
						var i = _g++;
						var n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw haxe_Exception.thrown("assert " + Std.string(type));
		}
	}
	,shaderInfo: function(shaders,path) {
		var name = path.split(".").pop();
		while(shaders != null) {
			var inst = shaders.s.instance;
			var _g = 0;
			var _g1 = inst.shader.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.name == name) {
					return shaders.s.toString();
				}
			}
			shaders = shaders.next;
		}
		return "(not found)";
	}
	,fillGlobals: function(buf,s) {
		var _gthis = this;
		var g = s.vertex.globals;
		var ptr = buf.vertex.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				throw haxe_Exception.thrown("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
		if(s.fragment != null) {
			var g = s.fragment.globals;
			var ptr = buf.fragment.globals;
			while(g != null) {
				var v = _gthis.globals.map.h[g.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + g.path);
				}
				_gthis.fillRec(v,g.type,ptr,g.pos);
				g = g.next;
			}
		}
	}
	,fillParams: function(buf,s,shaders,compute) {
		if(compute == null) {
			compute = false;
		}
		var _gthis = this;
		var curInstance = -1;
		var curInstanceValue = null;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				switch(p.type._hx_index) {
				case 1:case 3:
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						if(compute) {
							++index;
						}
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				default:
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					if(compute) {
						++index1;
					}
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				v = p.type._hx_index == 17 ? v2.texture : v2;
			} else {
				var index2 = p.instance;
				var v3;
				if(curInstance == index2) {
					v3 = curInstanceValue;
				} else {
					var si2 = shaders;
					curInstance = index2;
					if(compute) {
						++index2;
					}
					while(--index2 > 0) si2 = si2.next;
					curInstanceValue = si2.s;
					v3 = curInstanceValue;
				}
				var v4 = v3.getParamValue(p.index);
				if(v4 == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				v = v4;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p = s1.textures;
		while(p != null) {
			var opt = !h3d_impl_RenderContext.STRICT;
			if(opt == null) {
				opt = false;
			}
			var t;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				t = p.type._hx_index == 17 ? v.texture : v;
			} else {
				var index = p.instance;
				var v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					var si = shaders;
					curInstance = index;
					if(compute) {
						++index;
					}
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				var v2 = v1.getParamValue(p.index);
				if(v2 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				t = v2;
			}
			if(p.pos < 0) {
				var arr = t;
				var _g = 0;
				var _g1 = -p.pos;
				while(_g < _g1) {
					var i = _g++;
					buf1.tex[tid++] = arr[i];
				}
			} else {
				buf1.tex[tid++] = t;
			}
			p = p.next;
		}
		var p = s1.buffers;
		var bid = 0;
		while(p != null) {
			var opt = !h3d_impl_RenderContext.STRICT;
			if(opt == null) {
				opt = false;
			}
			var b;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				b = p.type._hx_index == 17 ? v.texture : v;
			} else {
				var index = p.instance;
				var v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					var si = shaders;
					curInstance = index;
					if(compute) {
						++index;
					}
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				var v2 = v1.getParamValue(p.index);
				if(v2 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				b = v2;
			}
			buf1.buffers[bid++] = b;
			p = p.next;
		}
		if(s.fragment != null) {
			var buf1 = buf.fragment;
			var s1 = s.fragment;
			var p = s1.params;
			var ptr = buf1.params;
			while(p != null) {
				var v;
				if(p.perObjectGlobal == null) {
					switch(p.type._hx_index) {
					case 1:case 3:
						var index = p.instance;
						var i;
						if(curInstance == index) {
							i = curInstanceValue;
						} else {
							var si = shaders;
							curInstance = index;
							if(compute) {
								++index;
							}
							while(--index > 0) si = si.next;
							curInstanceValue = si.s;
							i = curInstanceValue;
						}
						ptr[p.pos] = i.getParamFloatValue(p.index);
						p = p.next;
						continue;
					default:
					}
					var index1 = p.instance;
					var v1;
					if(curInstance == index1) {
						v1 = curInstanceValue;
					} else {
						var si1 = shaders;
						curInstance = index1;
						if(compute) {
							++index1;
						}
						while(--index1 > 0) si1 = si1.next;
						curInstanceValue = si1.s;
						v1 = curInstanceValue;
					}
					v = v1.getParamValue(p.index);
					if(v == null) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
					}
				} else if(p.perObjectGlobal != null) {
					var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
					if(v2 == null) {
						throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
					}
					v = p.type._hx_index == 17 ? v2.texture : v2;
				} else {
					var index2 = p.instance;
					var v3;
					if(curInstance == index2) {
						v3 = curInstanceValue;
					} else {
						var si2 = shaders;
						curInstance = index2;
						if(compute) {
							++index2;
						}
						while(--index2 > 0) si2 = si2.next;
						curInstanceValue = si2.s;
						v3 = curInstanceValue;
					}
					var v4 = v3.getParamValue(p.index);
					if(v4 == null) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
					}
					v = v4;
				}
				_gthis.fillRec(v,p.type,ptr,p.pos);
				p = p.next;
			}
			var tid = 0;
			var p = s1.textures;
			while(p != null) {
				var opt = !h3d_impl_RenderContext.STRICT;
				if(opt == null) {
					opt = false;
				}
				var t;
				if(p.perObjectGlobal != null) {
					var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
					if(v == null) {
						throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
					}
					t = p.type._hx_index == 17 ? v.texture : v;
				} else {
					var index = p.instance;
					var v1;
					if(curInstance == index) {
						v1 = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						if(compute) {
							++index;
						}
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						v1 = curInstanceValue;
					}
					var v2 = v1.getParamValue(p.index);
					if(v2 == null && !opt) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
					}
					t = v2;
				}
				if(p.pos < 0) {
					var arr = t;
					var _g = 0;
					var _g1 = -p.pos;
					while(_g < _g1) {
						var i = _g++;
						buf1.tex[tid++] = arr[i];
					}
				} else {
					buf1.tex[tid++] = t;
				}
				p = p.next;
			}
			var p = s1.buffers;
			var bid = 0;
			while(p != null) {
				var opt = !h3d_impl_RenderContext.STRICT;
				if(opt == null) {
					opt = false;
				}
				var b;
				if(p.perObjectGlobal != null) {
					var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
					if(v == null) {
						throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
					}
					b = p.type._hx_index == 17 ? v.texture : v;
				} else {
					var index = p.instance;
					var v1;
					if(curInstance == index) {
						v1 = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						if(compute) {
							++index;
						}
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						v1 = curInstanceValue;
					}
					var v2 = v1.getParamValue(p.index);
					if(v2 == null && !opt) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
					}
					b = v2;
				}
				buf1.buffers[bid++] = b;
				p = p.next;
			}
		}
	}
	,__class__: h3d_impl_RenderContext
};
var h2d_RenderContext = function(scene) {
	this.renderZoneIndex = 0;
	this.renderZoneStack = [];
	this.currentCamera = null;
	this.tmpBounds = new h2d_col_Bounds();
	this.defaultSmooth = false;
	this.globalAlpha = 1.;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.bufPos = 0;
	this.output = new h3d_pass_OutputShader();
	this.pass = new h3d_mat_Pass("",null);
	this.pass.depth(true,h3d_mat_Compare.Always);
	this.pass.set_culling(h3d_mat_Face.None);
	this.baseShader = new h3d_shader_Base2d();
	this.baseShader.setPriority(100);
	this.baseShader.zValue__ = 0.;
	this.baseShaderList = new hxsl_ShaderList(this.baseShader);
	this.targetsStack = [];
	this.targetsStackIndex = 0;
	this.cameraStack = [];
	this.cameraStackIndex = 0;
	this.filterStack = [];
	this.filterStackIndex = 0;
};
$hxClasses["h2d.RenderContext"] = h2d_RenderContext;
h2d_RenderContext.__name__ = "h2d.RenderContext";
h2d_RenderContext.__super__ = h3d_impl_RenderContext;
h2d_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	begin: function() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.viewA = this.scene.viewportA;
		this.viewB = 0;
		this.viewC = 0;
		this.viewD = this.scene.viewportD;
		this.viewX = this.scene.viewportX;
		this.viewY = this.scene.viewportY;
		this.setCurrent();
		this.targetFlipY = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) ? -1 : 1;
		this.baseFlipY = this.engine.getCurrentTarget() != null ? this.targetFlipY : 1;
		this.inFilter = null;
		this.globals.set("time",this.time);
		this.globals.set("global.time",this.time);
		var _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / this.engine.width;
		var y = 0.5 / this.engine.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var _this = this.baseShader.viewportA__;
		var x = this.scene.viewportA;
		var y = 0;
		var z = this.scene.viewportX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = 0;
		var y = this.scene.viewportD * -this.baseFlipY;
		var z = this.scene.viewportY * -this.baseFlipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.filterMatrixA__;
		var x = 1;
		var y = 0;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.filterMatrixB__;
		var x = 0;
		var y = 1;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin();
	}
	,initShaders: function(shaders) {
		this.needInitShaders = false;
		this.currentShaders = shaders;
		this.compiledShader = this.output.compileShaders(this.globals,shaders);
		var buffers = this.shaderBuffers;
		var s = this.compiledShader;
		buffers.vertex.grow(s.vertex);
		if(s.fragment != null) {
			buffers.fragment.grow(s.fragment);
		}
		this.fillGlobals(buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(buffers,0);
	}
	,end: function() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		this.clearCurrent();
		if(this.targetsStackIndex != 0) {
			throw haxe_Exception.thrown("Missing popTarget()");
		}
		if(this.cameraStackIndex != 0) {
			throw haxe_Exception.thrown("Missing popCamera()");
		}
	}
	,pushCamera: function(cam) {
		var entry = this.cameraStack[this.cameraStackIndex++];
		if(entry == null) {
			entry = { va : 0, vb : 0, vc : 0, vd : 0, vx : 0, vy : 0, camera : null};
			this.cameraStack.push(entry);
		}
		var tmpA = this.viewA;
		var tmpB = this.viewB;
		var tmpC = this.viewC;
		var tmpD = this.viewD;
		entry.va = tmpA;
		entry.vb = tmpB;
		entry.vc = tmpC;
		entry.vd = tmpD;
		entry.vx = this.viewX;
		entry.vy = this.viewY;
		entry.camera = this.currentCamera;
		this.currentCamera = cam;
		this.viewA = cam.matA * tmpA + cam.matB * tmpC;
		this.viewB = cam.matA * tmpB + cam.matB * tmpD;
		this.viewC = cam.matC * tmpA + cam.matD * tmpC;
		this.viewD = cam.matC * tmpB + cam.matD * tmpD;
		this.viewX = cam.absX * tmpA + cam.absY * tmpC + this.viewX;
		this.viewY = cam.absX * tmpB + cam.absY * tmpD + this.viewY;
		var flipY = this.curTarget != null ? -this.targetFlipY : -this.baseFlipY;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
	}
	,popCamera: function() {
		if(this.cameraStackIndex == 0) {
			throw haxe_Exception.thrown("Too many popCamera()");
		}
		var inf = this.cameraStack[--this.cameraStackIndex];
		this.viewA = inf.va;
		this.viewB = inf.vb;
		this.viewC = inf.vc;
		this.viewD = inf.vd;
		this.viewX = inf.vx;
		this.viewY = inf.vy;
		this.currentCamera = inf.camera;
		inf.camera = null;
		var flipY = this.curTarget != null ? -this.targetFlipY : -this.baseFlipY;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
	}
	,pushFilter: function(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.inFilter = this.filterStack[this.filterStackIndex++];
		if(this.inFilter == null) {
			this.inFilter = { spr : null, scaleX : 1, scaleY : 1};
			this.filterStack.push(this.inFilter);
		}
		this.inFilter.spr = spr;
		this.inFilter.scaleX = 1;
		this.inFilter.scaleY = 1;
		return true;
	}
	,setFilterScale: function(scaleX,scaleY) {
		if(this.inFilter != null) {
			this.inFilter.scaleX = scaleX;
			this.inFilter.scaleY = scaleY;
		}
	}
	,popFilter: function() {
		this.inFilter.spr = null;
		this.filterStackIndex--;
		if(this.filterStackIndex > 0) {
			this.inFilter = this.filterStack[this.filterStackIndex - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(this.filterStack[this.filterStackIndex].spr);
			}
		}
	}
	,pushTarget: function(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		var entry = this.targetsStack[this.targetsStackIndex++];
		if(entry == null) {
			entry = { t : null, va : 0, vb : 0, vc : 0, vd : 0, vx : 0, vy : 0, hasRZ : false, rzX : 0, rzY : 0, rzW : 0, rzH : 0};
			this.targetsStack.push(entry);
		}
		entry.t = this.curTarget;
		entry.va = this.viewA;
		entry.vb = this.viewB;
		entry.vc = this.viewC;
		entry.vd = this.viewD;
		entry.vx = this.viewX;
		entry.vy = this.viewY;
		entry.hasRZ = this.hasRenderZone;
		entry.rzX = this.renderX;
		entry.rzY = this.renderY;
		entry.rzW = this.renderW;
		entry.rzH = this.renderH;
		if(width < 0) {
			width = t == null ? this.scene.width : t.width;
		}
		if(height < 0) {
			height = t == null ? this.scene.height : t.height;
		}
		this.viewA = 2 / width;
		this.viewB = 0;
		this.viewC = 0;
		this.viewD = 2 / height;
		this.viewX = -1 - startX * this.viewA;
		this.viewY = -1 - startY * this.viewD;
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * -this.targetFlipY;
		var y = this.viewD * -this.targetFlipY;
		var z = this.viewY * -this.targetFlipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		this.curTarget = t;
		this.currentBlend = null;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,popTarget: function() {
		if(this.targetsStackIndex <= 0) {
			throw haxe_Exception.thrown("Too many popTarget()");
		}
		this.engine.popTarget();
		var tinf = this.targetsStack[--this.targetsStackIndex];
		var t = this.curTarget = tinf.t;
		this.viewA = tinf.va;
		this.viewB = tinf.vb;
		this.viewC = tinf.vc;
		this.viewD = tinf.vd;
		this.viewX = tinf.vx;
		this.viewY = tinf.vy;
		var flipY = t == null ? -this.baseFlipY : -this.targetFlipY;
		this.initShaders(this.baseShaderList);
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		if(tinf.hasRZ) {
			this.setRZ(tinf.rzX,tinf.rzY,tinf.rzW,tinf.rzH);
		}
	}
	,pushRenderZone: function(x,y,w,h) {
		var inf = this.renderZoneStack[this.renderZoneIndex++];
		if(inf == null) {
			inf = { hasRZ : this.hasRenderZone, x : this.renderX, y : this.renderY, w : this.renderW, h : this.renderH};
			this.renderZoneStack[this.renderZoneIndex - 1] = inf;
		} else if(this.hasRenderZone) {
			inf.hasRZ = true;
			inf.x = this.renderX;
			inf.y = this.renderY;
			inf.w = this.renderW;
			inf.h = this.renderH;
		} else {
			inf.hasRZ = false;
		}
		this.setRZ(x,y,w,h);
	}
	,popRenderZone: function() {
		if(this.renderZoneIndex == 0) {
			throw haxe_Exception.thrown("Too many popRenderZone()");
		}
		var inf = this.renderZoneStack[--this.renderZoneIndex];
		if(inf.hasRZ) {
			this.setRZ(inf.x,inf.y,inf.w,inf.h);
		} else {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,getCurrentRenderZone: function(bounds) {
		if(!this.hasRenderZone) {
			return null;
		}
		if(bounds == null) {
			bounds = new h2d_col_Bounds();
		}
		var x = this.renderX;
		var y = this.renderY;
		bounds.xMin = x;
		bounds.yMin = y;
		bounds.xMax = x + this.renderW;
		bounds.yMax = y + this.renderH;
		return bounds;
	}
	,setRZ: function(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		var scaleX = this.scene.viewportA * this.engine.width / 2;
		var scaleY = this.scene.viewportD * this.engine.height / 2;
		if(this.inFilter != null) {
			var fa = this.baseShader.filterMatrixA__;
			var fb = this.baseShader.filterMatrixB__;
			var x2 = x + w;
			var y2 = y + h;
			var rx1 = x * fa.x + y * fa.y + fa.z;
			var ry1 = x * fb.x + y * fb.y + fb.z;
			var rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			var ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone(x * scaleX + (this.scene.viewportX + 1) * (this.engine.width / 2) + 1e-10 | 0,y * scaleY + (this.scene.viewportY + 1) * (this.engine.height / 2) + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	,drawScene: function() {
		this.scene.drawRec(this);
	}
	,beforeDraw: function() {
		if(this.texture == null) {
			this.texture = h3d_mat_Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap && (this.currentObj.filter == null || this.inFilter != null) ? h3d_mat_Wrap.Repeat : h3d_mat_Wrap.Clamp);
		var blend = this.currentObj.blendMode;
		if(this.inFilter != null && this.inFilter.spr == this.currentObj && blend == h2d_BlendMode.Erase) {
			blend = h2d_BlendMode.Add;
		}
		if(this.inFilterBlend != null) {
			blend = this.inFilterBlend;
		}
		if(blend != this.currentBlend) {
			this.currentBlend = blend;
			this.pass.setBlendMode(blend);
			if(blend == h2d_BlendMode.Alpha || blend == h2d_BlendMode.Add) {
				this.pass.set_blendAlphaSrc(h3d_mat_Blend.One);
				if(this.inFilterBlend != null) {
					this.pass.set_blendSrc(h3d_mat_Blend.One);
				}
			}
		}
		var buffers = this.shaderBuffers;
		this.fillParams(buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(buffers,1);
		this.engine.uploadShaderBuffers(buffers,2);
		this.engine.uploadShaderBuffers(buffers,3);
	}
	,beginDrawBatchState: function(obj) {
		if(!this.beginDraw(obj,null,true)) {
			return false;
		}
		if(this.inFilter != null && this.inFilter.spr == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = obj.matA;
		var y = obj.matC;
		var z = obj.absX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = obj.matB;
		var y = obj.matD;
		var z = obj.absY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		return true;
	}
	,drawTile: function(obj,tile) {
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(this.inFilter != null) {
			var f1 = this.baseShader.filterMatrixA__;
			var f2 = this.baseShader.filterMatrixB__;
			var tmpA = obj.matA * f1.x + obj.matB * f1.y;
			var tmpB = obj.matA * f2.x + obj.matB * f2.y;
			var tmpC = obj.matC * f1.x + obj.matD * f1.y;
			var tmpD = obj.matC * f2.x + obj.matD * f2.y;
			var tmpX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			var tmpY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
			matA = tmpA * this.viewA + tmpB * this.viewC;
			matB = tmpA * this.viewB + tmpB * this.viewD;
			matC = tmpC * this.viewA + tmpD * this.viewC;
			matD = tmpC * this.viewB + tmpD * this.viewD;
			absX = tmpX * this.viewA + tmpY * this.viewC + this.viewX;
			absY = tmpX * this.viewB + tmpY * this.viewD + this.viewY;
		} else {
			matA = obj.matA * this.viewA + obj.matB * this.viewC;
			matB = obj.matA * this.viewB + obj.matB * this.viewD;
			matC = obj.matC * this.viewA + obj.matD * this.viewC;
			matD = obj.matC * this.viewB + obj.matD * this.viewD;
			absX = obj.absX * this.viewA + obj.absY * this.viewC + this.viewX;
			absY = obj.absX * this.viewB + obj.absY * this.viewD + this.viewY;
		}
		if(matB == 0 && matC == 0) {
			var tx = tile.dx + tile.width * 0.5;
			var ty = tile.dy + tile.height * 0.5;
			var a = matA < 0 ? -matA : matA;
			var b = matD < 0 ? -matD : matD;
			var tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			var cx = absX + tx * matA;
			var cy = absY + ty * matD;
			if(cx + tr < -1 || cx - tr > 1 || cy + tr < -1 || cy - tr > 1) {
				return false;
			}
		} else {
			var xMin = 1e20;
			var yMin = 1e20;
			var xMax = -1e20;
			var yMax = -1e20;
			var hw = tile.width * 0.5;
			var hh = tile.height * 0.5;
			var px = tile.dx * matA + tile.dy * matC;
			var py = tile.dx * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var px = (x + tile.dx) * matA + tile.dy * matC;
			var py = (x + tile.dx) * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var y = tile.height;
			var px = tile.dx * matA + (y + tile.dy) * matC;
			var py = tile.dx * matB + (y + tile.dy) * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var y = tile.height;
			var px = (x + tile.dx) * matA + (y + tile.dy) * matC;
			var py = (x + tile.dx) * matB + (y + tile.dy) * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			if(absX + xMax < -1 || absY + yMax < -1 || absX + xMin > 1 || absY + yMin > 1) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter != null && this.inFilter.spr == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = tile.width * obj.matA;
		var y = tile.height * obj.matC;
		var z = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = tile.width * obj.matB;
		var y = tile.height * obj.matD;
		var z = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.uvPos__;
		var x = tile.u;
		var y = tile.v;
		var z = tile.u2 - tile.u;
		var w = tile.v2 - tile.v;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
		this.beforeDraw();
		if(this.fixedBuffer == null || this.fixedBuffer.vbuf == null) {
			this.fixedBuffer = new h3d_Buffer(4,hxd_BufferFormat.get_XY_UV_RGBA());
			var k = hxd__$FloatBuffer_Float32Expand._new(0);
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			this.fixedBuffer.uploadFloats(k,0,4);
		}
		var _this = this.engine;
		var b = this.fixedBuffer;
		_this.renderBuffer(b,_this.mem.getQuadIndexes(b.vertices),2,0,-1);
		return true;
	}
	,beginDraw: function(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		var stride = 8;
		var shaderChanged = this.needInitShaders;
		var paramsChanged = false;
		var objShaders = obj.shaders;
		var curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			var s = objShaders.s;
			var t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			var prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			var _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			var _this = this.baseShader;
			_this.constModified = true;
			_this.isRelative__ = isRelative;
			var _this = this.baseShader;
			_this.constModified = true;
			_this.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw haxe_Exception.thrown("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = stride;
		this.currentObj = obj;
		return true;
	}
	,setCurrent: function() {
		h3d_impl_RenderContext.prototype.setCurrent.call(this);
		this.needInitShaders = true;
	}
	,__class__: h2d_RenderContext
});
var h2d_ScaleModeAlign = $hxEnums["h2d.ScaleModeAlign"] = { __ename__:true,__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Center: {_hx_name:"Center",_hx_index:2,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Top: {_hx_name:"Top",_hx_index:3,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:4,__enum__:"h2d.ScaleModeAlign",toString:$estr}
};
h2d_ScaleModeAlign.__constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
h2d_ScaleModeAlign.__empty_constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
var h2d_ScaleMode = $hxEnums["h2d.ScaleMode"] = { __ename__:true,__constructs__:null
	,Resize: {_hx_name:"Resize",_hx_index:0,__enum__:"h2d.ScaleMode",toString:$estr}
	,Stretch: ($_=function(width,height) { return {_hx_index:1,width:width,height:height,__enum__:"h2d.ScaleMode",toString:$estr,__params__:function(){ return [this.width,this.height];}}; },$_._hx_name="Stretch",$_)
	,LetterBox: ($_=function(width,height,integerScale,horizontalAlign,verticalAlign) { return {_hx_index:2,width:width,height:height,integerScale:integerScale,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr,__params__:function(){ return [this.width,this.height,this.integerScale,this.horizontalAlign,this.verticalAlign];}}; },$_._hx_name="LetterBox",$_)
	,Fixed: ($_=function(width,height,zoom,horizontalAlign,verticalAlign) { return {_hx_index:3,width:width,height:height,zoom:zoom,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr,__params__:function(){ return [this.width,this.height,this.zoom,this.horizontalAlign,this.verticalAlign];}}; },$_._hx_name="Fixed",$_)
	,Zoom: ($_=function(level) { return {_hx_index:4,level:level,__enum__:"h2d.ScaleMode",toString:$estr,__params__:function(){ return [this.level];}}; },$_._hx_name="Zoom",$_)
	,AutoZoom: ($_=function(minWidth,minHeight,integerScaling) { return {_hx_index:5,minWidth:minWidth,minHeight:minHeight,integerScaling:integerScaling,__enum__:"h2d.ScaleMode",toString:$estr,__params__:function(){ return [this.minWidth,this.minHeight,this.integerScaling];}}; },$_._hx_name="AutoZoom",$_)
};
h2d_ScaleMode.__constructs__ = [h2d_ScaleMode.Resize,h2d_ScaleMode.Stretch,h2d_ScaleMode.LetterBox,h2d_ScaleMode.Fixed,h2d_ScaleMode.Zoom,h2d_ScaleMode.AutoZoom];
h2d_ScaleMode.__empty_constructs__ = [h2d_ScaleMode.Resize];
var hxd_InteractiveScene = function() { };
$hxClasses["hxd.InteractiveScene"] = hxd_InteractiveScene;
hxd_InteractiveScene.__name__ = "hxd.InteractiveScene";
hxd_InteractiveScene.__isInterface__ = true;
hxd_InteractiveScene.prototype = {
	__class__: hxd_InteractiveScene
};
var h2d_Scene = function() {
	this.scaleMode = h2d_ScaleMode.Resize;
	h2d_Layers.call(this,null);
	var e = h3d_Engine.CURRENT;
	this.ctx = new h2d_RenderContext(this);
	this._cameras = [];
	new h2d_Camera(this);
	this.set_interactiveCamera(this._cameras[0]);
	this.width = e.width;
	this.height = e.height;
	this.viewportA = 2 / e.width;
	this.viewportD = 2 / e.height;
	this.viewportX = -1;
	this.viewportY = -1;
	this.viewportScaleX = 1;
	this.viewportScaleY = 1;
	this.offsetX = 0;
	this.offsetY = 0;
	this.interactive = [];
	this.eventListeners = [];
	this.shapePoint = new h2d_col_PointImpl(0.,0.);
	this.window = hxd_Window.getInstance();
	this.posChanged = true;
};
$hxClasses["h2d.Scene"] = h2d_Scene;
h2d_Scene.__name__ = "h2d.Scene";
h2d_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h2d_Scene.__super__ = h2d_Layers;
h2d_Scene.prototype = $extend(h2d_Layers.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,set_interactiveCamera: function(cam) {
		if(cam == null) {
			throw haxe_Exception.thrown("Interactive cammera cannot be null!");
		}
		if(cam.scene != this) {
			this.addCamera(cam);
		}
		return this.interactiveCamera = cam;
	}
	,addCamera: function(cam,pos) {
		if(cam.scene != null) {
			cam.scene.removeCamera(cam);
		}
		cam.scene = this;
		cam.posChanged = true;
		if(pos != null) {
			this._cameras.splice(pos,0,cam);
		} else {
			this._cameras.push(cam);
		}
	}
	,removeCamera: function(cam) {
		if(cam == this.interactiveCamera) {
			throw haxe_Exception.thrown("Current interactive Camera cannot be removed from camera list!");
		}
		cam.scene = null;
		HxOverrides.remove(this._cameras,cam);
	}
	,checkResize: function() {
		var _gthis = this;
		var engine = h3d_Engine.CURRENT;
		if(engine == null) {
			return;
		}
		var _g = this.scaleMode;
		switch(_g._hx_index) {
		case 0:
			var w = engine.width;
			var h = engine.height;
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = 1;
			_gthis.viewportScaleY = 1;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 1:
			var _width = _g.width;
			var _height = _g.height;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = engine.width / _width;
			_gthis.viewportScaleY = engine.height / _height;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 2:
			var _width = _g.width;
			var _height = _g.height;
			var integerScale = _g.integerScale;
			var horizontalAlign = _g.horizontalAlign;
			var verticalAlign = _g.verticalAlign;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			var a = engine.width / _width;
			var b = engine.height / _height;
			var zoom = a > b ? b : a;
			if(integerScale) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			_gthis.viewportA = zoom * 2 / engine.width;
			_gthis.viewportD = zoom * 2 / engine.height;
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.viewportX = -1;
				_gthis.offsetX = 0;
				break;
			case 1:
				_gthis.viewportX = 1 - _gthis.width * _gthis.viewportA;
				_gthis.offsetX = engine.width - _gthis.width * zoom;
				break;
			default:
				_gthis.viewportX = Math.floor((engine.width - _gthis.width * zoom) / (zoom * 2)) * _gthis.viewportA - 1.;
				_gthis.offsetX = Math.floor((engine.width - _gthis.width * zoom) / 2);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.viewportY = -1;
				_gthis.offsetY = 0;
				break;
			case 4:
				_gthis.viewportY = 1 - _gthis.height * _gthis.viewportD;
				_gthis.offsetY = engine.height - _gthis.height * zoom;
				break;
			default:
				_gthis.viewportY = Math.floor((engine.height - _gthis.height * zoom) / (zoom * 2)) * _gthis.viewportD - 1.;
				_gthis.offsetY = Math.floor((engine.height - _gthis.height * zoom) / 2);
			}
			break;
		case 3:
			var _width = _g.width;
			var _height = _g.height;
			var zoom = _g.zoom;
			var horizontalAlign = _g.horizontalAlign;
			var verticalAlign = _g.verticalAlign;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			_gthis.viewportA = zoom * 2 / engine.width;
			_gthis.viewportD = zoom * 2 / engine.height;
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.viewportX = -1;
				_gthis.offsetX = 0;
				break;
			case 1:
				_gthis.viewportX = 1 - _gthis.width * _gthis.viewportA;
				_gthis.offsetX = engine.width - _gthis.width * zoom;
				break;
			default:
				_gthis.viewportX = Math.floor((engine.width - _gthis.width * zoom) / (zoom * 2)) * _gthis.viewportA - 1.;
				_gthis.offsetX = Math.floor((engine.width - _gthis.width * zoom) / 2);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.viewportY = -1;
				_gthis.offsetY = 0;
				break;
			case 4:
				_gthis.viewportY = 1 - _gthis.height * _gthis.viewportD;
				_gthis.offsetY = engine.height - _gthis.height * zoom;
				break;
			default:
				_gthis.viewportY = Math.floor((engine.height - _gthis.height * zoom) / (zoom * 2)) * _gthis.viewportD - 1.;
				_gthis.offsetY = Math.floor((engine.height - _gthis.height * zoom) / 2);
			}
			break;
		case 4:
			var level = _g.level;
			var w = Math.ceil(engine.width / level);
			var h = Math.ceil(engine.height / level);
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = level;
			_gthis.viewportScaleY = level;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 5:
			var minWidth = _g.minWidth;
			var minHeight = _g.minHeight;
			var integerScaling = _g.integerScaling;
			var a = engine.width / minWidth;
			var b = engine.height / minHeight;
			var zoom = a > b ? b : a;
			if(integerScaling) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			var w = Math.ceil(engine.width / zoom);
			var h = Math.ceil(engine.height / zoom);
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		}
	}
	,dispatchListeners: function(event) {
		this.screenToViewport(event);
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,isInteractiveVisible: function(i) {
		var s = i;
		while(s != this) {
			if(s == null || !s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	,screenToViewport: function(e) {
		this.interactiveCamera.eventToCamera(e);
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		this.screenToViewport(event);
		var dx = event.relX - i.absX;
		var dy = event.relY - i.absY;
		var rx = (dx * i.matD - dy * i.matC) * i.invDet;
		var ry = (dy * i.matA - dx * i.matB) * i.invDet;
		event.relX = rx;
		event.relY = ry;
		i.handleEvent(event);
	}
	,handleEvent: function(event,last) {
		this.screenToViewport(event);
		var ex = event.relX;
		var ey = event.relY;
		var index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		var pt = this.shapePoint;
		var _g = index;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var idx = _g++;
			var i = this.interactive[idx];
			if(i == null) {
				break;
			}
			if(i.invDet == 0) {
				continue;
			}
			var dx = ex - i.absX;
			var dy = ey - i.absY;
			var rx = (dx * i.matD - dy * i.matC) * i.invDet;
			var ry = (dy * i.matA - dx * i.matB) * i.invDet;
			if(i.shape != null) {
				var _this = pt;
				var x = rx + i.shapeX;
				var y = ry + i.shapeY;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				if(!i.shape.contains(pt)) {
					continue;
				}
			} else if(ry < 0 || rx < 0 || rx >= i.width || ry >= i.height) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = rx;
			event.relY = ry;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	,addEventTarget: function(i) {
		var i1 = i;
		var lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		var level = lv;
		var _g = 0;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var index = _g++;
			var i1 = i;
			var i2 = this.interactive[index];
			var lv1 = level;
			var i3 = i2;
			var lv = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv;
			}
			var lv2 = lv;
			var p1 = i1;
			var p2 = i2;
			while(lv1 > lv2) {
				i1 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv2 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv2;
			}
			while(p1 != p2) {
				i1 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			var id = -1;
			var _g2 = 0;
			var _g3 = p1.children.length;
			while(_g2 < _g3) {
				var k = _g2++;
				if(p1.children[k] == i1) {
					id = k;
					break;
				}
			}
			var tmp = id;
			var id1 = -1;
			var _g4 = 0;
			var _g5 = p2.children.length;
			while(_g4 < _g5) {
				var k1 = _g4++;
				if(p2.children[k1] == i2) {
					id1 = k1;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	,removeEventTarget: function(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,setElapsedTime: function(v) {
		this.ctx.elapsedTime = v;
	}
	,render: function(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.mark("s2d");
		this.sync(this.ctx);
		if(this.children.length != 0) {
			this.ctx.begin();
			this.ctx.drawScene();
			this.ctx.end();
		}
		this.mark("vsync");
	}
	,mark: function(name) {
	}
	,sync: function(ctx) {
		var forceCamSync = this.posChanged;
		if(!this.allocated) {
			this.onAdd();
		}
		h2d_Layers.prototype.sync.call(this,ctx);
		var _g = 0;
		var _g1 = this._cameras;
		while(_g < _g1.length) {
			var cam = _g1[_g];
			++_g;
			cam.sync(ctx,forceCamSync);
		}
	}
	,clipBounds: function(ctx,bounds,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1.;
		}
		if(scaleX == null) {
			scaleX = 1.;
		}
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			var tmpA = this.matA * f1.x + this.matB * f1.y;
			var tmpB = this.matA * f2.x + this.matB * f2.y;
			var tmpC = this.matC * f1.x + this.matD * f1.y;
			var tmpD = this.matC * f2.x + this.matD * f2.y;
			var tmpX = this.absX * f1.x + this.absY * f1.y + f1.z;
			var tmpY = this.absX * f2.x + this.absY * f2.y + f2.z;
			matA = (tmpA * ctx.viewA + tmpB * ctx.viewC) / scaleX;
			matB = (tmpA * ctx.viewB + tmpB * ctx.viewD) / scaleY;
			matC = (tmpC * ctx.viewA + tmpD * ctx.viewC) / scaleX;
			matD = (tmpC * ctx.viewB + tmpD * ctx.viewD) / scaleY;
			absX = tmpX * ctx.viewA + tmpY * ctx.viewC + ctx.viewX;
			absY = tmpX * ctx.viewB + tmpY * ctx.viewD + ctx.viewY;
		} else {
			matA = (this.matA * ctx.viewA + this.matB * ctx.viewC) / scaleX;
			matB = (this.matA * ctx.viewB + this.matB * ctx.viewD) / scaleY;
			matC = (this.matC * ctx.viewA + this.matD * ctx.viewC) / scaleX;
			matD = (this.matC * ctx.viewB + this.matD * ctx.viewD) / scaleY;
			absX = this.absX * ctx.viewA + this.absY * ctx.viewC + ctx.viewX;
			absY = this.absX * ctx.viewB + this.absY * ctx.viewD + ctx.viewY;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		bounds.xMin = ((-1 - absX) * matD + (absY + 1) * matC) * invDet;
		bounds.yMin = ((absX + 1) * matB + (-1 - absY) * matA) * invDet;
		bounds.xMax = ((1 - absX) * matD + (absY - 1) * matC) * invDet;
		bounds.yMax = ((absX - 1) * matB + (1 - absY) * matA) * invDet;
	}
	,drawContent: function(ctx) {
		if(ctx.front2back) {
			var _g = 0;
			var _g1 = this._cameras;
			while(_g < _g1.length) {
				var cam = _g1[_g];
				++_g;
				if(!cam.visible) {
					continue;
				}
				var i = this.children.length;
				var l = this.layerCount;
				cam.enter(ctx);
				while(l-- > 0) {
					var top = l == 0 ? 0 : this.layersIndexes[l - 1];
					if(cam.layerVisible(l)) {
						while(i >= top) this.children[i--].drawRec(ctx);
					} else {
						i = top - 1;
					}
				}
				cam.exit(ctx);
			}
			this.draw(ctx);
		} else {
			this.draw(ctx);
			var _g = 0;
			var _g1 = this._cameras;
			while(_g < _g1.length) {
				var cam = _g1[_g];
				++_g;
				if(!cam.visible) {
					continue;
				}
				var i = 0;
				var l = 0;
				cam.enter(ctx);
				while(l < this.layerCount) {
					var top = this.layersIndexes[l++];
					if(cam.layerVisible(l - 1)) {
						while(i < top) this.children[i++].drawRec(ctx);
					} else {
						i = top;
					}
				}
				cam.exit(ctx);
			}
		}
	}
	,onAdd: function() {
		this.checkResize();
		h2d_Layers.prototype.onAdd.call(this);
		this.window.addResizeEvent($bind(this,this.checkResize));
	}
	,onRemove: function() {
		h2d_Layers.prototype.onRemove.call(this);
		this.window.removeResizeEvent($bind(this,this.checkResize));
	}
	,__class__: h2d_Scene
});
var h2d_Align = $hxEnums["h2d.Align"] = { __ename__:true,__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"h2d.Align",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"h2d.Align",toString:$estr}
	,Center: {_hx_name:"Center",_hx_index:2,__enum__:"h2d.Align",toString:$estr}
	,MultilineRight: {_hx_name:"MultilineRight",_hx_index:3,__enum__:"h2d.Align",toString:$estr}
	,MultilineCenter: {_hx_name:"MultilineCenter",_hx_index:4,__enum__:"h2d.Align",toString:$estr}
};
h2d_Align.__constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
h2d_Align.__empty_constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
var h2d_Text = function(font,parent) {
	this.realMaxWidth = -1;
	this.lineBreak = true;
	this.lineSpacing = 0;
	this.letterSpacing = 0;
	h2d_Drawable.call(this,parent);
	this.set_font(font);
	this.set_textAlign(h2d_Align.Left);
	this.set_text("");
	this.currentText = "";
	this.set_textColor(16777215);
};
$hxClasses["h2d.Text"] = h2d_Text;
h2d_Text.__name__ = "h2d.Text";
h2d_Text.__super__ = h2d_Drawable;
h2d_Text.prototype = $extend(h2d_Drawable.prototype,{
	set_font: function(font) {
		if(this.font == font) {
			return font;
		}
		this.font = font;
		if(font != null) {
			var _g = font.type;
			switch(_g._hx_index) {
			case 0:
				if(this.sdfShader != null) {
					this.removeShader(this.sdfShader);
					this.sdfShader = null;
				}
				break;
			case 1:
				var channel = _g.channel;
				var alphaCutoff = _g.alphaCutoff;
				var smoothing = _g.smoothing;
				if(this.sdfShader == null) {
					this.sdfShader = new h3d_shader_SignedDistanceField();
					this.addShader(this.sdfShader);
				}
				if(this.smooth == null) {
					this.smooth = true;
				}
				this.sdfShader.alphaCutoff__ = alphaCutoff;
				this.sdfShader.smoothing__ = smoothing;
				var _this = this.sdfShader;
				_this.constModified = true;
				_this.channel__ = channel;
				var _this = this.sdfShader;
				_this.constModified = true;
				_this.autoSmoothing__ = smoothing == -1;
				break;
			}
		}
		if(this.glyphs != null) {
			var _this = this.glyphs;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		this.glyphs = new h2d_TileGroup(font == null ? null : font.tile,this);
		this.glyphs.set_visible(false);
		this.rebuild();
		return font;
	}
	,set_textAlign: function(a) {
		if(this.textAlign == a) {
			return a;
		}
		this.textAlign = a;
		this.rebuild();
		return a;
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.rebuild();
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
	}
	,draw: function(ctx) {
		if(this.glyphs == null) {
			this.emitTile(ctx,h2d_Tile.fromColor(16711935,16,16));
			return;
		}
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			var oldR = this.color.x;
			var oldG = this.color.y;
			var oldB = this.color.z;
			var oldA = this.color.w;
			var _this = this.color;
			var c = this.dropShadow.color;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			this.color.w = this.dropShadow.alpha * oldA;
			this.glyphs.drawWith(ctx,this);
			this.absX = oldX;
			this.absY = oldY;
			var _this = this.color;
			var x = oldR;
			var y = oldG;
			var z = oldB;
			var w = oldA;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,set_text: function(t) {
		var t1 = t == null ? "null" : t;
		if(t1 == this.text) {
			return t1;
		}
		this.text = t1;
		this.textChanged = true;
		this.validateText();
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t1;
	}
	,validateText: function() {
	}
	,rebuild: function() {
		this.calcDone = false;
		this.needsRebuild = true;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,splitRawText: function(text,leftMargin,afterData,font,sizes,prevChar) {
		if(prevChar == null) {
			prevChar = -1;
		}
		if(afterData == null) {
			afterData = 0.;
		}
		if(leftMargin == null) {
			leftMargin = 0.;
		}
		var maxWidth = this.realMaxWidth;
		if(maxWidth < 0) {
			if(sizes == null) {
				return text;
			} else {
				maxWidth = Infinity;
			}
		}
		if(font == null) {
			font = this.font;
		}
		var lines = [];
		var restPos = 0;
		var x = leftMargin;
		var wLastSep = 0.;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = text.charCodeAt(i);
			var c = font.glyphs.h[cc];
			if(c == null) {
				c = font.charset.resolveChar(cc,font.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
				}
			}
			var e = c;
			var newline = cc == 10;
			var esize = e.width + e.getKerningOffset(prevChar);
			var isComplement = i < text.length - 1 && font.charset.isComplementChar(text.charCodeAt(i + 1));
			if(font.charset.isBreakChar(cc) && !isComplement) {
				if(lines.length == 0 && leftMargin > 0 && x > maxWidth) {
					lines.push("");
					if(sizes != null) {
						sizes.push(leftMargin);
					}
					x -= leftMargin;
				}
				var size = x + esize + this.letterSpacing;
				var k = i + 1;
				var max = text.length;
				var prevChar1 = cc;
				var breakFound = false;
				while(size <= maxWidth && k < max) {
					var cc1 = text.charCodeAt(k++);
					if(this.lineBreak && (font.charset.isSpace(cc1) || cc1 == 10)) {
						breakFound = true;
						break;
					}
					var c1 = font.glyphs.h[cc1];
					if(c1 == null) {
						c1 = font.charset.resolveChar(cc1,font.glyphs);
						if(c1 == null) {
							c1 = cc1 == 13 || cc1 == 10 ? font.nullChar : font.defaultChar;
						}
					}
					var e1 = c1;
					size += e1.width + this.letterSpacing + e1.getKerningOffset(prevChar1);
					prevChar1 = cc1;
					if(font.charset.isBreakChar(cc1)) {
						if(k >= text.length) {
							break;
						}
						var nc = text.charCodeAt(k);
						if(!font.charset.isComplementChar(nc)) {
							break;
						}
					}
				}
				if(this.lineBreak && (size > maxWidth || !breakFound && size + afterData > maxWidth)) {
					newline = true;
					if(font.charset.isSpace(cc)) {
						lines.push(HxOverrides.substr(text,restPos,i - restPos));
						e = null;
					} else {
						lines.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
					}
					restPos = i + 1;
				} else {
					wLastSep = size;
				}
			} else if(x + esize + this.letterSpacing - wLastSep > maxWidth) {
				newline = true;
				lines.push(HxOverrides.substr(text,restPos,i - restPos));
				restPos = i + 1;
			}
			if(e != null && cc != 10) {
				x += esize + this.letterSpacing;
			}
			if(newline) {
				if(sizes != null) {
					sizes.push(x);
				}
				x = 0;
				wLastSep = 0.;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(restPos < text.length) {
			if(lines.length == 0 && leftMargin > 0 && x + afterData - this.letterSpacing > maxWidth) {
				lines.push("");
				if(sizes != null) {
					sizes.push(leftMargin);
				}
				x -= leftMargin;
			}
			lines.push(HxOverrides.substr(text,restPos,text.length - restPos));
			if(sizes != null) {
				sizes.push(x);
			}
		}
		return lines.join("\n");
	}
	,initGlyphs: function(text,rebuild) {
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
		}
		var x = 0.;
		var y = 0.;
		var xMax = 0.;
		var xMin = 0.;
		var yMin = 0.;
		var yMax = 0.;
		var prevChar = -1;
		var linei = 0;
		var align = this.textAlign;
		var lines = [];
		var dl = this.font.lineHeight + this.lineSpacing;
		var t = this.splitRawText(text,0,0,null,lines);
		var _g = 0;
		while(_g < lines.length) {
			var lw = lines[_g];
			++_g;
			if(lw > x) {
				x = lw;
			}
		}
		this.calcWidth = x;
		switch(align._hx_index) {
		case 0:
			x = 0;
			break;
		case 1:case 2:case 3:case 4:
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.realMaxWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
			var _g = 0;
			var _g1 = lines.length;
			while(_g < _g1) {
				var i = _g++;
				lines[i] = Math.floor((max - lines[i]) * k);
			}
			x = lines[0];
			xMin = x;
			break;
		}
		var _g = 0;
		var _g1 = t.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = t.charCodeAt(i);
			var _this = this.font;
			var c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? _this.nullChar : _this.defaultChar;
				}
			}
			var e = c;
			var offs = e.getKerningOffset(prevChar);
			var esize = e.width + offs;
			if(cc == 10) {
				if(x > xMax) {
					xMax = x;
				}
				switch(align._hx_index) {
				case 0:
					x = 0;
					break;
				case 1:case 2:case 3:case 4:
					x = lines[++linei];
					if(x < xMin) {
						xMin = x;
					}
					break;
				}
				y += dl;
				prevChar = -1;
			} else {
				if(e != null) {
					if(rebuild) {
						var _this1 = this.glyphs;
						_this1.content.add(x + offs,y,_this1.curColor.x,_this1.curColor.y,_this1.curColor.z,_this1.curColor.w,e.t);
					}
					if(y == 0 && e.t.dy < yMin) {
						yMin = e.t.dy;
					}
					var ty = y + e.t.dy + e.t.height;
					if(ty > yMax) {
						yMax = ty;
					}
					x += esize + this.letterSpacing;
				}
				prevChar = cc;
			}
		}
		if(x > xMax) {
			xMax = x;
		}
		this.calcXMin = xMin;
		this.calcYMin = yMin;
		this.calcWidth = xMax - xMin;
		this.calcHeight = yMax - yMin;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
		if(rebuild) {
			this.needsRebuild = false;
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		var a = this.color.w;
		var _this = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.color.w = a;
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		var x;
		var y;
		var w;
		var h;
		if(forSize) {
			x = this.calcXMin;
			y = 0.;
			w = this.calcWidth;
			h = this.calcSizeHeight;
		} else {
			x = this.calcXMin;
			y = this.calcYMin;
			w = this.calcWidth;
			h = this.calcHeight;
		}
		this.addBounds(relativeTo,out,x,y,w,h);
	}
	,__class__: h2d_Text
});
var h2d_Tile = function(tex,x,y,w,h,dx,dy) {
	if(dy == null) {
		dy = 0;
	}
	if(dx == null) {
		dx = 0;
	}
	this.innerTex = tex;
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
	this.dx = dx;
	this.dy = dy;
	if(tex != null) {
		this.setTexture(tex);
	}
};
$hxClasses["h2d.Tile"] = h2d_Tile;
h2d_Tile.__name__ = "h2d.Tile";
h2d_Tile.fromColor = function(color,width,height,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	var t = new h2d_Tile(h3d_mat_Texture.fromColor(color,alpha),0,0,1,1);
	t.width = width;
	t.height = height;
	return t;
};
h2d_Tile.fromTexture = function(t) {
	return new h2d_Tile(t,0,0,t.width,t.height);
};
h2d_Tile.prototype = {
	setTexture: function(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	,sub: function(x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		return new h2d_Tile(this.innerTex,this.x + x,this.y + y,w,h,dx,dy);
	}
	,__class__: h2d_Tile
};
var h2d_TileLayerContent = function() {
	this.useAllocatorLimit = 1024;
	h3d_prim_Primitive.call(this);
	this.state = new h2d_impl_BatchDrawState();
	this.clear();
};
$hxClasses["h2d.TileLayerContent"] = h2d_TileLayerContent;
h2d_TileLayerContent.__name__ = "h2d.TileLayerContent";
h2d_TileLayerContent.__super__ = h3d_prim_Primitive;
h2d_TileLayerContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	clear: function() {
		this.tmp = hxd__$FloatBuffer_Float32Expand._new(0);
		if(this.buffer != null) {
			if(this.buffer.vertices * 8 < this.useAllocatorLimit) {
				hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			} else {
				this.buffer.dispose();
			}
		}
		this.buffer = null;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.xMax = -Infinity;
		this.yMax = -Infinity;
		this.state.clear();
	}
	,triCount: function() {
		if(this.buffer == null) {
			return this.tmp.pos >> 4;
		} else {
			return this.buffer.vertices >> 1;
		}
	}
	,add: function(x,y,r,g,b,a,t) {
		var sx = x + t.dx;
		var sy = y + t.dy;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sy;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		var v = sx + t.width;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sy;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this1 = this.tmp;
		var v = sy + t.height;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		var v = sx + t.width;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = sy + t.height;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var x1 = x + t.dx;
		var y1 = y + t.dy;
		if(x1 < this.xMin) {
			this.xMin = x1;
		}
		if(y1 < this.yMin) {
			this.yMin = y1;
		}
		x1 += t.width;
		y1 += t.height;
		if(x1 > this.xMax) {
			this.xMax = x1;
		}
		if(y1 > this.yMax) {
			this.yMax = y1;
		}
		if(t != null) {
			this.state.setTexture(t.innerTex);
		}
		var _this = this.state;
		_this.tail.count += 4;
		_this.totalCount += 4;
	}
	,alloc: function(engine) {
		if(this.tmp == null) {
			this.clear();
		}
		if(this.tmp.pos > 0) {
			this.buffer = this.tmp.pos < this.useAllocatorLimit ? hxd_impl_Allocator.get().ofFloats(this.tmp,hxd_BufferFormat.get_XY_UV_RGBA()) : h3d_Buffer.ofFloats(this.tmp,hxd_BufferFormat.get_XY_UV_RGBA());
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			if(this.buffer.vertices * 8 < this.useAllocatorLimit) {
				hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			} else {
				this.buffer.dispose();
			}
			this.buffer = null;
		}
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,__class__: h2d_TileLayerContent
});
var h2d_TileGroup = function(t,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.rangeMin = this.rangeMax = -1;
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.curColor = new h3d_Vector4Impl(x,y,z,w);
	this.content = new h2d_TileLayerContent();
};
$hxClasses["h2d.TileGroup"] = h2d_TileGroup;
h2d_TileGroup.__name__ = "h2d.TileGroup";
h2d_TileGroup.__super__ = h2d_Drawable;
h2d_TileGroup.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		this.addBounds(relativeTo,out,this.content.xMin,this.content.yMin,this.content.xMax - this.content.xMin,this.content.yMax - this.content.yMin);
	}
	,clear: function() {
		this.content.clear();
	}
	,onRemove: function() {
		this.content.dispose();
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.visible) {
			var _this = this.content;
			if(_this.buffer == null || _this.buffer.vbuf == null) {
				_this.alloc(h3d_Engine.CURRENT);
			}
		}
	}
	,drawWith: function(ctx,obj) {
		var max = this.content.triCount();
		if(max == 0) {
			return;
		}
		if(!ctx.beginDrawBatchState(obj)) {
			return;
		}
		var min = this.rangeMin < 0 ? 0 : this.rangeMin * 2;
		if(this.rangeMax > 0 && this.rangeMax < max * 2) {
			max = this.rangeMax * 2;
		}
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.vbuf == null) {
			_this.alloc(h3d_Engine.CURRENT);
		}
		_this.state.drawQuads(ctx,_this.buffer,min,max - min);
	}
	,__class__: h2d_TileGroup
});
var h2d_col_Collider = function() { };
$hxClasses["h2d.col.Collider"] = h2d_col_Collider;
h2d_col_Collider.__name__ = "h2d.col.Collider";
h2d_col_Collider.prototype = {
	__class__: h2d_col_Collider
};
var h2d_col_Bounds = function() {
	this.xMin = 1e20;
	this.yMin = 1e20;
	this.xMax = -1e20;
	this.yMax = -1e20;
};
$hxClasses["h2d.col.Bounds"] = h2d_col_Bounds;
h2d_col_Bounds.__name__ = "h2d.col.Bounds";
h2d_col_Bounds.__super__ = h2d_col_Collider;
h2d_col_Bounds.prototype = $extend(h2d_col_Collider.prototype,{
	contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin) {
			return p.y < this.yMax;
		} else {
			return false;
		}
	}
	,__class__: h2d_col_Bounds
});
var h2d_filter_Filter = function() {
	this.useScreenResolution = h2d_filter_Filter.defaultUseScreenResolution;
	this.resolutionScale = 1;
	this.enable = true;
	this.smooth = false;
	this.boundsExtend = 0.;
	this.autoBounds = true;
};
$hxClasses["h2d.filter.Filter"] = h2d_filter_Filter;
h2d_filter_Filter.__name__ = "h2d.filter.Filter";
h2d_filter_Filter.prototype = {
	get_enable: function() {
		return this.enable;
	}
	,sync: function(ctx,s) {
	}
	,bind: function(s) {
	}
	,unbind: function(s) {
	}
	,getBounds: function(s,bounds,scale) {
		s.getBounds(s,bounds);
		bounds.xMin = bounds.xMin * scale.x - this.boundsExtend;
		bounds.xMax = bounds.xMax * scale.x + this.boundsExtend;
		bounds.yMin = bounds.yMin * scale.y - this.boundsExtend;
		bounds.yMax = bounds.yMax * scale.y + this.boundsExtend;
	}
	,draw: function(ctx,input) {
		return input;
	}
	,__class__: h2d_filter_Filter
};
var h2d_impl_BatchDrawState = function() {
	this.head = this.tail = new h2d_impl__$BatchDrawState_StateEntry(null);
	this.totalCount = 0;
};
$hxClasses["h2d.impl.BatchDrawState"] = h2d_impl_BatchDrawState;
h2d_impl_BatchDrawState.__name__ = "h2d.impl.BatchDrawState";
h2d_impl_BatchDrawState.prototype = {
	setTexture: function(texture) {
		if(texture != null) {
			if(this.tail.texture == null) {
				this.tail.texture = texture;
			} else if(this.tail.texture != texture) {
				var cur = this.tail;
				if(cur.count == 0) {
					cur.set(texture);
				} else if(cur.next == null) {
					cur.next = this.tail = new h2d_impl__$BatchDrawState_StateEntry(texture);
				} else {
					this.tail = cur.next.set(texture);
				}
			}
		}
	}
	,clear: function() {
		var state = this.head;
		do {
			state.texture = null;
			state = state.next;
		} while(state != null);
		this.tail = this.head;
		this.tail.count = 0;
		this.totalCount = 0;
	}
	,drawQuads: function(ctx,buffer,offset,length) {
		if(length == null) {
			length = -1;
		}
		if(offset == null) {
			offset = 0;
		}
		var state = this.head;
		var last = this.tail.next;
		var engine = ctx.engine;
		var stateLen;
		if(offset == 0 && length == -1) {
			do {
				ctx.texture = state.texture;
				ctx.beforeDraw();
				stateLen = state.count >> 1;
				var start = offset;
				var max = stateLen;
				if(max == null) {
					max = -1;
				}
				if(start == null) {
					start = 0;
				}
				engine.renderBuffer(buffer,engine.mem.getQuadIndexes(buffer.vertices),2,start,max);
				offset += stateLen;
				state = state.next;
			} while(state != last);
		} else {
			if(length == -1) {
				length = (this.totalCount >> 1) - offset;
			}
			var caret = 0;
			do {
				stateLen = state.count >> 1;
				if(caret + stateLen >= offset) {
					var stateMin = offset >= caret ? offset : caret;
					var stateLen1 = length > stateLen ? stateLen : length;
					ctx.texture = state.texture;
					ctx.beforeDraw();
					var start = stateMin;
					var max = stateLen1;
					if(max == null) {
						max = -1;
					}
					if(start == null) {
						start = 0;
					}
					engine.renderBuffer(buffer,engine.mem.getQuadIndexes(buffer.vertices),2,start,max);
					length -= stateLen1;
					if(length == 0) {
						break;
					}
				}
				caret += stateLen;
				state = state.next;
			} while(state != last);
		}
	}
	,drawIndexed: function(ctx,buffer,indices,offset,length) {
		if(length == null) {
			length = -1;
		}
		if(offset == null) {
			offset = 0;
		}
		var state = this.head;
		var last = this.tail.next;
		var engine = ctx.engine;
		var stateLen;
		if(offset == 0 && length == -1) {
			do {
				ctx.texture = state.texture;
				ctx.beforeDraw();
				stateLen = state.count / 3 | 0;
				engine.renderIndexed(buffer,indices,offset,stateLen);
				offset += stateLen;
				state = state.next;
			} while(state != last);
		} else {
			if(length == -1) {
				length = this.totalCount / 3 | 0;
			}
			var caret = 0;
			do {
				stateLen = state.count / 3 | 0;
				if(caret + stateLen >= offset) {
					var stateMin = offset >= caret ? offset : caret;
					var stateLen1 = length > stateLen ? stateLen : length;
					ctx.texture = state.texture;
					ctx.beforeDraw();
					engine.renderIndexed(buffer,indices,stateMin,stateLen1);
					length -= stateLen1;
					if(length == 0) {
						break;
					}
				}
				caret += stateLen;
				state = state.next;
			} while(state != last);
		}
	}
	,__class__: h2d_impl_BatchDrawState
};
var h2d_impl__$BatchDrawState_StateEntry = function(texture) {
	this.texture = texture;
	this.count = 0;
};
$hxClasses["h2d.impl._BatchDrawState.StateEntry"] = h2d_impl__$BatchDrawState_StateEntry;
h2d_impl__$BatchDrawState_StateEntry.__name__ = "h2d.impl._BatchDrawState.StateEntry";
h2d_impl__$BatchDrawState_StateEntry.prototype = {
	set: function(texture) {
		this.texture = texture;
		this.count = 0;
		return this;
	}
	,__class__: h2d_impl__$BatchDrawState_StateEntry
};
var h3d_BufferFlag = $hxEnums["h3d.BufferFlag"] = { __ename__:true,__constructs__:null
	,Dynamic: {_hx_name:"Dynamic",_hx_index:0,__enum__:"h3d.BufferFlag",toString:$estr}
	,NoAlloc: {_hx_name:"NoAlloc",_hx_index:1,__enum__:"h3d.BufferFlag",toString:$estr}
	,UniformBuffer: {_hx_name:"UniformBuffer",_hx_index:2,__enum__:"h3d.BufferFlag",toString:$estr}
	,ReadWriteBuffer: {_hx_name:"ReadWriteBuffer",_hx_index:3,__enum__:"h3d.BufferFlag",toString:$estr}
	,IndexBuffer: {_hx_name:"IndexBuffer",_hx_index:4,__enum__:"h3d.BufferFlag",toString:$estr}
};
h3d_BufferFlag.__constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.ReadWriteBuffer,h3d_BufferFlag.IndexBuffer];
h3d_BufferFlag.__empty_constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.ReadWriteBuffer,h3d_BufferFlag.IndexBuffer];
var h3d_Buffer = function(vertices,format,flags) {
	this.id = h3d_Buffer.GUID++;
	this.vertices = vertices;
	this.format = format;
	this.flags = 0;
	this.allocPos = hxd_impl_AllocPos.make();
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	this.engine = h3d_Engine.CURRENT;
	if((this.flags & 1 << h3d_BufferFlag.NoAlloc._hx_index) == 0) {
		this.engine.mem.allocBuffer(this);
	}
};
$hxClasses["h3d.Buffer"] = h3d_Buffer;
h3d_Buffer.__name__ = "h3d.Buffer";
h3d_Buffer.ofFloats = function(v,format,flags) {
	var nvert = Math.ceil(v.pos / format.stride);
	var b = new h3d_Buffer(nvert,format,flags);
	b.uploadFloats(v,0,nvert);
	return b;
};
h3d_Buffer.prototype = {
	dispose: function() {
		if(this.vbuf != null) {
			this.engine.mem.freeBuffer(this);
			this.vbuf = null;
		}
	}
	,uploadFloats: function(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		if(startVertice < 0 || vertices < 0 || startVertice + vertices > this.vertices) {
			throw haxe_Exception.thrown("Invalid vertices count");
		}
		if(vertices == 0) {
			return;
		}
		if(this.format.hasLowPrecision) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(vertices * this.format.strideBytes));
			var bytesPos = 0;
			var index = bufPos;
			var inputs_current = 0;
			var inputs_array = this.format.inputs;
			var _g = 0;
			var _g1 = vertices;
			while(_g < _g1) {
				var _ = _g++;
				inputs_current = 0;
				while(inputs_current < inputs_array.length) {
					var input = inputs_array[inputs_current++];
					var elementCount = input.type & 7;
					var step = 0;
					switch(input.precision) {
					case 0:
						var _g2 = 0;
						var _g3 = elementCount;
						while(_g2 < _g3) {
							var i = _g2++;
							bytes.setFloat(bytesPos + step,buf.array[index++]);
							step += 4;
						}
						break;
					case 1:
						var _g4 = 0;
						var _g5 = elementCount;
						while(_g4 < _g5) {
							var i1 = _g4++;
							var f = hxd_BufferFormat.float32to16(buf.array[index++]);
							bytes.setUInt16(bytesPos + step,f);
							step += 2;
						}
						break;
					case 2:
						var _g6 = 0;
						var _g7 = elementCount;
						while(_g6 < _g7) {
							var i2 = _g6++;
							var f1 = hxd_BufferFormat.float32toU8(buf.array[index++]);
							bytes.b[bytesPos + step] = f1;
							++step;
						}
						break;
					case 3:
						var _g8 = 0;
						var _g9 = elementCount;
						while(_g8 < _g9) {
							var i3 = _g8++;
							var f2 = hxd_BufferFormat.float32toS8(buf.array[index++]);
							bytes.b[bytesPos + step] = f2;
							++step;
						}
						break;
					}
					bytesPos += (input.type & 7) * hxd_Precision.SIZES[input.precision];
					if((bytesPos & 3) != 0) {
						bytesPos += 4 - (bytesPos & 3);
					}
				}
			}
			this.uploadBytes(bytes,0,vertices);
			return;
		}
		this.engine.driver.uploadBufferData(this,startVertice,vertices,buf,bufPos);
	}
	,uploadBytes: function(data,dataPos,vertices) {
		if(vertices < 0 || vertices > this.vertices) {
			throw haxe_Exception.thrown("Invalid vertices count");
		}
		if(vertices == 0) {
			return;
		}
		this.engine.driver.uploadBufferBytes(this,0,vertices,data,dataPos);
	}
	,__class__: h3d_Buffer
};
var h3d_Camera = function(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
	if(rightHanded == null) {
		rightHanded = false;
	}
	if(zFar == null) {
		zFar = 4000.;
	}
	if(zNear == null) {
		zNear = 0.02;
	}
	if(screenRatio == null) {
		screenRatio = 1.333333;
	}
	if(zoom == null) {
		zoom = 1.;
	}
	if(fovY == null) {
		fovY = 25.;
	}
	this.jitterOffsetY = 0.;
	this.jitterOffsetX = 0.;
	this.viewY = 0.;
	this.viewX = 0.;
	this.fovY = fovY;
	this.zoom = zoom;
	this.screenRatio = screenRatio;
	this.zNear = zNear;
	this.zFar = zFar;
	this.rightHanded = rightHanded;
	var x = 2;
	var y = 3;
	var z = 4;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.pos = new h3d_VectorImpl(x,y,z);
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.up = new h3d_VectorImpl(x,y,z);
	var x = 0;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.target = new h3d_VectorImpl(x,y,z);
	this.m = new h3d_MatrixImpl();
	this.mcam = new h3d_MatrixImpl();
	this.mproj = new h3d_MatrixImpl();
	this.frustum = new h3d_col_Frustum();
	this.update();
};
$hxClasses["h3d.Camera"] = h3d_Camera;
h3d_Camera.__name__ = "h3d.Camera";
h3d_Camera.prototype = {
	getInverseViewProj: function() {
		if(this.minv == null) {
			this.minv = new h3d_MatrixImpl();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	,getInverseView: function() {
		if(this.mcamInv == null) {
			this.mcamInv = new h3d_MatrixImpl();
			this.mcamInv._44 = 0;
		}
		if(this.mcamInv._44 == 0) {
			this.mcamInv.initInverse(this.mcam);
		}
		return this.mcamInv;
	}
	,calcDirections: function() {
		var this1 = this.target;
		var v = this.pos;
		var x = this1.x - v.x;
		var y = this1.y - v.y;
		var z = this1.z - v.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x = x1;
		var _this_y = y1;
		var _this_z = z1;
		var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		var x = _this_x * k;
		var y = _this_y * k;
		var z = _this_z * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x = x1;
		var _this_y = y1;
		var _this_z = z1;
		var _this = this.up;
		var x = _this.y * _this_z - _this.z * _this_y;
		var y = _this.z * _this_x - _this.x * _this_z;
		var z = _this.x * _this_y - _this.y * _this_x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x1 = x1;
		var _this_y1 = y1;
		var _this_z1 = z1;
		var k = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		var x = _this_x1 * k;
		var y = _this_y1 * k;
		var z = _this_z1 * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var cameraRight_x = x1;
		var cameraRight_y = y1;
		var cameraRight_z = z1;
		var x = _this_y * cameraRight_z - _this_z * cameraRight_y;
		var y = _this_z * cameraRight_x - _this_x * cameraRight_z;
		var z = _this_x * cameraRight_y - _this_y * cameraRight_x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var cameraUp_x = x1;
		var cameraUp_y = y1;
		var cameraUp_z = z1;
		this.directions._11 = _this_x;
		this.directions._12 = _this_y;
		this.directions._13 = _this_z;
		this.directions._21 = cameraRight_x;
		this.directions._22 = cameraRight_y;
		this.directions._23 = cameraRight_z;
		this.directions._31 = cameraUp_x;
		this.directions._32 = cameraUp_y;
		this.directions._33 = cameraUp_z;
		this.directions._44 = 1;
	}
	,unproject: function(screenX,screenY,camZ) {
		var x = screenX;
		var y = screenY;
		var z = camZ;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p = new h3d_VectorImpl(x,y,z);
		var _this = p;
		var m = this.getInverseViewProj();
		var px = _this.x * m._11 + _this.y * m._21 + _this.z * m._31 + m._41;
		var py = _this.x * m._12 + _this.y * m._22 + _this.z * m._32 + m._42;
		var pz = _this.x * m._13 + _this.y * m._23 + _this.z * m._33 + m._43;
		var iw = 1 / (_this.x * m._14 + _this.y * m._24 + _this.z * m._34 + m._44);
		_this.x = px * iw;
		_this.y = py * iw;
		_this.z = pz * iw;
		return p;
	}
	,update: function() {
		if(this.follow != null) {
			var fpos = this.follow.pos.localToGlobal();
			var ftarget = this.follow.target.localToGlobal();
			var _this = this.pos;
			var x = fpos.x;
			var y = fpos.y;
			var z = fpos.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			var _this = this.target;
			var x = ftarget.x;
			var y = ftarget.y;
			var z = ftarget.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			if(this.follow.pos.name != null) {
				var p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						var v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.mcamInv != null) {
			this.mcamInv._44 = 0;
		}
		if(this.mprojInv != null) {
			this.mprojInv._44 = 0;
		}
		if(this.directions != null) {
			this.directions._44 = 0;
		}
		this.frustum.loadMatrix(this.m);
	}
	,makeCameraMatrix: function(m) {
		var this1 = this.target;
		var v = this.pos;
		var x = this1.x - v.x;
		var y = this1.y - v.y;
		var z = this1.z - v.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x = x1;
		var _this_y = y1;
		var _this_z = z1;
		if(this.rightHanded) {
			_this_x *= -1;
			_this_y *= -1;
			_this_z *= -1;
		}
		var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this_x *= k;
		_this_y *= k;
		_this_z *= k;
		var _this = this.up;
		var x = _this.y * _this_z - _this.z * _this_y;
		var y = _this.z * _this_x - _this.x * _this_z;
		var z = _this.x * _this_y - _this.y * _this_x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x1 = x1;
		var _this_y1 = y1;
		var _this_z1 = z1;
		var k = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this_x1 *= k;
		_this_y1 *= k;
		_this_z1 *= k;
		if(Math.sqrt(_this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1) == 0) {
			_this_x1 = _this_y;
			_this_y1 = _this_z;
			_this_z1 = _this_x;
		}
		var x = _this_y * _this_z1 - _this_z * _this_y1;
		var y = _this_z * _this_x1 - _this_x * _this_z1;
		var z = _this_x * _this_y1 - _this_y * _this_x1;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x2 = x1;
		var _this_y2 = y1;
		var _this_z2 = z1;
		m._11 = _this_x1;
		m._12 = _this_x2;
		m._13 = _this_x;
		m._14 = 0;
		m._21 = _this_y1;
		m._22 = _this_y2;
		m._23 = _this_y;
		m._24 = 0;
		m._31 = _this_z1;
		m._32 = _this_z2;
		m._33 = _this_z;
		m._34 = 0;
		var v = this.pos;
		m._41 = -(_this_x1 * v.x + _this_y1 * v.y + _this_z1 * v.z);
		var v = this.pos;
		m._42 = -(_this_x2 * v.x + _this_y2 * v.y + _this_z2 * v.z);
		var v = this.pos;
		m._43 = -(_this_x * v.x + _this_y * v.y + _this_z * v.z);
		m._44 = 1;
	}
	,makeFrustumMatrix: function(m) {
		m.zero();
		var bounds = this.orthoBounds;
		if(bounds != null) {
			var w = 1 / (bounds.xMax - bounds.xMin);
			var h = 1 / (bounds.yMax - bounds.yMin);
			var d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			var degToRad = Math.PI / 180;
			var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			var scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
			m._31 = this.jitterOffsetX;
			m._32 = this.jitterOffsetY;
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
	,distanceToDepth: function(dist) {
		var min = this.zNear;
		var max = this.zFar;
		if(max == null) {
			max = 1.;
		}
		if(min == null) {
			min = 0.;
		}
		return ((this.zFar + this.zNear - 2.0 * this.zNear * this.zFar / (dist < min ? min : dist > max ? max : dist)) / (this.zFar - this.zNear) + 1.0) / 2.0;
	}
	,__class__: h3d_Camera
};
var h3d__$Engine_TargetTmp = function(t,n,l,m,db) {
	this.t = t;
	this.next = n;
	this.layer = l;
	this.mipLevel = m;
	this.depthBinding = db;
};
$hxClasses["h3d._Engine.TargetTmp"] = h3d__$Engine_TargetTmp;
h3d__$Engine_TargetTmp.__name__ = "h3d._Engine.TargetTmp";
h3d__$Engine_TargetTmp.prototype = {
	__class__: h3d__$Engine_TargetTmp
};
var h3d_DepthBinding = $hxEnums["h3d.DepthBinding"] = { __ename__:true,__constructs__:null
	,ReadWrite: {_hx_name:"ReadWrite",_hx_index:0,__enum__:"h3d.DepthBinding",toString:$estr}
	,ReadOnly: {_hx_name:"ReadOnly",_hx_index:1,__enum__:"h3d.DepthBinding",toString:$estr}
	,DepthOnly: {_hx_name:"DepthOnly",_hx_index:2,__enum__:"h3d.DepthBinding",toString:$estr}
	,NotBound: {_hx_name:"NotBound",_hx_index:3,__enum__:"h3d.DepthBinding",toString:$estr}
};
h3d_DepthBinding.__constructs__ = [h3d_DepthBinding.ReadWrite,h3d_DepthBinding.ReadOnly,h3d_DepthBinding.DepthOnly,h3d_DepthBinding.NotBound];
h3d_DepthBinding.__empty_constructs__ = [h3d_DepthBinding.ReadWrite,h3d_DepthBinding.ReadOnly,h3d_DepthBinding.DepthOnly,h3d_DepthBinding.NotBound];
var h3d_Engine = function() {
	this.resCache = new haxe_ds_ObjectMap();
	this.ready = false;
	this.inRender = false;
	this.textureColorCache = new haxe_ds_IntMap();
	this.tmpVector = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.backgroundColor = -16777216;
	this.hardware = !h3d_Engine.SOFTWARE_DRIVER;
	this.antiAlias = h3d_Engine.ANTIALIASING;
	this.autoResize = true;
	this.set_fullScreen(!hxd_System.getValue(hxd_SystemValue.IsWindowed));
	this.window = hxd_Window.getInstance();
	this.realFps = hxd_System.getDefaultFrameRate();
	this.lastTime = HxOverrides.now() / 1000;
	this.window.addResizeEvent($bind(this,this.onWindowResize));
	h3d_Engine.CURRENT = this;
	this.window.setCurrent();
	this.driver = js_Browser.get_supported() ? new h3d_impl_GlDriver(this.antiAlias) : new h3d_impl_NullDriver();
};
$hxClasses["h3d.Engine"] = h3d_Engine;
h3d_Engine.__name__ = "h3d.Engine";
h3d_Engine.prototype = {
	init: function() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	,selectShader: function(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	,selectMaterial: function(pass) {
		this.driver.selectMaterial(pass);
	}
	,uploadShaderBuffers: function(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	,selectBuffer: function(buf) {
		if(buf.vbuf == null) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	,renderBuffer: function(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.vbuf == null) {
			return;
		}
		var ntri = b.vertices / vertPerTri | 0;
		if(drawTri < 0) {
			drawTri = ntri - startTri;
		}
		if(startTri < 0 || drawTri < 0 || startTri + drawTri > ntri) {
			throw haxe_Exception.thrown("Invalid vertices count");
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderIndexed: function(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.vbuf == null) {
			return;
		}
		var maxTri = indexes.vertices / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderMultiBuffers: function(format,buffers,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		var maxTri = indexes.vertices / 3 | 0;
		if(maxTri <= 0) {
			return;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectMultiBuffers(format,buffers);
		if(indexes.vbuf == null) {
			return;
		}
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0) {
			this.driver.draw(indexes,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderInstanced: function(indexes,commands) {
		if(indexes.vbuf == null) {
			return;
		}
		if(commands.commandCount > 0) {
			this.driver.drawInstanced(indexes,commands);
			this.drawTriangles += commands.triCount;
			this.drawCalls++;
		}
	}
	,set_debug: function(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	,onCreate: function(disposed) {
		h3d_Engine.CURRENT = this;
		this.window.setCurrent();
		if(this.autoResize) {
			this.width = this.window.get_width();
			this.height = this.window.get_height();
		}
		if(disposed) {
			hxd_impl_Allocator.get().onContextLost();
			this.mem.onContextLost();
		} else {
			this.mem = new h3d_impl_MemoryManager(this.driver);
			this.mem.init();
			this.nullTexture = new h3d_mat_Texture(0,0,[h3d_mat_TextureFlags.NoAlloc]);
		}
		this.hardware = this.driver.hasFeature(h3d_impl_Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
		this.ready = true;
	}
	,onContextLost: function() {
	}
	,onReady: function() {
	}
	,onWindowResize: function() {
		if(this.autoResize && !this.driver.isDisposed()) {
			var w = this.window.get_width();
			var h = this.window.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	,set_fullScreen: function(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd_System.getValue(hxd_SystemValue.IsWindowed)) {
			this.window.set_displayMode(v ? hxd_DisplayMode.Borderless : hxd_DisplayMode.Windowed);
		}
		return v;
	}
	,onResized: function() {
	}
	,resize: function(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	,begin: function() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.inRender = true;
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.dispatches = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(hxd_Timer.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	,end: function() {
		this.inRender = false;
		this.driver.end();
	}
	,getCurrentTarget: function() {
		if(this.targetStack == null) {
			return null;
		} else if(this.targetStack.t == this.nullTexture) {
			return this.targetStack.textures[0];
		} else {
			return this.targetStack.t;
		}
	}
	,pushTarget: function(tex,layer,mipLevel,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		var c = this.targetTmp;
		if(c == null) {
			c = new h3d__$Engine_TargetTmp(tex,this.targetStack,layer,mipLevel,depthBinding);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.layer = layer;
			c.depthBinding = depthBinding;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	,updateNeedFlush: function() {
		var t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetLayer != t.layer || this.currentTargetMip != t.mipLevel || t.textures != null || this.currentDepthBinding != t.depthBinding;
		}
	}
	,pushDepth: function(depthBuffer) {
		this.pushTarget(depthBuffer,null,null,h3d_DepthBinding.DepthOnly);
	}
	,popTarget: function() {
		var c = this.targetStack;
		if(c == null) {
			throw haxe_Exception.thrown("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.textures = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	,doFlushTarget: function() {
		var t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			if(t.depthBinding == h3d_DepthBinding.DepthOnly) {
				this.driver.setDepth(t.t);
			} else if(t.textures != null) {
				this.driver.setRenderTargets(t.textures,t.depthBinding);
			} else {
				this.driver.setRenderTarget(t.t,t.layer,t.mipLevel,t.depthBinding);
			}
			this.currentTargetTex = t.t;
			this.currentTargetLayer = t.layer;
			this.currentTargetMip = t.mipLevel;
			this.currentDepthBinding = t.depthBinding;
		}
		this.needFlushTarget = false;
	}
	,clear: function(color,depth,stencil) {
		if(color != null) {
			var _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	,setRenderZone: function(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	,render: function(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		var delta = HxOverrides.now() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			var curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			var f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
	,get_fps: function() {
		return Math.ceil(this.realFps * 100) / 100;
	}
	,__class__: h3d_Engine
};
var h3d_Indexes = {};
h3d_Indexes._new = function(count,is32) {
	if(is32 == null) {
		is32 = false;
	}
	return new h3d_Buffer(count,is32 ? hxd_BufferFormat.get_INDEX32() : hxd_BufferFormat.get_INDEX16(),[h3d_BufferFlag.IndexBuffer]);
};
h3d_Indexes.uploadIndexes = function(this1,ibuf,bufPos,indices,startIndice) {
	if(startIndice == null) {
		startIndice = 0;
	}
	if(startIndice < 0 || indices < 0 || startIndice + indices > this1.vertices) {
		throw haxe_Exception.thrown("Invalid indices count");
	}
	if(this1.format.inputs[0].precision != 1) {
		throw haxe_Exception.thrown("Can't upload indexes on a 32-bit buffer");
	}
	if(indices == 0) {
		return;
	}
	h3d_Engine.CURRENT.driver.uploadIndexData(this1,startIndice,indices,ibuf,bufPos);
};
h3d_Indexes.alloc = function(i,startPos,length) {
	if(length == null) {
		length = -1;
	}
	if(startPos == null) {
		startPos = 0;
	}
	if(length < 0) {
		length = i.length;
	}
	var idx = h3d_Indexes._new(length);
	h3d_Indexes.uploadIndexes(idx,i,0,length);
	return idx;
};
var h3d_MatrixImpl = function() {
};
$hxClasses["h3d.MatrixImpl"] = h3d_MatrixImpl;
h3d_MatrixImpl.__name__ = "h3d.MatrixImpl";
h3d_MatrixImpl.prototype = {
	zero: function() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	,identity: function() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,multiply3x4: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply: function(a,b) {
		var a11 = a._11;
		var a12 = a._12;
		var a13 = a._13;
		var a14 = a._14;
		var a21 = a._21;
		var a22 = a._22;
		var a23 = a._23;
		var a24 = a._24;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a34 = a._34;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var a44 = a._44;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b14 = b._14;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b24 = b._24;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b34 = b._34;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		var b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	,inverse3x4: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		var invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	,initInverse: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m14 = m._14;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m24 = m._24;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m34 = m._34;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		var m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	,clone: function() {
		var m = new h3d_MatrixImpl();
		m._11 = this._11;
		m._12 = this._12;
		m._13 = this._13;
		m._14 = this._14;
		m._21 = this._21;
		m._22 = this._22;
		m._23 = this._23;
		m._24 = this._24;
		m._31 = this._31;
		m._32 = this._32;
		m._33 = this._33;
		m._34 = this._34;
		m._41 = this._41;
		m._42 = this._42;
		m._43 = this._43;
		m._44 = this._44;
		return m;
	}
	,load: function(m) {
		this._11 = m._11;
		this._12 = m._12;
		this._13 = m._13;
		this._14 = m._14;
		this._21 = m._21;
		this._22 = m._22;
		this._23 = m._23;
		this._24 = m._24;
		this._31 = m._31;
		this._32 = m._32;
		this._33 = m._33;
		this._34 = m._34;
		this._41 = m._41;
		this._42 = m._42;
		this._43 = m._43;
		this._44 = m._44;
	}
	,loadValues: function(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	,__class__: h3d_MatrixImpl
};
var h3d_Matrix = {};
h3d_Matrix.I = function() {
	var m = new h3d_MatrixImpl();
	m.identity();
	return m;
};
h3d_Matrix.L = function(a) {
	var m = new h3d_MatrixImpl();
	m.loadValues(a);
	return m;
};
var h3d_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Quat"] = h3d_Quat;
h3d_Quat.__name__ = "h3d.Quat";
h3d_Quat.prototype = {
	toMatrix: function(m) {
		if(m == null) {
			m = new h3d_MatrixImpl();
		}
		var xx = this.x * this.x;
		var xy = this.x * this.y;
		var xz = this.x * this.z;
		var xw = this.x * this.w;
		var yy = this.y * this.y;
		var yz = this.y * this.z;
		var yw = this.y * this.w;
		var zz = this.z * this.z;
		var zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
	,__class__: h3d_Quat
};
var h3d_VectorImpl = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["h3d.VectorImpl"] = h3d_VectorImpl;
h3d_VectorImpl.__name__ = "h3d.VectorImpl";
h3d_VectorImpl.prototype = {
	__class__: h3d_VectorImpl
};
var h3d_Vector4Impl = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Vector4Impl"] = h3d_Vector4Impl;
h3d_Vector4Impl.__name__ = "h3d.Vector4Impl";
h3d_Vector4Impl.prototype = {
	__class__: h3d_Vector4Impl
};
var h3d_anim_AnimatedObject = function() { };
$hxClasses["h3d.anim.AnimatedObject"] = h3d_anim_AnimatedObject;
h3d_anim_AnimatedObject.__name__ = "h3d.anim.AnimatedObject";
var h3d_anim_Animation = function(name,frameCount,sampling) {
	this.name = name;
	this.frameCount = frameCount;
	this.sampling = sampling;
	this.objects = [];
	this.lastEvent = -1;
	this.frame = 0.;
	this.speed = 1.;
	this.loop = true;
	this.pause = false;
};
$hxClasses["h3d.anim.Animation"] = h3d_anim_Animation;
h3d_anim_Animation.__name__ = "h3d.anim.Animation";
h3d_anim_Animation.prototype = {
	getPropValue: function(objectName,propName) {
		return null;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw haxe_Exception.thrown("assert");
	}
	,isPlaying: function() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	,endFrame: function() {
		return this.frameCount;
	}
	,update: function(dt) {
		if(!this.isInstance) {
			throw haxe_Exception.thrown("You must instantiate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			var f0 = this.frame | 0;
			var f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			var _g = f0;
			var _g1 = f1 + 1;
			while(_g < _g1) {
				var f = _g++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					var oldF = this.frame;
					var oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					var _g2 = 0;
					var _g3 = this.events[f];
					while(_g2 < _g3.length) {
						var e = _g3[_g2];
						++_g2;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			var end = this.endFrame();
			var et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
	,__class__: h3d_anim_Animation
};
var h3d_col_Collider = function() { };
$hxClasses["h3d.col.Collider"] = h3d_col_Collider;
h3d_col_Collider.__name__ = "h3d.col.Collider";
h3d_col_Collider.prototype = {
	__class__: h3d_col_Collider
};
var h3d_col_Bounds = function() {
	this.xMin = 1e20;
	this.xMax = -1e20;
	this.yMin = 1e20;
	this.yMax = -1e20;
	this.zMin = 1e20;
	this.zMax = -1e20;
};
$hxClasses["h3d.col.Bounds"] = h3d_col_Bounds;
h3d_col_Bounds.__name__ = "h3d.col.Bounds";
h3d_col_Bounds.__super__ = h3d_col_Collider;
h3d_col_Bounds.prototype = $extend(h3d_col_Collider.prototype,{
	inFrustum: function(f,m) {
		if(m != null) {
			throw haxe_Exception.thrown("Not implemented");
		}
		return f.hasBounds(this);
	}
	,rayIntersection: function(r,bestMatch) {
		var minTx = (this.xMin - r.px) / r.lx;
		var minTy = (this.yMin - r.py) / r.ly;
		var minTz = (this.zMin - r.pz) / r.lz;
		var maxTx = (this.xMax - r.px) / r.lx;
		var maxTy = (this.yMax - r.py) / r.ly;
		var maxTz = (this.zMax - r.pz) / r.lz;
		var realMinTx = minTx > maxTx ? maxTx : minTx;
		var realMinTy = minTy > maxTy ? maxTy : minTy;
		var realMinTz = minTz > maxTz ? maxTz : minTz;
		var realMaxTx = minTx < maxTx ? maxTx : minTx;
		var realMaxTy = minTy < maxTy ? maxTy : minTy;
		var realMaxTz = minTz < maxTz ? maxTz : minTz;
		var a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		var minmax = a > realMaxTz ? realMaxTz : a;
		var a = realMinTx < realMinTy ? realMinTy : realMinTx;
		var maxmin = a < realMinTz ? realMinTz : a;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	,transform: function(m) {
		var xMin = this.xMin;
		var yMin = this.yMin;
		var zMin = this.zMin;
		var xMax = this.xMax;
		var yMax = this.yMax;
		var zMax = this.zMax;
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
		if(xMax < xMin && yMax < yMin && zMax < zMin) {
			return;
		}
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		var x = xMin;
		var y = yMin;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMin;
		var y = yMin;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMin;
		var y = yMax;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMin;
		var y = yMax;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMax;
		var y = yMin;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMax;
		var y = yMin;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMax;
		var y = yMax;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMax;
		var y = yMax;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
	}
	,intersection: function(a,b) {
		var a1 = a.xMin;
		var b1 = b.xMin;
		var xMin = a1 < b1 ? b1 : a1;
		var a1 = a.yMin;
		var b1 = b.yMin;
		var yMin = a1 < b1 ? b1 : a1;
		var a1 = a.zMin;
		var b1 = b.zMin;
		var zMin = a1 < b1 ? b1 : a1;
		var a1 = a.xMax;
		var b1 = b.xMax;
		var xMax = a1 > b1 ? b1 : a1;
		var a1 = a.yMax;
		var b1 = b.yMax;
		var yMax = a1 > b1 ? b1 : a1;
		var a1 = a.zMax;
		var b1 = b.zMax;
		var zMax = a1 > b1 ? b1 : a1;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.xMax = b.xMax;
		this.yMin = b.yMin;
		this.yMax = b.yMax;
		this.zMin = b.zMin;
		this.zMax = b.zMax;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var dz = (this.zMax - this.zMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		var mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
	,__class__: h3d_col_Bounds
});
var h3d_col_Frustum = function(mvp) {
	this.checkNearFar = true;
	this.pleft = new h3d_col_Plane(1,0,0,0.0);
	this.pright = new h3d_col_Plane(1,0,0,0.0);
	this.ptop = new h3d_col_Plane(1,0,0,0.0);
	this.pbottom = new h3d_col_Plane(1,0,0,0.0);
	this.pnear = new h3d_col_Plane(1,0,0,0.0);
	this.pfar = new h3d_col_Plane(1,0,0,0.0);
	if(mvp != null) {
		this.loadMatrix(mvp);
	}
};
$hxClasses["h3d.col.Frustum"] = h3d_col_Frustum;
h3d_col_Frustum.__name__ = "h3d.col.Frustum";
h3d_col_Frustum.prototype = {
	loadMatrix: function(mvp) {
		var _this = this.pleft;
		var p_nx = mvp._14 + mvp._11;
		var p_ny = mvp._24 + mvp._21;
		var p_nz = mvp._34 + mvp._31;
		var p_d = -(mvp._44 + mvp._41);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pright;
		var p_nx = mvp._14 - mvp._11;
		var p_ny = mvp._24 - mvp._21;
		var p_nz = mvp._34 - mvp._31;
		var p_d = mvp._41 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.ptop;
		var p_nx = mvp._14 - mvp._12;
		var p_ny = mvp._24 - mvp._22;
		var p_nz = mvp._34 - mvp._32;
		var p_d = mvp._42 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pbottom;
		var p_nx = mvp._14 + mvp._12;
		var p_ny = mvp._24 + mvp._22;
		var p_nz = mvp._34 + mvp._32;
		var p_d = -(mvp._44 + mvp._42);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pnear;
		var p_nx = mvp._13;
		var p_ny = mvp._23;
		var p_nz = mvp._33;
		var p_d = -mvp._43;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pfar;
		var p_nx = mvp._14 - mvp._13;
		var p_ny = mvp._24 - mvp._23;
		var p_nz = mvp._34 - mvp._33;
		var p_d = mvp._43 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pleft;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pright;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.ptop;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pbottom;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pnear;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pfar;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
	}
	,hasSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x = x1;
		var p_y = y1;
		var p_z = z1;
		var _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.pright;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.ptop;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.pbottom;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			var _this = this.pnear;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
			var _this = this.pfar;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	,hasBounds: function(b) {
		var p = this.pleft;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pright;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.ptop;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pbottom;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		if(this.checkNearFar) {
			var p = this.pnear;
			var a = p.nx;
			var b1 = p.ny;
			var c = p.nz;
			var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
			if(a < 0) {
				a = -a;
			}
			if(b1 < 0) {
				b1 = -b1;
			}
			if(c < 0) {
				c = -c;
			}
			var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
			if(dd + rr - p.d * 2 < 0) {
				return false;
			}
			var p = this.pfar;
			var a = p.nx;
			var b1 = p.ny;
			var c = p.nz;
			var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
			if(a < 0) {
				a = -a;
			}
			if(b1 < 0) {
				b1 = -b1;
			}
			if(c < 0) {
				c = -c;
			}
			var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
			if(dd + rr - p.d * 2 < 0) {
				return false;
			}
		}
		return true;
	}
	,__class__: h3d_col_Frustum
};
var h3d_col_Ray = function() {
};
$hxClasses["h3d.col.Ray"] = h3d_col_Ray;
h3d_col_Ray.__name__ = "h3d.col.Ray";
h3d_col_Ray.prototype = {
	normalize: function() {
		var l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-20) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
	,__class__: h3d_col_Ray
};
var h3d_col_Plane = function(nx,ny,nz,d) {
	this.nx = nx;
	this.ny = ny;
	this.nz = nz;
	this.d = d;
};
$hxClasses["h3d.col.Plane"] = h3d_col_Plane;
h3d_col_Plane.__name__ = "h3d.col.Plane";
h3d_col_Plane.prototype = {
	__class__: h3d_col_Plane
};
var h3d_scene_Object = function(parent) {
	this.prevAbsPosFrame = -1;
	this.flags = 32768;
	this.absPos = new h3d_MatrixImpl();
	this.absPos.identity();
	this.x = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	this.y = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	this.z = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	this.scaleX = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	this.scaleY = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	this.scaleZ = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	this.qRot = new h3d_Quat();
	var f = 1;
	var b = this.follow != null;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	var f = 2;
	this.flags |= f;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h3d.scene.Object"] = h3d_scene_Object;
h3d_scene_Object.__name__ = "h3d.scene.Object";
h3d_scene_Object.prototype = {
	set_cullingCollider: function(c) {
		this.cullingCollider = c;
		var f = 4096;
		this.flags &= ~f;
		return c;
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d_VectorImpl(0.,0.,0.);
		}
		var m = this.absPos;
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,getInvPos: function() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d_MatrixImpl();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	,addChild: function(o) {
		this.addChildAt(o,this.children.length);
	}
	,addChildAt: function(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == o) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			var old = (o.flags & 32) != 0;
			var f = 32;
			o.flags &= ~f;
			o.parent.removeChild(o);
			var f = 32;
			if(old) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var c = b;
		if(c && (o.flags & 131072) != 0) {
			var f = 262144;
			o.flags |= f;
		}
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	,iterVisibleMeshes: function(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		var f = 32;
		this.flags |= f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		var f = 32;
		this.flags &= ~f;
		var i = this.children.length - 1;
		while(i >= 0) this.children[i--].onRemove();
	}
	,removeChild: function(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
			var c = b;
			if(c && (o.flags & 131072) != 0) {
				var f = 262144;
				o.flags |= f;
			}
		}
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h3d_scene_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,getAbsPos: function() {
		this.syncPos();
		return this.absPos;
	}
	,draw: function(ctx) {
	}
	,calcPrevAbsPos: function() {
		if(this.prevAbsPosFrame == -1) {
			this.prevAbsPos = null;
		} else if(this.prevAbsPosFrame < hxd_Timer.frameCount) {
			this.prevAbsPosFrame = hxd_Timer.frameCount;
			if(this.prevAbsPos == null) {
				this.prevAbsPos = this.absPos.clone();
			} else {
				this.prevAbsPos.load(this.absPos);
			}
		}
	}
	,calcAbsPos: function() {
		this.calcPrevAbsPos();
		this.qRot.toMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				var _this = this.absPos;
				var a = this.absPos;
				var b = this.parent.absPos;
				var m11 = a._11;
				var m12 = a._12;
				var m13 = a._13;
				var m21 = a._21;
				var m22 = a._22;
				var m23 = a._23;
				var a31 = a._31;
				var a32 = a._32;
				var a33 = a._33;
				var a41 = a._41;
				var a42 = a._42;
				var a43 = a._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
				this.absPos._41 = this.x + this.follow.absPos._41;
				this.absPos._42 = this.y + this.follow.absPos._42;
				this.absPos._43 = this.z + this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null && (this.flags & 2048) == 0) {
			var _this = this.absPos;
			var a = this.absPos;
			var b = this.parent.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.defaultTransform != null) {
			var _this = this.absPos;
			var a = this.defaultTransform;
			var b = this.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	,sync: function(ctx) {
	}
	,syncRec: function(ctx) {
		if(this.currentAnimation != null) {
			var old = this.parent;
			var dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		if((this.flags & 32768) == 0 && ((this.flags & 4) != 0 || (this.flags & 2) == 0 || !ctx.visibleFlag)) {
			return;
		}
		var old = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		if(ctx.cullingCollider != null && (this.cullingCollider == null || (this.flags & 4096) != 0)) {
			this.set_cullingCollider(ctx.cullingCollider);
			var f = 4096;
			this.flags |= f;
		} else if((this.flags & 4096) != 0) {
			this.set_cullingCollider(null);
		}
		var prevCollider = ctx.cullingCollider;
		if((this.flags & 128) != 0) {
			ctx.cullingCollider = this.cullingCollider;
		}
		var changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		if((this.flags & 8192) != 0) {
			if((this.flags & 16384) != 0 && !changed && !ctx.wasContextLost) {
				ctx.visibleFlag = old;
				ctx.cullingCollider = prevCollider;
				return;
			}
			var f = 16384;
			this.flags |= f;
		}
		var f = 262144;
		this.flags &= ~f;
		var f = 131072;
		this.flags |= f;
		this.sync(ctx);
		var f = 131072;
		this.flags &= ~f;
		changed = changed || (this.flags & 262144) != 0;
		if((this.flags & 262144) != 0) {
			this.calcAbsPos();
		}
		var f = 1;
		var b = this.follow != null;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var c = b;
		if(c && (this.flags & 131072) != 0) {
			var f = 262144;
			this.flags |= f;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					var f = 1;
					var b = true;
					if(b) {
						c.flags |= f;
					} else {
						c.flags &= ~f;
					}
					var c1 = b;
					if(c1 && (c.flags & 131072) != 0) {
						var f1 = 262144;
						c.flags |= f1;
					}
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old;
		ctx.cullingCollider = prevCollider;
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var c = b;
			if(c && (this.flags & 131072) != 0) {
				var f = 262144;
				this.flags |= f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
				var c1 = b;
				if(c1 && (c.flags & 131072) != 0) {
					var f1 = 262144;
					c.flags |= f1;
				}
			}
		}
	}
	,emit: function(ctx) {
	}
	,emitRec: function(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0 && !ctx.computingStatic) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var c = b;
			if(c && (this.flags & 131072) != 0) {
				var f = 262144;
				this.flags |= f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
				var c1 = b;
				if(c1 && (c.flags & 131072) != 0) {
					var f1 = 262144;
					c.flags |= f1;
				}
			}
		}
		var prevForcedScreenRatio = ctx.forcedScreenRatio;
		if((this.flags & 65536) == 0 || !ctx.computeVelocity || (this.flags & 8192) != 0 || (this.flags & 4) != 0) {
			this.prevAbsPosFrame = -1;
		} else if(this.prevAbsPosFrame == -1) {
			this.prevAbsPosFrame = 0;
		}
		this.calcPrevAbsPos();
		if((this.flags & 4) == 0 || ctx.computingStatic) {
			this.emit(ctx);
			var f = 65536;
			this.flags &= ~f;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.emitRec(ctx);
		}
		ctx.forcedScreenRatio = prevForcedScreenRatio;
	}
	,__class__: h3d_scene_Object
};
var h3d_col_Sphere = function(x,y,z,r) {
	if(r == null) {
		r = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var sx = x;
	var sy = y;
	var sz = z;
	var sr = r;
	if(sr == null) {
		sr = 0.;
	}
	if(sz == null) {
		sz = 0.;
	}
	if(sy == null) {
		sy = 0.;
	}
	if(sx == null) {
		sx = 0.;
	}
	this.x = sx;
	this.y = sy;
	this.z = sz;
	this.r = sr;
};
$hxClasses["h3d.col.Sphere"] = h3d_col_Sphere;
h3d_col_Sphere.__name__ = "h3d.col.Sphere";
h3d_col_Sphere.__super__ = h3d_col_Collider;
h3d_col_Sphere.prototype = $extend(h3d_col_Collider.prototype,{
	rayIntersection: function(r,bestMatch) {
		var r2 = this.r * this.r;
		var px = r.px + r.lx;
		var py = r.py + r.ly;
		var pz = r.pz + r.lz;
		var a = r.lx * r.lx + r.ly * r.ly + r.lz * r.lz;
		var b = 2 * r.lx * (this.x - px) + 2 * r.ly * (this.y - py) + 2 * r.lz * (this.z - pz);
		var c = this.x * this.x + this.y * this.y + this.z * this.z + (px * px + py * py + pz * pz) - 2 * (this.x * px + this.y * py + this.z * pz) - r2;
		var d = b * b - 4 * a * c;
		if(d < 0) {
			return -1;
		}
		d = Math.sqrt(d);
		var t = (-b + d) / (2 * a);
		return 1 - t;
	}
	,inFrustum: function(f,m) {
		if(m != null) {
			return this.inFrustumMatrix(f,m);
		}
		return f.hasSphere(this);
	}
	,inFrustumMatrix: function(f,m) {
		var oldX = this.x;
		var oldY = this.y;
		var oldZ = this.z;
		var oldR = this.r;
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		this.x = v_x;
		this.y = v_y;
		this.z = v_z;
		var _this = m;
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var scale_x = x;
		var scale_y = y;
		var scale_z = z;
		scale_x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
		scale_y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
		scale_z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
		if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
			scale_x *= -1;
			scale_y *= -1;
			scale_z *= -1;
		}
		this.r *= Math.abs(Math.max(Math.max(scale_x,scale_y),scale_z));
		var res = f.hasSphere(this);
		this.x = oldX;
		this.y = oldY;
		this.z = oldZ;
		this.r = oldR;
		return res;
	}
	,__class__: h3d_col_Sphere
});
var h3d_impl_Feature = $hxEnums["h3d.impl.Feature"] = { __ename__:true,__constructs__:null
	,StandardDerivatives: {_hx_name:"StandardDerivatives",_hx_index:0,__enum__:"h3d.impl.Feature",toString:$estr}
	,FloatTextures: {_hx_name:"FloatTextures",_hx_index:1,__enum__:"h3d.impl.Feature",toString:$estr}
	,AllocDepthBuffer: {_hx_name:"AllocDepthBuffer",_hx_index:2,__enum__:"h3d.impl.Feature",toString:$estr}
	,HardwareAccelerated: {_hx_name:"HardwareAccelerated",_hx_index:3,__enum__:"h3d.impl.Feature",toString:$estr}
	,MultipleRenderTargets: {_hx_name:"MultipleRenderTargets",_hx_index:4,__enum__:"h3d.impl.Feature",toString:$estr}
	,Queries: {_hx_name:"Queries",_hx_index:5,__enum__:"h3d.impl.Feature",toString:$estr}
	,SRGBTextures: {_hx_name:"SRGBTextures",_hx_index:6,__enum__:"h3d.impl.Feature",toString:$estr}
	,ShaderModel3: {_hx_name:"ShaderModel3",_hx_index:7,__enum__:"h3d.impl.Feature",toString:$estr}
	,BottomLeftCoords: {_hx_name:"BottomLeftCoords",_hx_index:8,__enum__:"h3d.impl.Feature",toString:$estr}
	,Wireframe: {_hx_name:"Wireframe",_hx_index:9,__enum__:"h3d.impl.Feature",toString:$estr}
	,InstancedRendering: {_hx_name:"InstancedRendering",_hx_index:10,__enum__:"h3d.impl.Feature",toString:$estr}
};
h3d_impl_Feature.__constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe,h3d_impl_Feature.InstancedRendering];
h3d_impl_Feature.__empty_constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe,h3d_impl_Feature.InstancedRendering];
var h3d_impl_RenderFlag = $hxEnums["h3d.impl.RenderFlag"] = { __ename__:true,__constructs__:null
	,CameraHandness: {_hx_name:"CameraHandness",_hx_index:0,__enum__:"h3d.impl.RenderFlag",toString:$estr}
};
h3d_impl_RenderFlag.__constructs__ = [h3d_impl_RenderFlag.CameraHandness];
h3d_impl_RenderFlag.__empty_constructs__ = [h3d_impl_RenderFlag.CameraHandness];
var h3d_impl_Driver = function() {
};
$hxClasses["h3d.impl.Driver"] = h3d_impl_Driver;
h3d_impl_Driver.__name__ = "h3d.impl.Driver";
h3d_impl_Driver.prototype = {
	hasFeature: function(f) {
		return false;
	}
	,setRenderFlag: function(r,value) {
	}
	,isSupportedFormat: function(fmt) {
		return false;
	}
	,isDisposed: function() {
		return true;
	}
	,begin: function(frame) {
	}
	,generateMipMaps: function(texture) {
		throw haxe_Exception.thrown("Mipmaps auto generation is not supported on this platform");
	}
	,clear: function(color,depth,stencil) {
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	,resize: function(width,height) {
	}
	,selectShader: function(shader) {
		return false;
	}
	,selectMaterial: function(pass) {
	}
	,uploadShaderBuffers: function(buffers,which) {
	}
	,selectBuffer: function(buffer) {
	}
	,selectMultiBuffers: function(format,buffers) {
	}
	,draw: function(ibuf,startIndex,ntriangles) {
	}
	,drawInstanced: function(ibuf,commands) {
	}
	,setRenderZone: function(x,y,width,height) {
	}
	,setRenderTarget: function(tex,layer,mipLevel,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
	}
	,setRenderTargets: function(textures,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
	}
	,setDepth: function(tex) {
	}
	,allocDepthBuffer: function(b) {
		return null;
	}
	,getDefaultDepthBuffer: function() {
		return null;
	}
	,end: function() {
	}
	,setDebug: function(b) {
	}
	,allocTexture: function(t) {
		return null;
	}
	,allocBuffer: function(b) {
		return null;
	}
	,disposeTexture: function(t) {
	}
	,disposeBuffer: function(b) {
	}
	,uploadIndexData: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadBufferData: function(b,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadBufferBytes: function(b,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
	}
	,copyTexture: function(from,to) {
		return false;
	}
	,__class__: h3d_impl_Driver
};
var h3d_impl__$GlDriver_CompiledShader = function(s,kind,shader) {
	this.s = s;
	this.kind = kind;
	this.shader = shader;
};
$hxClasses["h3d.impl._GlDriver.CompiledShader"] = h3d_impl__$GlDriver_CompiledShader;
h3d_impl__$GlDriver_CompiledShader.__name__ = "h3d.impl._GlDriver.CompiledShader";
h3d_impl__$GlDriver_CompiledShader.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledShader
};
var h3d_impl__$GlDriver_CompiledAttribute = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledAttribute"] = h3d_impl__$GlDriver_CompiledAttribute;
h3d_impl__$GlDriver_CompiledAttribute.__name__ = "h3d.impl._GlDriver.CompiledAttribute";
h3d_impl__$GlDriver_CompiledAttribute.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledAttribute
};
var h3d_impl__$GlDriver_CompiledProgram = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledProgram"] = h3d_impl__$GlDriver_CompiledProgram;
h3d_impl__$GlDriver_CompiledProgram.__name__ = "h3d.impl._GlDriver.CompiledProgram";
h3d_impl__$GlDriver_CompiledProgram.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledProgram
};
var h3d_impl_GlDriver = function(antiAlias) {
	if(antiAlias == null) {
		antiAlias = 0;
	}
	this.features = new haxe_ds_EnumValueMap();
	this.maxCompressedTexturesSupport = 0;
	this.rightHanded = false;
	this.firstShader = true;
	this.boundTextures = [];
	this.curTargets = [];
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	this.currentDivisor = _g;
	this.curColorMask = -1;
	this.lastActiveIndex = 0;
	this.curStEnabled = false;
	this.curStMaskBits = -1;
	this.curStOpBits = -1;
	this.curMatBits = -1;
	this.maxIdxCurAttribs = 0;
	this.curAttribs = [];
	h3d_impl_Driver.call(this);
	this.canvas = hxd_Window.getInstance().canvas;
	var options = { alpha : false, stencil : true, antialias : antiAlias > 0};
	if(h3d_impl_GlDriver.ALLOW_WEBGL2) {
		this.gl = this.canvas.getContext("webgl2",options);
	}
	if(this.gl == null) {
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,options);
	}
	if(this.gl == null) {
		throw haxe_Exception.thrown("Could not acquire GL context");
	}
	if(typeof(WebGLDebugUtils) != "undefined") {
		this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
		this.glDebug = true;
	}
	this.commonFB = this.gl.createFramebuffer();
	this.programs = new haxe_ds_IntMap();
	this.defStencil = new h3d_mat_Stencil();
	this.frame = hxd_Timer.frameCount;
	var v = this.gl.getParameter(7938);
	var reg = new EReg("ES ([0-9]+\\.[0-9]+)","");
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(1));
	}
	var reg = new EReg("[0-9]+\\.[0-9]+","");
	var v = this.gl.getParameter(35724);
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(0));
		this.shaderVersion = Math.round(parseFloat(reg.matched(0)) * 100);
	}
	this.drawMode = 4;
	this.makeFeatures();
	if(this.hasFeature(h3d_impl_Feature.InstancedRendering) && this.glES < 3) {
		var extension = this.gl.getExtension("ANGLE_instanced_arrays");
		this.gl["vertexAttribDivisor"] = $bind(extension,extension.vertexAttribDivisorANGLE);
		this.gl["drawElementsInstanced"] = $bind(extension,extension.drawElementsInstancedANGLE);
	}
	hxsl_SharedShader.UNROLL_LOOPS = !this.hasFeature(h3d_impl_Feature.ShaderModel3);
	this.gl.pixelStorei(3333,1);
	this.gl.pixelStorei(3317,1);
};
$hxClasses["h3d.impl.GlDriver"] = h3d_impl_GlDriver;
h3d_impl_GlDriver.__name__ = "h3d.impl.GlDriver";
h3d_impl_GlDriver.__super__ = h3d_impl_Driver;
h3d_impl_GlDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	setRenderFlag: function(r,value) {
		this.rightHanded = value > 0;
	}
	,setDebug: function(d) {
		this.debug = d;
	}
	,begin: function(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	,makeCompiler: function() {
		var glout = new hxsl_GlslOut();
		glout.glES = this.glES;
		glout.version = this.shaderVersion;
		glout.intelDriverFix = this.isIntelGpu;
		return glout;
	}
	,getDriverName: function(details) {
		var render = this.gl.getParameter(7937);
		if(details) {
			render = (render == null ? "null" : "" + render) + (" GLv" + Std.string(this.gl.getParameter(7938)));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	,compileShader: function(glout,shader) {
		var type;
		switch(shader.kind._hx_index) {
		case 0:
			type = 35633;
			break;
		case 1:
			type = 35632;
			break;
		case 4:
			throw haxe_Exception.thrown("Compute shader is not supported");
		default:
			throw haxe_Exception.thrown("assert");
		}
		var s = this.gl.createShader(type);
		if(shader.code == null) {
			shader.code = glout.run(shader.data);
			shader.data.funs = null;
		}
		this.gl.shaderSource(s,shader.code);
		this.gl.compileShader(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			var log = this.gl.getShaderInfoLog(s);
			var lid = Std.parseInt(HxOverrides.substr(log,9,null));
			var line = lid == null ? null : shader.code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			var codeLines = shader.code.split("\n");
			var _g = 0;
			var _g1 = codeLines.length;
			while(_g < _g1) {
				var i = _g++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw haxe_Exception.thrown("An error occurred compiling the shaders: " + log + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d_impl__$GlDriver_CompiledShader(s,shader.kind,shader);
	}
	,initShader: function(p,s,shader,rt) {
		var prefix;
		switch(s.kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		default:
			prefix = "compute";
		}
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		s.textures = [];
		var index = 0;
		var curT = null;
		var mode = 0;
		var name = "";
		var t = shader.textures;
		while(t != null) {
			var tt = t.type;
			var count = 1;
			switch(tt._hx_index) {
			case 15:
				var _gsize = tt.size;
				if(_gsize._hx_index == 0) {
					var n = _gsize.v;
					var t1 = tt.t;
					tt = t1;
					count = n;
				}
				break;
			case 17:
				tt = hxsl_Type.TSampler(hxsl_TexDimension.T2D,false);
				break;
			default:
			}
			if(curT == null || !Type.enumEq(tt,curT)) {
				curT = tt;
				switch(tt._hx_index) {
				case 10:
					var dim = tt.dim;
					var arr = tt.isArray;
					switch(dim._hx_index) {
					case 1:
						mode = arr ? 35866 : 3553;
						break;
					case 2:
						if(arr == false) {
							mode = 32879;
						} else {
							throw haxe_Exception.thrown("Texture not supported " + Std.string(tt));
						}
						break;
					case 3:
						if(arr == false) {
							mode = 34067;
						} else {
							throw haxe_Exception.thrown("Texture not supported " + Std.string(tt));
						}
						break;
					default:
						throw haxe_Exception.thrown("Texture not supported " + Std.string(tt));
					}
					name = "Textures" + (dim == hxsl_TexDimension.T2D ? "" : HxOverrides.substr($hxEnums[dim.__enum__].__constructs__[dim._hx_index]._hx_name,1,null)) + (arr ? "Array" : "");
					break;
				case 11:
					var dim1 = tt.dim;
					var arr1 = tt.isArray;
					var chans = tt.channels;
					throw haxe_Exception.thrown("Texture not supported " + Std.string(tt));
				default:
					throw haxe_Exception.thrown("Unsupported texture type " + Std.string(tt));
				}
				index = 0;
			}
			var _g = 0;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				var loc = this.gl.getUniformLocation(p.p,prefix + name + "[" + index + "]");
				if(loc == null) {
					throw haxe_Exception.thrown("Texture " + rt.spec.instances[t.instance].shader.data.name + "." + t.name + " is missing from generated shader");
				}
				s.textures.push({ u : loc, t : curT, mode : mode});
				++index;
			}
			t = t.next;
		}
		if(shader.bufferCount > 0) {
			s.bufferTypes = [];
			var bp = s.shader.buffers;
			while(bp != null) {
				var kind;
				var _g = bp.type;
				if(_g._hx_index == 16) {
					var kind1 = _g.kind;
					kind = kind1;
				} else {
					throw haxe_Exception.thrown("assert");
				}
				s.bufferTypes.push(kind);
				bp = bp.next;
			}
			var _g = [];
			var _g1 = 0;
			var _g2 = shader.bufferCount;
			while(_g1 < _g2) {
				var i = _g1++;
				var tmp;
				switch(s.bufferTypes[i]._hx_index) {
				case 0:
					tmp = this.gl.getUniformBlockIndex(p.p,(shader.kind == hxsl_FunctionKind.Vertex ? "vertex_" : "") + "uniform_buffer" + i);
					break;
				case 1:
					throw haxe_Exception.thrown("Storage buffer not supported in WebGL");
				case 2:
					throw haxe_Exception.thrown("RW buffer not supported in WebGL");
				default:
					throw haxe_Exception.thrown("assert");
				}
				_g.push(tmp);
			}
			s.buffers = _g;
			var start = 0;
			if(s.kind == hxsl_FunctionKind.Fragment) {
				start = rt.vertex.bufferCount;
			}
			var _g = 0;
			var _g1 = shader.bufferCount;
			while(_g < _g1) {
				var i = _g++;
				switch(s.bufferTypes[i]._hx_index) {
				case 0:
					this.gl.uniformBlockBinding(p.p,s.buffers[i],i + start);
					break;
				case 1:case 2:
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
			}
		}
	}
	,selectShader: function(shader) {
		var p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d_impl__$GlDriver_CompiledProgram();
			var glout = this.makeCompiler();
			p.vertex = this.compileShader(glout,shader.vertex);
			if(shader.fragment != null) {
				p.fragment = this.compileShader(glout,shader.fragment);
			}
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			if(p.fragment != null) {
				this.gl.attachShader(p.p,p.fragment.s);
			}
			var log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Shader linkage error: " + Std.string(e) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			if(p.fragment != null) {
				this.gl.deleteShader(p.fragment.s);
			}
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw haxe_Exception.thrown("Program linkage failure: " + log + "\nVertex=\n" + shader.vertex.code + (shader.fragment == null ? "" : "\n\nFragment=\n" + shader.fragment.code));
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex,shader);
			if(p.fragment != null) {
				this.initShader(p,p.fragment,shader.fragment,shader);
			}
			p.attribs = [];
			p.hasAttribIndex = 0;
			var format = [];
			var _g = 0;
			var _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.kind._hx_index == 1) {
					var t = hxd_InputFormat.fromHXSL(v.type);
					var index = this.gl.getAttribLocation(p.p,glout.varNames.h.hasOwnProperty(v.id) ? glout.varNames.h[v.id] : v.name);
					if(index < 0) {
						continue;
					}
					if(index >= 32) {
						throw haxe_Exception.thrown("assert");
					}
					var a = new h3d_impl__$GlDriver_CompiledAttribute();
					a.type = 5126;
					a.index = index;
					a.size = t & 7;
					var _g2 = v.type;
					if(_g2._hx_index == 9) {
						var n = _g2.size;
						a.type = 5120;
						a.size = n;
					}
					a.divisor = 0;
					if(v.qualifiers != null) {
						var _g3 = 0;
						var _g4 = v.qualifiers;
						while(_g3 < _g4.length) {
							var q = _g4[_g3];
							++_g3;
							if(q._hx_index == 9) {
								var n1 = q.v;
								a.divisor = n1;
							}
						}
					}
					p.attribs.push(a);
					p.hasAttribIndex |= 1 << a.index;
					format.push(new hxd_BufferInput(v.name,t,0));
				}
			}
			p.format = hxd_BufferFormat.make(format);
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.setProgram(p);
		return true;
	}
	,setProgram: function(p) {
		this.gl.useProgram(p.p);
		var _g = 0;
		var _g1 = p.attribs;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(!this.curAttribs[a.index]) {
				this.gl.enableVertexAttribArray(a.index);
				this.curAttribs[a.index] = true;
				if(this.maxIdxCurAttribs < a.index) {
					this.maxIdxCurAttribs = a.index;
				}
			}
		}
		var lastIdxCurAttribTrue = 0;
		var _g = 0;
		var _g1 = this.maxIdxCurAttribs + 1;
		while(_g < _g1) {
			var i = _g++;
			if(this.curAttribs[i] && (p.hasAttribIndex & 1 << i) == 0) {
				this.gl.disableVertexAttribArray(i);
				this.curAttribs[i] = false;
			} else if(this.curAttribs[i]) {
				lastIdxCurAttribTrue = i;
			}
		}
		this.maxIdxCurAttribs = lastIdxCurAttribTrue;
		this.curShader = p;
		this.curBuffer = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
	}
	,uploadShaderBuffers: function(buf,which) {
		this.uploadBuffer(buf,this.curShader.vertex,buf.vertex,which);
		if(this.curShader.fragment != null) {
			this.uploadBuffer(buf,this.curShader.fragment,buf.fragment,which);
		}
	}
	,uploadBuffer: function(buffer,s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				var a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				var a = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a);
			}
			break;
		case 2:
			var tcount = s.textures.length;
			var _g = 0;
			var _g1 = s.textures.length;
			while(_g < _g1) {
				var i = _g++;
				var t = buf.tex[i];
				var pt = s.textures[i];
				if(t == null || t.t == null && (t.isDepth() || t.realloc == null)) {
					var _g2 = pt.t;
					if(_g2._hx_index == 10) {
						var _gisArray = _g2.isArray;
						if(_g2.dim._hx_index == 3) {
							if(_gisArray == false) {
								t = h3d_mat_Texture.defaultCubeTexture();
							} else {
								throw haxe_Exception.thrown("Missing texture");
							}
						} else if(_gisArray == false) {
							var color = h3d_mat_Defaults.loadingTextureColor;
							t = h3d_mat_Texture.fromColor(color,(color >>> 24) / 255);
						} else {
							throw haxe_Exception.thrown("Missing texture");
						}
					} else {
						throw haxe_Exception.thrown("Missing texture");
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					var s1 = this.curShader;
					t.alloc();
					t.realloc();
					if(this.curShader != s1) {
						this.setProgram(s1);
						this.uploadShaderBuffers(buffer,0);
						this.uploadShaderBuffers(buffer,1);
						this.uploadShaderBuffers(buffer,2);
						return;
					}
				}
				t.set_lastFrame(this.frame);
				if(pt.u == null) {
					continue;
				}
				var idx = s.kind == hxsl_FunctionKind.Fragment ? this.curShader.vertex.textures.length + i : i;
				if(this.boundTextures[idx] != t.t) {
					this.boundTextures[idx] = t.t;
					var mode = this.getBindType(t);
					if(mode != pt.mode) {
						throw haxe_Exception.thrown("Texture format mismatch: " + Std.string(t) + " should be " + Std.string(pt.t));
					}
					this.gl.activeTexture(33984 + idx);
					this.gl.uniform1i(pt.u,idx);
					this.gl.bindTexture(mode,t.t.t);
					this.lastActiveIndex = idx;
				}
				var mip = t.mipMap._hx_index;
				var filter = t.filter._hx_index;
				var wrap = t.wrap._hx_index;
				var bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					var flags = h3d_impl_GlDriver.TFILTERS[mip][filter];
					var mode1 = pt.mode;
					this.gl.texParameteri(mode1,10240,flags[0]);
					this.gl.texParameteri(mode1,10241,flags[1]);
					this.gl.texParameteri(mode1,34892,0);
					var w = h3d_impl_GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode1,10242,w);
					this.gl.texParameteri(mode1,10243,w);
				}
				if(t.t.startMip != t.startingMip) {
					this.gl.texParameteri(pt.mode,33084,t.startingMip);
					t.t.startMip = t.startingMip;
				}
			}
			break;
		case 3:
			if(s.buffers != null) {
				var start = 0;
				if(s.kind == hxsl_FunctionKind.Fragment && this.curShader.vertex.buffers != null) {
					start = this.curShader.vertex.buffers.length;
				}
				var _g = 0;
				var _g1 = s.buffers.length;
				while(_g < _g1) {
					var i = _g++;
					switch(s.bufferTypes[i]._hx_index) {
					case 0:
						this.gl.bindBufferBase(35345,i + start,buf.buffers[i].vbuf);
						break;
					case 1:
						this.gl.bindBufferBase(37074,i + start,buf.buffers[i].vbuf);
						break;
					case 2:
						if((buf.buffers[i].flags & 1 << h3d_BufferFlag.ReadWriteBuffer._hx_index) == 0) {
							throw haxe_Exception.thrown("Buffer was allocated without ReadWriteBuffer flag");
						}
						this.gl.bindBufferBase(37074,i + start,buf.buffers[i].vbuf);
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
				}
			}
			break;
		}
	}
	,selectMaterial: function(pass) {
		var bits = pass.bits;
		if(this.curTarget == null == this.rightHanded) {
			switch(pass.culling._hx_index) {
			case 1:
				bits = bits & -4 | 2;
				break;
			case 2:
				bits = bits & -4 | 1;
				break;
			default:
			}
		}
		this.selectMaterialBits(bits);
		if(this.curColorMask != pass.colorMask) {
			var m = pass.colorMask;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
			var mi = m >> 4;
			if(mi > 0) {
				throw haxe_Exception.thrown("GL ColorMaski support requires hlsdl 1.14+");
			}
			this.curColorMask = m;
		}
		var s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.maskBits);
	}
	,selectMaterialBits: function(bits) {
		var diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		var wireframe = (bits & 268435456) != 0;
		this.drawMode = wireframe ? 3 : 4;
		if((diff & 3) != 0) {
			var cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d_impl_GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			var csrc = bits >> 6 & 15;
			var cdst = bits >> 10 & 15;
			var asrc = bits >> 14 & 15;
			var adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst],h3d_impl_GlDriver.BLEND[asrc],h3d_impl_GlDriver.BLEND[adst]);
			}
		}
		if((diff & 264241152) != 0) {
			var cop = bits >> 22 & 7;
			var aop = bits >> 25 & 7;
			if(cop == aop) {
				this.gl.blendEquation(h3d_impl_GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d_impl_GlDriver.OP[cop],h3d_impl_GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			var cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d_impl_GlDriver.COMPARE[cmp]);
			}
		}
		this.curMatBits = bits;
	}
	,selectStencilBits: function(opBits,maskBits) {
		var diffOp = opBits ^ this.curStOpBits;
		var diffMask = maskBits ^ this.curStMaskBits;
		if((diffOp | diffMask) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 9 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 3 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 21 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 15 & 7]);
		}
		if((diffOp & 7 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.COMPARE[opBits & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffOp & 28672 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.COMPARE[opBits >> 12 & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffMask & 65280) != 0) {
			var w = maskBits >> 8 & 255;
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[2],w);
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[1],w);
		}
		this.curStOpBits = opBits;
		this.curStMaskBits = maskBits;
	}
	,clear: function(color,depth,stencil) {
		var bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			this.curColorMask = 15;
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits |= 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.maskBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		}
	}
	,resize: function(width,height) {
		if(this.canvas.style.width == "") {
			var tmp = width / window.devicePixelRatio | 0;
			this.canvas.style.width = tmp + "px";
			var tmp = height / window.devicePixelRatio | 0;
			this.canvas.style.height = tmp + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.t = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	,getChannels: function(t) {
		switch(t.internalFmt) {
		case 6407:
			return 6407;
		case 6408:
			return 6408;
		case 32857:
			return 6408;
		case 6403:case 33321:case 33322:case 33325:case 33326:
			return 6403;
		case 33319:case 33323:case 33324:case 33327:case 33328:
			return 33319;
		case 34836:case 34842:
			return 6408;
		case 35898:
			return 6407;
		case 35904:case 35905:
			return 6407;
		case 32859:case 33777:case 33778:case 33779:case 36492:
			return 6408;
		case 32852:case 34837:case 34843:case 36495:
			return 6407;
		default:
			throw haxe_Exception.thrown("Invalid format " + t.internalFmt);
		}
	}
	,isSupportedFormat: function(fmt) {
		switch(fmt._hx_index) {
		case 2:
			return true;
		case 3:case 4:
			return this.hasFeature(h3d_impl_Feature.FloatTextures);
		case 14:case 15:
			return this.hasFeature(h3d_impl_Feature.SRGBTextures);
		case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 16:case 17:
			return this.glES >= 3;
		case 22:
			var n = fmt.v;
			return n <= this.maxCompressedTexturesSupport;
		default:
			return false;
		}
	}
	,getBindType: function(t) {
		if((t.flags & 1 << h3d_mat_TextureFlags.Is3D._hx_index) != 0) {
			return 32879;
		}
		var isArray = (t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0;
		if((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			return 34067;
		}
		if(isArray) {
			return 35866;
		} else {
			return 3553;
		}
	}
	,allocTexture: function(t) {
		var _gthis = this;
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var tt = this.gl.createTexture();
		var bind = this.getBindType(t);
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind, bias : 0, startMip : t.startingMip};
		var _g = t.format;
		switch(_g._hx_index) {
		case 1:
			tt1.internalFmt = 32856;
			break;
		case 2:
			break;
		case 3:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.pixelFmt = 5131;
				tt1.internalFmt = 34842;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 4:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.internalFmt = 34836;
				tt1.pixelFmt = 5126;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 33321;
			break;
		case 6:
			tt1.internalFmt = 33325;
			tt1.pixelFmt = 5131;
			break;
		case 7:
			tt1.internalFmt = 33326;
			tt1.pixelFmt = 5126;
			break;
		case 8:
			tt1.internalFmt = 33323;
			break;
		case 9:
			tt1.internalFmt = 33327;
			tt1.pixelFmt = 5131;
			break;
		case 10:
			tt1.internalFmt = 33328;
			tt1.pixelFmt = 5126;
			break;
		case 11:
			tt1.internalFmt = 6407;
			break;
		case 12:
			tt1.internalFmt = 34843;
			tt1.pixelFmt = 5131;
			break;
		case 13:
			tt1.internalFmt = 34837;
			tt1.pixelFmt = 5126;
			break;
		case 14:
			tt1.internalFmt = 35905;
			break;
		case 16:
			tt1.internalFmt = 32857;
			tt1.pixelFmt = 33640;
			break;
		case 17:
			tt1.internalFmt = 35898;
			tt1.pixelFmt = 35899;
			break;
		case 18:
			tt1.internalFmt = 33322;
			tt1.pixelFmt = 5123;
			break;
		case 19:
			tt1.internalFmt = 33324;
			tt1.pixelFmt = 5123;
			break;
		case 20:
			tt1.internalFmt = 32852;
			tt1.pixelFmt = 5123;
			break;
		case 21:
			tt1.internalFmt = 32859;
			tt1.pixelFmt = 5123;
			break;
		case 22:
			var n = _g.v;
			if(n <= this.maxCompressedTexturesSupport) {
				if((t.width & 3) != 0 || (t.height & 3) != 0) {
					throw haxe_Exception.thrown("Compressed texture " + Std.string(t) + " has size " + t.width + "x" + t.height + " - must be a multiple of 4");
				}
				switch(n) {
				case 1:
					tt1.internalFmt = 33777;
					break;
				case 2:
					tt1.internalFmt = 33778;
					break;
				case 3:
					tt1.internalFmt = 33779;
					break;
				case 6:
					tt1.internalFmt = 36495;
					break;
				case 7:
					tt1.internalFmt = 36492;
					break;
				default:
					throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
				}
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		default:
			throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
		}
		if(tt1.pixelFmt == 5123 && !this.has16Bits) {
			throw haxe_Exception.thrown("16 bit textures requires EXT_texture_norm16 extension");
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(bind,tt1.t);
		var outOfMem = false;
		this.gl.texParameteri(bind,33084,t.startingMip);
		this.gl.texParameteri(bind,33085,t.get_mipLevels() - 1);
		var sizedFormat = tt1.internalFmt == 6408 ? 32856 : tt1.internalFmt;
		if(((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0 || (t.flags & 1 << h3d_mat_TextureFlags.Is3D._hx_index) != 0) && (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) == 0) {
			this.gl.texStorage3D(bind,t.get_mipLevels(),sizedFormat,tt1.width,tt1.height,t.get_layerCount());
			if(h3d_impl_GlDriver.outOfMemoryCheck) {
				var err = _gthis.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		} else {
			this.gl.texStorage2D(bind,t.get_mipLevels(),sizedFormat,tt1.width,tt1.height);
			if(h3d_impl_GlDriver.outOfMemoryCheck) {
				var err = _gthis.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	,restoreBind: function() {
		var t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	,allocDepthBuffer: function(t) {
		var tt = this.gl.createTexture();
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : 3553, bias : 0, startMip : 0};
		var fmt = 6402;
		switch(t.format._hx_index) {
		case 23:
			tt1.internalFmt = 33189;
			break;
		case 24:
			if(this.glES >= 3) {
				tt1.internalFmt = 6402;
			} else {
				throw haxe_Exception.thrown("Unsupported depth format " + Std.string(t.format));
			}
			break;
		case 25:
			tt1.internalFmt = 35056;
			tt1.pixelFmt = 34042;
			fmt = 34041;
			break;
		case 26:
			tt1.internalFmt = 36012;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported depth format " + Std.string(t.format));
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(tt1.bind,tt1.t);
		this.gl.texParameteri(tt1.bind,10241,9728);
		this.gl.texParameteri(tt1.bind,10240,9728);
		this.gl.texParameteri(tt1.bind,10242,33071);
		this.gl.texParameteri(tt1.bind,10243,33071);
		this.gl.texImage2D(tt1.bind,0,tt1.internalFmt,tt1.width,tt1.height,0,fmt,tt1.pixelFmt,null);
		this.restoreBind();
		return tt1;
	}
	,disposeDepthBuffer: function(b) {
		if(b.t != null && b.t.t != null) {
			this.gl.deleteTexture(b.t.t);
			b.t = null;
		}
	}
	,getDefaultDepthBuffer: function() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d_mat_Texture(0,0,null,hxd_PixelFormat.Depth24Stencil8);
		this.defaultDepth.name = "defaultDepthBuffer";
		this.defaultDepth.width = this.bufferWidth;
		this.defaultDepth.height = this.bufferHeight;
		this.defaultDepth.t = this.allocDepthBuffer(this.defaultDepth);
		return this.defaultDepth;
	}
	,allocBuffer: function(b) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var vb = this.gl.createBuffer();
		var type = (b.flags & 1 << h3d_BufferFlag.IndexBuffer._hx_index) != 0 ? 34963 : 34962;
		this.gl.bindBuffer(type,vb);
		if(b.vertices * b.format.stride == 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.gl.bufferData(type,b.vertices * b.format.strideBytes,(b.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0 ? 35048 : 35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(type,null);
		if((b.flags & 1 << h3d_BufferFlag.IndexBuffer._hx_index) != 0) {
			this.curIndexBuffer = null;
		}
		if(outOfMem) {
			this.gl.deleteBuffer(vb);
			return null;
		}
		return vb;
	}
	,disposeTexture: function(t) {
		var tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	,disposeBuffer: function(b) {
		this.gl.deleteBuffer(b.vbuf);
	}
	,generateMipMaps: function(t) {
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
		if(t.format != hxd_PixelFormat.RGBA || t.get_layerCount() != 1) {
			var pixels = bmp.getPixels();
			this.uploadTexturePixels(t,pixels,mipLevel,side);
			pixels.dispose();
		} else {
			var img = bmp.ctx;
			this.gl.bindTexture(3553,t.t.t);
			this.gl.texSubImage2D(3553,mipLevel,0,0,this.getChannels(t.t),t.t.pixelFmt,img.getImageData(0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height));
			this.restoreBind();
		}
	}
	,resetStream: function() {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var face = 3553;
		if(cubic) {
			face = h3d_impl_GlDriver.CUBE_FACES[side];
		}
		if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			face = 35866;
		} else if((t.flags & 1 << h3d_mat_TextureFlags.Is3D._hx_index) != 0) {
			face = 32879;
		}
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		var dataLen = pixels.dataSize;
		var buffer;
		switch(t.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 2);
			break;
		case 16:case 17:
			buffer = new Uint32Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 2);
			break;
		case 3:case 6:case 9:case 12:case 18:case 19:case 20:case 21:
			buffer = new Uint16Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 1);
			break;
		default:
			buffer = new Uint8Array(pixels.bytes.b.buffer,pixels.offset,dataLen);
		}
		if(t.format._hx_index == 22) {
			if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0 || (t.flags & 1 << h3d_mat_TextureFlags.Is3D._hx_index) != 0) {
				this.gl.compressedTexSubImage3D(face,mipLevel,0,0,side,pixels.width,pixels.height,1,t.t.internalFmt,buffer);
			} else {
				this.gl.compressedTexSubImage2D(face,mipLevel,0,0,pixels.width,pixels.height,t.t.internalFmt,buffer);
			}
		} else if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0 || (t.flags & 1 << h3d_mat_TextureFlags.Is3D._hx_index) != 0) {
			this.gl.texSubImage3D(face,mipLevel,0,0,side,pixels.width,pixels.height,1,this.getChannels(t.t),t.t.pixelFmt,buffer);
		} else {
			this.gl.texSubImage2D(face,mipLevel,0,0,pixels.width,pixels.height,this.getChannels(t.t),t.t.pixelFmt,buffer);
		}
		t.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.restoreBind();
	}
	,uploadBufferData: function(b,startVertex,vertexCount,buf,bufPos) {
		var stride = b.format.strideBytes;
		this.gl.bindBuffer(34962,b.vbuf);
		var buf1 = buf.array;
		var sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride >> 2);
		this.gl.bufferSubData(34962,startVertex * stride,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadBufferBytes: function(b,startVertex,vertexCount,buf,bufPos) {
		var stride = b.format.strideBytes;
		var type = (b.flags & 1 << h3d_BufferFlag.IndexBuffer._hx_index) != 0 ? 34963 : 34962;
		this.gl.bindBuffer(type,b.vbuf);
		var sub = new Uint8Array(buf.b.bufferValue,bufPos,vertexCount * stride);
		this.gl.bufferSubData(type,startVertex * stride,sub);
		this.gl.bindBuffer(type,null);
		if((b.flags & 1 << h3d_BufferFlag.IndexBuffer._hx_index) != 0) {
			this.curIndexBuffer = null;
		}
	}
	,uploadIndexData: function(i,startIndice,indiceCount,buf,bufPos) {
		var bits = i.format.strideBytes >> 1;
		this.gl.bindBuffer(34963,i.vbuf);
		var buf1 = new Uint16Array(buf);
		var sub = new Uint16Array(buf1.buffer,bufPos << bits,indiceCount);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,selectBuffer: function(b) {
		if(b == this.curBuffer) {
			return;
		}
		if(this.curShader == null) {
			throw haxe_Exception.thrown("No shader selected");
		}
		this.gl.bindBuffer(34962,b.vbuf);
		this.curBuffer = b;
		var strideBytes = b.format.strideBytes;
		var map = b.format.resolveMapping(this.curShader.format);
		var _g_current = 0;
		var _g_array = this.curShader.attribs;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var a = _g_value;
			var inf = map[i];
			var norm = false;
			var tmp = this.gl;
			var a1 = a.index;
			var a2 = a.size;
			var tmp1;
			switch(inf & 7) {
			case 0:
				tmp1 = a.type;
				break;
			case 1:
				tmp1 = 5131;
				break;
			case 2:
				norm = true;
				tmp1 = 5121;
				break;
			case 3:
				norm = true;
				tmp1 = 5120;
				break;
			}
			tmp.vertexAttribPointer(a1,a2,tmp1,norm,strideBytes,inf >> 16);
			if(this.currentDivisor[a.index] != a.divisor) {
				this.currentDivisor[a.index] = a.divisor;
				this.gl.vertexAttribDivisor(a.index,a.divisor);
			}
		}
	}
	,selectMultiBuffers: function(format,buffers) {
		var format1 = this.curShader.format;
		var m = format.mappings[format1.uid];
		if(m == null) {
			m = format.makeMapping(format1);
		}
		var map = m;
		var _g_current = 0;
		var _g_array = this.curShader.attribs;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var a = _g_value;
			var inf = map[i];
			var b = buffers[inf >> 3 & 255];
			if(this.curBuffer != b) {
				this.gl.bindBuffer(34962,b.vbuf);
				this.curBuffer = b;
			}
			var norm = false;
			var tmp = this.gl;
			var a1 = a.index;
			var a2 = a.size;
			var tmp1;
			switch(inf & 7) {
			case 0:
				tmp1 = a.type;
				break;
			case 1:
				tmp1 = 5131;
				break;
			case 2:
				norm = true;
				tmp1 = 5121;
				break;
			case 3:
				norm = true;
				tmp1 = 5120;
				break;
			}
			tmp.vertexAttribPointer(a1,a2,tmp1,norm,b.format.strideBytes,inf >> 16);
			if(this.currentDivisor[a.index] != a.divisor) {
				this.currentDivisor[a.index] = a.divisor;
				this.gl.vertexAttribDivisor(a.index,a.divisor);
			}
		}
	}
	,draw: function(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.vbuf);
		}
		if(ibuf.format.strideBytes == 4) {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5125,startIndex * 4);
		} else {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5123,startIndex * 2);
		}
	}
	,drawInstanced: function(ibuf,commands) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.vbuf);
		}
		var kind;
		var size;
		if(ibuf.format.strideBytes == 4) {
			kind = 5125;
			size = 4;
		} else {
			kind = 5123;
			size = 2;
		}
		var args = commands.data;
		if(args != null) {
			var p = 0;
			var _g = 0;
			var _g1 = args.length / 3 | 0;
			while(_g < _g1) {
				var i = _g++;
				this.gl.drawElementsInstanced(this.drawMode,args[p++],kind,args[p++] * size,args[p++]);
			}
		} else {
			this.gl.drawElementsInstanced(this.drawMode,commands.indexCount,kind,commands.startIndex * size,commands.commandCount);
		}
	}
	,end: function() {
	}
	,isDisposed: function() {
		return this.gl.isContextLost();
	}
	,setRenderZone: function(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			if(this.curTarget == null) {
				y = this.bufferHeight - (y + height);
			}
			this.gl.scissor(x,y,width,height);
		}
	}
	,setDrawBuffers: function(k) {
		if(this.glES >= 3) {
			this.gl.drawBuffers(h3d_impl_GlDriver.CBUFFERS[k]);
		} else if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d_impl_GlDriver.CBUFFERS[k]);
		}
	}
	,unbindTargets: function() {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) {
				this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
				this.curTargets[this.numTargets] = null;
			}
			this.setDrawBuffers(1);
		}
	}
	,setRenderTarget: function(tex,layer,mipLevel,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		this.unbindTargets();
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(tex.depthBuffer != null && (tex.depthBuffer.width != tex.width || tex.depthBuffer.height != tex.height)) {
			throw haxe_Exception.thrown("Invalid depth buffer size : does not match render target size");
		}
		if(mipLevel > 0 && this.glES == 1) {
			throw haxe_Exception.thrown("Cannot render to mipLevel in WebGL1, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			var bind = this.getBindType(tex);
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.set_lastFrame(this.frame);
		this.curTargetLayer = layer;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		if((tex.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.framebufferTextureLayer(36160,36064,tex.t.t,mipLevel,layer);
		} else {
			this.gl.framebufferTexture2D(36160,36064,(tex.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0 ? h3d_impl_GlDriver.CUBE_FACES[layer] : 3553,tex.t.t,mipLevel);
		}
		this.setPolygonOffset(tex.depthBuffer);
		this.setDepthClamp(tex.depthBuffer);
		if(tex.depthBuffer != null && depthBinding != h3d_DepthBinding.NotBound) {
			if(tex.depthBuffer.hasStencil() && tex.depthBuffer.format == hxd_PixelFormat.Depth24Stencil8) {
				this.gl.framebufferTexture2D(36160,33306,3553,tex.depthBuffer.t.t,0);
			} else {
				this.gl.framebufferTexture2D(36160,33306,3553,null,0);
				this.gl.framebufferTexture2D(36160,36096,3553,tex.depthBuffer.t.t,0);
				this.gl.framebufferTexture2D(36160,36128,3553,tex.depthBuffer.hasStencil() ? tex.depthBuffer.t.t : null,0);
			}
		} else {
			this.gl.framebufferTexture2D(36160,33306,3553,null,0);
			this.gl.framebufferTexture2D(36160,36096,3553,null,0);
			this.gl.framebufferTexture2D(36160,36128,3553,null,0);
		}
		var w = tex.width >> mipLevel;
		if(w == 0) {
			w = 1;
		}
		var h = tex.height >> mipLevel;
		if(h == 0) {
			h = 1;
		}
		this.gl.viewport(0,0,w,h);
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
			this.clear(h3d_impl_GlDriver.BLACK);
		}
		if(this.glDebug) {
			var code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw haxe_Exception.thrown("Invalid frame buffer: " + code);
			}
		}
	}
	,setRenderTargets: function(textures,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		this.unbindTargets();
		this.setRenderTarget(textures[0],null,null,depthBinding);
		if(textures.length < 2) {
			return;
		}
		this.numTargets = textures.length;
		var needClear = false;
		var _g = 1;
		var _g1 = textures.length;
		while(_g < _g1) {
			var i = _g++;
			var tex = textures[i];
			if(tex.t == null) {
				tex.alloc();
			}
			this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
			this.curTargets[i] = tex;
			tex.set_lastFrame(this.frame);
			if((tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
				tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
				needClear = true;
			}
		}
		this.setDrawBuffers(textures.length);
		if(needClear) {
			this.clear(h3d_impl_GlDriver.BLACK);
		}
	}
	,setDepth: function(depthBuffer) {
		this.unbindTargets();
		this.curTarget = depthBuffer;
		depthBuffer.set_lastFrame(this.frame);
		this.curTargetLayer = 0;
		this.curTargetMip = 0;
		this.gl.bindFramebuffer(36160,this.commonFB);
		this.gl.framebufferTexture2D(36160,36064,3553,null,0);
		this.setPolygonOffset(depthBuffer);
		this.setDepthClamp(depthBuffer);
		if(depthBuffer.hasStencil() && depthBuffer.format == hxd_PixelFormat.Depth24Stencil8) {
			this.gl.framebufferTexture2D(36160,33306,3553,depthBuffer.t.t,0);
		} else {
			this.gl.framebufferTexture2D(36160,33306,3553,null,0);
			this.gl.framebufferTexture2D(36160,36096,3553,depthBuffer.t.t,0);
			this.gl.framebufferTexture2D(36160,36128,3553,depthBuffer.hasStencil() ? depthBuffer.t.t : null,0);
		}
		var w = depthBuffer.width;
		if(w == 0) {
			w = 1;
		}
		var h = depthBuffer.height;
		if(h == 0) {
			h = 1;
		}
		this.gl.viewport(0,0,w,h);
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		if(this.glDebug) {
			var code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw haxe_Exception.thrown("Invalid frame buffer: " + code);
			}
		}
	}
	,setPolygonOffset: function(depthBuffer) {
		if(depthBuffer != null && (depthBuffer.depthBias != 0 || depthBuffer.slopeScaledBias != 0)) {
			this.gl.enable(32823);
			this.gl.polygonOffset(depthBuffer.slopeScaledBias,depthBuffer.depthBias);
		} else {
			this.gl.disable(32823);
		}
	}
	,setDepthClamp: function(dephTexture) {
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		if(window.document.readyState == "complete") {
			var _g = onCreate;
			var a1 = false;
			haxe_Timer.delay(function() {
				_g(a1);
			},1);
		} else {
			var onLoad = null;
			onLoad = function() {
				window.removeEventListener("load",onLoad);
				onCreate(false);
			};
			window.addEventListener("load",onLoad);
		}
	}
	,hasFeature: function(f) {
		return this.features.get(f);
	}
	,makeFeatures: function() {
		var _g = 0;
		var _g1 = h3d_impl_Feature.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.features.set(f,this.checkFeature(f));
		}
		if(this.gl.getExtension("WEBGL_compressed_texture_s3tc") != null) {
			this.maxCompressedTexturesSupport = 3;
			if(this.gl.getExtension("EXT_texture_compression_bptc") != null) {
				this.maxCompressedTexturesSupport = 7;
			}
		}
		if(this.glES < 3) {
			this.gl.getExtension("WEBGL_depth_texture");
		}
		this.has16Bits = this.gl.getExtension("EXT_texture_norm16") != null;
	}
	,checkFeature: function(f) {
		switch(f._hx_index) {
		case 0:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("OES_standard_derivatives") != null;
			}
			break;
		case 1:
			if(this.glES >= 3) {
				if(this.gl.getExtension("EXT_color_buffer_float") != null) {
					return this.gl.getExtension("OES_texture_float_linear") != null;
				} else {
					return false;
				}
			} else if(this.gl.getExtension("OES_texture_float") != null && this.gl.getExtension("OES_texture_float_linear") != null && this.gl.getExtension("OES_texture_half_float") != null) {
				return this.gl.getExtension("OES_texture_half_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 4:
			if(this.glES >= 3) {
				return true;
			} else if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 6:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("EXT_sRGB") != null;
			}
			break;
		case 7:
			if(this.glES >= 3) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:case 3:case 8:case 9:
			return true;
		case 10:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("ANGLE_instanced_arrays") != null;
			}
			break;
		default:
			return false;
		}
	}
	,__class__: h3d_impl_GlDriver
});
var h3d_impl_InstanceBuffer = function() {
	this.triCount = 0;
};
$hxClasses["h3d.impl.InstanceBuffer"] = h3d_impl_InstanceBuffer;
h3d_impl_InstanceBuffer.__name__ = "h3d.impl.InstanceBuffer";
h3d_impl_InstanceBuffer.prototype = {
	__class__: h3d_impl_InstanceBuffer
};
var h3d_impl_MemoryManager = function(driver) {
	this.lastAutoDispose = 0;
	this.autoDisposeCooldown = 60;
	this.texMemory = 0;
	this.usedMemory = 0;
	this.driver = driver;
};
$hxClasses["h3d.impl.MemoryManager"] = h3d_impl_MemoryManager;
h3d_impl_MemoryManager.__name__ = "h3d.impl.MemoryManager";
h3d_impl_MemoryManager.prototype = {
	init: function() {
		this.textures = [];
		this.buffers = [];
		this.initIndexes();
	}
	,initIndexes: function() {
		var indices = new Array(0);
		var _g = 0;
		while(_g < 65532) {
			var i = _g++;
			indices.push(i);
		}
		this.triIndexes16 = h3d_Indexes.alloc(indices);
		var indices = new Array(0);
		var p = 0;
		var _g = 0;
		while(_g < 10922) {
			var i = _g++;
			var k = i << 2;
			indices.push(k);
			indices.push(k + 1);
			indices.push(k + 2);
			indices.push(k + 2);
			indices.push(k + 1);
			indices.push(k + 3);
		}
		indices.push(65532);
		this.quadIndexes16 = h3d_Indexes.alloc(indices);
	}
	,garbage: function() {
	}
	,getTriIndexes: function(vertices) {
		if(vertices <= 65532) {
			return this.triIndexes16;
		}
		if(this.triIndexes32 == null || this.triIndexes32.vertices < vertices) {
			var sz = 131072;
			while(sz < vertices) sz <<= 1;
			var bytes = new haxe_io_Bytes(new ArrayBuffer(sz << 2));
			var _g = 0;
			var _g1 = sz;
			while(_g < _g1) {
				var i = _g++;
				bytes.setInt32(i << 2,i);
			}
			if(this.triIndexes32 != null) {
				this.triIndexes32.dispose();
			}
			this.triIndexes32 = h3d_Indexes._new(sz,true);
			this.triIndexes32.uploadBytes(bytes,0,sz);
		}
		return this.triIndexes32;
	}
	,getQuadIndexes: function(vertices) {
		var nquads = (vertices + 3 >> 2) * 6;
		if(nquads <= 65532) {
			return this.quadIndexes16;
		}
		if(this.quadIndexes32 == null || this.quadIndexes32.vertices < vertices) {
			var sz = 131072;
			while(sz < nquads) sz <<= 1;
			var bytes = new haxe_io_Bytes(new ArrayBuffer(sz << 2));
			var p = 0;
			var _g = 0;
			var _g1 = sz / 6 | 0;
			while(_g < _g1) {
				var i = _g++;
				var k = i << 2;
				bytes.setInt32(p++ << 2,k);
				bytes.setInt32(p++ << 2,k + 1);
				bytes.setInt32(p++ << 2,k + 2);
				bytes.setInt32(p++ << 2,k + 2);
				bytes.setInt32(p++ << 2,k + 1);
				bytes.setInt32(p++ << 2,k + 3);
			}
			if(this.quadIndexes32 != null) {
				this.quadIndexes32.dispose();
			}
			this.quadIndexes32 = h3d_Indexes._new(sz,true);
			this.quadIndexes32.uploadBytes(bytes,0,sz);
		}
		return this.quadIndexes32;
	}
	,allocBuffer: function(b) {
		if(b.vbuf != null) {
			return;
		}
		var mem = b.vertices * b.format.strideBytes;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || (b.vbuf = this.driver.allocBuffer(b)) == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			var size = this.usedMemory;
			this.garbage();
			if(this.usedMemory == size) {
				throw haxe_Exception.thrown("Memory full (" + Math.ceil(size / 1024) + " KB," + this.buffers.length + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.buffers.push(b);
	}
	,freeBuffer: function(b) {
		if(b.vbuf == null) {
			return;
		}
		this.driver.disposeBuffer(b);
		b.vbuf = null;
		if(HxOverrides.remove(this.buffers,b)) {
			this.usedMemory -= b.vertices * b.format.strideBytes;
		}
	}
	,memSize: function(t) {
		if((t.flags & 1 << h3d_mat_TextureFlags.AsyncLoading._hx_index) != 0 && (t.flags & 1 << h3d_mat_TextureFlags.Loading._hx_index) != 0) {
			return 4;
		}
		var size = hxd_Pixels.calcDataSize(t.width,t.height,t.format);
		if(t.get_mipLevels() > 0) {
			var _g = 1;
			var _g1 = t.get_mipLevels();
			while(_g < _g1) {
				var i = _g++;
				var w = t.width >> i;
				if(w == 0) {
					w = 1;
				}
				var h = t.height >> i;
				if(h == 0) {
					h = 1;
				}
				size += hxd_Pixels.calcDataSize(w,h,t.format);
			}
		}
		return size * t.get_layerCount();
	}
	,cleanTextures: function(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.realloc == null || t.t == null && (t.isDepth() || t.realloc == null)) {
				continue;
			}
			if((force || t._lastFrame < hxd_Timer.frameCount - 3600) && t._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	,sortByLRU: function(t1,t2) {
		return t1._lastFrame - t2._lastFrame;
	}
	,deleteTexture: function(t) {
		if(!HxOverrides.remove(this.textures,t)) {
			return;
		}
		this.driver.disposeTexture(t);
		this.texMemory -= this.memSize(t);
	}
	,allocTexture: function(t) {
		while(true) {
			var free = true;
			if(hxd_Timer.frameCount > this.lastAutoDispose + this.autoDisposeCooldown) {
				free = this.cleanTextures(false);
				this.lastAutoDispose = hxd_Timer.frameCount;
			}
			t.t = t.isDepth() ? this.driver.allocDepthBuffer(t) : this.driver.allocTexture(t);
			if(t.t != null) {
				break;
			}
			if(this.driver.isDisposed()) {
				return;
			}
			while(this.cleanTextures(false)) {
			}
			if(!free && !this.cleanTextures(true)) {
				throw haxe_Exception.thrown("Maximum texture memory reached");
			}
		}
		this.textures.push(t);
		this.texMemory += this.memSize(t);
	}
	,onContextLost: function() {
		this.dispose();
		this.initIndexes();
	}
	,dispose: function() {
		if(this.triIndexes16 != null) {
			this.triIndexes16.dispose();
		}
		if(this.quadIndexes16 != null) {
			this.quadIndexes16.dispose();
		}
		if(this.triIndexes32 != null) {
			this.triIndexes32.dispose();
		}
		if(this.quadIndexes32 != null) {
			this.quadIndexes32.dispose();
		}
		this.triIndexes16 = null;
		this.quadIndexes16 = null;
		this.triIndexes32 = null;
		this.quadIndexes32 = null;
		var _g = 0;
		var _g1 = this.textures.slice();
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		var _g = 0;
		var _g1 = this.buffers.slice();
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.dispose();
		}
		this.buffers = [];
		this.textures = [];
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	,__class__: h3d_impl_MemoryManager
};
var h3d_impl_NullDriver = function() {
	h3d_impl_Driver.call(this);
};
$hxClasses["h3d.impl.NullDriver"] = h3d_impl_NullDriver;
h3d_impl_NullDriver.__name__ = "h3d.impl.NullDriver";
h3d_impl_NullDriver.__super__ = h3d_impl_Driver;
h3d_impl_NullDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	hasFeature: function(f) {
		return true;
	}
	,isSupportedFormat: function(fmt) {
		return true;
	}
	,isDisposed: function() {
		return false;
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		onCreate(false);
	}
	,selectShader: function(shader) {
		if(this.cur == shader) {
			return false;
		}
		this.cur = shader;
		return true;
	}
	,allocTexture: function(t) {
		return { };
	}
	,allocBuffer: function(b) {
		return { };
	}
	,__class__: h3d_impl_NullDriver
});
var h3d_impl_RendererFX = function() { };
$hxClasses["h3d.impl.RendererFX"] = h3d_impl_RendererFX;
h3d_impl_RendererFX.__name__ = "h3d.impl.RendererFX";
h3d_impl_RendererFX.__isInterface__ = true;
h3d_impl_RendererFX.prototype = {
	__class__: h3d_impl_RendererFX
};
var h3d_impl_TextureCache = function() {
	this.position = 0;
	this.cache = [];
	var engine = h3d_Engine.CURRENT;
	this.defaultFormat = h3d_mat_Texture.nativeFormat;
	this.defaultDepthBuffer = h3d_mat_Texture.getDefaultDepth();
	if(h3d_impl_TextureCache.checkFlags < 0) {
		var flags = 0;
		var flagsArray = [h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.IsArray];
		var _g = 0;
		while(_g < flagsArray.length) {
			var f = flagsArray[_g];
			++_g;
			flags |= 1 << f._hx_index;
		}
		h3d_impl_TextureCache.checkFlags = flags;
	}
};
$hxClasses["h3d.impl.TextureCache"] = h3d_impl_TextureCache;
h3d_impl_TextureCache.__name__ = "h3d.impl.TextureCache";
h3d_impl_TextureCache.prototype = {
	begin: function() {
		while(this.cache.length > this.position) {
			var t = this.cache.pop();
			if(t != null) {
				t.dispose();
			}
		}
		this.position = 0;
	}
	,lookupTarget: function(name,width,height,format,flags) {
		var t = this.cache[this.position];
		var _g = this.position + 1;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var t2 = this.cache[i];
			if(t2 != null && !(t2.t == null && (t2.isDepth() || t2.realloc == null)) && t2.width == width && t2.height == height && t2.format == format) {
				var enumFlags = 0;
				if(flags != null) {
					var _g2 = 0;
					while(_g2 < flags.length) {
						var f = flags[_g2];
						++_g2;
						enumFlags |= 1 << f._hx_index;
					}
				}
				if((t2.flags & h3d_impl_TextureCache.checkFlags) != (enumFlags & h3d_impl_TextureCache.checkFlags)) {
					continue;
				}
				this.cache[this.position] = t2;
				this.cache[i] = t;
				return t2;
			}
		}
		if(t != null && t.name == name) {
			t.dispose();
			t = null;
		}
		if(flags == null) {
			flags = [];
		}
		if(flags.indexOf(h3d_mat_TextureFlags.Target) == -1) {
			flags.push(h3d_mat_TextureFlags.Target);
		}
		var newt = new h3d_mat_Texture(width,height,flags,format);
		newt.realloc = function() {
		};
		if(t != null) {
			this.cache.splice(this.position,0,newt);
		} else {
			this.cache[this.position] = newt;
		}
		return newt;
	}
	,allocTarget: function(name,width,height,defaultDepth,format,flags) {
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var t = this.cache[this.position];
		if(format == null) {
			format = this.defaultFormat;
		}
		var alloc = false;
		if(t == null || t.t == null && (t.isDepth() || t.realloc == null) || t.width != width || t.height != height || t.format != format) {
			alloc = true;
		} else {
			var enumFlags = 0;
			if(flags != null) {
				var _g = 0;
				while(_g < flags.length) {
					var f = flags[_g];
					++_g;
					enumFlags |= 1 << f._hx_index;
				}
			}
			alloc = (t.flags & h3d_impl_TextureCache.checkFlags) != (enumFlags & h3d_impl_TextureCache.checkFlags);
		}
		if(alloc) {
			t = this.lookupTarget(name,width,height,format,flags);
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
	,__class__: h3d_impl_TextureCache
};
var hxd_impl_AnyProps = function() { };
$hxClasses["hxd.impl.AnyProps"] = hxd_impl_AnyProps;
hxd_impl_AnyProps.__name__ = "hxd.impl.AnyProps";
hxd_impl_AnyProps.prototype = {
	set_props: function(p) {
		this.props = p;
		this.refreshProps();
		return p;
	}
	,getDefaultProps: function(kind) {
		return { };
	}
	,refreshProps: function() {
	}
	,__class__: hxd_impl_AnyProps
};
var h3d_mat_BaseMaterial = function(shader) {
	if(shader != null) {
		this.addPass(new h3d_mat_Pass("default",null)).addShader(shader);
	}
};
$hxClasses["h3d.mat.BaseMaterial"] = h3d_mat_BaseMaterial;
h3d_mat_BaseMaterial.__name__ = "h3d.mat.BaseMaterial";
h3d_mat_BaseMaterial.__super__ = hxd_impl_AnyProps;
h3d_mat_BaseMaterial.prototype = $extend(hxd_impl_AnyProps.prototype,{
	addPass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	,removePass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			if(cur == p) {
				if(prev == null) {
					this.passes = p.nextPass;
				} else {
					prev.nextPass = p.nextPass;
				}
				p.nextPass = null;
				return true;
			}
			prev = cur;
			cur = cur.nextPass;
		}
		return false;
	}
	,getPass: function(name) {
		var p = this.passes;
		while(p != null) {
			if(p.name == name) {
				return p;
			}
			p = p.nextPass;
		}
		return null;
	}
	,__class__: h3d_mat_BaseMaterial
});
var h3d_mat_Face = $hxEnums["h3d.mat.Face"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.mat.Face",toString:$estr}
	,Back: {_hx_name:"Back",_hx_index:1,__enum__:"h3d.mat.Face",toString:$estr}
	,Front: {_hx_name:"Front",_hx_index:2,__enum__:"h3d.mat.Face",toString:$estr}
	,Both: {_hx_name:"Both",_hx_index:3,__enum__:"h3d.mat.Face",toString:$estr}
};
h3d_mat_Face.__constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
h3d_mat_Face.__empty_constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
var h3d_mat_Blend = $hxEnums["h3d.mat.Blend"] = { __ename__:true,__constructs__:null
	,One: {_hx_name:"One",_hx_index:0,__enum__:"h3d.mat.Blend",toString:$estr}
	,Zero: {_hx_name:"Zero",_hx_index:1,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlpha: {_hx_name:"SrcAlpha",_hx_index:2,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcColor: {_hx_name:"SrcColor",_hx_index:3,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstAlpha: {_hx_name:"DstAlpha",_hx_index:4,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstColor: {_hx_name:"DstColor",_hx_index:5,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcAlpha: {_hx_name:"OneMinusSrcAlpha",_hx_index:6,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcColor: {_hx_name:"OneMinusSrcColor",_hx_index:7,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstAlpha: {_hx_name:"OneMinusDstAlpha",_hx_index:8,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstColor: {_hx_name:"OneMinusDstColor",_hx_index:9,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantColor: {_hx_name:"ConstantColor",_hx_index:10,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantAlpha: {_hx_name:"ConstantAlpha",_hx_index:11,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantColor: {_hx_name:"OneMinusConstantColor",_hx_index:12,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantAlpha: {_hx_name:"OneMinusConstantAlpha",_hx_index:13,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlphaSaturate: {_hx_name:"SrcAlphaSaturate",_hx_index:14,__enum__:"h3d.mat.Blend",toString:$estr}
};
h3d_mat_Blend.__constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
h3d_mat_Blend.__empty_constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
var h3d_mat_Compare = $hxEnums["h3d.mat.Compare"] = { __ename__:true,__constructs__:null
	,Always: {_hx_name:"Always",_hx_index:0,__enum__:"h3d.mat.Compare",toString:$estr}
	,Never: {_hx_name:"Never",_hx_index:1,__enum__:"h3d.mat.Compare",toString:$estr}
	,Equal: {_hx_name:"Equal",_hx_index:2,__enum__:"h3d.mat.Compare",toString:$estr}
	,NotEqual: {_hx_name:"NotEqual",_hx_index:3,__enum__:"h3d.mat.Compare",toString:$estr}
	,Greater: {_hx_name:"Greater",_hx_index:4,__enum__:"h3d.mat.Compare",toString:$estr}
	,GreaterEqual: {_hx_name:"GreaterEqual",_hx_index:5,__enum__:"h3d.mat.Compare",toString:$estr}
	,Less: {_hx_name:"Less",_hx_index:6,__enum__:"h3d.mat.Compare",toString:$estr}
	,LessEqual: {_hx_name:"LessEqual",_hx_index:7,__enum__:"h3d.mat.Compare",toString:$estr}
};
h3d_mat_Compare.__constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
h3d_mat_Compare.__empty_constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
var h3d_mat_StencilOp = $hxEnums["h3d.mat.StencilOp"] = { __ename__:true,__constructs__:null
	,Keep: {_hx_name:"Keep",_hx_index:0,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Zero: {_hx_name:"Zero",_hx_index:1,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Replace: {_hx_name:"Replace",_hx_index:2,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Increment: {_hx_name:"Increment",_hx_index:3,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,IncrementWrap: {_hx_name:"IncrementWrap",_hx_index:4,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Decrement: {_hx_name:"Decrement",_hx_index:5,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,DecrementWrap: {_hx_name:"DecrementWrap",_hx_index:6,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Invert: {_hx_name:"Invert",_hx_index:7,__enum__:"h3d.mat.StencilOp",toString:$estr}
};
h3d_mat_StencilOp.__constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
h3d_mat_StencilOp.__empty_constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
var h3d_mat_MipMap = $hxEnums["h3d.mat.MipMap"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Nearest: {_hx_name:"Nearest",_hx_index:1,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Linear: {_hx_name:"Linear",_hx_index:2,__enum__:"h3d.mat.MipMap",toString:$estr}
};
h3d_mat_MipMap.__constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
h3d_mat_MipMap.__empty_constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
var h3d_mat_Filter = $hxEnums["h3d.mat.Filter"] = { __ename__:true,__constructs__:null
	,Nearest: {_hx_name:"Nearest",_hx_index:0,__enum__:"h3d.mat.Filter",toString:$estr}
	,Linear: {_hx_name:"Linear",_hx_index:1,__enum__:"h3d.mat.Filter",toString:$estr}
};
h3d_mat_Filter.__constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
h3d_mat_Filter.__empty_constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
var h3d_mat_Wrap = $hxEnums["h3d.mat.Wrap"] = { __ename__:true,__constructs__:null
	,Clamp: {_hx_name:"Clamp",_hx_index:0,__enum__:"h3d.mat.Wrap",toString:$estr}
	,Repeat: {_hx_name:"Repeat",_hx_index:1,__enum__:"h3d.mat.Wrap",toString:$estr}
};
h3d_mat_Wrap.__constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
h3d_mat_Wrap.__empty_constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
var h3d_mat_Operation = $hxEnums["h3d.mat.Operation"] = { __ename__:true,__constructs__:null
	,Add: {_hx_name:"Add",_hx_index:0,__enum__:"h3d.mat.Operation",toString:$estr}
	,Sub: {_hx_name:"Sub",_hx_index:1,__enum__:"h3d.mat.Operation",toString:$estr}
	,ReverseSub: {_hx_name:"ReverseSub",_hx_index:2,__enum__:"h3d.mat.Operation",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:3,__enum__:"h3d.mat.Operation",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:4,__enum__:"h3d.mat.Operation",toString:$estr}
};
h3d_mat_Operation.__constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
h3d_mat_Operation.__empty_constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
var h3d_mat_TextureFlags = $hxEnums["h3d.mat.TextureFlags"] = { __ename__:true,__constructs__:null
	,Target: {_hx_name:"Target",_hx_index:0,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Cube: {_hx_name:"Cube",_hx_index:1,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,MipMapped: {_hx_name:"MipMapped",_hx_index:2,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,ManualMipMapGen: {_hx_name:"ManualMipMapGen",_hx_index:3,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsNPOT: {_hx_name:"IsNPOT",_hx_index:4,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,NoAlloc: {_hx_name:"NoAlloc",_hx_index:5,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Dynamic: {_hx_name:"Dynamic",_hx_index:6,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AlphaPremultiplied: {_hx_name:"AlphaPremultiplied",_hx_index:7,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,WasCleared: {_hx_name:"WasCleared",_hx_index:8,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Loading: {_hx_name:"Loading",_hx_index:9,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Serialize: {_hx_name:"Serialize",_hx_index:10,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsArray: {_hx_name:"IsArray",_hx_index:11,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AsyncLoading: {_hx_name:"AsyncLoading",_hx_index:12,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,LazyLoading: {_hx_name:"LazyLoading",_hx_index:13,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Writable: {_hx_name:"Writable",_hx_index:14,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Is3D: {_hx_name:"Is3D",_hx_index:15,__enum__:"h3d.mat.TextureFlags",toString:$estr}
};
h3d_mat_TextureFlags.__constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray,h3d_mat_TextureFlags.AsyncLoading,h3d_mat_TextureFlags.LazyLoading,h3d_mat_TextureFlags.Writable,h3d_mat_TextureFlags.Is3D];
h3d_mat_TextureFlags.__empty_constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray,h3d_mat_TextureFlags.AsyncLoading,h3d_mat_TextureFlags.LazyLoading,h3d_mat_TextureFlags.Writable,h3d_mat_TextureFlags.Is3D];
var h3d_mat_Defaults = function() { };
$hxClasses["h3d.mat.Defaults"] = h3d_mat_Defaults;
h3d_mat_Defaults.__name__ = "h3d.mat.Defaults";
h3d_mat_Defaults.get_shadowShader = function() {
	var s = h3d_mat_Defaults.shadowShader;
	if(s == null) {
		s = new h3d_shader_Shadow();
		h3d_mat_Defaults.set_shadowShader(s);
		h3d_mat_Defaults.shadowShader.setPriority(-1);
	}
	return s;
};
h3d_mat_Defaults.set_shadowShader = function(s) {
	return h3d_mat_Defaults.shadowShader = s;
};
var h3d_mat_Material = function(texture) {
	this.mshader = new h3d_shader_BaseMesh();
	this.set_blendMode(h2d_BlendMode.None);
	h3d_mat_BaseMaterial.call(this,this.mshader);
	this.set_texture(texture);
};
$hxClasses["h3d.mat.Material"] = h3d_mat_Material;
h3d_mat_Material.__name__ = "h3d.mat.Material";
h3d_mat_Material.__super__ = h3d_mat_BaseMaterial;
h3d_mat_Material.prototype = $extend(h3d_mat_BaseMaterial.prototype,{
	set_castShadows: function(v) {
		if(this.castShadows == v) {
			return v;
		}
		if(this.passes != null) {
			if(v) {
				this.addPass(new h3d_mat_Pass("shadow",null,this.passes)).set_isStatic(this.staticShadows);
			} else {
				this.removePass(this.getPass("shadow"));
			}
		}
		return this.castShadows = v;
	}
	,set_receiveShadows: function(v) {
		if(v == this.receiveShadows) {
			return v;
		}
		if(this.passes != null) {
			var shadows = h3d_mat_Defaults.get_shadowShader();
			if(v) {
				this.passes.addShader(shadows);
			} else {
				this.passes.removeShader(shadows);
			}
		}
		return this.receiveShadows = v;
	}
	,set_blendMode: function(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v._hx_index) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	,set_texture: function(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d_shader_Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	,getDefaultProps: function(type) {
		var props;
		if(type == null) {
			props = { kind : "Opaque", shadows : true, culling : true, light : true};
		} else {
			switch(type) {
			case "particles3D":case "trail3D":
				props = { kind : "Alpha", shadows : false, culling : false, light : true};
				break;
			case "ui":
				props = { kind : "Alpha", shadows : false, culling : false, light : false};
				break;
			default:
				props = { kind : "Opaque", shadows : true, culling : true, light : true};
			}
		}
		return props;
	}
	,refreshProps: function() {
		if(this.props == null || this.passes == null) {
			return;
		}
		var props = this.props;
		switch(props.kind) {
		case "Add":
			this.set_blendMode(h2d_BlendMode.Add);
			break;
		case "Alpha":
			this.set_blendMode(h2d_BlendMode.Alpha);
			break;
		case "AlphaKill":case "Hidden":case "Opaque":
			this.set_blendMode(h2d_BlendMode.None);
			break;
		case "SoftAdd":
			this.set_blendMode(h2d_BlendMode.SoftAdd);
			break;
		}
		var tshader = this.textureShader;
		if(tshader != null) {
			tshader.constModified = true;
			tshader.killAlpha__ = props.kind == "AlphaKill";
			tshader.killAlphaThreshold__ = 0.5;
		}
		this.passes.set_culling(props.kind == "Hidden" ? h3d_mat_Face.Both : props.culling ? h3d_mat_Face.Back : h3d_mat_Face.None);
		this.passes.set_enableLights(props.light);
		var v = props.shadows;
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		if(this.castShadows && this.receiveShadows) {
			this.getPass("shadow").set_culling(this.passes.culling);
		}
	}
	,__class__: h3d_mat_Material
});
var h3d_mat_MaterialDatabase = function() {
};
$hxClasses["h3d.mat.MaterialDatabase"] = h3d_mat_MaterialDatabase;
h3d_mat_MaterialDatabase.__name__ = "h3d.mat.MaterialDatabase";
h3d_mat_MaterialDatabase.prototype = {
	__class__: h3d_mat_MaterialDatabase
};
var h3d_mat_MaterialSetup = function(name) {
	if(this.database == null) {
		this.database = new h3d_mat_MaterialDatabase();
	}
	this.name = name;
};
$hxClasses["h3d.mat.MaterialSetup"] = h3d_mat_MaterialSetup;
h3d_mat_MaterialSetup.__name__ = "h3d.mat.MaterialSetup";
h3d_mat_MaterialSetup.prototype = {
	createRenderer: function() {
		return new h3d_scene_fwd_Renderer();
	}
	,createLightSystem: function() {
		return new h3d_scene_fwd_LightSystem();
	}
	,createMaterial: function() {
		return new h3d_mat_Material();
	}
	,__class__: h3d_mat_MaterialSetup
};
var h3d_mat_Pass = function(name,shaders,parent) {
	this.layer = 0;
	this.rendererFlags = 0;
	this.bits = 0;
	this.parentPass = parent;
	this.shaders = shaders;
	this.setPassName(name);
	this.set_culling(h3d_mat_Face.Back);
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	this.set_blendSrc(src);
	this.set_blendAlphaSrc(src);
	this.set_blendDst(dst);
	this.set_blendAlphaDst(dst);
	this.depth(true,h3d_mat_Compare.Less);
	this.set_blendOp(this.set_blendAlphaOp(h3d_mat_Operation.Add));
	this.colorMask = 15;
};
$hxClasses["h3d.mat.Pass"] = h3d_mat_Pass;
h3d_mat_Pass.__name__ = "h3d.mat.Pass";
h3d_mat_Pass.prototype = {
	setPassName: function(name) {
		this.name = name;
		this.passId = hxsl_Globals.allocID(name);
	}
	,setBlendMode: function(b) {
		this.set_blendOp(h3d_mat_Operation.Add);
		this.set_blendAlphaOp(h3d_mat_Operation.Add);
		switch(b._hx_index) {
		case 0:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 1:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaSrc(h3d_mat_Blend.One);
			break;
		case 2:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaSrc(h3d_mat_Blend.One);
			break;
		case 3:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 4:
			var src = h3d_mat_Blend.OneMinusDstColor;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaSrc(h3d_mat_Blend.One);
			break;
		case 5:
			var src = h3d_mat_Blend.DstColor;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaSrc(h3d_mat_Blend.One);
			break;
		case 6:
			var src = h3d_mat_Blend.DstColor;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 7:
			var src = h3d_mat_Blend.Zero;
			var dst = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 8:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 9:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.ReverseSub);
			this.set_blendAlphaOp(h3d_mat_Operation.ReverseSub);
			break;
		case 10:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaOp(h3d_mat_Operation.Max);
			this.set_blendOp(h3d_mat_Operation.Max);
			break;
		case 11:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaOp(h3d_mat_Operation.Min);
			this.set_blendOp(h3d_mat_Operation.Min);
			break;
		}
	}
	,depth: function(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	,resetRendererFlags: function() {
		this.rendererFlags = 0;
	}
	,addShader: function(s) {
		if(s == null) {
			return null;
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		this.resetRendererFlags();
		return s;
	}
	,removeShader: function(s) {
		var sl = this.shaders;
		var prev = null;
		var shaderFound = false;
		while(sl != null) {
			if(sl.s == s) {
				this.resetRendererFlags();
				if(this.selfShadersCache == sl) {
					this.selfShadersCache = this.selfShadersCache.next;
				}
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				shaderFound = true;
				break;
			}
			prev = sl;
			sl = sl.next;
		}
		sl = this.selfShaders;
		prev = null;
		while(sl != null) {
			if(sl.s == s) {
				this.resetRendererFlags();
				if(this.selfShadersCache == sl) {
					this.selfShadersCache = this.selfShadersCache.next;
				}
				if(prev == null) {
					this.selfShaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return shaderFound;
	}
	,selfShadersRec: function(rebuild) {
		if(this.selfShaders == null) {
			return this.shaders;
		}
		if(!this.selfShadersChanged && !rebuild && this.shaders == this.selfShadersCache) {
			return this.selfShaders;
		}
		var sl = this.selfShaders;
		var prev = null;
		while(sl != null && sl != this.selfShadersCache) {
			prev = sl;
			sl = sl.next;
		}
		this.selfShadersCache = this.shaders;
		if(prev != null) {
			prev.next = this.selfShadersCache;
		} else {
			this.selfShaders = this.shaders;
		}
		return this.selfShaders;
	}
	,getShadersRec: function() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.selfShadersRec(false);
		}
		var s = this.shaders;
		var prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		if(s != this.parentShaders) {
			prev = null;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.selfShadersRec(true);
	}
	,set_enableLights: function(v) {
		this.flags = this.flags & -2 | (v ? 1 : 0);
		return this.enableLights = v;
	}
	,set_isStatic: function(v) {
		this.flags = this.flags & -5 | (v ? 1 : 0) << 2;
		return this.isStatic = v;
	}
	,set_culling: function(v) {
		this.bits = this.bits & -4 | v._hx_index;
		return this.culling = v;
	}
	,set_depthWrite: function(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	,set_depthTest: function(v) {
		this.bits = this.bits & -57 | v._hx_index << 3;
		return this.depthTest = v;
	}
	,set_blendSrc: function(v) {
		this.bits = this.bits & -961 | v._hx_index << 6;
		return this.blendSrc = v;
	}
	,set_blendDst: function(v) {
		this.bits = this.bits & -15361 | v._hx_index << 10;
		return this.blendDst = v;
	}
	,set_blendAlphaSrc: function(v) {
		this.bits = this.bits & -245761 | v._hx_index << 14;
		return this.blendAlphaSrc = v;
	}
	,set_blendAlphaDst: function(v) {
		this.bits = this.bits & -3932161 | v._hx_index << 18;
		return this.blendAlphaDst = v;
	}
	,set_blendOp: function(v) {
		this.bits = this.bits & -29360129 | v._hx_index << 22;
		return this.blendOp = v;
	}
	,set_blendAlphaOp: function(v) {
		this.bits = this.bits & -234881025 | v._hx_index << 25;
		return this.blendAlphaOp = v;
	}
	,__class__: h3d_mat_Pass
};
var h3d_mat_Stencil = function() {
	this.opBits = 0;
	this.maskBits = 0;
	this.setOp(h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
	this.setFunc(h3d_mat_Compare.Always);
};
$hxClasses["h3d.mat.Stencil"] = h3d_mat_Stencil;
h3d_mat_Stencil.__name__ = "h3d.mat.Stencil";
h3d_mat_Stencil.prototype = {
	setFront: function(stfail,dpfail,pass) {
		this.set_frontSTfail(stfail);
		this.set_frontDPfail(dpfail);
		this.set_frontPass(pass);
	}
	,setBack: function(stfail,dpfail,pass) {
		this.set_backSTfail(stfail);
		this.set_backDPfail(dpfail);
		this.set_backPass(pass);
	}
	,setOp: function(stfail,dpfail,pass) {
		this.setFront(stfail,dpfail,pass);
		this.setBack(stfail,dpfail,pass);
	}
	,setFunc: function(f,reference,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(reference == null) {
			reference = 0;
		}
		this.set_frontTest(this.set_backTest(f));
		this.set_reference(reference);
		this.set_readMask(readMask);
		this.set_writeMask(writeMask);
	}
	,set_readMask: function(v) {
		this.maskBits = this.maskBits & -256 | v & 255;
		return this.readMask = v;
	}
	,set_writeMask: function(v) {
		this.maskBits = this.maskBits & -65281 | (v & 255) << 8;
		return this.writeMask = v;
	}
	,set_reference: function(v) {
		this.maskBits = this.maskBits & -16711681 | (v & 255) << 16;
		return this.reference = v;
	}
	,set_frontTest: function(v) {
		this.opBits = this.opBits & -8 | v._hx_index;
		return this.frontTest = v;
	}
	,set_frontPass: function(v) {
		this.opBits = this.opBits & -57 | v._hx_index << 3;
		return this.frontPass = v;
	}
	,set_frontSTfail: function(v) {
		this.opBits = this.opBits & -449 | v._hx_index << 6;
		return this.frontSTfail = v;
	}
	,set_frontDPfail: function(v) {
		this.opBits = this.opBits & -3585 | v._hx_index << 9;
		return this.frontDPfail = v;
	}
	,set_backTest: function(v) {
		this.opBits = this.opBits & -28673 | v._hx_index << 12;
		return this.backTest = v;
	}
	,set_backPass: function(v) {
		this.opBits = this.opBits & -229377 | v._hx_index << 15;
		return this.backPass = v;
	}
	,set_backSTfail: function(v) {
		this.opBits = this.opBits & -1835009 | v._hx_index << 18;
		return this.backSTfail = v;
	}
	,set_backDPfail: function(v) {
		this.opBits = this.opBits & -14680065 | v._hx_index << 21;
		return this.backDPfail = v;
	}
	,__class__: h3d_mat_Stencil
};
var hxd_PixelFormat = $hxEnums["hxd.PixelFormat"] = { __ename__:true,__constructs__:null
	,ARGB: {_hx_name:"ARGB",_hx_index:0,__enum__:"hxd.PixelFormat",toString:$estr}
	,BGRA: {_hx_name:"BGRA",_hx_index:1,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA: {_hx_name:"RGBA",_hx_index:2,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16F: {_hx_name:"RGBA16F",_hx_index:3,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA32F: {_hx_name:"RGBA32F",_hx_index:4,__enum__:"hxd.PixelFormat",toString:$estr}
	,R8: {_hx_name:"R8",_hx_index:5,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16F: {_hx_name:"R16F",_hx_index:6,__enum__:"hxd.PixelFormat",toString:$estr}
	,R32F: {_hx_name:"R32F",_hx_index:7,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG8: {_hx_name:"RG8",_hx_index:8,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16F: {_hx_name:"RG16F",_hx_index:9,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG32F: {_hx_name:"RG32F",_hx_index:10,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB8: {_hx_name:"RGB8",_hx_index:11,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16F: {_hx_name:"RGB16F",_hx_index:12,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB32F: {_hx_name:"RGB32F",_hx_index:13,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB: {_hx_name:"SRGB",_hx_index:14,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB_ALPHA: {_hx_name:"SRGB_ALPHA",_hx_index:15,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB10A2: {_hx_name:"RGB10A2",_hx_index:16,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG11B10UF: {_hx_name:"RG11B10UF",_hx_index:17,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16U: {_hx_name:"R16U",_hx_index:18,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16U: {_hx_name:"RG16U",_hx_index:19,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16U: {_hx_name:"RGB16U",_hx_index:20,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16U: {_hx_name:"RGBA16U",_hx_index:21,__enum__:"hxd.PixelFormat",toString:$estr}
	,S3TC: ($_=function(v) { return {_hx_index:22,v:v,__enum__:"hxd.PixelFormat",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="S3TC",$_)
	,Depth16: {_hx_name:"Depth16",_hx_index:23,__enum__:"hxd.PixelFormat",toString:$estr}
	,Depth24: {_hx_name:"Depth24",_hx_index:24,__enum__:"hxd.PixelFormat",toString:$estr}
	,Depth24Stencil8: {_hx_name:"Depth24Stencil8",_hx_index:25,__enum__:"hxd.PixelFormat",toString:$estr}
	,Depth32: {_hx_name:"Depth32",_hx_index:26,__enum__:"hxd.PixelFormat",toString:$estr}
};
hxd_PixelFormat.__constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF,hxd_PixelFormat.R16U,hxd_PixelFormat.RG16U,hxd_PixelFormat.RGB16U,hxd_PixelFormat.RGBA16U,hxd_PixelFormat.S3TC,hxd_PixelFormat.Depth16,hxd_PixelFormat.Depth24,hxd_PixelFormat.Depth24Stencil8,hxd_PixelFormat.Depth32];
hxd_PixelFormat.__empty_constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF,hxd_PixelFormat.R16U,hxd_PixelFormat.RG16U,hxd_PixelFormat.RGB16U,hxd_PixelFormat.RGBA16U,hxd_PixelFormat.Depth16,hxd_PixelFormat.Depth24,hxd_PixelFormat.Depth24Stencil8,hxd_PixelFormat.Depth32];
var h3d_mat_Texture = function(w,h,flags,format) {
	this.slopeScaledBias = 0.;
	this.depthBias = 0.;
	this.startingMip = 0;
	if(format == null) {
		format = h3d_mat_Texture.nativeFormat;
	}
	this.id = ++h3d_mat_Texture.UID;
	this.format = format;
	this.flags = 0;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	var engine = h3d_Engine.CURRENT;
	this.mem = engine.mem;
	var tw = 1;
	var th = 1;
	while(tw < w) tw <<= 1;
	while(th < h) th <<= 1;
	if(tw != w || th != h) {
		this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
	}
	this.width = w;
	this.height = h;
	if((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0) {
		this.set_mipMap(h3d_mat_Texture.TRILINEAR_FILTERING_ENABLED ? h3d_mat_MipMap.Linear : h3d_mat_MipMap.Nearest);
	} else {
		this.set_mipMap(h3d_mat_MipMap.None);
	}
	this.set_filter(h3d_mat_Filter.Linear);
	this.set_wrap(h3d_mat_Texture.DEFAULT_WRAP);
	this.bits &= 32767;
	this.allocPos = hxd_impl_AllocPos.make();
	if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0 && this.width > 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.Texture"] = h3d_mat_Texture;
h3d_mat_Texture.__name__ = "h3d.mat.Texture";
h3d_mat_Texture.getDefaultDepth = function() {
	return h3d_Engine.CURRENT.driver.getDefaultDepthBuffer();
};
h3d_mat_Texture.fromColor = function(color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	var key = color & 16777215 | aval << 24;
	var t = engine.textureColorCache.h[key];
	if(t != null) {
		return t;
	}
	var t = new h3d_mat_Texture(1,1,null);
	t.clear(color,alpha);
	t.realloc = function() {
		t.clear(color,alpha);
	};
	engine.textureColorCache.h[key] = t;
	return t;
};
h3d_mat_Texture.defaultCubeTexture = function() {
	var engine = h3d_Engine.CURRENT;
	var t = engine.resCache.h[h3d_mat_Texture.__id__];
	if(t != null) {
		return t;
	}
	t = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Cube]);
	t.clear(2105376);
	t.realloc = function() {
		t.clear(2105376);
	};
	engine.resCache.set(h3d_mat_Texture,t);
	return t;
};
h3d_mat_Texture.prototype = {
	set_lastFrame: function(lf) {
		if(this._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
			this._lastFrame = lf;
		}
		return this._lastFrame;
	}
	,get_mipLevels: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) == 0) {
			return 1;
		}
		if(this.customMipLevels > 0) {
			return this.customMipLevels;
		}
		var lv = 1;
		var w = this.width;
		var h = this.height;
		while(w >> lv >= 1 || h >> lv >= 1) ++lv;
		return lv;
	}
	,get_layerCount: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			return 6;
		} else {
			return 1;
		}
	}
	,alloc: function() {
		if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	,toString: function() {
		var str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
			if(this.allocPos != null) {
				str += "(" + this.allocPos.position + ")";
			}
		}
		if((this.flags & 1 << h3d_mat_TextureFlags.Is3D._hx_index) != 0) {
			str += "(" + this.width + "x" + this.height + "x" + this.get_layerCount() + ")";
		} else {
			str += "(" + this.width + "x" + this.height + ")";
		}
		return str;
	}
	,setName: function(n) {
		this.name = n;
	}
	,set_mipMap: function(m) {
		this.bits = this.bits & -4 | m._hx_index;
		return this.mipMap = m;
	}
	,set_filter: function(f) {
		this.bits = this.bits & -25 | f._hx_index << 3;
		return this.filter = f;
	}
	,set_wrap: function(w) {
		this.bits = this.bits & -193 | w._hx_index << 6;
		return this.wrap = w;
	}
	,resize: function(width,height) {
		this.dispose();
		var tw = 1;
		var th = 1;
		while(tw < width) tw <<= 1;
		while(th < height) th <<= 1;
		if(tw != width || th != height) {
			this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
		} else {
			this.flags &= -1 - (1 << h3d_mat_TextureFlags.IsNPOT._hx_index);
		}
		this.width = width;
		this.height = height;
		if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
			this.alloc();
		}
	}
	,clear: function(color,alpha,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		if(this.width == 0 || this.height == 0) {
			return;
		}
		if(this.width != 1 || this.height != 1) {
			var engine = h3d_Engine.CURRENT;
			color |= ((alpha < 0. ? 0. : alpha > 1. ? 1. : alpha) * 255 | 0) << 24;
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					engine.pushTarget(this,i);
					engine.clear(color);
					engine.popTarget();
				}
			} else {
				engine.pushTarget(this,layer);
				engine.clear(color);
				engine.popTarget();
			}
		} else {
			var p = hxd_Pixels.alloc(this.width,this.height,h3d_mat_Texture.nativeFormat);
			var k = 0;
			var b = color & 255;
			var g = color >> 8 & 255;
			var r = color >> 16 & 255;
			var a = alpha * 255 | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			}
			switch(h3d_mat_Texture.nativeFormat._hx_index) {
			case 1:
				var tmp = r;
				r = b;
				b = tmp;
				break;
			case 2:
				break;
			default:
				throw haxe_Exception.thrown("TODO");
			}
			var _g = 0;
			var _g1 = this.width * this.height;
			while(_g < _g1) {
				var i = _g++;
				p.bytes.b[k++] = r;
				p.bytes.b[k++] = g;
				p.bytes.b[k++] = b;
				p.bytes.b[k++] = a;
			}
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					this.uploadPixels(p,0,i);
				}
			} else {
				this.uploadPixels(p,0,layer);
			}
			p.dispose();
		}
	}
	,checkSize: function(width,height,mip) {
		var mw = this.width >> mip;
		if(mw == 0) {
			mw = 1;
		}
		var mh = this.height >> mip;
		if(mh == 0) {
			mh = 1;
		}
		if(width != mw || height != mh) {
			throw haxe_Exception.thrown("Invalid upload size : " + width + "x" + height + " should be " + mw + "x" + mh);
		}
	}
	,checkMipMapGen: function(mipLevel,layer) {
		if(mipLevel == 0 && (this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (this.flags & 1 << h3d_mat_TextureFlags.ManualMipMapGen._hx_index) == 0 && layer == this.get_layerCount() - 1) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	,uploadBitmap: function(bmp,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		this.checkSize(bmp.ctx.canvas.width,bmp.ctx.canvas.height,mipLevel);
		this.mem.driver.uploadTextureBitmap(this,bmp,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,uploadPixels: function(pixels,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		this.checkSize(pixels.width,pixels.height,mipLevel);
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,dispose: function() {
		if(this.t != null) {
			this.mem.deleteTexture(this);
		}
	}
	,hasStencil: function() {
		if(this.format._hx_index == 25) {
			return true;
		} else {
			return false;
		}
	}
	,isDepth: function() {
		switch(this.format._hx_index) {
		case 23:case 24:case 25:case 26:
			return true;
		default:
			return false;
		}
	}
	,__class__: h3d_mat_Texture
};
var h3d_mat_TextureArray = function(w,h,layers,flags,format) {
	this.layers = layers;
	if(flags == null) {
		flags = [];
	}
	flags.push(h3d_mat_TextureFlags.IsArray);
	h3d_mat_Texture.call(this,w,h,flags,format);
};
$hxClasses["h3d.mat.TextureArray"] = h3d_mat_TextureArray;
h3d_mat_TextureArray.__name__ = "h3d.mat.TextureArray";
h3d_mat_TextureArray.__super__ = h3d_mat_Texture;
h3d_mat_TextureArray.prototype = $extend(h3d_mat_Texture.prototype,{
	get_layerCount: function() {
		return this.layers;
	}
	,toString: function() {
		return h3d_mat_Texture.prototype.toString.call(this) + "[" + this.layers + "]";
	}
	,__class__: h3d_mat_TextureArray
});
var h3d_pass_ScreenFx = function(shader,output) {
	this.shader = shader;
	this.output = new h3d_pass_OutputShader(output);
	this.pass = new h3d_mat_Pass("screenfx",new hxsl_ShaderList(shader));
	this.pass.set_culling(h3d_mat_Face.None);
	this.pass.depth(false,h3d_mat_Compare.Always);
};
$hxClasses["h3d.pass.ScreenFx"] = h3d_pass_ScreenFx;
h3d_pass_ScreenFx.__name__ = "h3d.pass.ScreenFx";
h3d_pass_ScreenFx.prototype = {
	get_engine: function() {
		if(this._engine == null) {
			this._engine = h3d_Engine.CURRENT;
		}
		return this._engine;
	}
	,render: function() {
		if(this.primitive == null) {
			this.primitive = h3d_prim_Plane2D.get();
		}
		this.shader.flipY__ = this.get_engine().driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.get_engine().getCurrentTarget() != null ? -1 : 1;
		var shaders = this.pass.shaders;
		var ctx = h3d_impl_RenderContext.get();
		var isNewCtx = false;
		if(ctx == null) {
			isNewCtx = true;
			ctx = new h3d_impl_RenderContext();
			ctx.setCurrent();
		}
		var rts = this.output.compileShaders(ctx.globals,shaders);
		this.get_engine().selectMaterial(this.pass);
		this.get_engine().selectShader(rts);
		var buffers = ctx.shaderBuffers;
		buffers.vertex.grow(rts.vertex);
		if(rts.fragment != null) {
			buffers.fragment.grow(rts.fragment);
		}
		ctx.fillGlobals(buffers,rts);
		ctx.fillParams(buffers,rts,shaders);
		this.get_engine().uploadShaderBuffers(buffers,0);
		this.get_engine().uploadShaderBuffers(buffers,1);
		this.get_engine().uploadShaderBuffers(buffers,2);
		this.get_engine().uploadShaderBuffers(buffers,3);
		this.primitive.render(this.get_engine());
		if(isNewCtx) {
			ctx.clearCurrent();
		}
	}
	,dispose: function() {
	}
	,__class__: h3d_pass_ScreenFx
};
var h3d_pass_Blur = function(radius,gain,linear,quality) {
	if(quality == null) {
		quality = 1.;
	}
	if(linear == null) {
		linear = 0.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,0,1,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	h3d_pass_ScreenFx.call(this,new h3d_shader_Blur());
	this.set_radius(radius);
	this.set_quality(quality);
	this.set_gain(gain);
	this.set_linear(linear);
};
$hxClasses["h3d.pass.Blur"] = h3d_pass_Blur;
h3d_pass_Blur.__name__ = "h3d.pass.Blur";
h3d_pass_Blur.__super__ = h3d_pass_ScreenFx;
h3d_pass_Blur.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	set_radius: function(r) {
		if(this.radius == r) {
			return r;
		}
		this.values = null;
		return this.radius = r;
	}
	,set_quality: function(q) {
		if(this.quality == q) {
			return q;
		}
		this.values = null;
		return this.quality = q;
	}
	,set_gain: function(s) {
		if(this.gain == s) {
			return s;
		}
		this.values = null;
		return this.gain = s;
	}
	,set_linear: function(b) {
		if(this.linear == b) {
			return b;
		}
		this.values = null;
		return this.linear = b;
	}
	,gauss: function(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		var sq = s * s;
		var p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	,calcValues: function() {
		this.values = [];
		this.offsets = [];
		var tot = 0.;
		var f = this.quality;
		var qadj = (f < 0. ? 0. : f > 1. ? 1. : f) * 0.7 + 0.3;
		var width;
		if(this.radius > 0) {
			var a = this.radius - 1;
			width = Math.ceil((a < 1 ? 1 : a) * qadj / 2);
		} else {
			width = 0;
		}
		var sigma = Math.sqrt(this.radius);
		var _g = 0;
		var _g1 = width + 1;
		while(_g < _g1) {
			var i = _g++;
			var i1 = i * 2;
			var i2 = i == 0 ? 0 : i * 2 - 1;
			var g1 = this.gauss(i1,sigma);
			var g2 = this.gauss(i2,sigma);
			var g = g1 + g2;
			this.values[i] = g;
			this.offsets[i] = i == 0 ? 0 : (g1 * i1 + g2 * i2) / (g * i * Math.sqrt(qadj));
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		var minVal = this.values[0] * (0.01 / qadj);
		while(this.values.length > 2) {
			var last = this.values[this.values.length - 1];
			if(last > minVal) {
				break;
			}
			tot -= last * 2;
			this.values.pop();
		}
		tot /= this.gain;
		var _g = 0;
		var _g1 = this.values.length;
		while(_g < _g1) {
			var i = _g++;
			this.values[i] /= tot;
		}
		if(this.linear > 0) {
			var m = this.gain / (this.values.length * 2 - 1);
			var _g = 0;
			var _g1 = this.values.length;
			while(_g < _g1) {
				var i = _g++;
				var a = this.values[i];
				this.values[i] = a + this.linear * (m - a);
				var a1 = this.offsets[i];
				this.offsets[i] = a1 + this.linear * ((i == 0 ? 0 : (i * 2 - 0.5) / (i * qadj)) - a1);
			}
		}
	}
	,apply: function(ctx,src,output) {
		if(this.radius <= 0 && this.shader.fixedColor__ == null) {
			if(output != null) {
				h3d_pass_Copy.run(src,output);
			}
			return;
		}
		if(output == null) {
			output = src;
		}
		if(this.values == null) {
			this.calcValues();
		}
		var isCube = (src.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var faceCount = isCube ? 6 : 1;
		var tmp = ctx.textures.allocTarget(src.name + "BlurTmp",src.width,src.height,false,src.format,isCube ? [h3d_mat_TextureFlags.Cube] : null);
		var _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.values.length;
		this.shader.values__ = this.values;
		this.shader.offsets__ = this.offsets;
		if(isCube) {
			this.shader.cubeTexture__ = src;
			var _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = true;
		} else {
			this.shader.texture__ = src;
			var _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = false;
		}
		var _this = this.shader.pixel__;
		var x = 1 / src.width;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(tmp,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		if(isCube) {
			this.shader.cubeTexture__ = tmp;
		} else {
			this.shader.texture__ = tmp;
		}
		var _this = this.shader.pixel__;
		var x = 0;
		var y = 1 / src.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var outDepth = output.depthBuffer;
		output.depthBuffer = null;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(output,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		output.depthBuffer = outDepth;
	}
	,__class__: h3d_pass_Blur
});
var hxsl_Shader = function() {
	this.priority = 0;
	this.initialize();
};
$hxClasses["hxsl.Shader"] = hxsl_Shader;
hxsl_Shader.__name__ = "hxsl.Shader";
hxsl_Shader.prototype = {
	initialize: function() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		var cl = js_Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			var curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = curClass.__super__;
			if(curClass == null) {
				throw haxe_Exception.thrown(cl.__name__ + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl_SharedShader(curClass.SRC,curClass._MODULE);
				curClass._SHADER = this.shader;
			}
		}
	}
	,setPriority: function(v) {
		this.priority = v;
	}
	,getParamValue: function(index) {
		throw haxe_Exception.thrown("assert");
	}
	,getParamFloatValue: function(index) {
		throw haxe_Exception.thrown("assert");
	}
	,updateConstants: function(globals) {
		throw haxe_Exception.thrown("assert");
	}
	,updateConstantsFinal: function(globals) {
		var c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			var v = globals.map.h[c.globalId];
			var _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				var v1 = v;
				if(v1 >>> c.bits != 0) {
					throw haxe_Exception.thrown("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				var v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 17:
				var count = _g.size;
				if(v == null) {
					c = c.next;
					continue;
				}
				var v3 = v;
				var sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl_Channel.Unknown;
				} else if(sel == null || sel == hxsl_Channel.Unknown) {
					switch(count) {
					case 1:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedFloat;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedNormal;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel._hx_index) << c.pos;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			c = c.next;
		}
		var _this = this.shader;
		var constBits = this.constBits;
		var i = _this.instanceCache.h[constBits];
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: hxsl_Shader
};
var h3d_shader_ScreenShader = function() {
	this.flipY__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.ScreenShader"] = h3d_shader_ScreenShader;
h3d_shader_ScreenShader.__name__ = "h3d.shader.ScreenShader";
h3d_shader_ScreenShader.__super__ = hxsl_Shader;
h3d_shader_ScreenShader.prototype = $extend(hxsl_Shader.prototype,{
	get_flipY: function() {
		return this.flipY__;
	}
	,set_flipY: function(_v) {
		return this.flipY__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_ScreenShader
});
var h3d_pass__$Border_BorderShader = function() {
	this.color__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Border.BorderShader"] = h3d_pass__$Border_BorderShader;
h3d_pass__$Border_BorderShader.__name__ = "h3d.pass._Border.BorderShader";
h3d_pass__$Border_BorderShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Border_BorderShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Border_BorderShader
});
var h3d_pass_Border = function(width,height,size) {
	if(size == null) {
		size = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Border_BorderShader());
	this.width = width;
	this.height = height;
	this.size = size;
	var _this = this.shader.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
$hxClasses["h3d.pass.Border"] = h3d_pass_Border;
h3d_pass_Border.__name__ = "h3d.pass.Border";
h3d_pass_Border.__super__ = h3d_pass_ScreenFx;
h3d_pass_Border.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	createPrimitive: function() {
		var _gthis = this;
		var bbuf = hxd__$FloatBuffer_Float32Expand._new(0);
		var v = 0 / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - 0 / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = this.width / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - 0 / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.size;
		var v = 0 / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.size;
		var v = this.width / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 0 / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - 0 / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = this.size / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - 0 / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height;
		var v = 0 / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height;
		var v = this.size / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height - this.size;
		var v = 0 / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height - this.size;
		var v = this.width / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height;
		var v = 0 / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height;
		var v = this.width / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = (this.width - this.size) / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - 0 / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = this.width / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - 0 / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height;
		var v = (this.width - this.size) / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height;
		var v = this.width / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		this.primitive = new h3d_prim_RawPrimitive({ vbuf : bbuf, format : hxd_BufferFormat.make([new hxd_BufferInput("position",2,0)])},true);
	}
	,render: function() {
		if(this.primitive == null) {
			this.createPrimitive();
		}
		h3d_pass_ScreenFx.prototype.render.call(this);
	}
	,dispose: function() {
		if(this.primitive != null) {
			this.primitive.dispose();
		}
		h3d_pass_ScreenFx.prototype.dispose.call(this);
	}
	,__class__: h3d_pass_Border
});
var h3d_pass__$Copy_ArrayCopyShader = function() {
	this.layer__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.ArrayCopyShader"] = h3d_pass__$Copy_ArrayCopyShader;
h3d_pass__$Copy_ArrayCopyShader.__name__ = "h3d.pass._Copy.ArrayCopyShader";
h3d_pass__$Copy_ArrayCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_ArrayCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_layer: function() {
		return this.layer__;
	}
	,set_layer: function(_v) {
		return this.layer__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.layer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 2:
			return this.layer__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_pass__$Copy_ArrayCopyShader
});
var h3d_pass__$Copy_CopyShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.CopyShader"] = h3d_pass__$Copy_CopyShader;
h3d_pass__$Copy_CopyShader.__name__ = "h3d.pass._Copy.CopyShader";
h3d_pass__$Copy_CopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_CopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Copy_CopyShader
});
var h3d_pass_Copy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_CopyShader());
};
$hxClasses["h3d.pass.Copy"] = h3d_pass_Copy;
h3d_pass_Copy.__name__ = "h3d.pass.Copy";
h3d_pass_Copy.run = function(from,to,blend,pass,layer) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && layer == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_Copy.__id__];
	if(inst == null) {
		inst = new h3d_pass_Copy();
		engine.resCache.set(h3d_pass_Copy,inst);
	}
	inst.apply(from,to,blend,pass,layer);
};
h3d_pass_Copy.__super__ = h3d_pass_ScreenFx;
h3d_pass_Copy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		if(customPass != null) {
			if(blend != null) {
				customPass.setBlendMode(blend);
			}
			var h = customPass.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			var old = this.pass;
			this.pass = customPass;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	,__class__: h3d_pass_Copy
});
var h3d_pass__$CubeCopy_CubeCopyShader = function() {
	this.mat__ = new h3d_MatrixImpl();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._CubeCopy.CubeCopyShader"] = h3d_pass__$CubeCopy_CubeCopyShader;
h3d_pass__$CubeCopy_CubeCopyShader.__name__ = "h3d.pass._CubeCopy.CubeCopyShader";
h3d_pass__$CubeCopy_CubeCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$CubeCopy_CubeCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_mat: function() {
		return this.mat__;
	}
	,set_mat: function(_v) {
		return this.mat__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$CubeCopy_CubeCopyShader
});
var h3d_pass_Output = function(name,output) {
	this.defaultSort = ($_=new h3d_pass_SortByMaterial(),$bind($_,$_.sort));
	this.name = name;
	this.output = new h3d_pass_OutputShader(output);
};
$hxClasses["h3d.pass.Output"] = h3d_pass_Output;
h3d_pass_Output.__name__ = "h3d.pass.Output";
h3d_pass_Output.prototype = {
	setContext: function(ctx) {
		this.ctx = ctx;
	}
	,processShaders: function(p,shaders) {
		var p = this.ctx.extraShaders;
		while(p != null) {
			shaders = this.ctx.allocShaderList(p.s,shaders);
			p = p.next;
		}
		return shaders;
	}
	,setupShaders: function(passes) {
		var lightInit = false;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var shaders = p.pass.getShadersRec();
			shaders = this.processShaders(p,shaders);
			if(p.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.ctx.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(p.obj,shaders);
			}
			p.shader = this.output.compileShaders(this.ctx.globals,shaders,p.pass.batchMode ? hxsl_LinkMode.Batch : hxsl_LinkMode.Default);
			p.shaders = shaders;
			var t = p.shader.fragment.textures;
			if(t == null || t.type._hx_index == 15) {
				p.texture = 0;
			} else {
				var _this = this.ctx;
				var opt = true;
				if(opt == null) {
					opt = false;
				}
				var t1;
				if(t.perObjectGlobal != null) {
					var v = _this.globals.map.h[t.perObjectGlobal.gid];
					if(v == null) {
						throw haxe_Exception.thrown("Missing global value " + t.perObjectGlobal.path + " for shader " + _this.shaderInfo(shaders,t.perObjectGlobal.path));
					}
					t1 = t.type._hx_index == 17 ? v.texture : v;
				} else {
					var si = shaders;
					var n = t.instance;
					while(--n > 0) si = si.next;
					var v1 = si.s.getParamValue(t.index);
					if(v1 == null && !opt) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + t.name);
					}
					t1 = v1;
				}
				p.texture = t1 == null ? 0 : t1.id;
			}
		}
	}
	,drawObject: function(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		var _this = p.obj;
		var f = 65536;
		_this.flags |= f;
		p.obj.draw(this.ctx);
	}
	,draw: function(passes,sort) {
		if(passes.current == null) {
			return;
		}
		this.ctx.setupTarget();
		this.setupShaders(passes);
		if(sort == null) {
			this.defaultSort(passes);
		} else {
			sort(passes);
		}
		var buf = this.ctx.shaderBuffers;
		var prevShader = null;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var _this = this.ctx;
			var v = p.obj.prevAbsPos;
			var v1 = v != null ? v : p.obj.absPos;
			_this.globals.map.h[_this.globalPreviousModelView_id] = v1;
			var _this1 = this.ctx;
			var v2 = p.obj.absPos;
			_this1.globals.map.h[_this1.globalModelView_id] = v2;
			if(p.shader.globals.h.hasOwnProperty(this.ctx.globalModelViewInverse_id)) {
				var _this2 = this.ctx;
				var v3 = p.obj.getInvPos();
				_this2.globals.map.h[_this2.globalModelViewInverse_id] = v3;
			}
			if(prevShader != p.shader) {
				prevShader = p.shader;
				if(h3d_pass_Output.onShaderError != null) {
					try {
						this.ctx.engine.selectShader(p.shader);
					} catch( _g ) {
						var e = haxe_Exception.caught(_g).unwrap();
						h3d_pass_Output.onShaderError(e,p);
						continue;
					}
				} else {
					this.ctx.engine.selectShader(p.shader);
				}
				var s = p.shader;
				buf.vertex.grow(s.vertex);
				if(s.fragment != null) {
					buf.fragment.grow(s.fragment);
				}
				this.ctx.fillGlobals(buf,p.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!p.pass.dynamicParameters) {
				this.ctx.fillParams(buf,p.shader,p.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
				this.ctx.engine.uploadShaderBuffers(buf,3);
			}
			this.drawObject(p);
		}
		var _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
	}
	,__class__: h3d_pass_Output
};
var h3d_pass_Shadows = function(light) {
	this.pcfScale = 1.0;
	this.pcfQuality = 1;
	this.bias = 0.01;
	this.power = 30.0;
	this.samplingKind = h3d_pass_ShadowSamplingKind.None;
	this.size = 1024;
	this.mode = h3d_pass_RenderMode.None;
	this.enabled = true;
	this.updateStatic = false;
	if(this.format == null) {
		this.format = hxd_PixelFormat.R16F;
	}
	if(!h3d_Engine.CURRENT.driver.isSupportedFormat(this.format)) {
		this.format = h3d_mat_Texture.nativeFormat;
	}
	h3d_pass_Output.call(this,"shadow",this.getOutputs());
	this.light = light;
	this.blur = new h3d_pass_Blur(5);
	this.blur.set_quality(0.5);
	var _this = this.blur.shader;
	_this.constModified = true;
	_this.isDepth__ = this.format == h3d_mat_Texture.nativeFormat;
};
$hxClasses["h3d.pass.Shadows"] = h3d_pass_Shadows;
h3d_pass_Shadows.__name__ = "h3d.pass.Shadows";
h3d_pass_Shadows.__super__ = h3d_pass_Output;
h3d_pass_Shadows.prototype = $extend(h3d_pass_Output.prototype,{
	set_size: function(s) {
		if(s != this.size && this.staticTexture != null) {
			this.staticTexture.dispose();
			this.staticTexture = null;
		}
		return this.size = s;
	}
	,getShadowProj: function() {
		return this.lightCamera.m;
	}
	,isUsingWorldDist: function() {
		return false;
	}
	,getOutputs: function() {
		if(this.isUsingWorldDist()) {
			return [hxsl_Output.Swiz(hxsl_Output.Value("output.worldDist",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
		}
		if(this.format == h3d_mat_Texture.nativeFormat) {
			return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
		}
		return [hxsl_Output.Swiz(hxsl_Output.Value("output.depth",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
	}
	,createDefaultShadowMap: function() {
		var tex = h3d_mat_Texture.fromColor(16777215);
		tex.name = "defaultShadowMap";
		return tex;
	}
	,syncEarlyExit: function() {
		this.syncShader(this.staticTexture == null ? this.createDefaultShadowMap() : this.staticTexture);
	}
	,syncShader: function(texture) {
	}
	,filterPasses: function(passes) {
		if(this.ctx.computingStatic || this.updateStatic) {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			case 2:
				return false;
			case 3:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			}
		} else {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				this.syncEarlyExit();
				return false;
			case 2:
				return true;
			case 3:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == false) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			}
		}
	}
	,__class__: h3d_pass_Shadows
});
var h3d_pass_DirShadowMap = function(light) {
	this.minDist = -1.0;
	this.maxDist = -1.0;
	this.autoZPlanes = false;
	this.autoShrink = true;
	this.mergePass = new h3d_pass_ScreenFx(new h3d_shader_MinMaxShader());
	h3d_pass_Shadows.call(this,light);
	this.lightCamera = new h3d_Camera();
	this.lightCamera.orthoBounds = new h3d_col_Bounds();
	this.shader = this.dshader = new h3d_shader_DirShadow();
	this.border = new h3d_pass_Border(this.size,this.size);
};
$hxClasses["h3d.pass.DirShadowMap"] = h3d_pass_DirShadowMap;
h3d_pass_DirShadowMap.__name__ = "h3d.pass.DirShadowMap";
h3d_pass_DirShadowMap.__super__ = h3d_pass_Shadows;
h3d_pass_DirShadowMap.prototype = $extend(h3d_pass_Shadows.prototype,{
	set_mode: function(m) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = m != h3d_pass_RenderMode.None;
		return this.mode = m;
	}
	,set_size: function(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return h3d_pass_Shadows.prototype.set_size.call(this,s);
	}
	,calcShadowBounds: function(camera) {
		var _gthis = this;
		var bounds = camera.orthoBounds;
		var zMax = -1e9;
		var zMin = 1e9;
		if(this.autoShrink) {
			var mtmp = new h3d_MatrixImpl();
			var identity = h3d_Matrix.I();
			var btmp = this.autoZPlanes ? new h3d_col_Bounds() : null;
			var obj = this.boundingObject != null ? this.boundingObject : this.ctx.scene;
			obj.iterVisibleMeshes(function(m) {
				if(m.primitive == null || !m.material.castShadows) {
					return;
				}
				var b = m.primitive.getBounds();
				if(b.xMin > b.xMax) {
					return;
				}
				var absPos = ((m.primitive) instanceof h3d_prim_Instanced) ? identity : m.getAbsPos();
				if(_gthis.autoZPlanes) {
					btmp.load(b);
					btmp.transform(absPos);
					if(btmp.zMax > zMax) {
						zMax = btmp.zMax;
					}
					if(btmp.zMin < zMin) {
						zMin = btmp.zMin;
					}
				}
				mtmp.multiply3x4(absPos,camera.mcam);
				var x = b.xMin;
				var y = b.yMin;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMin;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMax;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMax;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMin;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMin;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMax;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMax;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
			});
		} else if(this.mode == h3d_pass_RenderMode.Dynamic) {
			bounds.xMin = -1e20;
			bounds.xMax = 1e20;
			bounds.yMin = -1e20;
			bounds.yMax = 1e20;
			bounds.zMin = -1e20;
			bounds.zMax = 1e20;
		}
		if(this.mode == h3d_pass_RenderMode.Dynamic) {
			var cameraBounds = new h3d_col_Bounds();
			var minDist = this.minDist < 0 ? this.ctx.camera.zNear : this.minDist;
			var maxDist = this.maxDist < 0 ? this.ctx.camera.zFar : this.maxDist;
			var dist = minDist;
			var this1 = _gthis.ctx.camera.unproject(-1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = minDist;
			var this1 = _gthis.ctx.camera.unproject(-1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = minDist;
			var this1 = _gthis.ctx.camera.unproject(1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = minDist;
			var this1 = _gthis.ctx.camera.unproject(1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var this1 = _gthis.ctx.camera.unproject(-1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var this1 = _gthis.ctx.camera.unproject(-1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var this1 = _gthis.ctx.camera.unproject(1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var this1 = _gthis.ctx.camera.unproject(1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			if(this.autoShrink) {
				cameraBounds.zMin = bounds.zMin;
				bounds.intersection(bounds,cameraBounds);
				if(this.autoZPlanes) {
					var this1 = camera.target;
					var v = camera.pos;
					var x = this1.x - v.x;
					var y = this1.y - v.y;
					var z = this1.z - v.z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var _this_x = x1;
					var _this_y = y1;
					var _this_z = z1;
					var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
					if(k < 1e-20) {
						k = 0;
					} else {
						k = 1. / Math.sqrt(k);
					}
					var x = _this_x * k;
					var y = _this_y * k;
					var z = _this_z * k;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					var dMin = 1e9;
					var px = bounds.xMin;
					var py = bounds.yMin;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var this_x = x1;
					var this_y = y1;
					var this_z = z1;
					var m = camera.getInverseView();
					var px = this_x * m._11 + this_y * m._21 + this_z * m._31 + m._41;
					var py = this_x * m._12 + this_y * m._22 + this_z * m._32 + m._42;
					var pz = this_x * m._13 + this_y * m._23 + this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var r0_x = x1;
					var r0_y = y1;
					var r0_z = z1;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					var px = bounds.xMin;
					var py = bounds.yMax;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var this_x = x1;
					var this_y = y1;
					var this_z = z1;
					var m = camera.getInverseView();
					var px = this_x * m._11 + this_y * m._21 + this_z * m._31 + m._41;
					var py = this_x * m._12 + this_y * m._22 + this_z * m._32 + m._42;
					var pz = this_x * m._13 + this_y * m._23 + this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var r0_x = x1;
					var r0_y = y1;
					var r0_z = z1;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					var px = bounds.xMax;
					var py = bounds.yMin;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var this_x = x1;
					var this_y = y1;
					var this_z = z1;
					var m = camera.getInverseView();
					var px = this_x * m._11 + this_y * m._21 + this_z * m._31 + m._41;
					var py = this_x * m._12 + this_y * m._22 + this_z * m._32 + m._42;
					var pz = this_x * m._13 + this_y * m._23 + this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var r0_x = x1;
					var r0_y = y1;
					var r0_z = z1;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					var px = bounds.xMax;
					var py = bounds.yMax;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var this_x = x1;
					var this_y = y1;
					var this_z = z1;
					var m = camera.getInverseView();
					var px = this_x * m._11 + this_y * m._21 + this_z * m._31 + m._41;
					var py = this_x * m._12 + this_y * m._22 + this_z * m._32 + m._42;
					var pz = this_x * m._13 + this_y * m._23 + this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var r0_x = x1;
					var r0_y = y1;
					var r0_z = z1;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					bounds.zMin += dMin;
				}
			} else {
				bounds.load(cameraBounds);
			}
		}
		bounds.scaleCenter(1.01);
	}
	,syncShader: function(texture) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = texture;
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMapChannel__ = this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R;
		this.dshader.shadowBias__ = this.bias;
		this.dshader.shadowPower__ = this.power;
		this.dshader.shadowProj__ = this.getShadowProj();
		var _this = this.dshader;
		_this.constModified = true;
		_this.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.dshader.shadowPower__ = this.power;
		var _this = this.dshader;
		_this.constModified = true;
		_this.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		var _this = this.dshader.shadowRes__;
		var x = texture.width;
		var y = texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		this.dshader.pcfScale__ = this.pcfScale;
		this.dshader.set_pcfQuality(this.pcfQuality);
	}
	,processShadowMap: function(passes,tex,sort) {
		var _this = this.ctx;
		var prevViewProj = _this.globals.map.h[_this.cameraViewProj_id];
		var _this = this.ctx;
		var v = this.getShadowProj();
		_this.globals.map.h[_this.cameraViewProj_id] = v;
		if(tex.isDepth()) {
			this.ctx.engine.pushDepth(tex);
			this.ctx.engine.clear(null,1.0);
		} else {
			this.ctx.engine.pushTarget(tex);
			this.ctx.engine.clear(16777215,1.0);
		}
		h3d_pass_Shadows.prototype.draw.call(this,passes,sort);
		var computingStatic = this.ctx.computingStatic || this.updateStatic;
		var doBlur = this.blur.radius > 0 && (this.mode != h3d_pass_RenderMode.Mixed || !computingStatic);
		if(this.border != null && !doBlur) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		var tmp;
		if(this.mode == h3d_pass_RenderMode.Mixed && !computingStatic && this.staticTexture != null) {
			var _this = this.staticTexture;
			tmp = !(_this.t == null && (_this.isDepth() || _this.realloc == null));
		} else {
			tmp = false;
		}
		if(tmp) {
			if(this.staticTexture.width != tex.width) {
				throw haxe_Exception.thrown("Static shadow map doesnt match dynamic shadow map");
			}
			var merge = this.ctx.textures.allocTarget("mergedDirShadowMap",this.size,this.size,false,this.format);
			this.mergePass.shader.texA__ = tex;
			this.mergePass.shader.texB__ = this.staticTexture;
			this.ctx.engine.pushTarget(merge);
			this.mergePass.render();
			this.ctx.engine.popTarget();
			tex = merge;
		}
		if(doBlur) {
			if(tex.isDepth()) {
				var tmp = this.ctx.textures.allocTarget("dirShadowMapFloat",this.size,this.size,false,this.format);
				h3d_pass_Copy.run(tex,tmp);
				tex = tmp;
			}
			this.blur.apply(this.ctx,tex);
			if(this.border != null) {
				this.ctx.engine.pushTarget(tex);
				this.border.render();
				this.ctx.engine.popTarget();
			}
		}
		var _this = this.ctx;
		_this.globals.map.h[_this.cameraViewProj_id] = prevViewProj;
		return tex;
	}
	,draw: function(passes,sort) {
		var _gthis = this;
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		var computingStatic = this.ctx.computingStatic || this.updateStatic;
		if(this.mode != h3d_pass_RenderMode.Mixed || computingStatic) {
			var ct = this.ctx.camera.target;
			var slight = this.light == null ? this.ctx.lightSystem.shadowLight : this.light;
			var ldir = slight == null ? null : slight.getShadowDirection();
			if(ldir == null) {
				var _this = this.lightCamera.target;
				var x = 0;
				var y = 0;
				var z = -1;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
			} else {
				var _this = this.lightCamera.target;
				var x = ldir.x;
				var y = ldir.y;
				var z = ldir.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				var _this = this.lightCamera.target;
				var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
				if(k < 1e-20) {
					k = 0;
				} else {
					k = 1. / Math.sqrt(k);
				}
				_this.x *= k;
				_this.y *= k;
				_this.z *= k;
			}
			this.lightCamera.target.x += ct.x;
			this.lightCamera.target.y += ct.y;
			this.lightCamera.target.z += ct.z;
			var _this = this.lightCamera.pos;
			_this.x = ct.x;
			_this.y = ct.y;
			_this.z = ct.z;
			this.lightCamera.update();
			var _this = this.lightCamera.orthoBounds;
			_this.xMin = 1e20;
			_this.xMax = -1e20;
			_this.yMin = 1e20;
			_this.yMax = -1e20;
			_this.zMin = 1e20;
			_this.zMax = -1e20;
			if(passes.current != null) {
				this.calcShadowBounds(this.lightCamera);
			}
			this.lightCamera.update();
		}
		var f = function(col) {
			return col.inFrustum(_gthis.lightCamera.frustum);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		var texture = this.ctx.textures.allocTarget("dirShadowMap",this.size,this.size,false,this.format);
		var tmp;
		if(!(this.depth == null || this.depth.width != this.size || this.depth.height != this.size)) {
			var _this = this.depth;
			tmp = _this.t == null && (_this.isDepth() || _this.realloc == null);
		} else {
			tmp = true;
		}
		if(tmp) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_Texture(this.size,this.size,null,hxd_PixelFormat.Depth24Stencil8);
			this.depth.name = "dirShadowMapDepth";
		}
		texture.depthBuffer = this.depth;
		texture = this.processShadowMap(passes,texture,sort);
		this.syncShader(texture);
		this.updateStatic = false;
	}
	,__class__: h3d_pass_DirShadowMap
});
var h3d_pass_DefaultShadowMap = function(size,format) {
	if(size == null) {
		size = 1024;
	}
	if(format != null) {
		this.format = format;
	}
	h3d_pass_DirShadowMap.call(this,null);
	this.set_size(size);
	this.color = new h3d_VectorImpl(0.,0.,0.);
	this.set_mode(h3d_pass_RenderMode.Dynamic);
	this.shadowMapId = hxsl_Globals.allocID("shadow.map");
	this.shadowProjId = hxsl_Globals.allocID("shadow.proj");
	this.shadowColorId = hxsl_Globals.allocID("shadow.color");
	this.shadowPowerId = hxsl_Globals.allocID("shadow.power");
	this.shadowBiasId = hxsl_Globals.allocID("shadow.bias");
};
$hxClasses["h3d.pass.DefaultShadowMap"] = h3d_pass_DefaultShadowMap;
h3d_pass_DefaultShadowMap.__name__ = "h3d.pass.DefaultShadowMap";
h3d_pass_DefaultShadowMap.__super__ = h3d_pass_DirShadowMap;
h3d_pass_DefaultShadowMap.prototype = $extend(h3d_pass_DirShadowMap.prototype,{
	draw: function(passes,sort) {
		h3d_pass_DirShadowMap.prototype.draw.call(this,passes,sort);
		this.ctx.globals.map.h[this.shadowMapId] = { texture : this.dshader.shadowMap__, channel : this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R};
		var _this = this.ctx.globals;
		var id = this.shadowProjId;
		var v = this.getShadowProj();
		_this.map.h[id] = v;
		this.ctx.globals.map.h[this.shadowColorId] = this.color;
		this.ctx.globals.map.h[this.shadowPowerId] = this.power;
		this.ctx.globals.map.h[this.shadowBiasId] = this.bias;
	}
	,__class__: h3d_pass_DefaultShadowMap
});
var h3d_pass_OutputShader = function(output) {
	this.shaderCache = hxsl_Cache.get();
	this.currentOutput = new hxsl_ShaderList(null);
	this.setOutput(output);
};
$hxClasses["h3d.pass.OutputShader"] = h3d_pass_OutputShader;
h3d_pass_OutputShader.__name__ = "h3d.pass.OutputShader";
h3d_pass_OutputShader.prototype = {
	setOutput: function(output) {
		if(output == null) {
			output = [hxsl_Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	,compileShaders: function(globals,shaders,mode) {
		if(mode == null) {
			mode = hxsl_LinkMode.Default;
		}
		globals.maxChannels = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			s1.updateConstants(globals);
		}
		this.currentOutput.next = shaders;
		var s = this.shaderCache.link(this.currentOutput,mode);
		this.currentOutput.next = null;
		return s;
	}
	,__class__: h3d_pass_OutputShader
};
var h3d_pass_PassList = function(current) {
	this.current = current;
	this.discarded = this.lastDisc = null;
};
$hxClasses["h3d.pass.PassList"] = h3d_pass_PassList;
h3d_pass_PassList.__name__ = "h3d.pass.PassList";
h3d_pass_PassList.prototype = {
	__class__: h3d_pass_PassList
};
var h3d_pass_PassObject = function() {
	this.texture = 0;
};
$hxClasses["h3d.pass.PassObject"] = h3d_pass_PassObject;
h3d_pass_PassObject.__name__ = "h3d.pass.PassObject";
h3d_pass_PassObject.prototype = {
	__class__: h3d_pass_PassObject
};
var h3d_pass_RenderMode = $hxEnums["h3d.pass.RenderMode"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Static: {_hx_name:"Static",_hx_index:1,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Dynamic: {_hx_name:"Dynamic",_hx_index:2,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Mixed: {_hx_name:"Mixed",_hx_index:3,__enum__:"h3d.pass.RenderMode",toString:$estr}
};
h3d_pass_RenderMode.__constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
h3d_pass_RenderMode.__empty_constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
var h3d_pass_ShadowSamplingKind = $hxEnums["h3d.pass.ShadowSamplingKind"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,PCF: {_hx_name:"PCF",_hx_index:1,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,ESM: {_hx_name:"ESM",_hx_index:2,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
};
h3d_pass_ShadowSamplingKind.__constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
h3d_pass_ShadowSamplingKind.__empty_constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
var h3d_pass_SortByMaterial = function() {
	this.textureCount = 1;
	this.shaderCount = 1;
	this.shaderIdMap = [];
	this.textureIdMap = [];
};
$hxClasses["h3d.pass.SortByMaterial"] = h3d_pass_SortByMaterial;
h3d_pass_SortByMaterial.__name__ = "h3d.pass.SortByMaterial";
h3d_pass_SortByMaterial.prototype = {
	sort: function(passes) {
		var _gthis = this;
		var shaderStart = this.shaderCount;
		var textureStart = this.textureCount;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			if(this.shaderIdMap[p.shader.id] < shaderStart || this.shaderIdMap[p.shader.id] == null) {
				this.shaderIdMap[p.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[p.texture] < textureStart || this.textureIdMap[p.shader.id] == null) {
				this.textureIdMap[p.texture] = this.textureCount++;
			}
		}
		var list = passes.current;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else {
							var tmp1;
							if(!(qsize == 0 || q == null)) {
								var tmp2;
								if(p.pass.layer != q.pass.layer) {
									tmp2 = p.pass.layer - q.pass.layer;
								} else {
									var d = _gthis.shaderIdMap[p.shader.id] - _gthis.shaderIdMap[q.shader.id];
									tmp2 = d != 0 ? d : _gthis.textureIdMap[p.texture] - _gthis.textureIdMap[q.texture];
								}
								tmp1 = tmp2 <= 0;
							} else {
								tmp1 = true;
							}
							if(tmp1) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		passes.current = tmp;
	}
	,__class__: h3d_pass_SortByMaterial
};
var h3d_prim_MeshPrimitive = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.MeshPrimitive"] = h3d_prim_MeshPrimitive;
h3d_prim_MeshPrimitive.__name__ = "h3d.prim.MeshPrimitive";
h3d_prim_MeshPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_MeshPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	dispose: function() {
		h3d_prim_Primitive.prototype.dispose.call(this);
		if(this.buffers != null) {
			var _g = 0;
			var _g1 = this.buffers;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				b.dispose();
			}
			this.buffers = null;
			this.formats = null;
		}
	}
	,render: function(engine) {
		if(this.indexes == null || this.indexes.vbuf == null || this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		if(this.buffers != null) {
			engine.renderMultiBuffers(this.formats,this.buffers,this.indexes);
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,__class__: h3d_prim_MeshPrimitive
});
var h3d_prim_Instanced = function() {
	h3d_prim_Primitive.call(this);
	this.bounds = new h3d_col_Bounds();
	var _this = this.bounds;
	if(0 < _this.xMin) {
		_this.xMin = 0;
	}
	if(0 > _this.xMax) {
		_this.xMax = 0;
	}
	if(0 < _this.yMin) {
		_this.yMin = 0;
	}
	if(0 > _this.yMax) {
		_this.yMax = 0;
	}
	if(0 < _this.zMin) {
		_this.zMin = 0;
	}
	if(0 > _this.zMax) {
		_this.zMax = 0;
	}
	this.tmpBounds = new h3d_col_Bounds();
};
$hxClasses["h3d.prim.Instanced"] = h3d_prim_Instanced;
h3d_prim_Instanced.__name__ = "h3d.prim.Instanced";
h3d_prim_Instanced.__super__ = h3d_prim_Primitive;
h3d_prim_Instanced.prototype = $extend(h3d_prim_Primitive.prototype,{
	dispose: function() {
	}
	,incref: function() {
		if(this.refCount == 0 && this.primitive != null) {
			this.primitive.incref();
		}
		h3d_prim_Primitive.prototype.incref.call(this);
	}
	,decref: function() {
		h3d_prim_Primitive.prototype.decref.call(this);
		if(this.refCount == 0 && this.primitive != null) {
			this.primitive.decref();
		}
	}
	,getBounds: function() {
		return this.bounds;
	}
	,screenRatioToLod: function(screenRatio) {
		return this.primitive.screenRatioToLod(screenRatio);
	}
	,render: function(engine) {
		if(this.primitive.buffer == null || this.primitive.buffer.vbuf == null) {
			this.primitive.alloc(engine);
		}
		if(engine.needFlushTarget) {
			engine.doFlushTarget();
		}
		if(this.primitive.buffers == null) {
			engine.driver.selectBuffer(this.primitive.buffer);
		} else {
			engine.driver.selectMultiBuffers(this.primitive.formats,this.primitive.buffers);
		}
		var indexes = this.primitive.indexes;
		if(indexes == null) {
			indexes = engine.mem.getTriIndexes(this.triCount() * 3);
		}
		engine.renderInstanced(indexes,this.commands);
	}
	,__class__: h3d_prim_Instanced
});
var h3d_prim_Plane2D = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.Plane2D"] = h3d_prim_Plane2D;
h3d_prim_Plane2D.__name__ = "h3d.prim.Plane2D";
h3d_prim_Plane2D.get = function() {
	var engine = h3d_Engine.CURRENT;
	var inst = engine.resCache.h[h3d_prim_Plane2D.__id__];
	if(inst == null) {
		inst = new h3d_prim_Plane2D();
		engine.resCache.set(h3d_prim_Plane2D,inst);
	}
	return inst;
};
h3d_prim_Plane2D.__super__ = h3d_prim_Primitive;
h3d_prim_Plane2D.prototype = $extend(h3d_prim_Primitive.prototype,{
	triCount: function() {
		return 2;
	}
	,alloc: function(engine) {
		var v = hxd__$FloatBuffer_Float32Expand._new(0);
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d_Buffer.ofFloats(v,hxd_BufferFormat.get_XY_UV());
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		var b = this.buffer;
		engine.renderBuffer(b,engine.mem.getQuadIndexes(b.vertices),2,0,-1);
	}
	,__class__: h3d_prim_Plane2D
});
var h3d_prim_RawPrimitive = function(inf,persist) {
	if(persist == null) {
		persist = false;
	}
	h3d_prim_Primitive.call(this);
	this.onContextLost = function() {
		return inf;
	};
	this.bounds = inf.bounds;
	this.alloc(null);
	if(!persist) {
		this.onContextLost = null;
	}
};
$hxClasses["h3d.prim.RawPrimitive"] = h3d_prim_RawPrimitive;
h3d_prim_RawPrimitive.__name__ = "h3d.prim.RawPrimitive";
h3d_prim_RawPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_RawPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		if(this.onContextLost == null) {
			throw haxe_Exception.thrown("Cannot realloc " + Std.string(this));
		}
		var inf = this.onContextLost();
		this.buffer = h3d_Buffer.ofFloats(inf.vbuf,inf.format);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d_Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,getBounds: function() {
		if(this.bounds == null) {
			throw haxe_Exception.thrown("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
	,triCount: function() {
		return this.tcount;
	}
	,__class__: h3d_prim_RawPrimitive
});
var h3d_scene_Mesh = function(primitive,material,parent) {
	this.curScreenRatio = 1.0;
	this.inheritLod = false;
	h3d_scene_Object.call(this,parent);
	this.set_primitive(primitive);
	if(material == null) {
		material = h3d_mat_MaterialSetup.current.createMaterial();
		material.set_props(material.getDefaultProps());
	}
	this.material = material;
};
$hxClasses["h3d.scene.Mesh"] = h3d_scene_Mesh;
h3d_scene_Mesh.__name__ = "h3d.scene.Mesh";
h3d_scene_Mesh.__super__ = h3d_scene_Object;
h3d_scene_Mesh.prototype = $extend(h3d_scene_Object.prototype,{
	draw: function(ctx) {
		this.primitive.selectMaterial(0,this.primitive.screenRatioToLod(this.curScreenRatio));
		this.primitive.render(ctx.engine);
	}
	,calcScreenRatio: function(ctx) {
		if(this.primitive == null || this.primitive.lodCount() == 1) {
			return;
		}
		if(ctx.forcedScreenRatio >= 0.0) {
			this.curScreenRatio = ctx.forcedScreenRatio;
			return;
		}
		var bounds = this.primitive.getBounds();
		if(bounds == null) {
			this.curScreenRatio = 1.0;
			return;
		}
		var absPos = this.getAbsPos();
		var _this = absPos;
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var worldCenter_x = x;
		var worldCenter_y = y;
		var worldCenter_z = z;
		var x = _this._41;
		var y = _this._42;
		var z = _this._43;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		worldCenter_x = x;
		worldCenter_y = y;
		worldCenter_z = z;
		var _this = absPos;
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var worldScale_x = x;
		var worldScale_y = y;
		var worldScale_z = z;
		worldScale_x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
		worldScale_y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
		worldScale_z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
		if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
			worldScale_x *= -1;
			worldScale_y *= -1;
			worldScale_z *= -1;
		}
		var a = bounds.xMax - bounds.xMin;
		var a1 = bounds.yMax - bounds.yMin;
		var b = bounds.zMax - bounds.zMin;
		var b1 = a1 < b ? b : a1;
		var a1 = worldScale_x;
		var a2 = worldScale_y;
		var b = worldScale_z;
		var b2 = a2 < b ? b : a2;
		var worldRadius = (a < b1 ? b1 : a) * (a1 < b2 ? b2 : a1) / 2.0;
		var _this = ctx.camera;
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var cameraRight_x = x;
		var cameraRight_y = y;
		var cameraRight_z = z;
		if(_this.directions == null) {
			_this.directions = new h3d_MatrixImpl();
			_this.directions._44 = 0;
		}
		if(_this.directions._44 == 0) {
			_this.calcDirections();
		}
		cameraRight_x = _this.directions._21;
		cameraRight_y = _this.directions._22;
		cameraRight_z = _this.directions._23;
		var _this = ctx.camera;
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var cameraUp_x = x;
		var cameraUp_y = y;
		var cameraUp_z = z;
		if(_this.directions == null) {
			_this.directions = new h3d_MatrixImpl();
			_this.directions._44 = 0;
		}
		if(_this.directions._44 == 0) {
			_this.calcDirections();
		}
		cameraUp_x = _this.directions._31;
		cameraUp_y = _this.directions._32;
		cameraUp_z = _this.directions._33;
		var x = cameraUp_x - cameraRight_x;
		var y = cameraUp_y - cameraRight_y;
		var z = cameraUp_z - cameraRight_z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x = x1;
		var _this_y = y1;
		var _this_z = z1;
		var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		var x = _this_x * k;
		var y = _this_y * k;
		var z = _this_z * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var cameraTopLeft_x = x1;
		var cameraTopLeft_y = y1;
		var cameraTopLeft_z = z1;
		var x = cameraTopLeft_x * worldRadius;
		var y = cameraTopLeft_y * worldRadius;
		var z = cameraTopLeft_z * worldRadius;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var x = worldCenter_x + v_x;
		var y = worldCenter_y + v_y;
		var z = worldCenter_z + v_z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var worldTopLeft_x = x1;
		var worldTopLeft_y = y1;
		var worldTopLeft_z = z1;
		var x = cameraTopLeft_x * worldRadius;
		var y = cameraTopLeft_y * worldRadius;
		var z = cameraTopLeft_z * worldRadius;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var x = worldCenter_x - v_x;
		var y = worldCenter_y - v_y;
		var z = worldCenter_z - v_z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var worldBottomRight_x = x1;
		var worldBottomRight_y = y1;
		var worldBottomRight_z = z1;
		var snapToPixel = false;
		if(snapToPixel == null) {
			snapToPixel = true;
		}
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var screenTopLeft_x = x;
		var screenTopLeft_y = y;
		var screenTopLeft_z = z;
		var x = worldTopLeft_x;
		var y = worldTopLeft_y;
		var z = worldTopLeft_z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		screenTopLeft_x = x;
		screenTopLeft_y = y;
		screenTopLeft_z = z;
		var m = ctx.camera.m;
		var px = screenTopLeft_x * m._11 + screenTopLeft_y * m._21 + screenTopLeft_z * m._31 + m._41;
		var py = screenTopLeft_x * m._12 + screenTopLeft_y * m._22 + screenTopLeft_z * m._32 + m._42;
		var pz = screenTopLeft_x * m._13 + screenTopLeft_y * m._23 + screenTopLeft_z * m._33 + m._43;
		var iw = 1 / (screenTopLeft_x * m._14 + screenTopLeft_y * m._24 + screenTopLeft_z * m._34 + m._44);
		screenTopLeft_x = px * iw;
		screenTopLeft_y = py * iw;
		screenTopLeft_z = pz * iw;
		screenTopLeft_x = (screenTopLeft_x + 1) * 0.5;
		screenTopLeft_y = (-screenTopLeft_y + 1) * 0.5;
		if(snapToPixel) {
			screenTopLeft_x = Math.round(screenTopLeft_x);
			screenTopLeft_y = Math.round(screenTopLeft_y);
		}
		var snapToPixel = false;
		if(snapToPixel == null) {
			snapToPixel = true;
		}
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var screenBottomRight_x = x;
		var screenBottomRight_y = y;
		var screenBottomRight_z = z;
		var x = worldBottomRight_x;
		var y = worldBottomRight_y;
		var z = worldBottomRight_z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		screenBottomRight_x = x;
		screenBottomRight_y = y;
		screenBottomRight_z = z;
		var m = ctx.camera.m;
		var px = screenBottomRight_x * m._11 + screenBottomRight_y * m._21 + screenBottomRight_z * m._31 + m._41;
		var py = screenBottomRight_x * m._12 + screenBottomRight_y * m._22 + screenBottomRight_z * m._32 + m._42;
		var pz = screenBottomRight_x * m._13 + screenBottomRight_y * m._23 + screenBottomRight_z * m._33 + m._43;
		var iw = 1 / (screenBottomRight_x * m._14 + screenBottomRight_y * m._24 + screenBottomRight_z * m._34 + m._44);
		screenBottomRight_x = px * iw;
		screenBottomRight_y = py * iw;
		screenBottomRight_z = pz * iw;
		screenBottomRight_x = (screenBottomRight_x + 1) * 0.5;
		screenBottomRight_y = (-screenBottomRight_y + 1) * 0.5;
		if(snapToPixel) {
			screenBottomRight_x = Math.round(screenBottomRight_x);
			screenBottomRight_y = Math.round(screenBottomRight_y);
		}
		var a = screenBottomRight_x - screenTopLeft_x;
		var b = screenBottomRight_y - screenTopLeft_y;
		var screenArea = a < b ? b : a;
		this.curScreenRatio = screenArea * screenArea;
		if(this.inheritLod) {
			ctx.forcedScreenRatio = this.curScreenRatio;
		}
	}
	,emit: function(ctx) {
		this.calcScreenRatio(ctx);
		var p = this.material.passes;
		while(p != null) {
			if(!p.culled) {
				ctx.emitPass(p,this).index = 0;
			}
			p = p.nextPass;
		}
	}
	,onAdd: function() {
		h3d_scene_Object.prototype.onAdd.call(this);
		if(this.primitive != null) {
			this.primitive.incref();
		}
	}
	,onRemove: function() {
		if(this.primitive != null) {
			this.primitive.decref();
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,set_primitive: function(prim) {
		if(prim != this.primitive && (this.flags & 32) != 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			if(prim != null) {
				prim.incref();
			}
		}
		return this.primitive = prim;
	}
	,__class__: h3d_scene_Mesh
});
var h3d_scene_Interactive = function(shape,parent) {
	this.hitPoint = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.lastClickFrame = -1;
	this.mouseDownButton = -1;
	this.emittedLastFrame = false;
	this.isAbsoluteShape = false;
	this.allowMultiClick = false;
	this.enableRightButton = false;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h3d_scene_Object.call(this,parent);
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h3d.scene.Interactive"] = h3d_scene_Interactive;
h3d_scene_Interactive.__name__ = "h3d.scene.Interactive";
h3d_scene_Interactive.__interfaces__ = [hxd_Interactive];
h3d_scene_Interactive.__super__ = h3d_scene_Object;
h3d_scene_Interactive.prototype = $extend(h3d_scene_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h3d_scene_Object.prototype.onAdd.call(this);
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,sync: function(ctx) {
		h3d_scene_Object.prototype.sync.call(this,ctx);
		this.emittedLastFrame = false;
	}
	,emit: function(ctx) {
		h3d_scene_Object.prototype.emit.call(this,ctx);
		this.emittedLastFrame = true;
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
				if(e.cancel) {
					this.mouseDownButton = -1;
				}
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				var frame = hxd_Timer.frameCount;
				if(this.mouseDownButton == e.button && (this.lastClickFrame != frame || this.allowMultiClick)) {
					this.onClick(e);
					this.lastClickFrame = frame;
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h3d_scene_Interactive
});
var h3d_scene_Light = function(shader,parent) {
	h3d_scene_Object.call(this,parent);
	this.shader = shader;
};
$hxClasses["h3d.scene.Light"] = h3d_scene_Light;
h3d_scene_Light.__name__ = "h3d.scene.Light";
h3d_scene_Light.__super__ = h3d_scene_Object;
h3d_scene_Light.prototype = $extend(h3d_scene_Object.prototype,{
	emit: function(ctx) {
		ctx.emitLight(this);
	}
	,getShadowDirection: function() {
		return null;
	}
	,__class__: h3d_scene_Light
});
var h3d_scene_LightSystem = function() {
};
$hxClasses["h3d.scene.LightSystem"] = h3d_scene_LightSystem;
h3d_scene_LightSystem.__name__ = "h3d.scene.LightSystem";
h3d_scene_LightSystem.prototype = {
	initGlobals: function(globals) {
	}
	,initLights: function(ctx) {
		this.ctx = ctx;
		if(this.shadowLight == null || (this.shadowLight.flags & 32) == 0) {
			var l = ctx.lights;
			while(l != null) {
				var dir = l.getShadowDirection();
				if(dir != null) {
					this.shadowLight = l;
					break;
				}
				l = l.next;
			}
		}
	}
	,computeLight: function(obj,shaders) {
		return shaders;
	}
	,__class__: h3d_scene_LightSystem
};
var h3d_scene_RenderContext = function(scene) {
	this.cameraFrustumUploaded = false;
	this.forcedScreenRatio = -1;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.cachedShaderList = [];
	this.cachedPassObjects = [];
	this.initGlobals();
};
$hxClasses["h3d.scene.RenderContext"] = h3d_scene_RenderContext;
h3d_scene_RenderContext.__name__ = "h3d.scene.RenderContext";
h3d_scene_RenderContext.__super__ = h3d_impl_RenderContext;
h3d_scene_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	setCamera: function(cam) {
		this.camera = cam;
		var v = cam.mcam;
		this.globals.map.h[this.cameraView_id] = v;
		var v = cam.zNear;
		this.globals.map.h[this.cameraNear_id] = v;
		var v = cam.zFar;
		this.globals.map.h[this.cameraFar_id] = v;
		var v = cam.mproj;
		this.globals.map.h[this.cameraProj_id] = v;
		var v = cam.pos;
		this.globals.map.h[this.cameraPos_id] = v;
		var x = cam.mproj._11;
		var y = cam.mproj._22;
		var z = cam.mproj._33;
		var w = cam.mproj._44;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v = new h3d_Vector4Impl(x,y,z,w);
		this.globals.map.h[this.cameraProjDiag_id] = v;
		if(this.globals.map.h[this.cameraPreviousViewProj_id] == null) {
			var v = cam.m.clone();
			this.globals.map.h[this.cameraPreviousViewProj_id] = v;
		}
		if(this.globals.map.h[this.cameraJitterOffsets_id] == null) {
			var x = 0.0;
			var y = 0.0;
			var z = 0.0;
			var w = 0.0;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var v = new h3d_Vector4Impl(x,y,z,w);
			this.globals.map.h[this.cameraJitterOffsets_id] = v;
		}
		var v = cam.m;
		this.globals.map.h[this.cameraViewProj_id] = v;
		var v = this.camera.getInverseViewProj();
		this.globals.map.h[this.cameraInverseViewProj_id] = v;
	}
	,setupTarget: function() {
		var v = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.engine.getCurrentTarget() != null ? -1 : 1;
		this.globals.map.h[this.cameraProjFlip_id] = v;
	}
	,getCurrentPixelSize: function() {
		var t = this.engine.getCurrentTarget();
		var x = 2 / (t == null ? this.engine.width : t.width);
		var y = 2 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,0.);
	}
	,start: function() {
		this.lights = null;
		this.drawPass = null;
		this.passes = [];
		this.lights = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.forcedScreenRatio = -1;
		this.time += this.elapsedTime;
		this.frame++;
		this.setCurrent();
		this.engine = h3d_Engine.CURRENT;
		var v = this.time;
		this.globals.map.h[this.globalTime_id] = v;
		var v = this.getCurrentPixelSize();
		this.globals.map.h[this.pixelSize_id] = v;
		this.setCamera(this.scene.camera);
	}
	,emitPass: function(pass,obj) {
		if((pass.rendererFlags & 1) == 0) {
			this.scene.renderer.setPassFlags(pass);
		}
		var o = this.allocPool;
		if(o == null) {
			o = new h3d_pass_PassObject();
			o.nextAlloc = this.allocFirst;
			this.allocFirst = o;
		} else {
			this.allocPool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		if(this.passes.length <= pass.passId) {
			this.passes.length = pass.passId;
		}
		o.next = this.passes[pass.passId];
		this.passes[pass.passId] = o;
		return o;
	}
	,allocShaderList: function(s,next) {
		var sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl_ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	,emitLight: function(l) {
		l.next = this.lights;
		this.lights = l;
	}
	,done: function() {
		this.drawPass = null;
		var p = this.allocFirst;
		while(p != null && p != this.allocPool) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p.texture = 0;
			p = p.nextAlloc;
		}
		if(this.allocPool != null) {
			this.allocFirst = this.allocFirst.nextAlloc;
		}
		this.allocPool = this.allocFirst;
		var _g = 0;
		var _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = [];
		this.lights = null;
		this.cameraFrustumUploaded = false;
		this.globals.map.h[this.cameraPreviousViewProj_id].load(this.globals.map.h[this.cameraViewProj_id]);
		this.computeVelocity = false;
		this.clearCurrent();
	}
	,initGlobals: function() {
		this.cameraView_id = hxsl_Globals.allocID("camera.view");
		this.cameraNear_id = hxsl_Globals.allocID("camera.zNear");
		this.cameraFar_id = hxsl_Globals.allocID("camera.zFar");
		this.cameraProj_id = hxsl_Globals.allocID("camera.proj");
		this.cameraPos_id = hxsl_Globals.allocID("camera.position");
		this.cameraProjDiag_id = hxsl_Globals.allocID("camera.projDiag");
		this.cameraProjFlip_id = hxsl_Globals.allocID("camera.projFlip");
		this.cameraViewProj_id = hxsl_Globals.allocID("camera.viewProj");
		this.cameraInverseViewProj_id = hxsl_Globals.allocID("camera.inverseViewProj");
		this.cameraPreviousViewProj_id = hxsl_Globals.allocID("camera.previousViewProj");
		this.cameraJitterOffsets_id = hxsl_Globals.allocID("camera.jitterOffsets");
		this.globalTime_id = hxsl_Globals.allocID("global.time");
		this.pixelSize_id = hxsl_Globals.allocID("global.pixelSize");
		this.globalModelView_id = hxsl_Globals.allocID("global.modelView");
		this.globalModelViewInverse_id = hxsl_Globals.allocID("global.modelViewInverse");
		this.globalPreviousModelView_id = hxsl_Globals.allocID("global.previousModelView");
	}
	,__class__: h3d_scene_RenderContext
});
var h3d_scene_PassObjects = function() {
	this.passes = new h3d_pass_PassList();
};
$hxClasses["h3d.scene.PassObjects"] = h3d_scene_PassObjects;
h3d_scene_PassObjects.__name__ = "h3d.scene.PassObjects";
h3d_scene_PassObjects.prototype = {
	__class__: h3d_scene_PassObjects
};
var h3d_scene_Renderer = function() {
	this.effects = [];
	this.hasSetTarget = false;
	this.emptyPasses = new h3d_pass_PassList();
	this.allPasses = [];
	this.passObjects = new haxe_ds_StringMap();
	this.set_props(this.getDefaultProps());
	var _g = this;
	var frontToBack = true;
	this.frontToBack = function(passes) {
		_g.depthSort(frontToBack,passes);
	};
	var _g1 = this;
	var frontToBack1 = false;
	this.backToFront = function(passes) {
		_g1.depthSort(frontToBack1,passes);
	};
};
$hxClasses["h3d.scene.Renderer"] = h3d_scene_Renderer;
h3d_scene_Renderer.__name__ = "h3d.scene.Renderer";
h3d_scene_Renderer.__super__ = hxd_impl_AnyProps;
h3d_scene_Renderer.prototype = $extend(hxd_impl_AnyProps.prototype,{
	mark: function(id) {
	}
	,depthSort: function(frontToBack,passes) {
		var cam = this.ctx.camera.m;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var z = p.obj.absPos._41 * cam._13 + p.obj.absPos._42 * cam._23 + p.obj.absPos._43 * cam._33 + cam._43;
			var w = p.obj.absPos._41 * cam._14 + p.obj.absPos._42 * cam._24 + p.obj.absPos._43 * cam._34 + cam._44;
			p.depth = w > 0.0 ? z / w : -z / w;
		}
		if(frontToBack) {
			var list = passes.current;
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer != q.pass.layer ? p.pass.layer - q.pass.layer : p.depth == q.depth ? 0 : p.depth > q.depth ? 1 : -1) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		} else {
			var list = passes.current;
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer != q.pass.layer ? p.pass.layer - q.pass.layer : p.depth == q.depth ? 0 : p.depth < q.depth ? 1 : -1) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		}
	}
	,resetTarget: function() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	,has: function(name) {
		return this.passObjects.h[name] != null;
	}
	,setPassFlags: function(pass) {
		pass.rendererFlags |= 1;
	}
	,get: function(name) {
		var p = this.passObjects.h[name];
		if(p == null) {
			return this.emptyPasses;
		}
		p.rendered = true;
		return p.passes;
	}
	,render: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,computeStatic: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,start: function() {
	}
	,startEffects: function() {
		var _g = 0;
		var _g1 = this.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.enabled) {
				e.start(this);
			}
		}
	}
	,process: function(passes) {
		this.hasSetTarget = false;
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.setContext(this.ctx);
		}
		var _g = 0;
		while(_g < passes.length) {
			var p = passes[_g];
			++_g;
			this.passObjects.h[p.name] = p;
		}
		this.ctx.textures.begin();
		if(this.ctx.computingStatic) {
			this.computeStatic();
		} else {
			this.render();
		}
		this.resetTarget();
		var _g = 0;
		while(_g < passes.length) {
			var p = passes[_g];
			++_g;
			this.passObjects.h[p.name] = null;
		}
	}
	,__class__: h3d_scene_Renderer
});
var h3d_scene_Scene = function(createRenderer,createLightSystem) {
	if(createLightSystem == null) {
		createLightSystem = true;
	}
	if(createRenderer == null) {
		createRenderer = true;
	}
	this.checkPasses = true;
	this.interactiveOffset = 0;
	this.ratioY = 1;
	this.ratioX = 1;
	this.offsetY = 0;
	this.offsetX = 0;
	h3d_scene_Object.call(this,null);
	this.window = hxd_Window.getInstance();
	this.eventListeners = [];
	this.hitInteractives = [];
	this.interactives = [];
	this.camera = new h3d_Camera();
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.camera.screenRatio = engine.width / engine.height;
	}
	this.ctx = new h3d_scene_RenderContext(this);
	if(createRenderer) {
		this.set_renderer(h3d_mat_MaterialSetup.current.createRenderer());
	}
	if(createLightSystem) {
		this.lightSystem = h3d_mat_MaterialSetup.current.createLightSystem();
	}
};
$hxClasses["h3d.scene.Scene"] = h3d_scene_Scene;
h3d_scene_Scene.__name__ = "h3d.scene.Scene";
h3d_scene_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h3d_scene_Scene.__super__ = h3d_scene_Object;
h3d_scene_Scene.prototype = $extend(h3d_scene_Object.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,dispatchListeners: function(event) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,set_renderer: function(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	,sortHitPointByCameraDistance: function(i1,i2) {
		var z1 = i1.hitPoint.w;
		var z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		i.handleEvent(event);
	}
	,isInteractiveVisible: function(i) {
		var o = i;
		while(o != this) {
			if(o == null || (o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	,handleEvent: function(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			var x = event.relX - this.offsetX;
			var y = event.relY - this.offsetY;
			var width = this.ratioX * this.window.get_width();
			var height = this.ratioY * this.window.get_height();
			var screenX = (x / width - 0.5) * 2;
			var screenY = -(y / height - 0.5) * 2;
			var p0 = this.camera.unproject(screenX,screenY,0);
			var p1 = this.camera.unproject(screenX,screenY,1);
			var x = p0.x;
			var y = p0.y;
			var z = p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p1_x = x1;
			var p1_y = y1;
			var p1_z = z1;
			var x = p1.x;
			var y = p1.y;
			var z = p1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p2_x = x1;
			var p2_y = y1;
			var p2_z = z1;
			var r = new h3d_col_Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			var r1 = r;
			if(this.interactiveOffset != 0) {
				r1.px += r1.lx * this.interactiveOffset;
				r1.py += r1.ly * this.interactiveOffset;
				r1.pz += r1.lz * this.interactiveOffset;
			}
			var saveR_px = r1.px;
			var saveR_py = r1.py;
			var saveR_pz = r1.pz;
			var saveR_lx = r1.lx;
			var saveR_ly = r1.ly;
			var saveR_lz = r1.lz;
			var priority = -2147483648;
			var _g = 0;
			var _g1 = this.interactives;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				var p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				if(!i.isAbsoluteShape) {
					var minv = i.getInvPos();
					var x = r1.px;
					var y = r1.py;
					var z = r1.pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var p_x = x1;
					var p_y = y1;
					var p_z = z1;
					var px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + minv._41;
					var py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + minv._42;
					var pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + minv._43;
					p_x = px;
					p_y = py;
					p_z = pz;
					r1.px = p_x;
					r1.py = p_y;
					r1.pz = p_z;
					var x2 = r1.lx;
					var y2 = r1.ly;
					var z2 = r1.lz;
					if(z2 == null) {
						z2 = 0.;
					}
					if(y2 == null) {
						y2 = 0.;
					}
					if(x2 == null) {
						x2 = 0.;
					}
					var x3 = x2;
					var y3 = y2;
					var z3 = z2;
					if(z3 == null) {
						z3 = 0.;
					}
					if(y3 == null) {
						y3 = 0.;
					}
					if(x3 == null) {
						x3 = 0.;
					}
					var _this_x = x3;
					var _this_y = y3;
					var _this_z = z3;
					var px1 = _this_x * minv._11 + _this_y * minv._21 + _this_z * minv._31;
					var py1 = _this_x * minv._12 + _this_y * minv._22 + _this_z * minv._32;
					var pz1 = _this_x * minv._13 + _this_y * minv._23 + _this_z * minv._33;
					_this_x = px1;
					_this_y = py1;
					_this_z = pz1;
					r1.lx = _this_x;
					r1.ly = _this_y;
					r1.lz = _this_z;
					r1.normalize();
				}
				if(r1.lx != r1.lx) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var hit = i.shape.rayIntersection(r1,i.bestMatch);
				if(hit < 0) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var x4 = r1.px + hit * r1.lx;
				var y4 = r1.py + hit * r1.ly;
				var z4 = r1.pz + hit * r1.lz;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				var x5 = x4;
				var y5 = y4;
				var z5 = z4;
				if(z5 == null) {
					z5 = 0.;
				}
				if(y5 == null) {
					y5 = 0.;
				}
				if(x5 == null) {
					x5 = 0.;
				}
				var hitPoint_x = x5;
				var hitPoint_y = y5;
				var hitPoint_z = z5;
				r1.px = saveR_px;
				r1.py = saveR_py;
				r1.pz = saveR_pz;
				r1.lx = saveR_lx;
				r1.ly = saveR_ly;
				r1.lz = saveR_lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				var _g = 0;
				var _g1 = this.hitInteractives;
				while(_g < _g1.length) {
					var i = _g1[_g];
					++_g;
					var m = i.invPos;
					var wfactor = 0.;
					if(i.preciseShape != null || !i.bestMatch) {
						if(!i.isAbsoluteShape) {
							var x = r1.px;
							var y = r1.py;
							var z = r1.pz;
							if(z == null) {
								z = 0.;
							}
							if(y == null) {
								y = 0.;
							}
							if(x == null) {
								x = 0.;
							}
							var x1 = x;
							var y1 = y;
							var z1 = z;
							if(z1 == null) {
								z1 = 0.;
							}
							if(y1 == null) {
								y1 = 0.;
							}
							if(x1 == null) {
								x1 = 0.;
							}
							var p_x = x1;
							var p_y = y1;
							var p_z = z1;
							var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + m._41;
							var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + m._42;
							var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + m._43;
							p_x = px;
							p_y = py;
							p_z = pz;
							r1.px = p_x;
							r1.py = p_y;
							r1.pz = p_z;
							var x2 = r1.lx;
							var y2 = r1.ly;
							var z2 = r1.lz;
							if(z2 == null) {
								z2 = 0.;
							}
							if(y2 == null) {
								y2 = 0.;
							}
							if(x2 == null) {
								x2 = 0.;
							}
							var x3 = x2;
							var y3 = y2;
							var z3 = z2;
							if(z3 == null) {
								z3 = 0.;
							}
							if(y3 == null) {
								y3 = 0.;
							}
							if(x3 == null) {
								x3 = 0.;
							}
							var _this_x = x3;
							var _this_y = y3;
							var _this_z = z3;
							var px1 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
							var py1 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
							var pz1 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
							_this_x = px1;
							_this_y = py1;
							_this_z = pz1;
							r1.lx = _this_x;
							r1.ly = _this_y;
							r1.lz = _this_z;
							r1.normalize();
						}
						var tmp = i.preciseShape;
						var hit = (tmp != null ? tmp : i.shape).rayIntersection(r1,true);
						if(hit > 0) {
							var x4 = r1.px + hit * r1.lx;
							var y4 = r1.py + hit * r1.ly;
							var z4 = r1.pz + hit * r1.lz;
							if(z4 == null) {
								z4 = 0.;
							}
							if(y4 == null) {
								y4 = 0.;
							}
							if(x4 == null) {
								x4 = 0.;
							}
							var x5 = x4;
							var y5 = y4;
							var z5 = z4;
							if(z5 == null) {
								z5 = 0.;
							}
							if(y5 == null) {
								y5 = 0.;
							}
							if(x5 == null) {
								x5 = 0.;
							}
							var hitPoint_x = x5;
							var hitPoint_y = y5;
							var hitPoint_z = z5;
							i.hitPoint.x = hitPoint_x;
							i.hitPoint.y = hitPoint_y;
							i.hitPoint.z = hitPoint_z;
						} else {
							wfactor = 1.;
						}
						r1.px = saveR_px;
						r1.py = saveR_py;
						r1.pz = saveR_pz;
						r1.lx = saveR_lx;
						r1.ly = saveR_ly;
						r1.lz = saveR_lz;
					}
					var _this = i.hitPoint;
					var x6 = _this.x;
					var y6 = _this.y;
					var z6 = _this.z;
					var w = _this.w;
					if(w == null) {
						w = 1.;
					}
					if(z6 == null) {
						z6 = 0.;
					}
					if(y6 == null) {
						y6 = 0.;
					}
					if(x6 == null) {
						x6 = 0.;
					}
					var x7 = x6;
					var y7 = y6;
					var z7 = z6;
					var w1 = w;
					if(w1 == null) {
						w1 = 1.;
					}
					if(z7 == null) {
						z7 = 0.;
					}
					if(y7 == null) {
						y7 = 0.;
					}
					if(x7 == null) {
						x7 = 0.;
					}
					var _this_x1 = x7;
					var _this_y1 = y7;
					var _this_z1 = z7;
					var _this_w = w1;
					_this_w = 1;
					if(!i.isAbsoluteShape) {
						var m1 = i.absPos;
						var px2 = _this_x1 * m1._11 + _this_y1 * m1._21 + _this_z1 * m1._31 + _this_w * m1._41;
						var py2 = _this_x1 * m1._12 + _this_y1 * m1._22 + _this_z1 * m1._32 + _this_w * m1._42;
						var pz2 = _this_x1 * m1._13 + _this_y1 * m1._23 + _this_z1 * m1._33 + _this_w * m1._43;
						_this_x1 = px2;
						_this_y1 = py2;
						_this_z1 = pz2;
					}
					var m2 = this.camera.m;
					var px3 = _this_x1 * m2._11 + _this_y1 * m2._21 + _this_z1 * m2._31 + _this_w * m2._41;
					var py3 = _this_x1 * m2._12 + _this_y1 * m2._22 + _this_z1 * m2._32 + _this_w * m2._42;
					var pz3 = _this_x1 * m2._13 + _this_y1 * m2._23 + _this_z1 * m2._33 + _this_w * m2._43;
					var iw = 1 / (_this_x1 * m2._14 + _this_y1 * m2._24 + _this_z1 * m2._34 + _this_w * m2._44);
					_this_x1 = px3 * iw;
					_this_y1 = py3 * iw;
					_this_z1 = pz3 * iw;
					_this_w = 1;
					i.hitPoint.w = _this_z1 + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			var i = this.hitInteractives.pop();
			if(i == null) {
				return null;
			}
			event.relX = i.hitPoint.x;
			event.relY = i.hitPoint.y;
			event.relZ = i.hitPoint.z;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				while(this.hitInteractives.length > 0) this.hitInteractives.pop();
			}
			return i;
		}
		return null;
	}
	,addEventTarget: function(i) {
		if(this.interactives.indexOf(i) >= 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.interactives.push(i);
	}
	,removeEventTarget: function(i) {
		if(HxOverrides.remove(this.interactives,i)) {
			if(this.events != null) {
				this.events.onRemove(i);
			}
			HxOverrides.remove(this.hitInteractives,i);
		}
	}
	,setElapsedTime: function(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	,onContextLost: function() {
		this.ctx.wasContextLost = true;
	}
	,render: function(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,1);
		}
		this.ctx.start();
		this.renderer.start();
		this.renderer.startEffects();
		this.mark("sync");
		this.syncRec(this.ctx);
		this.mark("emit");
		this.emitRec(this.ctx);
		var passes = [];
		var passIndex = -1;
		var _g = 0;
		var _g1 = this.ctx.passes.length;
		while(_g < _g1) {
			var passId = _g++;
			var curPass = this.ctx.passes[passId];
			if(curPass == null) {
				continue;
			}
			var pobjs = this.ctx.cachedPassObjects[++passIndex];
			if(pobjs == null) {
				pobjs = new h3d_scene_PassObjects();
				this.ctx.cachedPassObjects[passIndex] = pobjs;
			}
			pobjs.name = curPass.pass.name;
			var _this = pobjs.passes;
			_this.current = curPass;
			_this.discarded = _this.lastDisc = null;
			passes.push(pobjs);
		}
		if(this.lightSystem != null) {
			this.ctx.lightSystem = this.lightSystem;
			this.lightSystem.initLights(this.ctx);
		}
		this.renderer.process(passes);
		if(!this.ctx.computingStatic && this.checkPasses) {
			var _g = 0;
			while(_g < passes.length) {
				var p = passes[_g];
				++_g;
				if(!p.rendered) {
					haxe_Log.trace("Pass " + p.name + " has not been rendered : don't know how to handle.",{ fileName : "h3d/scene/Scene.hx", lineNumber : 397, className : "h3d.scene.Scene", methodName : "render"});
				}
			}
		}
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,0);
		}
		this.ctx.done();
		this.ctx.wasContextLost = false;
		var _g = 0;
		var _g1 = passIndex;
		while(_g < _g1) {
			var i = _g++;
			var p = this.ctx.cachedPassObjects[i];
			p.name = null;
			var _this = p.passes;
			_this.current = null;
			_this.discarded = _this.lastDisc = null;
		}
	}
	,mark: function(name) {
		this.renderer.mark(name);
	}
	,__class__: h3d_scene_Scene
});
var h3d_scene_fwd_Light = function(shader,parent) {
	this.priority = 0;
	this.cullingDistance = -1;
	h3d_scene_Light.call(this,shader,parent);
};
$hxClasses["h3d.scene.fwd.Light"] = h3d_scene_fwd_Light;
h3d_scene_fwd_Light.__name__ = "h3d.scene.fwd.Light";
h3d_scene_fwd_Light.__super__ = h3d_scene_Light;
h3d_scene_fwd_Light.prototype = $extend(h3d_scene_Light.prototype,{
	__class__: h3d_scene_fwd_Light
});
var h3d_scene_fwd_LightSystem = function() {
	this.perPixelLighting = true;
	this.maxLightsPerObject = 6;
	h3d_scene_LightSystem.call(this);
	var x = 0.5;
	var y = 0.5;
	var z = 0.5;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.ambientLight = new h3d_VectorImpl(x,y,z);
	this.ambientShader = new h3d_shader_AmbientLight();
	this.set_additiveLighting(true);
};
$hxClasses["h3d.scene.fwd.LightSystem"] = h3d_scene_fwd_LightSystem;
h3d_scene_fwd_LightSystem.__name__ = "h3d.scene.fwd.LightSystem";
h3d_scene_fwd_LightSystem.__super__ = h3d_scene_LightSystem;
h3d_scene_fwd_LightSystem.prototype = $extend(h3d_scene_LightSystem.prototype,{
	set_additiveLighting: function(b) {
		var value = this.ambientShader;
		var _this = ((value) instanceof h3d_shader_AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	,initLights: function(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		this.cullLights();
		h3d_scene_LightSystem.prototype.initLights.call(this,ctx);
		if(this.lightCount <= this.maxLightsPerObject) {
			var list = ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
	}
	,initGlobals: function(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	,cullLights: function() {
		var ll = this.ctx.lights;
		var prev = null;
		var s = new h3d_col_Sphere();
		while(ll != null) {
			var l = ((ll) instanceof h3d_scene_fwd_Light) ? ll : null;
			if(l != null) {
				s.x = l.absPos._41;
				s.y = l.absPos._42;
				s.z = l.absPos._43;
				s.r = l.cullingDistance;
			}
			if(l == null || l.cullingDistance > 0 && !this.ctx.computingStatic && !this.ctx.camera.frustum.hasSphere(s)) {
				if(prev == null) {
					this.ctx.lights = ll.next;
				} else {
					prev.next = ll.next;
				}
				ll = ll.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = ll;
			ll = ll.next;
		}
	}
	,sortLight: function(l1,l2) {
		var p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	,computeLight: function(obj,shaders) {
		var _gthis = this;
		if(this.lightCount > this.maxLightsPerObject) {
			var ll = this.ctx.lights;
			while(ll != null) {
				var l = ((ll) instanceof h3d_scene_fwd_Light) ? ll : null;
				if((obj.flags & 16) != 0) {
					var dx = l.absPos._41 - this.ctx.camera.target.x;
					var dy = l.absPos._42 - this.ctx.camera.target.y;
					var dz = l.absPos._43 - this.ctx.camera.target.z;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					var dx1 = l.absPos._41 - obj.absPos._41;
					var dy1 = l.absPos._42 - obj.absPos._42;
					var dz1 = l.absPos._43 - obj.absPos._43;
					if(dz1 == null) {
						dz1 = 0.;
					}
					l.objectDistance = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
				}
				ll = ll.next;
			}
			var list = this.ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		shaders = _gthis.ctx.allocShaderList(this.ambientShader,shaders);
		var l = this.ctx.lights;
		var i = 0;
		while(l != null) {
			if(i++ == this.maxLightsPerObject) {
				break;
			}
			shaders = _gthis.ctx.allocShaderList(l.shader,shaders);
			l = l.next;
		}
		return shaders;
	}
	,__class__: h3d_scene_fwd_LightSystem
});
var h3d_scene_fwd_DepthPass = function() {
	this.enableSky = false;
	h3d_pass_Output.call(this,"depth",[hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))]);
	this.depthMapId = hxsl_Globals.allocID("depthMap");
};
$hxClasses["h3d.scene.fwd.DepthPass"] = h3d_scene_fwd_DepthPass;
h3d_scene_fwd_DepthPass.__name__ = "h3d.scene.fwd.DepthPass";
h3d_scene_fwd_DepthPass.__super__ = h3d_pass_Output;
h3d_scene_fwd_DepthPass.prototype = $extend(h3d_pass_Output.prototype,{
	draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("depthMap",this.ctx.engine.width,this.ctx.engine.height,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		h3d_pass_Output.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.globals.map.h[this.depthMapId] = { texture : texture};
	}
	,__class__: h3d_scene_fwd_DepthPass
});
var h3d_scene_fwd_NormalPass = function() {
	h3d_pass_Output.call(this,"normal",[hxsl_Output.PackNormal(hxsl_Output.Value("output.normal"))]);
	this.normalMapId = hxsl_Globals.allocID("normalMap");
};
$hxClasses["h3d.scene.fwd.NormalPass"] = h3d_scene_fwd_NormalPass;
h3d_scene_fwd_NormalPass.__name__ = "h3d.scene.fwd.NormalPass";
h3d_scene_fwd_NormalPass.__super__ = h3d_pass_Output;
h3d_scene_fwd_NormalPass.prototype = $extend(h3d_pass_Output.prototype,{
	draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("normalMap",this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		h3d_pass_Output.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.globals.map.h[this.normalMapId] = texture;
	}
	,__class__: h3d_scene_fwd_NormalPass
});
var h3d_scene_fwd_Renderer = function() {
	this.shadow = new h3d_pass_DefaultShadowMap(1024);
	this.normal = new h3d_scene_fwd_NormalPass();
	this.depth = new h3d_scene_fwd_DepthPass();
	h3d_scene_Renderer.call(this);
	this.defaultPass = new h3d_pass_Output("default");
	this.allPasses = [this.defaultPass,this.depth,this.normal,this.shadow];
};
$hxClasses["h3d.scene.fwd.Renderer"] = h3d_scene_fwd_Renderer;
h3d_scene_fwd_Renderer.__name__ = "h3d.scene.fwd.Renderer";
h3d_scene_fwd_Renderer.__super__ = h3d_scene_Renderer;
h3d_scene_fwd_Renderer.prototype = $extend(h3d_scene_Renderer.prototype,{
	renderPass: function(p,passes,sort) {
		p.draw(passes,sort);
	}
	,render: function() {
		if(this.has("shadow")) {
			this.renderPass(this.shadow,this.get("shadow"));
		}
		if(this.has("depth")) {
			this.renderPass(this.depth,this.get("depth"));
		}
		if(this.has("normal")) {
			this.renderPass(this.normal,this.get("normal"));
		}
		this.renderPass(this.defaultPass,this.get("default"));
		this.renderPass(this.defaultPass,this.get("alpha"),this.backToFront);
		this.renderPass(this.defaultPass,this.get("additive"));
	}
	,__class__: h3d_scene_fwd_Renderer
});
var h3d_shader_AmbientLight = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.AmbientLight"] = h3d_shader_AmbientLight;
h3d_shader_AmbientLight.__name__ = "h3d.shader.AmbientLight";
h3d_shader_AmbientLight.__super__ = hxsl_Shader;
h3d_shader_AmbientLight.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_AmbientLight
});
var h3d_shader_Base2d = function() {
	this.viewportB__ = new h3d_VectorImpl(0.,0.,0.);
	this.viewportA__ = new h3d_VectorImpl(0.,0.,0.);
	this.halfPixelInverse__ = new h3d_VectorImpl(0.,0.,0.);
	this.uvPos__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.filterMatrixB__ = new h3d_VectorImpl(0.,0.,0.);
	this.filterMatrixA__ = new h3d_VectorImpl(0.,0.,0.);
	this.absoluteMatrixB__ = new h3d_VectorImpl(0.,0.,0.);
	this.absoluteMatrixA__ = new h3d_VectorImpl(0.,0.,0.);
	this.color__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.zValue__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Base2d"] = h3d_shader_Base2d;
h3d_shader_Base2d.__name__ = "h3d.shader.Base2d";
h3d_shader_Base2d.__super__ = hxsl_Shader;
h3d_shader_Base2d.prototype = $extend(hxsl_Shader.prototype,{
	get_zValue: function() {
		return this.zValue__;
	}
	,set_zValue: function(_v) {
		return this.zValue__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_isRelative: function() {
		return this.isRelative__;
	}
	,set_isRelative: function(_v) {
		this.constModified = true;
		return this.isRelative__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_absoluteMatrixA: function() {
		return this.absoluteMatrixA__;
	}
	,set_absoluteMatrixA: function(_v) {
		return this.absoluteMatrixA__ = _v;
	}
	,get_absoluteMatrixB: function() {
		return this.absoluteMatrixB__;
	}
	,set_absoluteMatrixB: function(_v) {
		return this.absoluteMatrixB__ = _v;
	}
	,get_filterMatrixA: function() {
		return this.filterMatrixA__;
	}
	,set_filterMatrixA: function(_v) {
		return this.filterMatrixA__ = _v;
	}
	,get_filterMatrixB: function() {
		return this.filterMatrixB__;
	}
	,set_filterMatrixB: function(_v) {
		return this.filterMatrixB__ = _v;
	}
	,get_hasUVPos: function() {
		return this.hasUVPos__;
	}
	,set_hasUVPos: function(_v) {
		this.constModified = true;
		return this.hasUVPos__ = _v;
	}
	,get_uvPos: function() {
		return this.uvPos__;
	}
	,set_uvPos: function(_v) {
		return this.uvPos__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_pixelAlign: function() {
		return this.pixelAlign__;
	}
	,set_pixelAlign: function(_v) {
		this.constModified = true;
		return this.pixelAlign__ = _v;
	}
	,get_halfPixelInverse: function() {
		return this.halfPixelInverse__;
	}
	,set_halfPixelInverse: function(_v) {
		return this.halfPixelInverse__ = _v;
	}
	,get_viewportA: function() {
		return this.viewportA__;
	}
	,set_viewportA: function(_v) {
		return this.viewportA__ = _v;
	}
	,get_viewportB: function() {
		return this.viewportB__;
	}
	,set_viewportB: function(_v) {
		return this.viewportB__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewportA__;
		case 14:
			return this.viewportB__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Base2d
});
var h3d_shader_BaseMesh = function() {
	this.specularColor__ = new h3d_VectorImpl(0.,0.,0.);
	this.specularAmount__ = 0;
	this.specularPower__ = 0;
	this.color__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	hxsl_Shader.call(this);
	var _this = this.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this = this.specularColor__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	this.specularPower__ = 50;
	this.specularAmount__ = 1;
};
$hxClasses["h3d.shader.BaseMesh"] = h3d_shader_BaseMesh;
h3d_shader_BaseMesh.__name__ = "h3d.shader.BaseMesh";
h3d_shader_BaseMesh.__super__ = hxsl_Shader;
h3d_shader_BaseMesh.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_specularPower: function() {
		return this.specularPower__;
	}
	,set_specularPower: function(_v) {
		return this.specularPower__ = _v;
	}
	,get_specularAmount: function() {
		return this.specularAmount__;
	}
	,set_specularAmount: function(_v) {
		return this.specularAmount__ = _v;
	}
	,get_specularColor: function() {
		return this.specularColor__;
	}
	,set_specularColor: function(_v) {
		return this.specularColor__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_BaseMesh
});
var h3d_shader_Blur = function() {
	this.cubeDir__ = new h3d_MatrixImpl();
	this.depthThresholdMaxDist__ = 0;
	this.depthThreshold__ = 1;
	this.fixedColor__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.pixel__ = new h3d_VectorImpl(0.,0.,0.);
	this.offsets__ = [];
	this.values__ = [];
	this.Quality__ = 0;
	this.inverseProj__ = new h3d_MatrixImpl();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.Blur"] = h3d_shader_Blur;
h3d_shader_Blur.__name__ = "h3d.shader.Blur";
h3d_shader_Blur.__super__ = h3d_shader_ScreenShader;
h3d_shader_Blur.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_inverseProj: function() {
		return this.inverseProj__;
	}
	,set_inverseProj: function(_v) {
		return this.inverseProj__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_depthTexture: function() {
		return this.depthTexture__;
	}
	,set_depthTexture: function(_v) {
		return this.depthTexture__ = _v;
	}
	,get_Quality: function() {
		return this.Quality__;
	}
	,set_Quality: function(_v) {
		this.constModified = true;
		return this.Quality__ = _v;
	}
	,get_isDepth: function() {
		return this.isDepth__;
	}
	,set_isDepth: function(_v) {
		this.constModified = true;
		return this.isDepth__ = _v;
	}
	,get_values: function() {
		return this.values__;
	}
	,set_values: function(_v) {
		return this.values__ = _v;
	}
	,get_offsets: function() {
		return this.offsets__;
	}
	,set_offsets: function(_v) {
		return this.offsets__ = _v;
	}
	,get_pixel: function() {
		return this.pixel__;
	}
	,set_pixel: function(_v) {
		return this.pixel__ = _v;
	}
	,get_hasFixedColor: function() {
		return this.hasFixedColor__;
	}
	,set_hasFixedColor: function(_v) {
		this.constModified = true;
		return this.hasFixedColor__ = _v;
	}
	,get_smoothFixedColor: function() {
		return this.smoothFixedColor__;
	}
	,set_smoothFixedColor: function(_v) {
		this.constModified = true;
		return this.smoothFixedColor__ = _v;
	}
	,get_fixedColor: function() {
		return this.fixedColor__;
	}
	,set_fixedColor: function(_v) {
		return this.fixedColor__ = _v;
	}
	,get_isDepthDependant: function() {
		return this.isDepthDependant__;
	}
	,set_isDepthDependant: function(_v) {
		this.constModified = true;
		return this.isDepthDependant__ = _v;
	}
	,get_depthThreshold: function() {
		return this.depthThreshold__;
	}
	,set_depthThreshold: function(_v) {
		return this.depthThreshold__ = _v;
	}
	,get_depthThresholdMaxDist: function() {
		return this.depthThresholdMaxDist__;
	}
	,set_depthThresholdMaxDist: function(_v) {
		return this.depthThresholdMaxDist__ = _v;
	}
	,get_isCube: function() {
		return this.isCube__;
	}
	,set_isCube: function(_v) {
		this.constModified = true;
		return this.isCube__ = _v;
	}
	,get_cubeTexture: function() {
		return this.cubeTexture__;
	}
	,set_cubeTexture: function(_v) {
		return this.cubeTexture__ = _v;
	}
	,get_cubeDir: function() {
		return this.cubeDir__;
	}
	,set_cubeDir: function(_v) {
		return this.cubeDir__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Quality__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("Quality" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.isCube__) {
			this.constBits |= 4096;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.inverseProj__;
		case 2:
			return this.texture__;
		case 3:
			return this.depthTexture__;
		case 4:
			return this.Quality__;
		case 5:
			return this.isDepth__;
		case 6:
			return this.values__;
		case 7:
			return this.offsets__;
		case 8:
			return this.pixel__;
		case 9:
			return this.hasFixedColor__;
		case 10:
			return this.smoothFixedColor__;
		case 11:
			return this.fixedColor__;
		case 12:
			return this.isDepthDependant__;
		case 13:
			return this.depthThreshold__;
		case 14:
			return this.depthThresholdMaxDist__;
		case 15:
			return this.isCube__;
		case 16:
			return this.cubeTexture__;
		case 17:
			return this.cubeDir__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 4:
			return this.Quality__;
		case 13:
			return this.depthThreshold__;
		case 14:
			return this.depthThresholdMaxDist__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_Blur
});
var h3d_shader_ShaderBuffers = function() {
	this.globals = new Float32Array(0);
	this.params = new Float32Array(0);
	this.tex = new Array(0);
};
$hxClasses["h3d.shader.ShaderBuffers"] = h3d_shader_ShaderBuffers;
h3d_shader_ShaderBuffers.__name__ = "h3d.shader.ShaderBuffers";
h3d_shader_ShaderBuffers.prototype = {
	grow: function(s) {
		var ng = s.globalsSize << 2;
		var np = s.paramsSize << 2;
		var nt = s.texturesCount;
		var nb = s.bufferCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			this.tex = new Array(nt);
		}
		if(nb > 0 && (this.buffers == null || this.buffers.length < nb)) {
			this.buffers = new Array(nb);
		}
	}
	,__class__: h3d_shader_ShaderBuffers
};
var h3d_shader_Buffers = function() {
	this.vertex = new h3d_shader_ShaderBuffers();
	this.fragment = new h3d_shader_ShaderBuffers();
};
$hxClasses["h3d.shader.Buffers"] = h3d_shader_Buffers;
h3d_shader_Buffers.__name__ = "h3d.shader.Buffers";
h3d_shader_Buffers.prototype = {
	__class__: h3d_shader_Buffers
};
var h3d_shader_ColorAdd = function(color) {
	if(color == null) {
		color = 0;
	}
	this.color__ = new h3d_VectorImpl(0.,0.,0.);
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
};
$hxClasses["h3d.shader.ColorAdd"] = h3d_shader_ColorAdd;
h3d_shader_ColorAdd.__name__ = "h3d.shader.ColorAdd";
h3d_shader_ColorAdd.__super__ = hxsl_Shader;
h3d_shader_ColorAdd.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorAdd
});
var h3d_shader_ColorKey = function(v) {
	if(v == null) {
		v = 0;
	}
	this.colorKey__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	hxsl_Shader.call(this);
	var _this = this.colorKey__;
	_this.x = (v >> 16 & 255) / 255;
	_this.y = (v >> 8 & 255) / 255;
	_this.z = (v & 255) / 255;
	_this.w = (v >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorKey"] = h3d_shader_ColorKey;
h3d_shader_ColorKey.__name__ = "h3d.shader.ColorKey";
h3d_shader_ColorKey.__super__ = hxsl_Shader;
h3d_shader_ColorKey.prototype = $extend(hxsl_Shader.prototype,{
	get_colorKey: function() {
		return this.colorKey__;
	}
	,set_colorKey: function(_v) {
		return this.colorKey__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorKey
});
var h3d_shader_ColorMatrix = function(m) {
	this.enabled__ = true;
	this.matrix__ = new h3d_MatrixImpl();
	hxsl_Shader.call(this);
	if(m != null) {
		this.matrix__.loadValues(m);
	} else {
		this.matrix__.identity();
	}
};
$hxClasses["h3d.shader.ColorMatrix"] = h3d_shader_ColorMatrix;
h3d_shader_ColorMatrix.__name__ = "h3d.shader.ColorMatrix";
h3d_shader_ColorMatrix.__super__ = hxsl_Shader;
h3d_shader_ColorMatrix.prototype = $extend(hxsl_Shader.prototype,{
	get_matrix: function() {
		return this.matrix__;
	}
	,set_matrix: function(_v) {
		return this.matrix__ = _v;
	}
	,get_enabled: function() {
		return this.enabled__;
	}
	,set_enabled: function(_v) {
		this.constModified = true;
		return this.enabled__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enabled__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.matrix__;
		case 1:
			return this.enabled__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorMatrix
});
var h3d_shader_DirShadow = function() {
	this.poissonDisk__ = [];
	this.shadowBias__ = 0;
	this.shadowProj__ = new h3d_MatrixImpl();
	this.shadowMapChannel__ = hxsl_Channel.Unknown;
	this.shadowRes__ = new h3d_VectorImpl(0.,0.,0.);
	this.pcfScale__ = 0;
	this.PCF_SAMPLES__ = 0;
	this.shadowPower__ = 0;
	hxsl_Shader.call(this);
	this.set_pcfQuality(1);
};
$hxClasses["h3d.shader.DirShadow"] = h3d_shader_DirShadow;
h3d_shader_DirShadow.__name__ = "h3d.shader.DirShadow";
h3d_shader_DirShadow.__super__ = hxsl_Shader;
h3d_shader_DirShadow.prototype = $extend(hxsl_Shader.prototype,{
	set_pcfQuality: function(q) {
		var _v;
		switch(q) {
		case 2:
			var x = -0.326;
			var y = -0.406;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this1 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.840;
			var y = -0.074;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this2 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.696;
			var y = 0.457;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this3 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.203;
			var y = 0.621;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this4 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.962;
			var y = -0.195;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this5 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.473;
			var y = -0.480;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this6 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.519;
			var y = 0.767;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this7 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.185;
			var y = -0.893;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this8 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.507;
			var y = 0.064;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this9 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.896;
			var y = 0.412;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this10 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.322;
			var y = -0.933;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this11 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.792;
			var y = -0.598;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_v = [this1,this2,this3,this4,this5,this6,this7,this8,this9,this10,this11,new h3d_Vector4Impl(x,y,0.,1.)];
			break;
		case 3:
			var x = -0.613392;
			var y = 0.617481;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this1 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.170019;
			var y = -0.040254;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this2 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.299417;
			var y = 0.791925;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this3 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.645680;
			var y = 0.493210;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this4 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.651784;
			var y = 0.717887;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this5 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.421003;
			var y = 0.027070;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this6 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.817194;
			var y = -0.271096;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this7 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.705374;
			var y = -0.668203;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this8 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.977050;
			var y = -0.108615;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this9 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.063326;
			var y = 0.142369;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this10 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.203528;
			var y = 0.214331;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this11 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.667531;
			var y = 0.326090;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this12 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.098422;
			var y = -0.295755;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this13 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.885922;
			var y = 0.215369;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this14 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.566637;
			var y = 0.605213;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this15 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.039766;
			var y = -0.396100;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this16 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.751946;
			var y = 0.453352;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this17 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.078707;
			var y = -0.715323;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this18 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.075838;
			var y = -0.529344;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this19 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.724479;
			var y = -0.580798;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this20 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.222999;
			var y = -0.215125;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this21 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.467574;
			var y = -0.405438;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this22 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.248268;
			var y = -0.814753;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this23 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.354411;
			var y = -0.887570;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this24 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.175817;
			var y = 0.382366;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this25 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.487472;
			var y = -0.063082;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this26 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.084078;
			var y = 0.898312;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this27 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.488876;
			var y = -0.783441;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this28 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.470016;
			var y = 0.217933;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this29 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.696890;
			var y = -0.549791;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this30 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.149693;
			var y = 0.605762;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this31 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.034211;
			var y = 0.979980;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this32 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.503098;
			var y = -0.308878;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this33 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.016205;
			var y = -0.872921;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this34 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.385784;
			var y = -0.393902;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this35 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.146886;
			var y = -0.859249;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this36 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.643361;
			var y = 0.164098;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this37 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.634388;
			var y = -0.049471;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this38 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.688894;
			var y = 0.007843;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this39 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.464034;
			var y = -0.188818;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this40 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.440840;
			var y = 0.137486;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this41 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.364483;
			var y = 0.511704;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this42 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.034028;
			var y = 0.325968;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this43 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.099094;
			var y = -0.308023;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this44 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.693960;
			var y = -0.366253;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this45 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.678884;
			var y = -0.204688;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this46 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.001801;
			var y = 0.780328;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this47 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.145177;
			var y = -0.898984;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this48 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.062655;
			var y = -0.611866;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this49 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.315226;
			var y = -0.604297;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this50 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.780145;
			var y = 0.486251;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this51 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.371868;
			var y = 0.882138;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this52 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.200476;
			var y = 0.494430;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this53 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.494552;
			var y = -0.711051;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this54 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.612476;
			var y = 0.705252;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this55 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.578845;
			var y = -0.768792;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this56 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.772454;
			var y = -0.090976;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this57 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.504440;
			var y = 0.372295;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this58 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.155736;
			var y = 0.065157;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this59 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.391522;
			var y = 0.849605;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this60 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.620106;
			var y = -0.328104;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this61 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.789239;
			var y = -0.419965;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this62 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.545396;
			var y = 0.538133;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this63 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.178564;
			var y = -0.596057;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_v = [this1,this2,this3,this4,this5,this6,this7,this8,this9,this10,this11,this12,this13,this14,this15,this16,this17,this18,this19,this20,this21,this22,this23,this24,this25,this26,this27,this28,this29,this30,this31,this32,this33,this34,this35,this36,this37,this38,this39,this40,this41,this42,this43,this44,this45,this46,this47,this48,this49,this50,this51,this52,this53,this54,this55,this56,this57,this58,this59,this60,this61,this62,this63,new h3d_Vector4Impl(x,y,0.,1.)];
			break;
		default:
			var x = -0.942;
			var y = -0.399;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this1 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.945;
			var y = -0.768;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this2 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.094;
			var y = -0.929;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this3 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.344;
			var y = 0.293;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_v = [this1,this2,this3,new h3d_Vector4Impl(x,y,0.,1.)];
		}
		this.poissonDisk__ = _v;
		this.constModified = true;
		this.PCF_SAMPLES__ = this.poissonDisk__.length;
		return q;
	}
	,get_enable: function() {
		return this.enable__;
	}
	,set_enable: function(_v) {
		this.constModified = true;
		return this.enable__ = _v;
	}
	,get_USE_ESM: function() {
		return this.USE_ESM__;
	}
	,set_USE_ESM: function(_v) {
		this.constModified = true;
		return this.USE_ESM__ = _v;
	}
	,get_shadowPower: function() {
		return this.shadowPower__;
	}
	,set_shadowPower: function(_v) {
		return this.shadowPower__ = _v;
	}
	,get_USE_PCF: function() {
		return this.USE_PCF__;
	}
	,set_USE_PCF: function(_v) {
		this.constModified = true;
		return this.USE_PCF__ = _v;
	}
	,get_PCF_SAMPLES: function() {
		return this.PCF_SAMPLES__;
	}
	,set_PCF_SAMPLES: function(_v) {
		this.constModified = true;
		return this.PCF_SAMPLES__ = _v;
	}
	,get_pcfScale: function() {
		return this.pcfScale__;
	}
	,set_pcfScale: function(_v) {
		return this.pcfScale__ = _v;
	}
	,get_shadowRes: function() {
		return this.shadowRes__;
	}
	,set_shadowRes: function(_v) {
		return this.shadowRes__ = _v;
	}
	,get_shadowMap: function() {
		return this.shadowMap__;
	}
	,set_shadowMap: function(_v) {
		this.constModified = true;
		return this.shadowMap__ = _v;
	}
	,get_shadowProj: function() {
		return this.shadowProj__;
	}
	,set_shadowProj: function(_v) {
		return this.shadowProj__ = _v;
	}
	,get_shadowBias: function() {
		return this.shadowBias__;
	}
	,set_shadowBias: function(_v) {
		return this.shadowBias__ = _v;
	}
	,get_poissonDisk: function() {
		return this.poissonDisk__;
	}
	,set_poissonDisk: function(_v) {
		return this.poissonDisk__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.PCF_SAMPLES__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("PCF_SAMPLES" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw haxe_Exception.thrown("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.PCF_SAMPLES__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDisk__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 4:
			return this.PCF_SAMPLES__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_DirShadow
});
var h3d_shader_GenTexture = function() {
	this.color__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.mode__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.GenTexture"] = h3d_shader_GenTexture;
h3d_shader_GenTexture.__name__ = "h3d.shader.GenTexture";
h3d_shader_GenTexture.__super__ = h3d_shader_ScreenShader;
h3d_shader_GenTexture.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_mode: function() {
		return this.mode__;
	}
	,set_mode: function(_v) {
		this.constModified = true;
		return this.mode__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.mode__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("mode" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.mode__;
		case 2:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.mode__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_GenTexture
});
var h3d_shader_LineShader = function(width,lengthScale) {
	if(lengthScale == null) {
		lengthScale = 1.;
	}
	if(width == null) {
		width = 1.5;
	}
	this.width__ = 0;
	this.lengthScale__ = 0;
	hxsl_Shader.call(this);
	this.width__ = width;
	this.lengthScale__ = lengthScale;
};
$hxClasses["h3d.shader.LineShader"] = h3d_shader_LineShader;
h3d_shader_LineShader.__name__ = "h3d.shader.LineShader";
h3d_shader_LineShader.__super__ = hxsl_Shader;
h3d_shader_LineShader.prototype = $extend(hxsl_Shader.prototype,{
	get_lengthScale: function() {
		return this.lengthScale__;
	}
	,set_lengthScale: function(_v) {
		return this.lengthScale__ = _v;
	}
	,get_width: function() {
		return this.width__;
	}
	,set_width: function(_v) {
		return this.width__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_LineShader
});
var h3d_shader_MinMaxShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.MinMaxShader"] = h3d_shader_MinMaxShader;
h3d_shader_MinMaxShader.__name__ = "h3d.shader.MinMaxShader";
h3d_shader_MinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_MinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texA: function() {
		return this.texA__;
	}
	,set_texA: function(_v) {
		return this.texA__ = _v;
	}
	,get_texB: function() {
		return this.texB__;
	}
	,set_texB: function(_v) {
		return this.texB__ = _v;
	}
	,get_isMax: function() {
		return this.isMax__;
	}
	,set_isMax: function(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_MinMaxShader
});
var h3d_shader_CubeMinMaxShader = function() {
	this.mat__ = new h3d_MatrixImpl();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.CubeMinMaxShader"] = h3d_shader_CubeMinMaxShader;
h3d_shader_CubeMinMaxShader.__name__ = "h3d.shader.CubeMinMaxShader";
h3d_shader_CubeMinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_CubeMinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texA: function() {
		return this.texA__;
	}
	,set_texA: function(_v) {
		return this.texA__ = _v;
	}
	,get_texB: function() {
		return this.texB__;
	}
	,set_texB: function(_v) {
		return this.texB__ = _v;
	}
	,get_isMax: function() {
		return this.isMax__;
	}
	,set_isMax: function(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	,get_mat: function() {
		return this.mat__;
	}
	,set_mat: function(_v) {
		return this.mat__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		case 4:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_CubeMinMaxShader
});
var h3d_shader_NormalMap = function(texture) {
	hxsl_Shader.call(this);
	this.texture__ = texture;
};
$hxClasses["h3d.shader.NormalMap"] = h3d_shader_NormalMap;
h3d_shader_NormalMap.__name__ = "h3d.shader.NormalMap";
h3d_shader_NormalMap.__super__ = hxsl_Shader;
h3d_shader_NormalMap.prototype = $extend(hxsl_Shader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_NormalMap
});
var h3d_shader_Shadow = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Shadow"] = h3d_shader_Shadow;
h3d_shader_Shadow.__name__ = "h3d.shader.Shadow";
h3d_shader_Shadow.__super__ = hxsl_Shader;
h3d_shader_Shadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Shadow
});
var h3d_shader_SignedDistanceField = function() {
	this.smoothing__ = 0.0416666666666666644;
	this.alphaCutoff__ = 0.5;
	this.autoSmoothing__ = false;
	this.channel__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.SignedDistanceField"] = h3d_shader_SignedDistanceField;
h3d_shader_SignedDistanceField.__name__ = "h3d.shader.SignedDistanceField";
h3d_shader_SignedDistanceField.__super__ = hxsl_Shader;
h3d_shader_SignedDistanceField.prototype = $extend(hxsl_Shader.prototype,{
	get_channel: function() {
		return this.channel__;
	}
	,set_channel: function(_v) {
		this.constModified = true;
		return this.channel__ = _v;
	}
	,get_autoSmoothing: function() {
		return this.autoSmoothing__;
	}
	,set_autoSmoothing: function(_v) {
		this.constModified = true;
		return this.autoSmoothing__ = _v;
	}
	,get_alphaCutoff: function() {
		return this.alphaCutoff__;
	}
	,set_alphaCutoff: function(_v) {
		return this.alphaCutoff__ = _v;
	}
	,get_smoothing: function() {
		return this.smoothing__;
	}
	,set_smoothing: function(_v) {
		return this.smoothing__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.channel__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("channel" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		if(this.autoSmoothing__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.channel__;
		case 1:
			return this.autoSmoothing__;
		case 2:
			return this.alphaCutoff__;
		case 3:
			return this.smoothing__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.channel__;
		case 2:
			return this.alphaCutoff__;
		case 3:
			return this.smoothing__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_SignedDistanceField
});
var h3d_shader_SkinBase = function() {
	this.bonesMatrixes__ = [];
	this.fourBonesByVertex__ = false;
	this.MaxBones__ = 0;
	hxsl_Shader.call(this);
	this.constModified = true;
	this.MaxBones__ = 34;
};
$hxClasses["h3d.shader.SkinBase"] = h3d_shader_SkinBase;
h3d_shader_SkinBase.__name__ = "h3d.shader.SkinBase";
h3d_shader_SkinBase.__super__ = hxsl_Shader;
h3d_shader_SkinBase.prototype = $extend(hxsl_Shader.prototype,{
	get_MaxBones: function() {
		return this.MaxBones__;
	}
	,set_MaxBones: function(_v) {
		this.constModified = true;
		return this.MaxBones__ = _v;
	}
	,get_fourBonesByVertex: function() {
		return this.fourBonesByVertex__;
	}
	,set_fourBonesByVertex: function(_v) {
		this.constModified = true;
		return this.fourBonesByVertex__ = _v;
	}
	,get_bonesMatrixes: function() {
		return this.bonesMatrixes__;
	}
	,set_bonesMatrixes: function(_v) {
		return this.bonesMatrixes__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.MaxBones__;
		}
		return 0.;
	}
	,__class__: h3d_shader_SkinBase
});
var h3d_shader_Skin = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.Skin"] = h3d_shader_Skin;
h3d_shader_Skin.__name__ = "h3d.shader.Skin";
h3d_shader_Skin.__super__ = h3d_shader_SkinBase;
h3d_shader_Skin.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.MaxBones__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Skin
});
var h3d_shader_SkinTangent = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.SkinTangent"] = h3d_shader_SkinTangent;
h3d_shader_SkinTangent.__name__ = "h3d.shader.SkinTangent";
h3d_shader_SkinTangent.__super__ = h3d_shader_SkinBase;
h3d_shader_SkinTangent.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.MaxBones__;
		}
		return 0.;
	}
	,__class__: h3d_shader_SkinTangent
});
var h3d_shader_SpecularTexture = function(tex) {
	hxsl_Shader.call(this);
	this.texture__ = tex;
};
$hxClasses["h3d.shader.SpecularTexture"] = h3d_shader_SpecularTexture;
h3d_shader_SpecularTexture.__name__ = "h3d.shader.SpecularTexture";
h3d_shader_SpecularTexture.__super__ = hxsl_Shader;
h3d_shader_SpecularTexture.prototype = $extend(hxsl_Shader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SpecularTexture
});
var h3d_shader_Texture = function(tex) {
	this.killAlphaThreshold__ = 0;
	hxsl_Shader.call(this);
	this.texture__ = tex;
	this.killAlphaThreshold__ = h3d_mat_Defaults.defaultKillAlphaThreshold;
};
$hxClasses["h3d.shader.Texture"] = h3d_shader_Texture;
h3d_shader_Texture.__name__ = "h3d.shader.Texture";
h3d_shader_Texture.__super__ = hxsl_Shader;
h3d_shader_Texture.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_specularAlpha: function() {
		return this.specularAlpha__;
	}
	,set_specularAlpha: function(_v) {
		this.constModified = true;
		return this.specularAlpha__ = _v;
	}
	,get_killAlphaThreshold: function() {
		return this.killAlphaThreshold__;
	}
	,set_killAlphaThreshold: function(_v) {
		return this.killAlphaThreshold__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Texture
});
var h3d_shader_UVDelta = function(dx,dy,sx,sy) {
	if(sy == null) {
		sy = 1.;
	}
	if(sx == null) {
		sx = 1.;
	}
	if(dy == null) {
		dy = 0.;
	}
	if(dx == null) {
		dx = 0.;
	}
	this.uvScale__ = new h3d_VectorImpl(0.,0.,0.);
	this.uvDelta__ = new h3d_VectorImpl(0.,0.,0.);
	hxsl_Shader.call(this);
	var _this = this.uvDelta__;
	var x = dx;
	var y = dy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	var _this = this.uvScale__;
	var x = sx;
	var y = sy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
};
$hxClasses["h3d.shader.UVDelta"] = h3d_shader_UVDelta;
h3d_shader_UVDelta.__name__ = "h3d.shader.UVDelta";
h3d_shader_UVDelta.__super__ = hxsl_Shader;
h3d_shader_UVDelta.prototype = $extend(hxsl_Shader.prototype,{
	get_uvDelta: function() {
		return this.uvDelta__;
	}
	,set_uvDelta: function(_v) {
		return this.uvDelta__ = _v;
	}
	,get_uvScale: function() {
		return this.uvScale__;
	}
	,set_uvScale: function(_v) {
		return this.uvScale__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_UVDelta
});
var h3d_shader_VertexColorAlpha = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.VertexColorAlpha"] = h3d_shader_VertexColorAlpha;
h3d_shader_VertexColorAlpha.__name__ = "h3d.shader.VertexColorAlpha";
h3d_shader_VertexColorAlpha.__super__ = hxsl_Shader;
h3d_shader_VertexColorAlpha.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VertexColorAlpha
});
var h3d_shader_VolumeDecal = function(objectWidth,objectHeight) {
	this.isCentered__ = true;
	this.tangent__ = new h3d_VectorImpl(0.,0.,0.);
	this.normal__ = new h3d_VectorImpl(0.,0.,0.);
	this.scale__ = new h3d_VectorImpl(0.,0.,0.);
	hxsl_Shader.call(this);
	var _this = this.normal__;
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	var _this = this.tangent__;
	var x = 1;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	var _this = this.scale__;
	var x = 1 / objectWidth;
	var y = 1 / objectHeight;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
};
$hxClasses["h3d.shader.VolumeDecal"] = h3d_shader_VolumeDecal;
h3d_shader_VolumeDecal.__name__ = "h3d.shader.VolumeDecal";
h3d_shader_VolumeDecal.__super__ = hxsl_Shader;
h3d_shader_VolumeDecal.prototype = $extend(hxsl_Shader.prototype,{
	get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,get_normal: function() {
		return this.normal__;
	}
	,set_normal: function(_v) {
		return this.normal__ = _v;
	}
	,get_tangent: function() {
		return this.tangent__;
	}
	,set_tangent: function(_v) {
		return this.tangent__ = _v;
	}
	,get_isCentered: function() {
		return this.isCentered__;
	}
	,set_isCentered: function(_v) {
		this.constModified = true;
		return this.isCentered__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isCentered__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		case 2:
			return this.tangent__;
		case 3:
			return this.isCentered__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VolumeDecal
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:true,__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr,__params__:function(){ return [this.m];}}; },$_._hx_name="Module",$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr,__params__:function(){ return [this.s,this.file,this.line,this.column];}}; },$_._hx_name="FilePos",$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr,__params__:function(){ return [this.classname,this.method];}}; },$_._hx_name="Method",$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="LocalFunction",$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
haxe_StackItem.__empty_constructs__ = [haxe_StackItem.CFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_EntryPoint = function() { };
$hxClasses["haxe.EntryPoint"] = haxe_EntryPoint;
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	if(typeof(window) != "undefined") {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		if(rqf != null) {
			rqf(haxe_EntryPoint.run);
		} else if(nextTick >= 0) {
			setTimeout(haxe_EntryPoint.run,nextTick * 1000);
		}
	} else if(nextTick >= 0) {
		setTimeout(haxe_EntryPoint.run,nextTick * 1000);
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Int64 = {};
haxe_Int64.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw haxe_Exception.thrown("divide by zero");
		case 1:
			return { quotient : new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low), modulus : new haxe__$Int64__$_$_$Int64(0,0)};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = ~dividend.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	} else {
		modulus = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
	}
	if(divisor.high < 0) {
		var high = ~divisor.high;
		var low = ~divisor.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		divisor = new haxe__$Int64__$_$_$Int64(high,low);
	}
	var quotient = new haxe__$Int64__$_$_$Int64(0,0);
	var mask = new haxe__$Int64__$_$_$Int64(0,1);
	while(!(divisor.high < 0)) {
		var v = haxe_Int32.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe_Int32.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		divisor = b == 0 ? new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b) : new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
		var b1 = 1;
		b1 &= 63;
		mask = b1 == 0 ? new haxe__$Int64__$_$_$Int64(mask.high,mask.low) : b1 < 32 ? new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1) : new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(mask.high != b_high || mask.low != b_low)) {
			break;
		}
		var v = haxe_Int32.ucompare(modulus.high,divisor.high);
		if((v != 0 ? v : haxe_Int32.ucompare(modulus.low,divisor.low)) >= 0) {
			quotient = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			var high = modulus.high - divisor.high | 0;
			var low = modulus.low - divisor.low | 0;
			if(haxe_Int32.ucompare(modulus.low,divisor.low) < 0) {
				var ret = high--;
				high = high | 0;
			}
			modulus = new haxe__$Int64__$_$_$Int64(high,low);
		}
		var b = 1;
		b &= 63;
		mask = b == 0 ? new haxe__$Int64__$_$_$Int64(mask.high,mask.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(mask.high >>> b,mask.high << 32 - b | mask.low >>> b) : new haxe__$Int64__$_$_$Int64(0,mask.high >>> b - 32);
		var b1 = 1;
		b1 &= 63;
		divisor = b1 == 0 ? new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low) : b1 < 32 ? new haxe__$Int64__$_$_$Int64(divisor.high >>> b1,divisor.high << 32 - b1 | divisor.low >>> b1) : new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b1 - 32);
	}
	if(divSign) {
		var high = ~quotient.high;
		var low = ~quotient.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		quotient = new haxe__$Int64__$_$_$Int64(high,low);
	}
	if(dividend.high < 0) {
		var high = ~modulus.high;
		var low = ~modulus.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
$hxClasses["haxe.MainEvent"] = haxe_MainEvent;
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
$hxClasses["haxe.MainLoop"] = haxe_MainLoop;
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw haxe_Exception.thrown("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = HxOverrides.now() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([$A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = this.buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var _this = edecl.__constructs__;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i]._hx_name;
			}
			var tag = result[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	var max = str1.length;
	var l = max * 8;
	while(i < max) {
		blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
		++i;
	}
	blks[i >> 2] |= 128 << (l + i) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$StringMap_StringMapKeyValueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapValueIterator"] = haxe_ds__$StringMap_StringMapValueIterator;
haxe_ds__$StringMap_StringMapValueIterator.__name__ = "haxe.ds._StringMap.StringMapValueIterator";
haxe_ds__$StringMap_StringMapValueIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.h[this.keys[this.current++]];
	}
	,__class__: haxe_ds__$StringMap_StringMapValueIterator
};
var haxe_ds__$StringMap_StringMapKeyValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyValueIterator"] = haxe_ds__$StringMap_StringMapKeyValueIterator;
haxe_ds__$StringMap_StringMapKeyValueIterator.__name__ = "haxe.ds._StringMap.StringMapKeyValueIterator";
haxe_ds__$StringMap_StringMapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		var key = this.keys[this.current++];
		return { key : key, value : this.h[key]};
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyValueIterator
};
var haxe_ds_Vector = {};
haxe_ds_Vector.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i = srcPos;
			var j = destPos;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				src[j] = src[i];
				++i;
				++j;
			}
		}
	} else {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			dest[destPos + i] = src[srcPos + i];
		}
	}
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
};
$hxClasses["haxe.exceptions.PosException"] = haxe_exceptions_PosException;
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
};
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException;
haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addString: function(v,encoding) {
		this.add(haxe_io_Bytes.ofString(v,encoding));
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 51, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf = new haxe_io_BytesBuffer();
		var last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	,readLine: function() {
		var buf = new haxe_io_BytesBuffer();
		var last;
		var s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.addByte(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe_io_Eof)) {
				var e = _g1;
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				throw _g;
			}
		}
		return s;
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	flush: function() {
	}
	,close: function() {
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="Custom",$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths = _g;
	if(paths.length == 0) {
		return "";
	}
	var path = paths[0];
	var _g = 1;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g_offset = 0;
	var _g_s = tmp;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__:true,__constructs__:null
	,OpAdd: {_hx_name:"OpAdd",_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_name:"OpMult",_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_name:"OpDiv",_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_name:"OpSub",_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_name:"OpAssign",_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_name:"OpEq",_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_name:"OpNotEq",_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_name:"OpGt",_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_name:"OpGte",_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_name:"OpLt",_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_name:"OpLte",_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_name:"OpAnd",_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_name:"OpOr",_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_name:"OpXor",_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_name:"OpBoolAnd",_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_name:"OpBoolOr",_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_name:"OpShl",_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_name:"OpShr",_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_name:"OpUShr",_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_name:"OpMod",_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr,__params__:function(){ return [this.op];}}; },$_._hx_name="OpAssignOp",$_)
	,OpInterval: {_hx_name:"OpInterval",_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_name:"OpArrow",_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_name:"OpIn",_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNullCoal: {_hx_name:"OpNullCoal",_hx_index:24,__enum__:"haxe.macro.Binop",toString:$estr}
};
haxe_macro_Binop.__constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpAssignOp,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn,haxe_macro_Binop.OpNullCoal];
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn,haxe_macro_Binop.OpNullCoal];
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__:true,__constructs__:null
	,OpIncrement: {_hx_name:"OpIncrement",_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_name:"OpDecrement",_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_name:"OpNot",_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_name:"OpNeg",_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_name:"OpNegBits",_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpSpread: {_hx_name:"OpSpread",_hx_index:5,__enum__:"haxe.macro.Unop",toString:$estr}
};
haxe_macro_Unop.__constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits,haxe_macro_Unop.OpSpread];
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits,haxe_macro_Unop.OpSpread];
var haxe_macro_Error = function(message,pos,previous) {
	haxe_Exception.call(this,message,previous);
	this.pos = pos;
};
$hxClasses["haxe.macro.Error"] = haxe_macro_Error;
haxe_macro_Error.__name__ = "haxe.macro.Error";
haxe_macro_Error.__super__ = haxe_Exception;
haxe_macro_Error.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_macro_Error
});
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	return x;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				var s = child.nodeValue;
				var l = s.length;
				var r = 0;
				while(r < l && StringTools.isSpace(s,r)) ++r;
				if((r > 0 ? HxOverrides.substr(s,r,l - r) : s).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:true,__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr,__params__:function(){ return [this.i];}}; },$_._hx_name="Found",$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr,__params__:function(){ return [this.left,this.right];}}; },$_._hx_name="NeedBit",$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr,__params__:function(){ return [this.n,this.table];}}; },$_._hx_name="NeedBits",$_)
};
haxe_zip_Huffman.__constructs__ = [haxe_zip_Huffman.Found,haxe_zip_Huffman.NeedBit,haxe_zip_Huffman.NeedBits];
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			return 0;
		case 1:
			var a = t.left;
			var b = t.right;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var a = t.left;
				var b = t.right;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var a = t.left;
			var b = t.right;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:true,__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var a = h.left;
			var b = h.right;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var n = h.n;
			var tbl = h.table;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = "haxe.zip.Uncompress";
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var hxd_BitmapData = function(width,height) {
	if(!(width == -101 && height == -102)) {
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		this.ctx = canvas.getContext("2d",null);
	}
};
$hxClasses["hxd.BitmapData"] = hxd_BitmapData;
hxd_BitmapData.__name__ = "hxd.BitmapData";
hxd_BitmapData.prototype = {
	getPixels: function() {
		var w = this.ctx.canvas.width;
		var h = this.ctx.canvas.height;
		var data = this.ctx.getImageData(0,0,w,h).data;
		var pixels = data.buffer;
		return new hxd_Pixels(w,h,haxe_io_Bytes.ofData(pixels),hxd_PixelFormat.RGBA);
	}
	,__class__: hxd_BitmapData
};
var hxd_Precision = {};
var hxd_InputFormat = {};
hxd_InputFormat.toString = function(this1) {
	switch(this1) {
	case 1:
		return "DFloat";
	case 2:
		return "DVec2";
	case 3:
		return "DVec3";
	case 4:
		return "DVec4";
	case 9:
		return "DBytes4";
	}
};
hxd_InputFormat.fromHXSL = function(t) {
	switch(t._hx_index) {
	case 3:
		return 1;
	case 5:
		var _gt = t.t;
		switch(t.size) {
		case 2:
			if(_gt._hx_index == 1) {
				return 2;
			} else {
				throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
			}
			break;
		case 3:
			if(_gt._hx_index == 1) {
				return 3;
			} else {
				throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
			}
			break;
		case 4:
			if(_gt._hx_index == 1) {
				return 4;
			} else {
				throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
			}
			break;
		default:
			throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
		}
		break;
	case 9:
		if(t.size == 4) {
			return 9;
		} else {
			throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
		}
		break;
	default:
		throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
	}
};
var hxd_BufferInput = function(name,type,precision) {
	if(precision == null) {
		precision = 0;
	}
	this.name = name;
	this.type = type;
	this.precision = precision;
};
$hxClasses["hxd.BufferInput"] = hxd_BufferInput;
hxd_BufferInput.__name__ = "hxd.BufferInput";
hxd_BufferInput.prototype = {
	__class__: hxd_BufferInput
};
var hxd_BufferMapping = {};
hxd_BufferMapping._new = function(index,offset,prec) {
	return index << 3 | prec | offset << 16;
};
var hxd_BufferFormat = function(inputs) {
	this.uid = hxd_BufferFormat._UID++;
	this.stride = this.strideBytes = 0;
	this.inputs = inputs.slice();
	this.hasLowPrecision = false;
	var _g = 0;
	while(_g < inputs.length) {
		var i = inputs[_g];
		++_g;
		this.stride += i.type & 7;
		this.strideBytes += (i.type & 7) * hxd_Precision.SIZES[i.precision];
		if((this.strideBytes & 3) != 0) {
			this.strideBytes += 4 - (this.strideBytes & 3);
		}
		if(i.precision != 0) {
			this.hasLowPrecision = true;
		}
	}
};
$hxClasses["hxd.BufferFormat"] = hxd_BufferFormat;
hxd_BufferFormat.__name__ = "hxd.BufferFormat";
hxd_BufferFormat.get_XY_UV_RGBA = function() {
	if(hxd_BufferFormat.XY_UV_RGBA == null) {
		hxd_BufferFormat.XY_UV_RGBA = hxd_BufferFormat.make([new hxd_BufferInput("position",2,0),new hxd_BufferInput("uv",2,0),new hxd_BufferInput("color",4,0)]);
	}
	return hxd_BufferFormat.XY_UV_RGBA;
};
hxd_BufferFormat.get_XY_UV = function() {
	if(hxd_BufferFormat.XY_UV == null) {
		hxd_BufferFormat.XY_UV = hxd_BufferFormat.make([new hxd_BufferInput("position",2,0),new hxd_BufferInput("uv",2,0)]);
	}
	return hxd_BufferFormat.XY_UV;
};
hxd_BufferFormat.get_INDEX16 = function() {
	if(hxd_BufferFormat.INDEX16 == null) {
		hxd_BufferFormat.INDEX16 = hxd_BufferFormat.make([new hxd_BufferInput("index",1,1)]);
		hxd_BufferFormat.INDEX16.strideBytes = 2;
	}
	return hxd_BufferFormat.INDEX16;
};
hxd_BufferFormat.get_INDEX32 = function() {
	if(hxd_BufferFormat.INDEX32 == null) {
		hxd_BufferFormat.INDEX32 = hxd_BufferFormat.make([new hxd_BufferInput("index",1,0)]);
	}
	return hxd_BufferFormat.INDEX32;
};
hxd_BufferFormat.fromID = function(uid) {
	var h = hxd_BufferFormat.ALL_FORMATS.h;
	var fl_h = h;
	var fl_keys = Object.keys(h);
	var fl_length = fl_keys.length;
	var fl_current = 0;
	while(fl_current < fl_length) {
		var fl = fl_h[fl_keys[fl_current++]];
		var _g = 0;
		while(_g < fl.length) {
			var f = fl[_g];
			++_g;
			if(f.uid == uid) {
				return f;
			}
		}
	}
	return null;
};
hxd_BufferFormat.make = function(inputs) {
	var names = [];
	var _g = 0;
	while(_g < inputs.length) {
		var b = inputs[_g];
		++_g;
		names.push(b.name);
	}
	var key = names.join("|");
	var arr = hxd_BufferFormat.ALL_FORMATS.h[key];
	if(arr == null) {
		arr = [];
		hxd_BufferFormat.ALL_FORMATS.h[key] = arr;
	}
	var _g = 0;
	while(_g < arr.length) {
		var fmt = arr[_g];
		++_g;
		var found = true;
		var _g1 = 0;
		var _g2 = inputs.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var _this = inputs[i];
			var b = fmt.inputs[i];
			if(!(_this.type == b.type && _this.name == b.name && _this.precision == b.precision)) {
				found = false;
				break;
			}
		}
		if(found) {
			return fmt;
		}
	}
	var fmt = new hxd_BufferFormat(inputs);
	arr.push(fmt);
	return fmt;
};
hxd_BufferFormat.float32to16 = function(v,denormalsAreZero) {
	if(denormalsAreZero == null) {
		denormalsAreZero = false;
	}
	var i = haxe_io_FPHelper.floatToI32(v);
	var sign = (i & -2147483648) >>> 16;
	var exp = (i & 2139095040) >>> 23;
	var bits = i & 8388607;
	if(exp > 112) {
		return sign | exp - 112 << 10 & 31744 | bits >> 13;
	}
	if(exp < 113 && exp > 101 && !denormalsAreZero) {
		return sign | (8384512 + bits >> 125 - exp) + 1 >> 1;
	}
	if(exp > 143) {
		return sign | 32767;
	}
	return 0;
};
hxd_BufferFormat.float32toS8 = function(v) {
	var i = Math.floor(v * 128);
	if(i >= 127) {
		return 127;
	}
	if(i <= -127) {
		return 128;
	}
	if(i >= 0) {
		return i;
	} else {
		return 127 + i | 128;
	}
};
hxd_BufferFormat.float32toU8 = function(v) {
	if(v < 0) {
		return 0;
	}
	if(v >= 1) {
		return 255;
	}
	return Math.floor(v * 256);
};
hxd_BufferFormat.prototype = {
	getInput: function(name) {
		var _g = 0;
		var _g1 = this.inputs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.name == name) {
				return i;
			}
		}
		return null;
	}
	,calculateInputOffset: function(name) {
		var offset = 0;
		var _g = 0;
		var _g1 = this.inputs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.name == name) {
				return offset;
			}
			offset += (i.type & 7) * hxd_Precision.SIZES[i.precision];
			if((offset & 3) != 0) {
				offset += 4 - (offset & 3);
			}
		}
		throw haxe_Exception.thrown("Input not found : " + name);
	}
	,resolveMapping: function(target) {
		var m = this.mappings == null ? null : this.mappings[target.uid];
		if(m != null) {
			return m;
		}
		m = [];
		var _g = 0;
		var _g1 = target.inputs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var found = false;
			var _g2 = 0;
			var _g3 = this.inputs;
			while(_g2 < _g3.length) {
				var i2 = _g3[_g2];
				++_g2;
				if(i2.name == i.name && i2.type == i.type) {
					m.push(hxd_BufferMapping._new(0,this.calculateInputOffset(i2.name),i2.precision));
					found = true;
					break;
				}
			}
			if(!found) {
				throw haxe_Exception.thrown("Missing buffer input '" + i.name + "'");
			}
		}
		if(this.mappings == null) {
			this.mappings = [];
		}
		this.mappings[target.uid] = m;
		return m;
	}
	,__class__: hxd_BufferFormat
};
var hxd_MultiFormat = function(formats) {
	this.mappings = [];
	this.uid = hxd_MultiFormat._UID++;
	this.formats = formats;
};
$hxClasses["hxd.MultiFormat"] = hxd_MultiFormat;
hxd_MultiFormat.__name__ = "hxd.MultiFormat";
hxd_MultiFormat.prototype = {
	makeMapping: function(format) {
		var m = [];
		var _g_current = 0;
		var _g_array = format.inputs;
		while(_g_current < _g_array.length) {
			var input = _g_array[_g_current++];
			var found = false;
			var match = null;
			var _g_current1 = 0;
			var _g_array1 = this.formats;
			while(_g_current1 < _g_array1.length) {
				var _g_value = _g_array1[_g_current1];
				var _g_key = _g_current1++;
				var idx = _g_key;
				var f = _g_value;
				var i = f.getInput(input.name);
				if(i != null) {
					match = i;
					if(i.type != input.type) {
						continue;
					}
					var offset = f.calculateInputOffset(i.name);
					m.push(hxd_BufferMapping._new(idx,offset,i.precision));
					found = true;
					break;
				}
			}
			if(!found) {
				if(match != null) {
					throw haxe_Exception.thrown("Shader buffer " + input.name + " was requested with " + (input.type == null ? "null" : hxd_InputFormat.toString(input.type)) + " but found with " + (match.type == null ? "null" : hxd_InputFormat.toString(match.type)));
				}
				throw haxe_Exception.thrown("Missing shader buffer " + input.name);
			}
		}
		this.mappings[format.uid] = m;
		return m;
	}
	,__class__: hxd_MultiFormat
};
var hxd_Charset = function() {
	var _gthis = this;
	this.map = new haxe_ds_IntMap();
	var _g = 0;
	while(_g < 94) {
		var i = _g++;
		_gthis.map.h[65281 + i] = 33 + i;
	}
	var _g = 192;
	var _g1 = 199;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 65;
	}
	var _g = 224;
	var _g1 = 231;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 97;
	}
	var _g = 200;
	var _g1 = 204;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 69;
	}
	var _g = 232;
	var _g1 = 236;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 101;
	}
	var _g = 204;
	var _g1 = 208;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 73;
	}
	var _g = 236;
	var _g1 = 240;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 105;
	}
	var _g = 210;
	var _g1 = 215;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 79;
	}
	var _g = 242;
	var _g1 = 247;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 111;
	}
	var _g = 217;
	var _g1 = 221;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 85;
	}
	var _g = 249;
	var _g1 = 253;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 117;
	}
	_gthis.map.h[199] = 67;
	_gthis.map.h[231] = 67;
	_gthis.map.h[208] = 68;
	_gthis.map.h[222] = 100;
	_gthis.map.h[209] = 78;
	_gthis.map.h[241] = 110;
	_gthis.map.h[221] = 89;
	_gthis.map.h[253] = 121;
	_gthis.map.h[255] = 121;
	_gthis.map.h[8364] = 69;
	_gthis.map.h[12288] = 32;
	_gthis.map.h[160] = 32;
	_gthis.map.h[171] = 34;
	_gthis.map.h[187] = 34;
	_gthis.map.h[8220] = 34;
	_gthis.map.h[8221] = 34;
	_gthis.map.h[8222] = 34;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8217] = 39;
	_gthis.map.h[180] = 39;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8249] = 60;
	_gthis.map.h[8250] = 62;
	_gthis.map.h[8211] = 45;
};
$hxClasses["hxd.Charset"] = hxd_Charset;
hxd_Charset.__name__ = "hxd.Charset";
hxd_Charset.getDefault = function() {
	if(hxd_Charset.inst == null) {
		hxd_Charset.inst = new hxd_Charset();
	}
	return hxd_Charset.inst;
};
hxd_Charset.prototype = {
	resolveChar: function(code,glyphs) {
		var c = code;
		while(c != null) {
			var g = glyphs.h[c];
			if(g != null) {
				return g;
			}
			c = this.map.h[c];
		}
		return null;
	}
	,isCJK: function(code) {
		if(!(code >= 11904 && code <= 42191 || code >= 63744 && code <= 64255)) {
			if(code >= 131072) {
				return code <= 262141;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isSpace: function(code) {
		if(code != 32) {
			return code == 12288;
		} else {
			return true;
		}
	}
	,isBreakChar: function(code) {
		if(!this.isSpace(code)) {
			return this.isCJK(code);
		} else {
			return true;
		}
	}
	,isComplementChar: function(code) {
		return hxd_Charset.complementChars.h.hasOwnProperty(code);
	}
	,__class__: hxd_Charset
};
var hxd_Cursor = $hxEnums["hxd.Cursor"] = { __ename__:true,__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"hxd.Cursor",toString:$estr}
	,Button: {_hx_name:"Button",_hx_index:1,__enum__:"hxd.Cursor",toString:$estr}
	,Move: {_hx_name:"Move",_hx_index:2,__enum__:"hxd.Cursor",toString:$estr}
	,TextInput: {_hx_name:"TextInput",_hx_index:3,__enum__:"hxd.Cursor",toString:$estr}
	,Hide: {_hx_name:"Hide",_hx_index:4,__enum__:"hxd.Cursor",toString:$estr}
	,Custom: ($_=function(custom) { return {_hx_index:5,custom:custom,__enum__:"hxd.Cursor",toString:$estr,__params__:function(){ return [this.custom];}}; },$_._hx_name="Custom",$_)
	,Callback: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"hxd.Cursor",toString:$estr,__params__:function(){ return [this.f];}}; },$_._hx_name="Callback",$_)
};
hxd_Cursor.__constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide,hxd_Cursor.Custom,hxd_Cursor.Callback];
hxd_Cursor.__empty_constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide];
var hxd_CustomCursor = function(frames,speed,offsetX,offsetY) {
	this.frames = frames;
	this.speed = speed;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.frameDelay = 1 / speed;
	this.frameTime = 0;
	this.frameIndex = 0;
};
$hxClasses["hxd.CustomCursor"] = hxd_CustomCursor;
hxd_CustomCursor.__name__ = "hxd.CustomCursor";
hxd_CustomCursor.prototype = {
	reset: function() {
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	,update: function(dt) {
		var newTime = this.frameTime + dt;
		var delay = this.frameDelay;
		var index = this.frameIndex;
		while(newTime >= delay) {
			newTime -= delay;
			++index;
		}
		this.frameTime = newTime;
		if(index >= this.frames.length) {
			index %= this.frames.length;
		}
		if(index != this.frameIndex) {
			this.frameIndex = index;
			return index;
		}
		return -1;
	}
	,__class__: hxd_CustomCursor
};
var hxd_DropFileEvent = function() { };
$hxClasses["hxd.DropFileEvent"] = hxd_DropFileEvent;
hxd_DropFileEvent.__name__ = "hxd.DropFileEvent";
var hxd_EventKind = $hxEnums["hxd.EventKind"] = { __ename__:true,__constructs__:null
	,EPush: {_hx_name:"EPush",_hx_index:0,__enum__:"hxd.EventKind",toString:$estr}
	,ERelease: {_hx_name:"ERelease",_hx_index:1,__enum__:"hxd.EventKind",toString:$estr}
	,EMove: {_hx_name:"EMove",_hx_index:2,__enum__:"hxd.EventKind",toString:$estr}
	,EOver: {_hx_name:"EOver",_hx_index:3,__enum__:"hxd.EventKind",toString:$estr}
	,EOut: {_hx_name:"EOut",_hx_index:4,__enum__:"hxd.EventKind",toString:$estr}
	,EWheel: {_hx_name:"EWheel",_hx_index:5,__enum__:"hxd.EventKind",toString:$estr}
	,EFocus: {_hx_name:"EFocus",_hx_index:6,__enum__:"hxd.EventKind",toString:$estr}
	,EFocusLost: {_hx_name:"EFocusLost",_hx_index:7,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyDown: {_hx_name:"EKeyDown",_hx_index:8,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyUp: {_hx_name:"EKeyUp",_hx_index:9,__enum__:"hxd.EventKind",toString:$estr}
	,EReleaseOutside: {_hx_name:"EReleaseOutside",_hx_index:10,__enum__:"hxd.EventKind",toString:$estr}
	,ETextInput: {_hx_name:"ETextInput",_hx_index:11,__enum__:"hxd.EventKind",toString:$estr}
	,ECheck: {_hx_name:"ECheck",_hx_index:12,__enum__:"hxd.EventKind",toString:$estr}
};
hxd_EventKind.__constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
hxd_EventKind.__empty_constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
var hxd_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
$hxClasses["hxd.Event"] = hxd_Event;
hxd_Event.__name__ = "hxd.Event";
hxd_Event.prototype = {
	__class__: hxd_Event
};
var hxd__$FloatBuffer_Float32Expand = {};
hxd__$FloatBuffer_Float32Expand._new = function(length) {
	return { pos : length, array : new Float32Array(new ArrayBuffer(length << 2))};
};
var hxd_Key = function() { };
$hxClasses["hxd.Key"] = hxd_Key;
hxd_Key.__name__ = "hxd.Key";
hxd_Key.isDown = function(code) {
	return hxd_Key.keyPressed[code] > 0;
};
hxd_Key.initialize = function() {
	if(hxd_Key.initDone) {
		hxd_Key.dispose();
	}
	hxd_Key.initDone = true;
	hxd_Key.keyPressed = [];
	hxd_Window.getInstance().addEventTarget(hxd_Key.onEvent);
};
hxd_Key.dispose = function() {
	if(hxd_Key.initDone) {
		hxd_Window.getInstance().removeEventTarget(hxd_Key.onEvent);
		hxd_Key.initDone = false;
		hxd_Key.keyPressed = [];
	}
};
hxd_Key.onEvent = function(e) {
	switch(e.kind._hx_index) {
	case 0:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = hxd_Timer.frameCount + 2;
		}
		break;
	case 1:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = -(hxd_Timer.frameCount + 2);
		}
		break;
	case 5:
		hxd_Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = hxd_Timer.frameCount + 2;
		break;
	case 8:
		if(!hxd_Key.ALLOW_KEY_REPEAT && hxd_Key.keyPressed[e.keyCode] > 0) {
			return;
		}
		hxd_Key.keyPressed[e.keyCode] = hxd_Timer.frameCount + 2;
		break;
	case 9:
		hxd_Key.keyPressed[e.keyCode] = -(hxd_Timer.frameCount + 2);
		break;
	case 10:
		hxd_Key.keyPressed = [];
		break;
	default:
	}
};
var hxd_Flags = $hxEnums["hxd.Flags"] = { __ename__:true,__constructs__:null
	,ReadOnly: {_hx_name:"ReadOnly",_hx_index:0,__enum__:"hxd.Flags",toString:$estr}
	,AlphaPremultiplied: {_hx_name:"AlphaPremultiplied",_hx_index:1,__enum__:"hxd.Flags",toString:$estr}
};
hxd_Flags.__constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied];
hxd_Flags.__empty_constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied];
var hxd_PixelsARGB = {};
hxd_PixelsARGB.fromPixels = function(p) {
	p.convert(hxd_PixelFormat.ARGB);
	return p;
};
var hxd_Pixels = function(width,height,bytes,format,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.width = width;
	this.height = height;
	this.bytes = bytes;
	this.set_innerFormat(format);
	this.offset = offset;
	var i = 0;
	if(i == null) {
		i = 0;
	}
	this.flags = i;
};
$hxClasses["hxd.Pixels"] = hxd_Pixels;
hxd_Pixels.__name__ = "hxd.Pixels";
hxd_Pixels.calcDataSize = function(width,height,format) {
	if(format._hx_index == 22) {
		return (height + 3 >> 2 << 2) * hxd_Pixels.calcStride(width,format);
	} else {
		return height * hxd_Pixels.calcStride(width,format);
	}
};
hxd_Pixels.calcStride = function(width,format) {
	var tmp;
	switch(format._hx_index) {
	case 3:case 21:
		tmp = 8;
		break;
	case 4:
		tmp = 16;
		break;
	case 5:
		tmp = 1;
		break;
	case 6:case 18:
		tmp = 2;
		break;
	case 7:
		tmp = 4;
		break;
	case 8:
		tmp = 2;
		break;
	case 9:case 19:
		tmp = 4;
		break;
	case 10:
		tmp = 8;
		break;
	case 11:
		tmp = 3;
		break;
	case 12:case 20:
		tmp = 6;
		break;
	case 13:
		tmp = 12;
		break;
	case 0:case 1:case 2:case 14:case 15:
		tmp = 4;
		break;
	case 16:
		tmp = 4;
		break;
	case 17:
		tmp = 4;
		break;
	case 22:
		var n = format.v;
		var blocks = width + 3 >> 2;
		if(n == 1 || n == 4) {
			return blocks << 1;
		}
		return blocks << 2;
	case 23:
		tmp = 2;
		break;
	case 24:
		tmp = 3;
		break;
	case 25:case 26:
		tmp = 4;
		break;
	}
	return width * tmp;
};
hxd_Pixels.alloc = function(width,height,format) {
	return new hxd_Pixels(width,height,new haxe_io_Bytes(new ArrayBuffer(hxd_Pixels.calcDataSize(width,height,format))),format);
};
hxd_Pixels.prototype = {
	set_innerFormat: function(fmt) {
		this.innerFormat = fmt;
		this.stride = hxd_Pixels.calcStride(this.width,fmt);
		this.dataSize = hxd_Pixels.calcDataSize(this.width,this.height,fmt);
		this.bytesPerPixel = hxd_Pixels.calcStride(1,fmt);
		return fmt;
	}
	,invalidFormat: function() {
		throw haxe_Exception.thrown("Unsupported format for this operation : " + Std.string(this.innerFormat));
	}
	,copyInner: function() {
		var old = this.bytes;
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.dataSize));
		this.bytes.blit(0,old,this.offset,this.dataSize);
		this.offset = 0;
		this.flags &= -1 - (1 << hxd_Flags.ReadOnly._hx_index);
	}
	,flipY: function() {
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if(this.stride % 4 != 0) {
			this.invalidFormat();
		}
		var _g = 0;
		var _g1 = this.height >> 1;
		while(_g < _g1) {
			var y = _g++;
			var p1 = y * this.stride + this.offset;
			var p2 = (this.height - 1 - y) * this.stride + this.offset;
			var _g2 = 0;
			var _g3 = this.stride >> 2;
			while(_g2 < _g3) {
				var x = _g2++;
				var a = this.bytes.getInt32(p1);
				var b = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	,convert: function(target) {
		if(this.innerFormat == target || Type.enumEq(this.innerFormat,target)) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		var bytes = this.bytes.b;
		var _g = this.innerFormat;
		switch(_g._hx_index) {
		case 0:
			switch(target._hx_index) {
			case 1:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var v = bytes[p + 1];
					bytes[p] = v;
					var v1 = bytes[p + 2];
					bytes[p + 1] = v1;
					var v2 = bytes[p + 3];
					bytes[p + 2] = v2;
					bytes[p + 3] = a;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target._hx_index) {
			case 0:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var b = bytes[p];
					var r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target._hx_index) {
			case 0:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p + 3];
					var v = bytes[p + 2];
					bytes[p + 3] = v;
					var v1 = bytes[p + 1];
					bytes[p + 2] = v1;
					var v2 = bytes[p];
					bytes[p + 1] = v2;
					bytes[p] = a;
				}
				break;
			case 1:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var b = bytes[p];
					var r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			case 5:
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height));
				var out = nbytes.b;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var v = bytes[i << 2];
					out[i] = v;
				}
				this.bytes = nbytes;
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 4:
			if(target._hx_index == 7) {
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.height * this.width * 4));
				var out = nbytes.b;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					nbytes.setFloat(i << 2,this.bytes.getFloat(i << 4));
				}
				this.bytes = nbytes;
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 7:
			switch(target._hx_index) {
			case 1:case 2:
				var fbytes = this.bytes;
				var p = 0;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var v = fbytes.getFloat(p) * 255 | 0;
					if(v < 0) {
						v = 0;
					} else if(v > 255) {
						v = 255;
					}
					bytes[p++] = v;
					bytes[p++] = v;
					bytes[p++] = v;
					bytes[p++] = 255;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 18:
			if(target._hx_index == 7) {
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
				var fbytes = this.bytes;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var nv = fbytes.getUInt16(i << 1);
					nbytes.setFloat(i << 2,nv / 65535.0);
				}
				this.bytes = nbytes;
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 22:
			if(target._hx_index == 22) {
				var b = target.v;
				var a = _g.v;
				if(a != b) {
					throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
				}
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	,dispose: function() {
		this.bytes = null;
	}
	,toString: function() {
		return "Pixels(" + this.width + "x" + this.height + " " + Std.string(this.innerFormat) + ")";
	}
	,__class__: hxd_Pixels
};
var hxd_SceneEvents = function($window) {
	this.defaultCursor = hxd_Cursor.Default;
	this.mouseCheckMove = true;
	this.enablePhysicalMouse = true;
	this.isOut = false;
	this.onOver = new hxd_Event(hxd_EventKind.EOver);
	this.onOut = new hxd_Event(hxd_EventKind.EOut);
	this.checkPos = new hxd_Event(hxd_EventKind.ECheck);
	this.focusLost = new hxd_Event(hxd_EventKind.EFocusLost);
	this.lastTouch = 0;
	this.mouseY = -1.;
	this.mouseX = -1.;
	this.overIndex = -1;
	this.scenes = [];
	this.pendingEvents = [];
	this.pushList = [];
	this.overList = [];
	this.overCandidates = [];
	if($window == null) {
		$window = hxd_Window.getInstance();
	}
	this.window = $window;
	$window.addEventTarget($bind(this,this.onEvent));
};
$hxClasses["hxd.SceneEvents"] = hxd_SceneEvents;
hxd_SceneEvents.__name__ = "hxd.SceneEvents";
hxd_SceneEvents.prototype = {
	onRemove: function(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(this.overIndex >= 0) {
			var index = this.overList.indexOf(i);
			if(index >= 0) {
				HxOverrides.remove(this.overList,i);
				if(index < this.overIndex) {
					this.overIndex--;
				}
			}
		} else {
			HxOverrides.remove(this.overList,i);
			this.selectCursor();
		}
		HxOverrides.remove(this.pushList,i);
	}
	,addScene: function(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	,blur: function() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	,checkFocus: function() {
		if(this.currentFocus == null) {
			return;
		}
		var s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	,emitEvent: function(event) {
		var oldX = event.relX;
		var oldY = event.relY;
		var overCandidateCount = 0;
		var handled = false;
		var checkOver = false;
		var fillOver = false;
		var checkPush = false;
		var cancelFocus = false;
		var updateCursor = false;
		this.overIndex = 0;
		switch(event.kind._hx_index) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		case 2:case 12:
			checkOver = true;
			fillOver = true;
			break;
		default:
		}
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var last = null;
			while(true) {
				var i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(fillOver) {
						var idx = this.overList.indexOf(i);
						if(idx == -1) {
							if(this.overCandidates.length == overCandidateCount) {
								this.overCandidates[overCandidateCount] = { i : i, s : s, x : event.relX, y : event.relY, z : event.relZ};
							} else {
								var info = this.overCandidates[overCandidateCount];
								info.i = i;
								info.s = s;
								info.x = event.relX;
								info.y = event.relY;
								info.z = event.relZ;
							}
							++overCandidateCount;
							this.overList.splice(this.overIndex++,0,i);
							updateCursor = true;
						} else {
							if(idx < this.overIndex) {
								do {
									this.overList[idx] = this.overList[idx + 1];
									++idx;
								} while(idx < this.overIndex);
								this.overList[this.overIndex] = i;
								updateCursor = true;
							} else if(idx > this.overIndex) {
								do {
									this.overList[idx] = this.overList[idx - 1];
									--idx;
								} while(idx > this.overIndex);
								this.overList[this.overIndex] = i;
								updateCursor = true;
							}
							this.overIndex++;
						}
						fillOver = event.propagate;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd_EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver) {
			if(this.overIndex < this.overList.length) {
				while(this.overIndex < this.overList.length) {
					var e = this.overList.pop();
					e.handleEvent(this.onOut);
				}
				updateCursor = true;
			}
			if(overCandidateCount != 0) {
				var i = 0;
				var ev = this.onOver;
				do {
					var info = this.overCandidates[i++];
					ev.relX = info.x;
					ev.relY = info.y;
					ev.relZ = info.z;
					if(info.s.isInteractiveVisible(info.i)) {
						info.i.handleEvent(ev);
					} else {
						HxOverrides.remove(this.overList,info.i);
					}
					info.i = null;
					info.s = null;
				} while(i < overCandidateCount);
			}
		}
		this.overIndex = -1;
		if(updateCursor) {
			this.selectCursor();
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd_EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd_EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd_EventKind.ERelease && this.pushList.length > 0) {
			var _g = 0;
			var _g1 = this.pushList;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i == null) {
					event.kind = hxd_EventKind.EReleaseOutside;
					this.dispatchListeners(event);
					event.kind = hxd_EventKind.ERelease;
				} else {
					var s = i.getInteractiveScene();
					if(s == null) {
						continue;
					}
					event.kind = hxd_EventKind.EReleaseOutside;
					s.dispatchEvent(event,i);
					event.kind = hxd_EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	,checkEvents: function() {
		var old = this.pendingEvents;
		var checkMoved = !this.mouseCheckMove;
		var checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			var _g = 0;
			while(_g < old.length) {
				var e = old[_g];
				++_g;
				var ox = e.relX;
				var oy = e.relY;
				switch(e.kind._hx_index) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 3:
					this.isOut = false;
					this.selectCursor();
					continue;
				case 4:
					this.isOut = true;
					if(this.overList.length > 0) {
						var i = this.overList.length - 1;
						while(i >= 0) {
							this.onOut.cancel = false;
							this.overList[i].handleEvent(this.onOut);
							HxOverrides.remove(this.overList,this.overList[i]);
							--i;
						}
						this.selectCursor();
					}
					continue;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = true;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(!e.propagate) {
						continue;
					}
					e.propagate = false;
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && !this.isOut && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	,updateCursor: function(i) {
		if(this.overList.indexOf(i) != -1) {
			this.selectCursor();
		}
	}
	,selectCursor: function() {
		var cur = this.defaultCursor;
		var _g = 0;
		var _g1 = this.overList;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.cursor != null) {
				cur = o.cursor;
				break;
			}
		}
		if(cur._hx_index == 6) {
			var f = cur.f;
			f();
		} else {
			hxd_System.setCursor(cur);
		}
	}
	,onEvent: function(e) {
		if(!this.enablePhysicalMouse && e.kind == hxd_EventKind.EMove) {
			return;
		}
		this.pendingEvents.push(e);
	}
	,dispatchListeners: function(event) {
		var ox = event.relX;
		var oy = event.relY;
		event.propagate = true;
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
	,__class__: hxd_SceneEvents
};
var hxd_Platform = $hxEnums["hxd.Platform"] = { __ename__:true,__constructs__:null
	,IOS: {_hx_name:"IOS",_hx_index:0,__enum__:"hxd.Platform",toString:$estr}
	,Android: {_hx_name:"Android",_hx_index:1,__enum__:"hxd.Platform",toString:$estr}
	,WebGL: {_hx_name:"WebGL",_hx_index:2,__enum__:"hxd.Platform",toString:$estr}
	,PC: {_hx_name:"PC",_hx_index:3,__enum__:"hxd.Platform",toString:$estr}
	,Console: {_hx_name:"Console",_hx_index:4,__enum__:"hxd.Platform",toString:$estr}
	,FlashPlayer: {_hx_name:"FlashPlayer",_hx_index:5,__enum__:"hxd.Platform",toString:$estr}
};
hxd_Platform.__constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
hxd_Platform.__empty_constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
var hxd_SystemValue = $hxEnums["hxd.SystemValue"] = { __ename__:true,__constructs__:null
	,IsTouch: {_hx_name:"IsTouch",_hx_index:0,__enum__:"hxd.SystemValue",toString:$estr}
	,IsWindowed: {_hx_name:"IsWindowed",_hx_index:1,__enum__:"hxd.SystemValue",toString:$estr}
	,IsMobile: {_hx_name:"IsMobile",_hx_index:2,__enum__:"hxd.SystemValue",toString:$estr}
};
hxd_SystemValue.__constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
hxd_SystemValue.__empty_constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
var hxd_Timer = function() { };
$hxClasses["hxd.Timer"] = hxd_Timer;
hxd_Timer.__name__ = "hxd.Timer";
hxd_Timer.update = function() {
	hxd_Timer.frameCount++;
	var newTime = HxOverrides.now() / 1000;
	hxd_Timer.elapsedTime = newTime - hxd_Timer.lastTimeStamp;
	hxd_Timer.lastTimeStamp = newTime;
	if(hxd_Timer.elapsedTime < hxd_Timer.maxDeltaTime) {
		var a = hxd_Timer.elapsedTime;
		hxd_Timer.currentDT = a + hxd_Timer.smoothFactor * (hxd_Timer.currentDT - a);
	} else {
		hxd_Timer.elapsedTime = 1 / hxd_Timer.wantedFPS;
	}
	hxd_Timer.dt = hxd_Timer.currentDT;
};
hxd_Timer.skip = function() {
	hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
};
var hxd_Window = function(canvas,globalEvents) {
	this.canLockMouse = true;
	this.discardMouseUp = -1;
	this.discardMouseCaptureEvent = true;
	this.useScreenPixels = js_Browser.get_supported();
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	this.mouseMode = hxd_impl_MouseMode.Absolute;
	var _gthis = this;
	var customCanvas = canvas != null;
	this.eventTargets = new haxe_ds_List();
	this.resizeEvents = new haxe_ds_List();
	this.dropTargets = new haxe_ds_List();
	if(!js_Browser.get_supported()) {
		this.canvasPos = { "width" : 0, "top" : 0, "left" : 0, "height" : 0};
		return;
	}
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw haxe_Exception.thrown("Missing canvas #webgl");
		}
		if(canvas.getAttribute("globalEvents") == "1") {
			globalEvents = true;
		}
	}
	this.canvas = canvas;
	this.propagateKeyEvents = globalEvents;
	var propagate = canvas.getAttribute("propagateKeyEvents");
	if(propagate != null) {
		this.propagateKeyEvents = propagate != "0" && propagate != "false";
	}
	this.focused = globalEvents;
	this.element = globalEvents ? window : canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	if(customCanvas) {
		canvas.addEventListener("mousemove",$bind(this,this.onMouseMove));
	} else {
		window.addEventListener("mousemove",$bind(this,this.onMouseMove));
	}
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("mouseleave",$bind(this,this.onMouseLeave));
	this.element.addEventListener("wheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	var _g = this;
	var b = false;
	var tmp = function() {
		_g.onFocus(b);
	};
	this.element.addEventListener("blur",tmp);
	var _g1 = this;
	var b1 = true;
	var tmp = function() {
		_g1.onFocus(b1);
	};
	this.element.addEventListener("focus",tmp);
	if(window.ResizeObserver != null) {
		this.observer = new ResizeObserver(function(e) {
			_gthis.checkResize();
		});
		this.observer.observe(canvas);
	}
	window.addEventListener("resize",$bind(this,this.checkResize));
	window.document.addEventListener("pointerlockchange",$bind(this,this.onPointerLockChange));
	canvas.addEventListener("contextmenu",function(e) {
		e.stopPropagation();
		if(e.button == 2) {
			e.preventDefault();
		}
		return false;
	});
	if(globalEvents) {
		canvas.addEventListener("mousedown",function(e) {
			_gthis.onMouseDown(e);
			e.stopPropagation();
			e.preventDefault();
		});
		this.element.addEventListener("contextmenu",function(e) {
			e.stopPropagation();
			e.preventDefault();
			return false;
		});
	} else {
		if(canvas.getAttribute("tabindex") == null) {
			canvas.setAttribute("tabindex","1");
		}
		canvas.style.outline = "none";
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
};
$hxClasses["hxd.Window"] = hxd_Window;
hxd_Window.__name__ = "hxd.Window";
hxd_Window.getInstance = function() {
	if(hxd_Window.inst == null) {
		hxd_Window.inst = new hxd_Window();
	}
	return hxd_Window.inst;
};
hxd_Window.prototype = {
	checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,onMouseModeChange: function(from,to) {
		return null;
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(e == et) {
				this.eventTargets.remove(e);
				break;
			}
		}
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,removeResizeEvent: function(f) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(e == f) {
				this.resizeEvents.remove(f);
				break;
			}
		}
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,setCurrent: function() {
		hxd_Window.inst = this;
	}
	,getPixelRatio: function() {
		if(this.useScreenPixels) {
			return window.devicePixelRatio;
		} else {
			return 1;
		}
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * this.getPixelRatio());
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * this.getPixelRatio());
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * this.getPixelRatio());
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * this.getPixelRatio());
	}
	,set_mouseMode: function(v) {
		if(Type.enumEq(v,this.mouseMode)) {
			return v;
		}
		var forced = this.onMouseModeChange(this.mouseMode,v);
		if(forced != null) {
			v = forced;
		}
		var target = this.pointerLockTarget = this.canvas != null ? this.canvas : window.document.documentElement;
		if(v == hxd_impl_MouseMode.Absolute) {
			if(target.ownerDocument.pointerLockElement == target) {
				target.ownerDocument.exitPointerLock();
			}
		} else if(this.canLockMouse) {
			if(target.ownerDocument.pointerLockElement != target) {
				target.requestPointerLock();
			}
		}
		return this.mouseMode = v;
	}
	,onPointerLockChange: function(e) {
		if(this.mouseMode != hxd_impl_MouseMode.Absolute && this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
			this.canLockMouse = false;
			this.set_mouseMode(hxd_impl_MouseMode.Absolute);
			this.canLockMouse = true;
		}
	}
	,onMouseDown: function(e) {
		if(this.mouseMode == hxd_impl_MouseMode.Absolute) {
			if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
				this.onMouseMove(e);
			}
		} else {
			if(this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
				this.pointerLockTarget.requestPointerLock();
				if(this.discardMouseCaptureEvent) {
					this.discardMouseUp = e.button;
					return;
				}
			}
			if(e.movementX != 0 || e.movementY != 0) {
				this.onMouseMove(e);
			}
		}
		var ev = new hxd_Event(hxd_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		if(this.discardMouseUp == e.button) {
			this.discardMouseUp = -1;
			return;
		}
		if(this.mouseMode == hxd_impl_MouseMode.Absolute ? e.clientX != this.curMouseX || e.clientY != this.curMouseY : e.movementX != 0 || e.movementY != 0) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseLeave: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EReleaseOutside,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseMove: function(e) {
		var _g = this.mouseMode;
		switch(_g._hx_index) {
		case 0:
			this.curMouseX = e.clientX;
			this.curMouseY = e.clientY;
			this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
			break;
		case 1:
			var callback = _g.callback;
			if(this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
				return;
			}
			var ev = new hxd_Event(hxd_EventKind.EMove,e.movementX,e.movementY);
			callback(ev);
			if(!ev.cancel && ev.propagate) {
				ev.cancel = false;
				ev.propagate = false;
				ev.relX = this.curMouseX;
				ev.relY = this.curMouseY;
				this.event(ev);
			}
			break;
		case 2:
			if(this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
				return;
			}
			this.curMouseX += e.movementX;
			this.curMouseY += e.movementY;
			this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
			break;
		}
	}
	,onMouseWheel: function(e) {
		e.preventDefault();
		var ev = new hxd_Event(hxd_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = e.deltaY / 120;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onKeyDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			switch(ev.keyCode) {
			case 8:case 9:case 16:case 17:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:
				e.preventDefault();
				break;
			default:
			}
			e.stopPropagation();
		}
	}
	,onKeyPress: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onFocus: function(b) {
		this.event(new hxd_Event(b ? hxd_EventKind.EFocus : hxd_EventKind.EFocusLost));
		this.focused = b;
	}
	,get_isFocused: function() {
		return this.focused;
	}
	,set_displayMode: function(m) {
		if(!js_Browser.get_supported()) {
			return m;
		}
		var doc = window.document;
		var elt = doc.documentElement;
		var fullscreen = m != hxd_DisplayMode.Windowed;
		if(doc.fullscreenElement == elt == fullscreen) {
			return hxd_DisplayMode.Windowed;
		}
		if(m != hxd_DisplayMode.Windowed) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
		return m;
	}
	,__class__: hxd_Window
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
var hxd_System = function() { };
$hxClasses["hxd.System"] = hxd_System;
hxd_System.__name__ = "hxd.System";
hxd_System.setLoop = function(f) {
	if(!hxd_System.loopInit) {
		hxd_System.loopInit = true;
		hxd_System.browserLoop();
	}
	hxd_System.loopFunc = f;
};
hxd_System.browserLoop = function() {
	if(js_Browser.get_supported()) {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		if(hxd_System.fpsLimit > 0) {
			window.setTimeout(function() {
				return rqf(hxd_System.browserLoop);
			},1000 / hxd_System.fpsLimit);
		} else {
			rqf(hxd_System.browserLoop);
		}
	} else {
		throw haxe_Exception.thrown("Cannot use browserLoop without Browser support nor defining nodejs + hxnodejs");
	}
	if(hxd_System.loopFunc != null) {
		hxd_System.loopFunc();
	}
};
hxd_System.start = function(callb) {
	callb();
};
hxd_System.setNativeCursor = function(c) {
	if(hxd_System.currentNativeCursor != null && Type.enumEq(c,hxd_System.currentNativeCursor)) {
		return;
	}
	hxd_System.currentNativeCursor = c;
	hxd_System.currentCustomCursor = null;
	var canvas = hxd_Window.getInstance().canvas;
	if(canvas != null) {
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "move";
			break;
		case 3:
			tmp = "text";
			break;
		case 4:
			tmp = "none";
			break;
		case 5:
			var cur = c.custom;
			if(cur.alloc == null) {
				cur.alloc = [];
				var _g = 0;
				var _g1 = cur.frames;
				while(_g < _g1.length) {
					var frame = _g1[_g];
					++_g;
					cur.alloc.push("url(\"" + frame.ctx.canvas.toDataURL("image/png") + "\") " + cur.offsetX + " " + cur.offsetY + ", default");
				}
			}
			if(cur.frames.length > 1) {
				hxd_System.currentCustomCursor = cur;
				cur.reset();
			}
			tmp = cur.alloc[cur.frameIndex];
			break;
		case 6:
			throw haxe_Exception.thrown("assert");
		}
		canvas.style.cursor = tmp;
	}
};
hxd_System.getDefaultFrameRate = function() {
	return 60.;
};
hxd_System.getValue = function(s) {
	switch(s._hx_index) {
	case 0:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	case 1:
		return true;
	case 2:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	}
};
hxd_System.updateCursor = function() {
	if(hxd_System.currentCustomCursor != null) {
		var change = hxd_System.currentCustomCursor.update(hxd_Timer.elapsedTime);
		if(change != -1) {
			var canvas = hxd_Window.getInstance().canvas;
			if(canvas != null) {
				canvas.style.cursor = hxd_System.currentCustomCursor.alloc[change];
			}
		}
	}
};
hxd_System.get_platform = function() {
	var ua = $global.navigator.userAgent.toLowerCase();
	if(ua.indexOf("android") >= 0) {
		return hxd_Platform.Android;
	} else if(ua.indexOf("ipad") >= 0 || ua.indexOf("iphone") >= 0 || ua.indexOf("ipod") >= 0) {
		return hxd_Platform.IOS;
	} else {
		return hxd_Platform.PC;
	}
};
var hxd_DisplayMode = $hxEnums["hxd.DisplayMode"] = { __ename__:true,__constructs__:null
	,Windowed: {_hx_name:"Windowed",_hx_index:0,__enum__:"hxd.DisplayMode",toString:$estr}
	,Borderless: {_hx_name:"Borderless",_hx_index:1,__enum__:"hxd.DisplayMode",toString:$estr}
	,Fullscreen: {_hx_name:"Fullscreen",_hx_index:2,__enum__:"hxd.DisplayMode",toString:$estr}
	,FullscreenResize: {_hx_name:"FullscreenResize",_hx_index:3,__enum__:"hxd.DisplayMode",toString:$estr}
};
hxd_DisplayMode.__constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
hxd_DisplayMode.__empty_constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
var hxd_earcut_EarNode = function() {
};
$hxClasses["hxd.earcut.EarNode"] = hxd_earcut_EarNode;
hxd_earcut_EarNode.__name__ = "hxd.earcut.EarNode";
hxd_earcut_EarNode.prototype = {
	__class__: hxd_earcut_EarNode
};
var hxd_earcut_Earcut = function() {
};
$hxClasses["hxd.earcut.Earcut"] = hxd_earcut_Earcut;
hxd_earcut_Earcut.__name__ = "hxd.earcut.Earcut";
hxd_earcut_Earcut.prototype = {
	triangulate_h2d_GPoint: function(points,holes) {
		var hasHoles = holes != null && holes.length > 0;
		var outerLen = hasHoles ? holes[0] : points.length;
		if(outerLen < 3) {
			return [];
		}
		var root = this.setLinkedList_triangulate_T(points,0,outerLen,true);
		if(holes != null) {
			root = this.eliminateHoles_triangulate_T(points,holes,root);
		}
		return this.triangulateNode(root,points.length > 80);
	}
	,eliminateHoles_triangulate_T: function(points,holes,root) {
		var queue = [];
		var _g = 0;
		var _g1 = holes.length;
		while(_g < _g1) {
			var i = _g++;
			var s = holes[i];
			var e = i == holes.length - 1 ? points.length : holes[i + 1];
			var node = this.setLinkedList_eliminateHoles_T(points,s,e,false);
			if(node == node.next) {
				node.steiner = true;
			}
			queue.push(this.getLeftmost(node));
		}
		queue.sort($bind(this,this.compareX));
		var _g = 0;
		while(_g < queue.length) {
			var q = queue[_g];
			++_g;
			this.eliminateHole(q,root);
			root = this.filterPoints(root,root.next);
		}
		return root;
	}
	,setLinkedList_eliminateHoles_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g = start;
			var _g1 = end;
			while(_g < _g1) {
				var i = _g++;
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
			}
		} else {
			var i = end - 1;
			while(i >= start) {
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
				--i;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,setLinkedList_triangulate_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g = start;
			var _g1 = end;
			while(_g < _g1) {
				var i = _g++;
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
			}
		} else {
			var i = end - 1;
			while(i >= start) {
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
				--i;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,triangulateNode: function(root,useZOrder) {
		this.triangles = [];
		root = this.filterPoints(root);
		if(useZOrder && root != null) {
			var maxX = root.x;
			this.minX = maxX;
			var maxY = root.y;
			this.minY = maxY;
			var p = root.next;
			while(p != root) {
				var x = p.x;
				var y = p.y;
				if(x < this.minX) {
					this.minX = x;
				}
				if(y < this.minY) {
					this.minY = y;
				}
				if(x > maxX) {
					maxX = x;
				}
				if(y > maxY) {
					maxY = y;
				}
				p = p.next;
			}
			var a = maxX - this.minX;
			var b = maxY - this.minY;
			this.size = a < b ? b : a;
			this.hasSize = true;
		} else {
			this.hasSize = false;
		}
		this.earcutLinked(root);
		var result = this.triangles;
		this.triangles = null;
		var n = this.allocated;
		if(this.cache != null) {
			while(n != this.cache) n = n.allocNext;
			n = n.allocNext;
		}
		while(n != null) {
			n.next = this.cache;
			this.cache = n;
			n = n.allocNext;
		}
		return result;
	}
	,eliminateHole: function(hole,root) {
		root = this.findHoleBridge(hole,root);
		if(root != null) {
			var b = this.splitPolygon(root,hole);
			this.filterPoints(b,b.next);
		}
	}
	,findHoleBridge: function(hole,root) {
		var p = root;
		var hx = hole.x;
		var hy = hole.y;
		var qx = -Infinity;
		var m = null;
		do {
			if(hy <= p.y && hy >= p.next.y) {
				var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
				if(x <= hx && x > qx) {
					qx = x;
					m = p.x < p.next.x ? p : p.next;
				}
			}
			p = p.next;
		} while(p != root);
		if(m == null) {
			return null;
		}
		var stop = m;
		var tanMin = Infinity;
		var tan;
		p = m.next;
		while(p != stop) {
			var tmp;
			if(hx >= p.x && p.x >= m.x) {
				var ax = hy < m.y ? hx : qx;
				var bx = m.x;
				var by = m.y;
				var cx = hy < m.y ? qx : hx;
				var px = p.x;
				var py = p.y;
				tmp = (cx - px) * (hy - py) - (ax - px) * (hy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (hy - py) >= 0 && (bx - px) * (hy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				var f = hy - p.y;
				tan = (f < 0 ? -f : f) / (hx - p.x);
				var tmp1;
				if(tan < tanMin || tan == tanMin && p.x > m.x) {
					var p1 = p.prev;
					var r = p.next;
					if((p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) < 0) {
						var r1 = p.next;
						if((hole.y - p.y) * (r1.x - hole.x) - (hole.x - p.x) * (r1.y - hole.y) >= 0) {
							var q = p.prev;
							tmp1 = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) >= 0;
						} else {
							tmp1 = false;
						}
					} else {
						var r2 = p.prev;
						if(!((hole.y - p.y) * (r2.x - hole.x) - (hole.x - p.x) * (r2.y - hole.y) < 0)) {
							var q1 = p.next;
							tmp1 = (q1.y - p.y) * (hole.x - q1.x) - (q1.x - p.x) * (hole.y - q1.y) < 0;
						} else {
							tmp1 = true;
						}
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					m = p;
					tanMin = tan;
				}
			}
			p = p.next;
		}
		return m;
	}
	,getLeftmost: function(node) {
		var p = node;
		var leftmost = node;
		do {
			if(p.x < leftmost.x) {
				leftmost = p;
			}
			p = p.next;
		} while(p != node);
		return leftmost;
	}
	,compareX: function(a,b) {
		if(a.x - b.x > 0) {
			return 1;
		} else {
			return -1;
		}
	}
	,filterPoints: function(start,end) {
		if(start == null) {
			return start;
		}
		if(end == null) {
			end = start;
		}
		var p = start;
		var again;
		do {
			again = false;
			var tmp;
			if(!p.steiner) {
				var p2 = p.next;
				if(!(p.x == p2.x && p.y == p2.y)) {
					var p1 = p.prev;
					var r = p.next;
					tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) == 0;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				end = p.prev;
				p = end;
				if(p == p.next) {
					return null;
				}
				again = true;
			} else {
				p = p.next;
			}
		} while(again || p != end);
		return end;
	}
	,earcutLinked: function(ear,pass) {
		if(pass == null) {
			pass = 0;
		}
		if(ear == null) {
			return;
		}
		if(pass == 0 && this.hasSize) {
			this.indexCurve(ear);
		}
		var stop = ear;
		var prev;
		var next;
		while(ear.prev != ear.next) {
			prev = ear.prev;
			next = ear.next;
			if(this.hasSize ? this.isEarHashed(ear) : this.isEar(ear)) {
				this.triangles.push(prev.i);
				this.triangles.push(ear.i);
				this.triangles.push(next.i);
				ear.next.prev = ear.prev;
				ear.prev.next = ear.next;
				if(ear.prevZ != null) {
					ear.prevZ.nextZ = ear.nextZ;
				}
				if(ear.nextZ != null) {
					ear.nextZ.prevZ = ear.prevZ;
				}
				ear = next.next;
				stop = next.next;
				continue;
			}
			ear = next;
			if(ear == stop) {
				switch(pass) {
				case 0:
					this.earcutLinked(this.filterPoints(ear),1);
					break;
				case 1:
					ear = this.cureLocalIntersections(ear);
					this.earcutLinked(ear,2);
					break;
				case 2:
					this.splitEarcut(ear);
					break;
				}
				break;
			}
		}
	}
	,isEar: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var p = ear.next.next;
		while(p != ear.prev) {
			var tmp;
			var ax = a.x;
			var ay = a.y;
			var bx = b.x;
			var by = b.y;
			var cx = c.x;
			var cy = c.y;
			var px = p.x;
			var py = p.y;
			if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.next;
		}
		return true;
	}
	,isEarHashed: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
		var minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
		var maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
		var maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
		var x = 32767 * (minTX - this.minX) / this.size | 0;
		var y = 32767 * (minTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var minZ = x | y << 1;
		var x = 32767 * (maxTX - this.minX) / this.size | 0;
		var y = 32767 * (maxTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var maxZ = x | y << 1;
		var p = ear.nextZ;
		while(p != null && p.z <= maxZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.nextZ;
		}
		p = ear.prevZ;
		while(p != null && p.z >= minZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.prevZ;
		}
		return true;
	}
	,cureLocalIntersections: function(start) {
		var p = start;
		do {
			var a = p.prev;
			var b = p.next.next;
			var tmp;
			var tmp1;
			var p2 = p.next;
			if((p.y - a.y) * (p2.x - p.x) - (p.x - a.x) * (p2.y - p.y) > 0 != (p.y - a.y) * (b.x - p.x) - (p.x - a.x) * (b.y - p.y) > 0 && (b.y - p2.y) * (a.x - b.x) - (b.x - p2.x) * (a.y - b.y) > 0 != (b.y - p2.y) * (p.x - b.x) - (b.x - p2.x) * (p.y - b.y) > 0) {
				var p1 = a.prev;
				var r = a.next;
				if((a.y - p1.y) * (r.x - a.x) - (a.x - p1.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p3 = b.prev;
				var r3 = b.next;
				if((b.y - p3.y) * (r3.x - b.x) - (b.x - p3.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				this.triangles.push(a.i);
				this.triangles.push(p.i);
				this.triangles.push(b.i);
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				var p4 = p.next;
				p4.next.prev = p4.prev;
				p4.prev.next = p4.next;
				if(p4.prevZ != null) {
					p4.prevZ.nextZ = p4.nextZ;
				}
				if(p4.nextZ != null) {
					p4.nextZ.prevZ = p4.prevZ;
				}
				start = b;
				p = start;
			}
			p = p.next;
		} while(p != start);
		return p;
	}
	,splitEarcut: function(start) {
		var a = start;
		do {
			var b = a.next.next;
			while(b != a.prev) {
				if(a.i != b.i && this.isValidDiagonal(a,b)) {
					var c = this.splitPolygon(a,b);
					a = this.filterPoints(a,a.next);
					c = this.filterPoints(c,c.next);
					this.earcutLinked(a);
					this.earcutLinked(c);
					return;
				}
				b = b.next;
			}
			a = a.next;
		} while(a != start);
	}
	,splitPolygon: function(a,b) {
		var i = a.i;
		var x = a.x;
		var y = a.y;
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var a2 = n;
		var i = b.i;
		var x = b.x;
		var y = b.y;
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var b2 = n;
		var an = a.next;
		var bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	}
	,isValidDiagonal: function(a,b) {
		if(!(a.x == b.x && a.y == b.y)) {
			var tmp;
			var tmp1;
			if(a.next.i != b.i && a.prev.i != b.i && !this.intersectsPolygon(a,b)) {
				var p = a.prev;
				var r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					var r = a.next;
					if((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r = a.prev;
					if(!((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) < 0)) {
						var q = a.next;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p = b.prev;
				var r = b.next;
				if((b.y - p.y) * (r.x - b.x) - (b.x - p.x) * (r.y - b.y) < 0) {
					var r = b.next;
					if((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) >= 0) {
						var q = b.prev;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r = b.prev;
					if(!((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) < 0)) {
						var q = b.next;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return this.middleInside(a,b);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,middleInside: function(a,b) {
		var p = a;
		var inside = false;
		var px = (a.x + b.x) / 2;
		var py = (a.y + b.y) / 2;
		do {
			if(p.y > py != p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
				inside = !inside;
			}
			p = p.next;
		} while(p != a);
		return inside;
	}
	,intersectsPolygon: function(a,b) {
		var p = a;
		do {
			var tmp;
			if(p.i != a.i && p.next.i != a.i && p.i != b.i && p.next.i != b.i) {
				var q1 = p.next;
				tmp = (q1.y - p.y) * (a.x - q1.x) - (q1.x - p.x) * (a.y - q1.y) > 0 != (q1.y - p.y) * (b.x - q1.x) - (q1.x - p.x) * (b.y - q1.y) > 0 && (b.y - a.y) * (p.x - b.x) - (b.x - a.x) * (p.y - b.y) > 0 != (b.y - a.y) * (q1.x - b.x) - (b.x - a.x) * (q1.y - b.y) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
			p = p.next;
		} while(p != a);
		return false;
	}
	,indexCurve: function(start) {
		var p = start;
		do {
			if(p.z < 0) {
				var x = 32767 * (p.x - this.minX) / this.size | 0;
				var y = 32767 * (p.y - this.minY) / this.size | 0;
				x = (x | x << 8) & 16711935;
				x = (x | x << 4) & 252645135;
				x = (x | x << 2) & 858993459;
				x = (x | x << 1) & 1431655765;
				y = (y | y << 8) & 16711935;
				y = (y | y << 4) & 252645135;
				y = (y | y << 2) & 858993459;
				y = (y | y << 1) & 1431655765;
				p.z = x | y << 1;
			}
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
		} while(p != start);
		p.prevZ.nextZ = null;
		p.prevZ = null;
		this.sortLinked(p);
	}
	,sortLinked: function(list) {
		var p;
		var q;
		var e;
		var tail;
		var numMerges;
		var pSize;
		var qSize;
		var inSize = 1;
		do {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;
			while(p != null) {
				++numMerges;
				q = p;
				pSize = 0;
				var _g = 0;
				var _g1 = inSize;
				while(_g < _g1) {
					var i = _g++;
					++pSize;
					q = q.nextZ;
					if(q == null) {
						break;
					}
				}
				qSize = inSize;
				while(pSize > 0 || qSize > 0 && q != null) {
					if(pSize == 0) {
						e = q;
						q = q.nextZ;
						--qSize;
					} else if(qSize == 0 || q == null) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else if(p.z <= q.z) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else {
						e = q;
						q = q.nextZ;
						--qSize;
					}
					if(tail != null) {
						tail.nextZ = e;
					} else {
						list = e;
					}
					e.prevZ = tail;
					tail = e;
				}
				p = q;
			}
			tail.nextZ = null;
			inSize *= 2;
		} while(numMerges > 1);
		return list;
	}
	,__class__: hxd_earcut_Earcut
};
var hxd_fmt_bfnt_FontParser = function() { };
$hxClasses["hxd.fmt.bfnt.FontParser"] = hxd_fmt_bfnt_FontParser;
hxd_fmt_bfnt_FontParser.__name__ = "hxd.fmt.bfnt.FontParser";
hxd_fmt_bfnt_FontParser.parse = function(bytes,path,resolveTile) {
	var tile = null;
	var font = new h2d_Font(null,0);
	var glyphs = font.glyphs;
	font.baseLine = 0;
	var _g = bytes.getInt32(0);
	switch(_g) {
	case 54938946:
		var bytes1 = new haxe_io_BytesInput(bytes);
		bytes1.set_position(bytes1.pos + 4);
		var pageCount = 0;
		while(bytes1.pos < bytes1.totlen) {
			var id = bytes1.readByte();
			var length = bytes1.readInt32();
			var pos = bytes1.pos;
			switch(id) {
			case 1:
				font.size = font.initSize = bytes1.readInt16();
				bytes1.set_position(bytes1.pos + 12);
				font.name = bytes1.readUntil(0);
				break;
			case 2:
				font.lineHeight = bytes1.readUInt16();
				font.baseLine = bytes1.readUInt16();
				bytes1.set_position(bytes1.pos + 4);
				pageCount = bytes1.readUInt16();
				if(pageCount != 1) {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 220, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
				break;
			case 3:
				var name = bytes1.readUntil(0);
				try {
					font.tilePath = name;
					tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),name]));
				} catch( _g1 ) {
					haxe_Log.trace("Warning: Could not find referenced font texture at \"" + name + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
					font.tilePath = new haxe_io_Path(path).file + ".png";
					tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
				}
				break;
			case 4:
				var count = length / 20 | 0;
				while(count > 0) {
					var cid = bytes1.readInt32();
					var t = tile.sub(bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readInt16(),bytes1.readInt16());
					var fc = new h2d_FontChar(t,bytes1.readInt16());
					glyphs.h[cid] = fc;
					bytes1.set_position(bytes1.pos + 2);
					--count;
				}
				break;
			case 5:
				var count1 = length / 10 | 0;
				while(count1 > 0) {
					var first = bytes1.readInt32();
					var key = bytes1.readInt32();
					var fc1 = glyphs.h[key];
					if(fc1 != null) {
						fc1.addKerning(first,bytes1.readInt16());
					} else {
						bytes1.set_position(bytes1.pos + 2);
					}
					--count1;
				}
				break;
			}
			bytes1.set_position(pos + length);
		}
		break;
	case 1414415938:
		return new hxd_fmt_bfnt_Reader(new haxe_io_BytesInput(bytes)).read(function(tp) {
			try {
				font.tilePath = tp;
				tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tp]));
			} catch( _g ) {
				haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tp + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				font.tilePath = new haxe_io_Path(path).file + ".png";
				tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
			}
			return tile;
		});
	case 1836597052:case 1852794428:
		var xml = Xml.parse(bytes.toString());
		var x = xml.firstElement();
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
		}
		var xml = x;
		if(haxe_xml__$Access_HasNodeAccess.resolve(xml,"info")) {
			var tmp = haxe_xml__$Access_NodeAccess.resolve(xml,"info");
			font.name = haxe_xml__$Access_AttribAccess.resolve(tmp,"face");
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"info"),"size");
			font.size = font.initSize = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"common"),"lineHeight");
			font.lineHeight = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"common"),"base");
			font.baseLine = Std.parseInt(tmp);
			var p = haxe_xml__$Access_NodeAccess.resolve(xml,"pages").elements();
			while(p.hasNext()) {
				var p1 = p.next();
				if(haxe_xml__$Access_AttribAccess.resolve(p1,"id") == "0") {
					var tilePath = haxe_xml__$Access_AttribAccess.resolve(p1,"file");
					try {
						font.tilePath = tilePath;
						tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]));
					} catch( _g1 ) {
						haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						font.tilePath = new haxe_io_Path(path).file + ".png";
						tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
					}
				} else {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 62, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
			}
			var chars = haxe_xml__$Access_NodeAccess.resolve(xml,"chars").elements();
			var c = chars;
			while(c.hasNext()) {
				var c1 = c.next();
				var t = tile.sub(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"y")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"width")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"height")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"xoffset")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"yoffset")));
				var fc = new h2d_FontChar(t,Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"xadvance")));
				var kerns = haxe_xml__$Access_NodeAccess.resolve(xml,"kernings").elements();
				var k = kerns;
				while(k.hasNext()) {
					var k1 = k.next();
					if(haxe_xml__$Access_AttribAccess.resolve(k1,"second") == haxe_xml__$Access_AttribAccess.resolve(c1,"id")) {
						fc.addKerning(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"first")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"amount")));
					}
				}
				var key = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"id"));
				glyphs.h[key] = fc;
			}
		} else {
			font.tilePath = new haxe_io_Path(path).file + ".png";
			tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
			font.name = haxe_xml__$Access_AttribAccess.resolve(xml,"family");
			var tmp = haxe_xml__$Access_AttribAccess.resolve(xml,"size");
			font.size = font.initSize = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(xml,"height");
			font.lineHeight = Std.parseInt(tmp);
			var kernings = [];
			var c = xml.elements();
			while(c.hasNext()) {
				var c1 = c.next();
				var r = haxe_xml__$Access_AttribAccess.resolve(c1,"rect").split(" ");
				var o = haxe_xml__$Access_AttribAccess.resolve(c1,"offset").split(" ");
				var t = tile.sub(Std.parseInt(r[0]),Std.parseInt(r[1]),Std.parseInt(r[2]),Std.parseInt(r[3]),Std.parseInt(o[0]),Std.parseInt(o[1]));
				var fc = new h2d_FontChar(t,Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"width")));
				var code = haxe_xml__$Access_AttribAccess.resolve(c1,"code");
				var code1 = StringTools.startsWith(code,"&#") ? Std.parseInt(HxOverrides.substr(code,2,code.length - 3)) : HxOverrides.cca(code,0);
				var k = c1.elements();
				while(k.hasNext()) {
					var k1 = k.next();
					var code2 = haxe_xml__$Access_AttribAccess.resolve(k1,"id");
					var next = StringTools.startsWith(code2,"&#") ? Std.parseInt(HxOverrides.substr(code2,2,code2.length - 3)) : HxOverrides.cca(code2,0);
					var adv = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"advance"));
					if(glyphs.h.hasOwnProperty(next)) {
						glyphs.h[next].addKerning(code1,adv);
					} else {
						kernings.push({ prev : code1, next : next, adv : adv});
					}
				}
				glyphs.h[code1] = fc;
			}
			var _g1 = 0;
			while(_g1 < kernings.length) {
				var k = kernings[_g1];
				++_g1;
				var g = glyphs.h[k.next];
				if(g == null) {
					continue;
				}
				g.addKerning(k.prev,k.adv);
			}
		}
		break;
	case 1868983913:
		var lines = bytes.toString().split("\n");
		var reg = new EReg(" *?([0-9a-zA-Z]+)=(\"[^\"]+\"|.+?)(?:[ \r]|$)","");
		var idx;
		var pageCount = 0;
		var _g1 = 0;
		while(_g1 < lines.length) {
			var line = lines[_g1];
			++_g1;
			idx = line.indexOf(" ");
			switch(HxOverrides.substr(line,0,idx)) {
			case "char":
				var id = 0;
				var x = 0;
				var y = 0;
				var width = 0;
				var height = 0;
				var xoffset = 0;
				var yoffset = 0;
				var xadvance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "height":
						var v = reg.matched(2);
						height = Std.parseInt(HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v);
						break;
					case "id":
						var v1 = reg.matched(2);
						id = Std.parseInt(HxOverrides.cca(v1,0) == 34 ? v1.substring(1,v1.length - 1) : v1);
						break;
					case "width":
						var v2 = reg.matched(2);
						width = Std.parseInt(HxOverrides.cca(v2,0) == 34 ? v2.substring(1,v2.length - 1) : v2);
						break;
					case "x":
						var v3 = reg.matched(2);
						x = Std.parseInt(HxOverrides.cca(v3,0) == 34 ? v3.substring(1,v3.length - 1) : v3);
						break;
					case "xadvance":
						var v4 = reg.matched(2);
						xadvance = Std.parseInt(HxOverrides.cca(v4,0) == 34 ? v4.substring(1,v4.length - 1) : v4);
						break;
					case "xoffset":
						var v5 = reg.matched(2);
						xoffset = Std.parseInt(HxOverrides.cca(v5,0) == 34 ? v5.substring(1,v5.length - 1) : v5);
						break;
					case "y":
						var v6 = reg.matched(2);
						y = Std.parseInt(HxOverrides.cca(v6,0) == 34 ? v6.substring(1,v6.length - 1) : v6);
						break;
					case "yoffset":
						var v7 = reg.matched(2);
						yoffset = Std.parseInt(HxOverrides.cca(v7,0) == 34 ? v7.substring(1,v7.length - 1) : v7);
						break;
					}
					var pos = reg.matchedPos();
					idx = pos.pos + pos.len;
				}
				var t = tile.sub(x,y,width,height,xoffset,yoffset);
				var fc = new h2d_FontChar(t,xadvance);
				glyphs.h[id] = fc;
				break;
			case "common":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "base":
						var v8 = reg.matched(2);
						font.baseLine = Std.parseInt(HxOverrides.cca(v8,0) == 34 ? v8.substring(1,v8.length - 1) : v8);
						break;
					case "lineHeight":
						var v9 = reg.matched(2);
						font.lineHeight = Std.parseInt(HxOverrides.cca(v9,0) == 34 ? v9.substring(1,v9.length - 1) : v9);
						break;
					case "pages":
						var v10 = reg.matched(2);
						pageCount = Std.parseInt(HxOverrides.cca(v10,0) == 34 ? v10.substring(1,v10.length - 1) : v10);
						if(pageCount != 1) {
							haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 153, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						}
						break;
					}
					var pos1 = reg.matchedPos();
					idx = pos1.pos + pos1.len;
				}
				break;
			case "info":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "face":
						var v11 = reg.matched(2);
						font.name = HxOverrides.cca(v11,0) == 34 ? v11.substring(1,v11.length - 1) : v11;
						break;
					case "size":
						var v12 = reg.matched(2);
						font.size = font.initSize = Std.parseInt(HxOverrides.cca(v12,0) == 34 ? v12.substring(1,v12.length - 1) : v12);
						break;
					}
					var pos2 = reg.matchedPos();
					idx = pos2.pos + pos2.len;
				}
				break;
			case "kerning":
				var first = 0;
				var second = 0;
				var advance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "amount":
						var v13 = reg.matched(2);
						advance = Std.parseInt(HxOverrides.cca(v13,0) == 34 ? v13.substring(1,v13.length - 1) : v13);
						break;
					case "first":
						var v14 = reg.matched(2);
						first = Std.parseInt(HxOverrides.cca(v14,0) == 34 ? v14.substring(1,v14.length - 1) : v14);
						break;
					case "second":
						var v15 = reg.matched(2);
						second = Std.parseInt(HxOverrides.cca(v15,0) == 34 ? v15.substring(1,v15.length - 1) : v15);
						break;
					}
					var pos3 = reg.matchedPos();
					idx = pos3.pos + pos3.len;
				}
				var fc1 = glyphs.h[second];
				if(fc1 != null) {
					fc1.addKerning(first,advance);
				}
				break;
			case "page":
				while(idx < line.length && reg.matchSub(line,idx)) {
					if(reg.matched(1) == "file") {
						var v16 = reg.matched(2);
						var tilePath = HxOverrides.cca(v16,0) == 34 ? v16.substring(1,v16.length - 1) : v16;
						try {
							font.tilePath = tilePath;
							tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]));
						} catch( _g2 ) {
							haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
							font.tilePath = new haxe_io_Path(path).file + ".png";
							tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
						}
					}
					var pos4 = reg.matchedPos();
					idx = pos4.pos + pos4.len;
				}
				break;
			}
		}
		break;
	default:
		var sign = _g;
		throw haxe_Exception.thrown("Unknown font signature " + StringTools.hex(sign,8));
	}
	if(glyphs.h[32] == null) {
		var value = new h2d_FontChar(tile.sub(0,0,0,0),font.size >> 1);
		glyphs.h[32] = value;
	}
	font.tile = tile;
	if(font.baseLine == 0) {
		font.baseLine = font.calcBaseLine();
	}
	var fallback = glyphs.h[65533];
	if(fallback == null) {
		fallback = glyphs.h[9633];
	}
	if(fallback == null) {
		fallback = glyphs.h[63];
	}
	if(fallback != null) {
		font.defaultChar = fallback;
	}
	return font;
};
var hxd_fmt_bfnt_Reader = function(i) {
	this.i = i;
};
$hxClasses["hxd.fmt.bfnt.Reader"] = hxd_fmt_bfnt_Reader;
hxd_fmt_bfnt_Reader.__name__ = "hxd.fmt.bfnt.Reader";
hxd_fmt_bfnt_Reader.prototype = {
	read: function(resolveTile) {
		if(this.i.readString(4) != "BFNT" || this.i.readByte() != 0) {
			throw haxe_Exception.thrown("Not a BFNT file!");
		}
		var font = null;
		var _g = this.i.readByte();
		if(_g == 1) {
			font = new h2d_Font(this.i.readString(this.i.readUInt16()),this.i.readInt16());
			font.tilePath = this.i.readString(this.i.readUInt16());
			var tile = font.tile = resolveTile(font.tilePath);
			font.lineHeight = this.i.readInt16();
			font.baseLine = this.i.readInt16();
			var defaultChar = this.i.readInt32();
			var id;
			while(true) {
				id = this.i.readInt32();
				if(!(id != 0)) {
					break;
				}
				var t = tile.sub(this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readInt16(),this.i.readInt16());
				var glyph = new h2d_FontChar(t,this.i.readInt16());
				font.glyphs.h[id] = glyph;
				if(id == defaultChar) {
					font.defaultChar = glyph;
				}
				var prevChar;
				while(true) {
					prevChar = this.i.readInt32();
					if(!(prevChar != 0)) {
						break;
					}
					glyph.addKerning(prevChar,this.i.readInt16());
				}
			}
		} else {
			var ver = _g;
			throw haxe_Exception.thrown("Unknown BFNT version: " + ver);
		}
		return font;
	}
	,__class__: hxd_fmt_bfnt_Reader
};
var hxd_fmt_hdr_Reader = function() { };
$hxClasses["hxd.fmt.hdr.Reader"] = hxd_fmt_hdr_Reader;
hxd_fmt_hdr_Reader.__name__ = "hxd.fmt.hdr.Reader";
hxd_fmt_hdr_Reader.decode = function(bytes,sRGB) {
	var f = new haxe_io_BytesInput(bytes);
	var width = 0;
	var height = 0;
	var keys_h = Object.create(null);
	while(true) {
		var line = f.readLine();
		if(line == "") {
			break;
		}
		if(HxOverrides.cca(line,0) == 35) {
			continue;
		}
		var nameValue = line.split("=");
		if(nameValue.length > 1) {
			keys_h[nameValue.shift()] = nameValue.join("=");
		}
	}
	var parts = f.readLine().split(" ");
	height = Std.parseInt(parts[1]);
	width = Std.parseInt(parts[3]);
	var gamma = keys_h["GAMMA"] == "1";
	var data = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 * 4));
	var exposure = 1.0;
	var exp = keys_h["EXPOSURE"];
	if(exp != null) {
		var exp1 = parseFloat(exp);
		if(exp1 < 1e-12 || exp1 < 1e12) {
			exposure = exp1;
		}
	}
	var gammaCorrect = sRGB ? 1 : 0.45454545454545453;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 256) {
		var e = _g1++;
		_g.push(Math.pow(e,gammaCorrect));
	}
	var gammaVals = _g;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 256) {
		var e = _g1++;
		_g.push(Math.pow(Math.pow(2,e - 128) / (256 * exposure),gammaCorrect));
	}
	var exps = _g;
	var _g = keys_h["FORMAT"];
	if(_g == null) {
		var fmt = _g;
		throw haxe_Exception.thrown("Unsupported HDR format " + fmt);
	} else if(_g == "32-bit_rle_rgbe") {
		var dataPos = f.pos;
		var scanLen = width * 4;
		var scanLine = new haxe_io_Bytes(new ArrayBuffer(scanLen));
		var widthBE = width >> 8 | (width & 255) << 8;
		var _g1 = 0;
		var _g2 = height;
		while(_g1 < _g2) {
			var y = _g1++;
			var h = bytes.getInt32(dataPos);
			if((h & 65535) != 514 || h >>> 16 != widthBE) {
				scanLine.blit(0,bytes,dataPos,width * 4);
				dataPos += width * 4;
			} else {
				dataPos += 4;
				var p = 0;
				var end = width * 4;
				while(p < end) {
					var len = bytes.b[dataPos++];
					if(len > 128) {
						len -= 128;
						scanLine.fill(p,len,bytes.b[dataPos++]);
					} else {
						scanLine.blit(p,bytes,dataPos,len);
						dataPos += len;
					}
					p += len;
				}
			}
			var pos = y * width * 16;
			var _g3 = 0;
			var _g4 = width;
			while(_g3 < _g4) {
				var x = _g3++;
				var e = exps[scanLine.b[x + width * 3]];
				data.setFloat(pos,gammaVals[scanLine.b[x]] * e);
				pos += 4;
				data.setFloat(pos,gammaVals[scanLine.b[x + width]] * e);
				pos += 4;
				data.setFloat(pos,gammaVals[scanLine.b[x + (width << 1)]] * e);
				pos += 4;
				data.setFloat(pos,1.0);
				pos += 4;
			}
		}
	} else {
		var fmt = _g;
		throw haxe_Exception.thrown("Unsupported HDR format " + fmt);
	}
	return { width : width, height : height, bytes : data, gamma : gamma};
};
var hxd_fs_FileEntry = function() { };
$hxClasses["hxd.fs.FileEntry"] = hxd_fs_FileEntry;
hxd_fs_FileEntry.__name__ = "hxd.fs.FileEntry";
hxd_fs_FileEntry.prototype = {
	getBytes: function() {
		return null;
	}
	,readBytes: function(out,outPos,pos,len) {
		throw haxe_Exception.thrown("readBytes() not implemented");
	}
	,fetchBytes: function(pos,len) {
		var bytes = hxd_fs_FileEntry.TMP_BYTES;
		if(bytes == null || bytes.length < len) {
			var allocSize = len + 65535 & -65536;
			bytes = new haxe_io_Bytes(new ArrayBuffer(allocSize));
			hxd_fs_FileEntry.TMP_BYTES = bytes;
		}
		this.readFull(bytes,pos,len);
		return bytes;
	}
	,readFull: function(bytes,pos,len) {
		if(this.readBytes(bytes,0,pos,len) < len) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
	}
	,getText: function() {
		return this.getBytes().toString();
	}
	,open: function() {
		return new hxd_fs_FileInput(this);
	}
	,load: function(onReady) {
		if(!this.get_isAvailable()) {
			throw haxe_Exception.thrown("load() not implemented");
		} else if(onReady != null) {
			onReady();
		}
	}
	,loadBitmap: function(onLoaded) {
		throw haxe_Exception.thrown("loadBitmap() not implemented");
	}
	,watch: function(onChanged) {
	}
	,get_isAvailable: function() {
		return true;
	}
	,get_size: function() {
		return 0;
	}
	,get_path: function() {
		throw haxe_Exception.thrown("path() not implemented");
	}
	,get_extension: function() {
		var idx = this.name.lastIndexOf(".");
		if(idx < 0) {
			return "";
		}
		return HxOverrides.substr(this.name,idx + 1,null).toLowerCase();
	}
	,__class__: hxd_fs_FileEntry
};
var hxd_fs_BytesFileEntry = function(path,bytes) {
	this.fullPath = path;
	this.name = path.split("/").pop();
	this.bytes = bytes;
};
$hxClasses["hxd.fs.BytesFileEntry"] = hxd_fs_BytesFileEntry;
hxd_fs_BytesFileEntry.__name__ = "hxd.fs.BytesFileEntry";
hxd_fs_BytesFileEntry.__super__ = hxd_fs_FileEntry;
hxd_fs_BytesFileEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	get_path: function() {
		return this.fullPath;
	}
	,getBytes: function() {
		return this.bytes;
	}
	,readBytes: function(out,outPos,pos,len) {
		if(pos + len > this.bytes.length) {
			len = this.bytes.length - pos;
		}
		if(len < 0) {
			len = 0;
		}
		out.blit(outPos,this.bytes,pos,len);
		return len;
	}
	,load: function(onReady) {
		haxe_Timer.delay(onReady,1);
	}
	,loadBitmap: function(onLoaded) {
		var mime;
		switch(haxe_io_Path.extension(this.fullPath).toLowerCase()) {
		case "gif":
			mime = "image/gif";
			break;
		case "jpeg":case "jpg":
			mime = "image/jpeg";
			break;
		case "png":
			mime = "image/png";
			break;
		default:
			throw haxe_Exception.thrown("Cannot determine image encoding, try adding an extension to the resource path");
		}
		var img = new Image();
		img.onload = function() {
			onLoaded(img);
		};
		var tmp = haxe_crypto_Base64.encode(this.bytes);
		img.src = "data:" + mime + ";base64," + tmp;
	}
	,get_size: function() {
		return this.bytes.length;
	}
	,__class__: hxd_fs_BytesFileEntry
});
var hxd_fs_FileSystem = function() { };
$hxClasses["hxd.fs.FileSystem"] = hxd_fs_FileSystem;
hxd_fs_FileSystem.__name__ = "hxd.fs.FileSystem";
hxd_fs_FileSystem.__isInterface__ = true;
hxd_fs_FileSystem.prototype = {
	__class__: hxd_fs_FileSystem
};
var hxd_fs_BytesFileSystem = function() {
};
$hxClasses["hxd.fs.BytesFileSystem"] = hxd_fs_BytesFileSystem;
hxd_fs_BytesFileSystem.__name__ = "hxd.fs.BytesFileSystem";
hxd_fs_BytesFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_BytesFileSystem.prototype = {
	getBytes: function(path) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,get: function(path) {
		var bytes = this.getBytes(path);
		if(bytes == null) {
			throw haxe_Exception.thrown("Resource not found '" + path + "'");
		}
		return new hxd_fs_BytesFileEntry(path,bytes);
	}
	,__class__: hxd_fs_BytesFileSystem
};
var hxd_fs_FileInput = function(entry) {
	this.nextReadPos = 0;
	this.cacheLen = 0;
	this.cachePos = 0;
	this.entry = entry;
};
$hxClasses["hxd.fs.FileInput"] = hxd_fs_FileInput;
hxd_fs_FileInput.__name__ = "hxd.fs.FileInput";
hxd_fs_FileInput.__super__ = haxe_io_Input;
hxd_fs_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	fetch: function(dataSize) {
		if(dataSize == null) {
			dataSize = 256;
		}
		var prev = this.cache;
		if(this.cache == null || this.cache.length < dataSize) {
			this.cache = hxd_fs_FileInput.PREFETCH_CACHE;
			if(this.cache != null && this.cache.length >= dataSize) {
				hxd_fs_FileInput.PREFETCH_CACHE = null;
			} else {
				this.cache = new haxe_io_Bytes(new ArrayBuffer(dataSize));
			}
		}
		var startPos = 0;
		if(this.cacheLen > 0) {
			startPos = this.cacheLen;
			dataSize -= this.cacheLen;
			this.cache.blit(0,prev,this.cachePos,this.cacheLen);
		}
		var read = this.entry.readBytes(this.cache,startPos,this.nextReadPos,dataSize);
		this.cachePos = 0;
		this.cacheLen = startPos + read;
		this.nextReadPos += read;
		if(this.cacheLen == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
	}
	,skip: function(nbytes) {
		if(this.cacheLen > 0) {
			var a = this.cacheLen;
			var k = a > nbytes ? nbytes : a;
			this.cachePos += k;
			this.cacheLen -= k;
			nbytes -= k;
		}
		this.nextReadPos += nbytes;
	}
	,readByte: function() {
		if(this.cacheLen == 0) {
			this.fetch();
		}
		var b = this.cache.b[this.cachePos++];
		this.cacheLen--;
		return b;
	}
	,readBytes: function(b,pos,len) {
		var tot = 0;
		if(len < 256 && this.cacheLen < len) {
			this.fetch();
		}
		if(this.cacheLen > 0) {
			var b1 = this.cacheLen;
			var k = len > b1 ? b1 : len;
			b.blit(pos,this.cache,this.cachePos,k);
			this.cachePos += k;
			this.cacheLen -= k;
			len -= k;
			if(len == 0) {
				return k;
			}
			pos += k;
			tot += k;
		}
		if(len > 0) {
			var k = this.entry.readBytes(b,pos,this.nextReadPos,len);
			this.nextReadPos += k;
			tot += k;
		}
		return tot;
	}
	,close: function() {
		if(this.cache != null && (hxd_fs_FileInput.PREFETCH_CACHE == null || hxd_fs_FileInput.PREFETCH_CACHE.length < this.cache.length)) {
			hxd_fs_FileInput.PREFETCH_CACHE = this.cache;
		}
		this.cache = null;
		this.cacheLen = 0;
	}
	,__class__: hxd_fs_FileInput
});
var hxd_fs_LoadedBitmap = {};
hxd_fs_LoadedBitmap.toBitmap = function(this1) {
	var bmp = new hxd_BitmapData(this1.width,this1.height);
	bmp.ctx.drawImage(this1,0,0);
	return bmp;
};
var hxd_fs_NotFound = function(path) {
	this.path = path;
};
$hxClasses["hxd.fs.NotFound"] = hxd_fs_NotFound;
hxd_fs_NotFound.__name__ = "hxd.fs.NotFound";
hxd_fs_NotFound.prototype = {
	toString: function() {
		return "Resource file not found '" + this.path + "'";
	}
	,__class__: hxd_fs_NotFound
};
var hxd_fs_SourceLoader = function() { };
$hxClasses["hxd.fs.SourceLoader"] = hxd_fs_SourceLoader;
hxd_fs_SourceLoader.__name__ = "hxd.fs.SourceLoader";
hxd_fs_SourceLoader.isActive = function() {
	return hxd_fs_SourceLoader.RELOAD_LFS.length > 0;
};
hxd_fs_SourceLoader.resolve = function(path) {
	var _g = 0;
	var _g1 = hxd_fs_SourceLoader.RELOAD_LFS;
	while(_g < _g1.length) {
		var fs = _g1[_g];
		++_g;
		try {
			return fs.get(path);
		} catch( _g2 ) {
			if(!((haxe_Exception.caught(_g2).unwrap()) instanceof hxd_fs_NotFound)) {
				throw _g2;
			}
		}
	}
	return null;
};
var hxd_impl_AllocPos = function() {
	this.stack = [];
	var curStack = haxe_CallStack.callStack();
	curStack.shift();
	var _g = 0;
	while(_g < curStack.length) {
		var s = curStack[_g];
		++_g;
		switch(s._hx_index) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			var file = s.file;
			var line = s.line;
			var idx = file.indexOf("\\std/");
			if(idx > 0) {
				file = HxOverrides.substr(file,idx + 5,null);
			}
			var pos = file + ":" + line;
			this.stack.push(pos);
			if(this.position == null) {
				var p = file.indexOf("/");
				var pack = p < 0 ? "" : HxOverrides.substr(file,0,p);
				if(hxd_impl_AllocPos.ENGINE_PACKAGES.indexOf(pack) < 0) {
					this.position = pos;
				}
			}
			break;
		case 3:
			var cl = s.classname;
			var meth = s.method;
			break;
		case 4:
			break;
		}
	}
	if(this.position == null) {
		this.position = this.stack[0];
	}
};
$hxClasses["hxd.impl.AllocPos"] = hxd_impl_AllocPos;
hxd_impl_AllocPos.__name__ = "hxd.impl.AllocPos";
hxd_impl_AllocPos.make = function() {
	if(!hxd_impl_AllocPos.ENABLED) {
		return null;
	}
	return new hxd_impl_AllocPos();
};
hxd_impl_AllocPos.prototype = {
	__class__: hxd_impl_AllocPos
};
var hxd_impl_Allocator = function() {
};
$hxClasses["hxd.impl.Allocator"] = hxd_impl_Allocator;
hxd_impl_Allocator.__name__ = "hxd.impl.Allocator";
hxd_impl_Allocator.get = function() {
	if(hxd_impl_Allocator.inst == null) {
		hxd_impl_Allocator.inst = new hxd_impl_Allocator();
	}
	return hxd_impl_Allocator.inst;
};
hxd_impl_Allocator.prototype = {
	toBufferFlags: function(flags) {
		switch(flags) {
		case 0:
			return [h3d_BufferFlag.Dynamic];
		case 1:
			return null;
		case 2:
			return [h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.Dynamic];
		case 3:
			return [h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.ReadWriteBuffer];
		case 4:
			return [h3d_BufferFlag.UniformBuffer];
		}
	}
	,allocBuffer: function(vertices,format,flags) {
		if(flags == null) {
			flags = 0;
		}
		return new h3d_Buffer(vertices,format,this.toBufferFlags(flags));
	}
	,ofFloats: function(v,format,flags) {
		if(flags == null) {
			flags = 0;
		}
		var nvert = Math.ceil(v.pos / format.stride);
		return this.ofSubFloats(v,nvert,format,flags);
	}
	,ofSubFloats: function(v,vertices,format,flags) {
		if(flags == null) {
			flags = 0;
		}
		var b = this.allocBuffer(vertices,format,flags);
		b.uploadFloats(v,0,vertices);
		return b;
	}
	,disposeBuffer: function(b) {
		b.dispose();
	}
	,allocIndexBuffer: function(count) {
		return h3d_Indexes._new(count);
	}
	,ofIndexes: function(ib,length) {
		if(length == null) {
			length = -1;
		}
		if(length < 0 && ib != null) {
			length = ib.length;
		}
		var idx = this.allocIndexBuffer(length);
		h3d_Indexes.uploadIndexes(idx,ib,0,length);
		return idx;
	}
	,disposeIndexBuffer: function(i) {
		i.dispose();
	}
	,onContextLost: function() {
	}
	,__class__: hxd_impl_Allocator
};
var hxd_impl_AsyncLoader = function() { };
$hxClasses["hxd.impl.AsyncLoader"] = hxd_impl_AsyncLoader;
hxd_impl_AsyncLoader.__name__ = "hxd.impl.AsyncLoader";
hxd_impl_AsyncLoader.__isInterface__ = true;
hxd_impl_AsyncLoader.prototype = {
	__class__: hxd_impl_AsyncLoader
};
var hxd_impl_MouseMode = $hxEnums["hxd.impl.MouseMode"] = { __ename__:true,__constructs__:null
	,Absolute: {_hx_name:"Absolute",_hx_index:0,__enum__:"hxd.impl.MouseMode",toString:$estr}
	,Relative: ($_=function(callback,restorePos) { return {_hx_index:1,callback:callback,restorePos:restorePos,__enum__:"hxd.impl.MouseMode",toString:$estr,__params__:function(){ return [this.callback,this.restorePos];}}; },$_._hx_name="Relative",$_)
	,AbsoluteUnbound: ($_=function(restorePos) { return {_hx_index:2,restorePos:restorePos,__enum__:"hxd.impl.MouseMode",toString:$estr,__params__:function(){ return [this.restorePos];}}; },$_._hx_name="AbsoluteUnbound",$_)
};
hxd_impl_MouseMode.__constructs__ = [hxd_impl_MouseMode.Absolute,hxd_impl_MouseMode.Relative,hxd_impl_MouseMode.AbsoluteUnbound];
hxd_impl_MouseMode.__empty_constructs__ = [hxd_impl_MouseMode.Absolute];
var hxd_res__$Any_SingleFileSystem = function(path,bytes) {
	hxd_fs_BytesFileSystem.call(this);
	this.path = path;
	this.bytes = bytes;
};
$hxClasses["hxd.res._Any.SingleFileSystem"] = hxd_res__$Any_SingleFileSystem;
hxd_res__$Any_SingleFileSystem.__name__ = "hxd.res._Any.SingleFileSystem";
hxd_res__$Any_SingleFileSystem.__super__ = hxd_fs_BytesFileSystem;
hxd_res__$Any_SingleFileSystem.prototype = $extend(hxd_fs_BytesFileSystem.prototype,{
	getBytes: function(p) {
		if(p == this.path) {
			return this.bytes;
		} else {
			return null;
		}
	}
	,__class__: hxd_res__$Any_SingleFileSystem
});
var hxd_res_Resource = function(entry) {
	this.entry = entry;
};
$hxClasses["hxd.res.Resource"] = hxd_res_Resource;
hxd_res_Resource.__name__ = "hxd.res.Resource";
hxd_res_Resource.prototype = {
	toString: function() {
		return this.entry.get_path();
	}
	,watch: function(onChanged) {
		if(hxd_res_Resource.LIVE_UPDATE) {
			this.entry.watch(onChanged);
		}
	}
	,__class__: hxd_res_Resource
};
var hxd_res_Any = function(loader,entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = loader;
};
$hxClasses["hxd.res.Any"] = hxd_res_Any;
hxd_res_Any.__name__ = "hxd.res.Any";
hxd_res_Any.fromBytes = function(path,bytes) {
	var fs = new hxd_res__$Any_SingleFileSystem(path,bytes);
	return new hxd_res_Loader(fs).load(path);
};
hxd_res_Any.__super__ = hxd_res_Resource;
hxd_res_Any.prototype = $extend(hxd_res_Resource.prototype,{
	toTile: function() {
		return this.toImage().toTile();
	}
	,toImage: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Image);
	}
	,__class__: hxd_res_Any
});
var hxd_res_BitmapFont = function(entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = hxd_res_Loader.currentInstance;
};
$hxClasses["hxd.res.BitmapFont"] = hxd_res_BitmapFont;
hxd_res_BitmapFont.__name__ = "hxd.res.BitmapFont";
hxd_res_BitmapFont.__super__ = hxd_res_Resource;
hxd_res_BitmapFont.prototype = $extend(hxd_res_Resource.prototype,{
	toFont: function() {
		if(this.font == null) {
			this.font = hxd_fmt_bfnt_FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveTile));
		}
		return this.font;
	}
	,resolveTile: function(path) {
		return this.loader.load(path).toTile();
	}
	,__class__: hxd_res_BitmapFont
});
var hxd_res_DefaultFont = function() { };
$hxClasses["hxd.res.DefaultFont"] = hxd_res_DefaultFont;
hxd_res_DefaultFont.__name__ = "hxd.res.DefaultFont";
hxd_res_DefaultFont.get = function() {
	var engine = h3d_Engine.CURRENT;
	var fnt = engine.resCache.h[hxd_res_DefaultFont.__id__];
	if(fnt == null) {
		var BYTES = hxd_res_Any.fromBytes("hxd/res/defaultFont.png",haxe_Unserializer.run("s3176:iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAACPBJREFUeJztnelypDoMRp2p%:6v3PNjhrlCLX1aLIPBPlWppI03bCG0QOfn8:m0zbr8KupnS9FDqRKAzUOhAvBRfqO:tfrSZ86H:ET79o6Rhc%JzzNSD7Xn:XyEH9RPtP4X:6GDDj6ttR:Hb62d9pmX8b487StA4:DFlup5z5MSWS%tL:f6eG4BXDppGQdtApJEtPm0zkf427Oo1fAxtfO2hDIruGXCLgnAD:jNyzSsKxa18yBphyqQ1jqwBN1zHmgcU3V3jHui9xaArkS0%XzTohOX%jvGauzvjMrlUJXuqSeV07G0ekgTovWS1t61vr0CQAez7nkj7uFIELJqmdN7RWvzil7hnnXV5qLOzSMAmlcQub9ZRuEsaNoq0w5RZbN0rye1ASzplWyAiGEXQVK3kZOdRcgy9:FLoRogI02WNc7rRQw3jzsZAfWB7skR44%3jdo6Wv2qfr4rFuUCZlftrT1jjpezSih4b75ClQDMvrizz%82uA1wMCqsKvUv3YO045rxma2vjY3mpPUvuV1WKDzbLtqfNu9:AjA6tl69QM3Zn1Wfl1M8G:CUW4s6b%sWIEXWtM:omNeXrnaDRm:OyIsE1UOfQ1gCwMOLdFCqWnj8Grl5nsjVakRjHMj1DgnEcQvw%OV0AE0wGisfqTKrbBYrZ4BiB:T4ldE8dPsMxU2oEWgZZtoAyMCq2GxtLlWCFbEB%PGIYWv1kxECq0%TbDKITjpirVr9SW2zC:skqqKdUp%QwwbILKwlgZk2mkBlmUVgPPOI3IbL0GwASY2PiMdbPrfVF6:vVctIq5SoVqNdxtrvWXt1:EguYHVL:ZV4Q8F781%KVwD25r8UagTyYE4TjkllmfrU4udtI%XZdrRcm5c1T%3cPXjq9RqEYTewIrau1a%ODVSBomgeL4cLudedG%H2pah4KBQx8gSnWMC:8AvDKwS0fXU5n59Uf7gAXA1dfG1TtM1Bm2ZtKi%PCGaVlpXKrf67ngeI%uFXoW1WdvNH0ztuV3vNBvAOrC30wR0LG7kX0:p3MjoCqPYfiQNI3BK%BEhq31vfYtS5UkN5lCD%NGWMSBxAWyyeyKkAJYc2Z6JrfqpvGYF0IzxqNWoDoPrSeNJ8POMgtJg76rtSEyDNErGzUF5F3ZOq9wI2D%VtbuBsaFfkNGwBGMtUmy3BjUAtxs3x3LOk8mi7zWB6Xw7leCNlb%LRXkrk%wEOpESIlezxlvM%uSWuzQXNx1Ofjqd5Aah:qW5PGDfbjpZzRCGlbwZ5T0TqMHMVoLgCP56Nj0fqo7mhLOeMGoDPx4wE0sW64mRmXLSDaCZvxPjSeNnAGKx:hxcw8%a3Zkc7tTqjyWgbs:4d3w8wW:7AC42l3zF:dH9H9SGedwO9rmEEz4nMpCXuznFoSS5tf9x9e24ByFjqodKAQio6EjfP9C8duzLHoZ0r8oD%LzRyAZY1XN2umux8n0L3OkeygcdnDzMYTSvQvc47G7g4q3xL2EqE8jhbAN6H9YDJ6TaxBeCduJNy3AjkrghySay8QXOU84lZSQ8plj:ioYuIG%axvLUrcoRxHHGHXelgKzkTWSxtLK:7whM8UaGLzs3qJ7P5IxNI0axh%hbAgxhWMGJ01M%KVKIASXQcipVR7MEz524XboQNoKVwPZPNhkpRjD5yRdM53B0c0qKDvE4X9PVw78JYWPc7usEo9cm1TAa0%R:hh44n1UXz1sjaB0dbJATdGoB:R1Dv:c4DGktSez33TNqW96MZtVo:R53sPLQxvGseCWu7y2d7Kji70MgQRUIwM5nNb%1bc8HyK%MAHiMtq2q5ypaOS39rdTz9jMaac4kg87eDpSsp4%bx:iS3UZLOqMQPM44Y3jGuSoCVabERyaCsj:90qs7TG1soWePZbICViWharvnSgrfTwYsz0gjckvUApHcDOdwa9waDvIGjCFZ:2vwzfVeGj7W%qs4ns0ettbMASJvG:WfJ%JAGHOVvI6GSxtMEUfNENK%FH%NtNaz1qzif7B79mcC2AdbG8zVxyNqMtrGkTQqZWmHUqvJjDJg%BZ9Rf552I8qtY%a:jUMnEG3j9V1RvWgUryfqFyXql1etX2aP:vGER8JWCCLdxhME4OlMbWTdLQCRhA%qX1WegVrZEbtjCjQjsDnKM200Y8nLjDaAx%WdVgg8:zfQY%1620Q8grcxpRDcfQvwMN2ivYm7s4GSRkGZLuRvV5T3AP1tAe08q8qtY38KJo4Ejgglbxh3awCJQyL35l:AjAKwN:5CKozAqpRm7zibBBUCMDJFi:p5GlMKcJUbGAm4aIkdlPCpttK9xz1RxMhzAdVCkDmnE5H:GURPXLta7ypHcz248%GLWR6Q%cL7ZdHRVOddWHPt1VRWX6O1mERXuNt6HmBmooGXnlB178MX3vIr5nhCejkUbf7VhgyalyWwngcjqsorxxg5xy%oDeDZ:Du0Qub%2aP6M%XVfSFK90D6ihjranoC2pUgUVVe0VdUw2bmeEKyASx1OwvWfQ7dPqi1XlFe1Vd0nbu1C:%HEeEObuSH:LyRKzSW6QZKvjDXDNKxqvIsR19a:624vKKvW9Zy5nTw5swQO2zGbODmDNdmpWwBmJ%hNo7n7WAJ5L703FN4DD:Sr3RcK6uar0XVnHvHUbHeDqadawaLFA3jbTwW6tH2aC%5oqgfLXYRGcOab5SKOVvz8sY75AneZATyQd:qyt1ByFjkGoCrR6u8gXLtc2tn:51qD22s7Pwi5Z5jEryNtS6jy6U5qfS8HZwFTWp0ogWdj3Wu0nmPWJ8K3HO62gvoul:dhKbBPPWmp:fdwBXwXNGa8TY92ruBzVG%GpoqnUXtp9CeCdza4JvZLhDqyqb3hT8RRDtH5VmyavKKREn0XCW1f3WiDKWmpTpf7GTQc:F6OpCdC3guJdp5C8CzkTY9JAg8Ekh:bxaAPxVMf28WgP7XMMrWAovwhO8I2gxkC8DibAFYnC0Ai6OFgjeL4Pmm0M2L0dzAzSJY2cDNy:E8ELJ5MdsLWJwtAIuzBWBxtgAszhaAxdkCsDi:AYnqZwd25SoPAAAAAElFTkSuQmCC"));
		var DESC = hxd_res_Any.fromBytes("hxd/res/defaultFont.fnt",haxe_Unserializer.run("s14030:PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPEZvbnQgc2l6ZT0iMTIiIGZhbWlseT0iUGl4ZWwgT3BlcmF0b3IiIGhlaWdodD0iMTYiIHN0eWxlPSJSZWd1bGFyIj4KIDxDaGFyIHdpZHRoPSI0IiBvZmZzZXQ9IjAgMTMiIHJlY3Q9IjEgMTIgMCAwIiBjb2RlPSIgIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjIgMyAxIDkiIGNvZGU9IiEiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNCAzIDMgMyIgY29kZT0iJnF1b3Q7Ii8%CiA8Q2hhciB3aWR0aD0iOCIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjggMyA2IDkiIGNvZGU9IiMiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMiIgcmVjdD0iMTUgMSA1IDEzIiBjb2RlPSIkIi8%CiA8Q2hhciB3aWR0aD0iOSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjIxIDMgNyA5IiBjb2RlPSIlIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjI5IDMgNSA5IiBjb2RlPSImYW1wOyIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSA0IiByZWN0PSIzNSAzIDEgMyIgY29kZT0iJyIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSIzNyAzIDMgOSIgY29kZT0iKCIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSI0MSAzIDMgOSIgY29kZT0iKSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI0NSAzIDUgNSIgY29kZT0iKiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI1MSA1IDUgNSIgY29kZT0iKyIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAxMiIgcmVjdD0iNTcgMTEgMiAzIiBjb2RlPSIsIi8%CiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDgiIHJlY3Q9IjYwIDcgNCAxIiBjb2RlPSItIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDEyIiByZWN0PSI2NSAxMSAxIDEiIGNvZGU9Ii4iLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjcgMyAzIDkiIGNvZGU9Ii8iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzEgMyA1IDkiIGNvZGU9IjAiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzcgMyAzIDkiIGNvZGU9IjEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODEgMyA1IDkiIGNvZGU9IjIiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODcgMyA1IDkiIGNvZGU9IjMiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOTMgMyA1IDkiIGNvZGU9IjQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOTkgMyA1IDkiIGNvZGU9IjUiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTA1IDMgNSA5IiBjb2RlPSI2Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjExMSAzIDUgOSIgY29kZT0iNyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMTcgMyA1IDkiIGNvZGU9IjgiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSAxNSA1IDkiIGNvZGU9IjkiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNiIgcmVjdD0iNyAxNyAxIDciIGNvZGU9IjoiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNiIgcmVjdD0iOSAxNyAyIDkiIGNvZGU9IjsiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNiIgcmVjdD0iMTIgMTcgMyA1IiBjb2RlPSImbHQ7Ii8%CiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDciIHJlY3Q9IjE2IDE4IDQgMyIgY29kZT0iPSIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA2IiByZWN0PSIyMSAxNyAzIDUiIGNvZGU9Ij4iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjUgMTUgNSA5IiBjb2RlPSI:Ii8%CiA8Q2hhciB3aWR0aD0iOSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjMxIDE1IDcgOSIgY29kZT0iQCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIzOSAxNSA1IDkiIGNvZGU9IkEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNDUgMTUgNSA5IiBjb2RlPSJCIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjUxIDE1IDUgOSIgY29kZT0iQyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI1NyAxNSA1IDkiIGNvZGU9IkQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjMgMTUgNSA5IiBjb2RlPSJFIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjY5IDE1IDUgOSIgY29kZT0iRiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI3NSAxNSA1IDkiIGNvZGU9IkciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODEgMTUgNSA5IiBjb2RlPSJIIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9Ijg3IDE1IDEgOSIgY29kZT0iSSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI4OSAxNSA1IDkiIGNvZGU9IkoiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOTUgMTUgNSA5IiBjb2RlPSJLIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEwMSAxNSA1IDkiIGNvZGU9IkwiLz4KIDxDaGFyIHdpZHRoPSI5IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTA3IDE1IDcgOSIgY29kZT0iTSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMTUgMTUgNSA5IiBjb2RlPSJOIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEyMSAxNSA1IDkiIGNvZGU9Ik8iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSAyNyA1IDkiIGNvZGU9IlAiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNyAyNyA1IDkiIGNvZGU9IlEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTMgMjcgNSA5IiBjb2RlPSJSIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjE5IDI3IDUgOSIgY29kZT0iUyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyNSAyNyA1IDkiIGNvZGU9IlQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMzEgMjcgNSA5IiBjb2RlPSJVIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjM3IDI3IDUgOSIgY29kZT0iViIvPgogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA0IiByZWN0PSI0MyAyNyA3IDkiIGNvZGU9IlciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNTEgMjcgNSA5IiBjb2RlPSJYIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjU3IDI3IDUgOSIgY29kZT0iWSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI2MyAyNyA1IDkiIGNvZGU9IloiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjkgMjcgMyA5IiBjb2RlPSJbIi8%CiA8Q2hhciB3aWR0aD0iNSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjczIDI3IDMgOSIgY29kZT0iXCIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSI3NyAyNyAzIDkiIGNvZGU9Il0iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODEgMjcgNSAzIiBjb2RlPSJeIi8%CiA8Q2hhciB3aWR0aD0iNSIgb2Zmc2V0PSIwIDE0IiByZWN0PSI4NyAzNyA1IDEiIGNvZGU9Il8iLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNCIgcmVjdD0iOTMgMjcgMiAyIiBjb2RlPSJgIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9Ijk2IDI5IDUgNyIgY29kZT0iYSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMDIgMjcgNSA5IiBjb2RlPSJiIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjEwOCAyOSA1IDciIGNvZGU9ImMiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTE0IDI3IDUgOSIgY29kZT0iZCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMjAgMjkgNSA3IiBjb2RlPSJlIi8%CiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEgMzkgNSA5IiBjb2RlPSJmIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjcgNDEgNSA5IiBjb2RlPSJnIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEzIDM5IDUgOSIgY29kZT0iaCIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSA0IiByZWN0PSIxOSAzOSAxIDkiIGNvZGU9ImkiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjEgMzkgNSAxMSIgY29kZT0iaiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyNyAzOSA1IDkiIGNvZGU9ImsiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iMzMgMzkgMSA5IiBjb2RlPSJsIi8%CiA8Q2hhciB3aWR0aD0iOSIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjM1IDQxIDcgNyIgY29kZT0ibSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI0MyA0MSA1IDciIGNvZGU9Im4iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNDkgNDEgNSA3IiBjb2RlPSJvIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjU1IDQxIDUgOSIgY29kZT0icCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI2MSA0MSA1IDkiIGNvZGU9InEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNjcgNDEgNSA3IiBjb2RlPSJyIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjczIDQxIDUgNyIgY29kZT0icyIvPgogPENoYXIgd2lkdGg9IjYiIG9mZnNldD0iMSA1IiByZWN0PSI3OSA0MCA1IDgiIGNvZGU9InQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iODUgNDEgNSA3IiBjb2RlPSJ1Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjkxIDQxIDUgNyIgY29kZT0idiIvPgogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA2IiByZWN0PSI5NyA0MSA3IDciIGNvZGU9InciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iMTA1IDQxIDUgNyIgY29kZT0ieCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMTEgNDEgNSA5IiBjb2RlPSJ5Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjExNyA0MSA1IDciIGNvZGU9InoiLz4KIDxDaGFyIHdpZHRoPSI2IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSA1NCA0IDkiIGNvZGU9InsiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iNiA1NCAxIDkiIGNvZGU9InwiLz4KIDxDaGFyIHdpZHRoPSI2IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOCA1NCA0IDkiIGNvZGU9In0iLz4KIDxDaGFyIHdpZHRoPSI4IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTMgNTQgNiAyIiBjb2RlPSJ%Ii8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjIwIDU2IDEgOSIgY29kZT0iwqEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjIgNTQgNSAxMSIgY29kZT0iwqIiLz4KIDxDaGFyIHdpZHRoPSI4IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjggNTQgNiA5IiBjb2RlPSLCoyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIzNSA1NCA1IDkiIGNvZGU9IsKlIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjQxIDU0IDEgOSIgY29kZT0iwqYiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNDMgNTQgMyAxIiBjb2RlPSLCqCIvPgogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA0IiByZWN0PSI0NyA1NCA3IDkiIGNvZGU9IsKpIi8%CiA8Q2hhciB3aWR0aD0iOCIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjU1IDU2IDYgNSIgY29kZT0iwqsiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgOCIgcmVjdD0iNjIgNTggNSAzIiBjb2RlPSLCrCIvPgogPENoYXIgd2lkdGg9IjYiIG9mZnNldD0iMSA0IiByZWN0PSI2OCA1NCA0IDQiIGNvZGU9IsKwIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjczIDU2IDUgNyIgY29kZT0iwrEiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzkgNTQgMiAyIiBjb2RlPSLCtCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI4MiA1NiA1IDkiIGNvZGU9IsK1Ii8%CiA8Q2hhciB3aWR0aD0iOCIgb2Zmc2V0PSIxIDQiIHJlY3Q9Ijg4IDU0IDcgOSIgY29kZT0iwrYiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgOCIgcmVjdD0iOTYgNTggMSAxIiBjb2RlPSLCtyIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMCAxMyIgcmVjdD0iOTggNjMgMyAyIiBjb2RlPSLCuCIvPgogPENoYXIgd2lkdGg9IjgiIG9mZnNldD0iMSA2IiByZWN0PSIxMDIgNTYgNiA1IiBjb2RlPSLCuyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMDkgNTYgNSA5IiBjb2RlPSLCvyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSIxMTUgNTEgNSAxMiIgY29kZT0iw4AiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iMTIxIDUxIDUgMTIiIGNvZGU9IsOBIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjEgNjcgNSAxMiIgY29kZT0iw4IiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iNyA2NyA2IDEyIiBjb2RlPSLDgyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAyIiByZWN0PSIxNCA2OCA1IDExIiBjb2RlPSLDhCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAwIiByZWN0PSIyMCA2NiA1IDEzIiBjb2RlPSLDhSIvPgogPENoYXIgd2lkdGg9IjExIiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjYgNzAgOSA5IiBjb2RlPSLDhiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIzNiA3MCA1IDExIiBjb2RlPSLDhyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI0MiA2NyA1IDEyIiBjb2RlPSLDiCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI0OCA2NyA1IDEyIiBjb2RlPSLDiSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI1NCA2NyA1IDEyIiBjb2RlPSLDiiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAyIiByZWN0PSI2MCA2OCA1IDExIiBjb2RlPSLDiyIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAxIiByZWN0PSI2NiA2NyAyIDEyIiBjb2RlPSLDjCIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSAxIiByZWN0PSI2OSA2NyAyIDEyIiBjb2RlPSLDjSIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAxIiByZWN0PSI3MiA2NyAzIDEyIiBjb2RlPSLDjiIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAyIiByZWN0PSI3NiA2OCAzIDExIiBjb2RlPSLDjyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMCA0IiByZWN0PSI4MCA3MCA2IDkiIGNvZGU9IsOQIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9Ijg3IDY3IDYgMTIiIGNvZGU9IsORIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9Ijk0IDY3IDUgMTIiIGNvZGU9IsOSIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjEwMCA2NyA1IDEyIiBjb2RlPSLDkyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSIxMDYgNjcgNSAxMiIgY29kZT0iw5QiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iMTEyIDY3IDYgMTIiIGNvZGU9IsOVIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDIiIHJlY3Q9IjExOSA2OCA1IDExIiBjb2RlPSLDliIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxIDg3IDUgNSIgY29kZT0iw5ciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjAgNCIgcmVjdD0iNyA4NSA3IDkiIGNvZGU9IsOYIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjE1IDgyIDUgMTIiIGNvZGU9IsOZIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjIxIDgyIDUgMTIiIGNvZGU9IsOaIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjI3IDgyIDUgMTIiIGNvZGU9IsObIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDIiIHJlY3Q9IjMzIDgzIDUgMTEiIGNvZGU9IsOcIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjM5IDgyIDUgMTIiIGNvZGU9IsOdIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjQ1IDg1IDUgOSIgY29kZT0iw54iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNTEgODUgNSA5IiBjb2RlPSLDnyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI1NyA4NCA1IDEwIiBjb2RlPSLDoCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI2MyA4NCA1IDEwIiBjb2RlPSLDoSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI2OSA4NCA1IDEwIiBjb2RlPSLDoiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI3NSA4NCA2IDEwIiBjb2RlPSLDoyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI4MiA4NSA1IDkiIGNvZGU9IsOkIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDIiIHJlY3Q9Ijg4IDgzIDUgMTEiIGNvZGU9IsOlIi8%CiA8Q2hhciB3aWR0aD0iMTEiIG9mZnNldD0iMSA2IiByZWN0PSI5NCA4NyA5IDciIGNvZGU9IsOmIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjEwNCA4NyA1IDkiIGNvZGU9IsOnIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjExMCA4NCA1IDEwIiBjb2RlPSLDqCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSIxMTYgODQgNSAxMCIgY29kZT0iw6kiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iMSA5NyA1IDEwIiBjb2RlPSLDqiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI3IDk4IDUgOSIgY29kZT0iw6siLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgMyIgcmVjdD0iMTMgOTcgMiAxMCIgY29kZT0iw6wiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgMyIgcmVjdD0iMTYgOTcgMiAxMCIgY29kZT0iw60iLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgMyIgcmVjdD0iMTkgOTcgMyAxMCIgY29kZT0iw64iLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNCIgcmVjdD0iMjMgOTggMyA5IiBjb2RlPSLDryIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyNyA5OCA2IDkiIGNvZGU9IsOwIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjM0IDk3IDYgMTAiIGNvZGU9IsOxIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjQxIDk3IDUgMTAiIGNvZGU9IsOyIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjQ3IDk3IDUgMTAiIGNvZGU9IsOzIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjUzIDk3IDUgMTAiIGNvZGU9IsO0Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjU5IDk3IDYgMTAiIGNvZGU9IsO1Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjY2IDk4IDUgOSIgY29kZT0iw7YiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNzIgMTAwIDUgNSIgY29kZT0iw7ciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjAgNiIgcmVjdD0iNzggMTAwIDcgNyIgY29kZT0iw7giLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iODYgOTcgNSAxMCIgY29kZT0iw7kiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iOTIgOTcgNSAxMCIgY29kZT0iw7oiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iOTggOTcgNSAxMCIgY29kZT0iw7siLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTA0IDk4IDUgOSIgY29kZT0iw7wiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iMTEwIDk3IDUgMTIiIGNvZGU9IsO9Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjExNiA5OCA1IDExIiBjb2RlPSLDviIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxIDExMCA1IDExIiBjb2RlPSLDvyIvPgo8L0ZvbnQ%Cg"));
		var bmp = new hxd_res_BitmapFont(DESC.entry);
		bmp.loader = BYTES.loader;
		fnt = bmp.toFont();
		engine.resCache.set(hxd_res_DefaultFont,fnt);
	}
	return fnt;
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(o.__params__) {
				s = s + "\t";
				var params = o.__params__();
				var _g = 0;
				var _g1 = params.length;
				while(true) {
					if(!(_g < _g1)) {
						break;
					}
					var i = (function($this) {
						var $r;
						_g = _g + 1;
						$r = _g - 1;
						return $r;
					}(this));
					params[i] = js_Boot.__string_rec(params[i],s);
				}
				return (n == null ? "null" : "" + n) + "(" + params.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var hxd_res_Embed = function() { };
$hxClasses["hxd.res.Embed"] = hxd_res_Embed;
hxd_res_Embed.__name__ = "hxd.res.Embed";
var hxd_res_ImageFormat = {};
hxd_res_ImageFormat.getName = function(this1) {
	switch(this1) {
	case 0:
		return "JPG";
	case 1:
		return "PNG";
	case 2:
		return "GIF";
	case 3:
		return "TGA";
	case 4:
		return "DDS";
	case 5:
		return "RAW";
	case 6:
		return "HDR";
	}
};
var hxd_res_ImageInfoFlag = $hxEnums["hxd.res.ImageInfoFlag"] = { __ename__:true,__constructs__:null
	,IsCube: {_hx_name:"IsCube",_hx_index:0,__enum__:"hxd.res.ImageInfoFlag",toString:$estr}
	,Dxt10Header: {_hx_name:"Dxt10Header",_hx_index:1,__enum__:"hxd.res.ImageInfoFlag",toString:$estr}
};
hxd_res_ImageInfoFlag.__constructs__ = [hxd_res_ImageInfoFlag.IsCube,hxd_res_ImageInfoFlag.Dxt10Header];
hxd_res_ImageInfoFlag.__empty_constructs__ = [hxd_res_ImageInfoFlag.IsCube,hxd_res_ImageInfoFlag.Dxt10Header];
var hxd_res_ImageInfo = function() {
	this.layerCount = 1;
	this.mipOffset = 0;
	this.mipLevels = 1;
	this.height = 0;
	this.width = 0;
	this.flags = 0;
};
$hxClasses["hxd.res.ImageInfo"] = hxd_res_ImageInfo;
hxd_res_ImageInfo.__name__ = "hxd.res.ImageInfo";
hxd_res_ImageInfo.prototype = {
	__class__: hxd_res_ImageInfo
};
var hxd_res_Image = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Image"] = hxd_res_Image;
hxd_res_Image.__name__ = "hxd.res.Image";
hxd_res_Image.customCheckInfo = function(i) {
};
hxd_res_Image.setupTextureFlags = function(tex) {
};
hxd_res_Image.__super__ = hxd_res_Resource;
hxd_res_Image.prototype = $extend(hxd_res_Resource.prototype,{
	getInfo: function() {
		if(this.inf != null) {
			return this.inf;
		}
		this.inf = new hxd_res_ImageInfo();
		var f = this.entry.open();
		f.fetch(256);
		var head;
		try {
			head = f.readUInt16();
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				head = 0;
			} else {
				throw _g;
			}
		}
		switch(head) {
		case 16163:
			this.inf.dataFormat = 6;
			while(f.readLine() != "") {
			}
			var parts = f.readLine().split(" ");
			this.inf.pixelFormat = hxd_PixelFormat.RGBA32F;
			this.inf.height = Std.parseInt(parts[1]);
			this.inf.width = Std.parseInt(parts[3]);
			break;
		case 17476:
			this.inf.dataFormat = 4;
			f.skip(10);
			this.inf.height = f.readInt32();
			this.inf.width = f.readInt32();
			f.skip(8);
			this.inf.mipLevels = f.readInt32();
			f.skip(48);
			var caps = f.readInt32();
			var fourCC = f.readInt32();
			var bpp = f.readInt32();
			var rMask = f.readInt32();
			var gMask = f.readInt32();
			var bMask = f.readInt32();
			var aMask = f.readInt32();
			var caps2 = f.readInt32();
			var cubes = f.readInt32();
			if((cubes & 65024) == 65024) {
				this.inf.flags |= 1 << hxd_res_ImageInfoFlag.IsCube._hx_index;
			}
			switch(fourCC & 16777215) {
			case 0:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					switch(bpp) {
					case 16:
						if(rMask == 65535) {
							if(gMask == 0) {
								if(bMask == 0) {
									if(aMask == 0) {
										this.inf.pixelFormat = hxd_PixelFormat.R16U;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
						} else {
							throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
						}
						break;
					case 32:
						switch(rMask) {
						case 255:
							if(gMask == 65280) {
								if(bMask == 16711680) {
									if(aMask == -16777216) {
										this.inf.pixelFormat = hxd_PixelFormat.RGBA;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						case 65535:
							if(gMask == -65536) {
								if(bMask == 0) {
									if(aMask == 0) {
										this.inf.pixelFormat = hxd_PixelFormat.RG16U;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						case 16711680:
							if(gMask == 65280) {
								if(bMask == 255) {
									if(aMask == -16777216) {
										this.inf.pixelFormat = hxd_PixelFormat.BGRA;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						default:
							throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
						}
						break;
					default:
						throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
					}
				}
				break;
			case 36:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RGBA16U;
				}
				break;
			case 111:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.R16F;
				}
				break;
			case 112:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RG16F;
				}
				break;
			case 113:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RGBA16F;
				}
				break;
			case 114:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.R32F;
				}
				break;
			case 115:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RG32F;
				}
				break;
			case 116:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RGBA32F;
				}
				break;
			case 4805697:
				var v = (fourCC >>> 24) - 48;
				var tmp;
				switch(v) {
				case 1:
					tmp = hxd_PixelFormat.S3TC(4);
					break;
				case 2:
					tmp = hxd_PixelFormat.S3TC(5);
					break;
				default:
					tmp = null;
				}
				this.inf.pixelFormat = tmp;
				break;
			case 5527620:
				var dxt = (fourCC >>> 24) - 48;
				var tmp;
				switch(dxt) {
				case 1:
					tmp = hxd_PixelFormat.S3TC(1);
					break;
				case 2:case 3:
					tmp = hxd_PixelFormat.S3TC(2);
					break;
				case 4:case 5:
					tmp = hxd_PixelFormat.S3TC(3);
					break;
				default:
					tmp = null;
				}
				this.inf.pixelFormat = tmp;
				break;
			default:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				}
			}
			if(this.inf.pixelFormat == null) {
				var fid = String.fromCodePoint((fourCC & 255)) + String.fromCodePoint((fourCC >> 8 & 255)) + String.fromCodePoint((fourCC >> 16 & 255)) + String.fromCodePoint((fourCC >>> 24));
				if((fourCC & 255) == fourCC) {
					fid = "" + fourCC;
				}
				throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported 4CC " + fid);
			}
			break;
		case 18759:
			this.inf.dataFormat = 2;
			this.inf.pixelFormat = hxd_PixelFormat.BGRA;
			f.readInt32();
			this.inf.width = f.readUInt16();
			this.inf.height = f.readUInt16();
			break;
		case 20617:
			this.inf.dataFormat = 1;
			f.set_bigEndian(true);
			f.skip(6);
			while(true) {
				var dataLen = f.readInt32();
				if(f.readInt32() == 1229472850) {
					this.inf.width = f.readInt32();
					this.inf.height = f.readInt32();
					var colbits = f.readByte();
					var colType = f.readByte();
					var tmp;
					switch(colbits) {
					case 8:
						tmp = hxd_PixelFormat.BGRA;
						break;
					case 16:
						switch(colType) {
						case 0:
							tmp = hxd_PixelFormat.R16U;
							break;
						case 2:
							tmp = hxd_PixelFormat.RGBA16U;
							break;
						case 4:
							tmp = hxd_PixelFormat.RG16U;
							break;
						case 6:
							tmp = hxd_PixelFormat.RGBA16U;
							break;
						default:
							throw haxe_Exception.thrown("Unsupported png format " + colbits + "/" + colType + "(" + this.entry.get_path() + ")");
						}
						break;
					default:
						throw haxe_Exception.thrown("Unsupported png format " + colbits + "/" + colType + "(" + this.entry.get_path() + ")");
					}
					this.inf.pixelFormat = tmp;
					break;
				}
				f.skip(dataLen + 4);
			}
			break;
		case 55551:
			this.inf.dataFormat = 0;
			this.inf.pixelFormat = hxd_PixelFormat.BGRA;
			f.set_bigEndian(true);
			_hx_loop3: while(true) switch(f.readUInt16()) {
			case 65472:case 65473:case 65474:
				var len = f.readUInt16();
				var prec = f.readByte();
				this.inf.height = f.readUInt16();
				this.inf.width = f.readUInt16();
				break _hx_loop3;
			default:
				f.skip(f.readUInt16() - 2);
			}
			break;
		default:
			if(this.entry.get_extension() == "tga") {
				this.inf.dataFormat = 3;
				this.inf.pixelFormat = hxd_PixelFormat.ARGB;
				f.skip(10);
				this.inf.width = f.readUInt16();
				this.inf.height = f.readUInt16();
			} else if(this.entry.get_extension() == "raw") {
				this.inf.dataFormat = 5;
				this.inf.pixelFormat = hxd_PixelFormat.R32F;
				var size = Math.sqrt(this.entry.get_size() >> 2) | 0;
				if(this.entry.get_size() != size * size * 4) {
					var size2 = Math.sqrt(this.entry.get_size() >> 1) | 0;
					if(this.entry.get_size() == size2 * size2 * 2) {
						this.inf.pixelFormat = hxd_PixelFormat.R16F;
						size = size2;
					} else {
						throw haxe_Exception.thrown("RAW format does not match 32 bit per components on " + size + "x" + size);
					}
				}
				this.inf.width = this.inf.height = size;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + this.entry.get_path());
			}
		}
		f.close();
		if(this.inf.pixelFormat == null) {
			throw haxe_Exception.thrown("Unsupported internal format (" + this.entry.get_path() + ")");
		}
		if(hxd_res_Image.MIPMAP_MAX_SIZE != 0 && this.inf.mipLevels > 1) {
			while(((this.inf.width | this.inf.height) & 7) == 0 && this.inf.width >> 1 >= hxd_res_Image.MIPMAP_MAX_SIZE && this.inf.height >> 1 >= hxd_res_Image.MIPMAP_MAX_SIZE) {
				this.inf.width >>= 1;
				this.inf.height >>= 1;
				this.inf.mipLevels--;
				this.inf.mipOffset++;
			}
		}
		hxd_res_Image.customCheckInfo(this);
		return this.inf;
	}
	,getPixels: function(fmt,index) {
		var pixels;
		if(index == null) {
			index = 0;
		}
		switch(this.getInfo().dataFormat) {
		case 0:
			var bytes = this.entry.getBytes();
			if(this.inf.pixelFormat != hxd_PixelFormat.BGRA) {
				throw haxe_Exception.thrown("No support to decode " + Std.string(this.inf.pixelFormat) + " on this platform (" + this.entry.get_path() + ")");
			}
			var p;
			try {
				p = hxd_res_NanoJpeg.decode(bytes);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Failed to decode JPG " + this.entry.get_path() + " (" + Std.string(e) + ")");
			}
			pixels = new hxd_Pixels(p.width,p.height,p.pixels,hxd_PixelFormat.BGRA);
			break;
		case 1:
			var bytes = this.entry.getBytes();
			var png = new format_png_Reader(new haxe_io_BytesInput(bytes));
			png.checkCRC = false;
			pixels = hxd_Pixels.alloc(this.inf.width,this.inf.height,this.inf.pixelFormat);
			var pdata = png.read();
			switch(this.inf.pixelFormat._hx_index) {
			case 1:
				format_png_Tools.extract32(pdata,pixels.bytes,false);
				break;
			case 18:case 19:case 20:case 21:
				var pixels1 = pixels.bytes;
				var tmp;
				if(this.inf.pixelFormat == hxd_PixelFormat.RGBA16U) {
					var _g = format_png_Tools.getHeader(pdata).color;
					tmp = _g._hx_index == 1 && _g.alpha == false;
				} else {
					tmp = false;
				}
				format_png_Tools.extract(pdata,pixels1,tmp);
				break;
			default:
				throw haxe_Exception.thrown("No support to decode " + Std.string(this.inf.pixelFormat) + " on this platform (" + this.entry.get_path() + ")");
			}
			break;
		case 2:
			var bytes = this.entry.getBytes();
			var gif = new format_gif_Reader(new haxe_io_BytesInput(bytes)).read();
			if(fmt == hxd_PixelFormat.RGBA) {
				pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullRGBA(gif,0),hxd_PixelFormat.RGBA);
			} else {
				pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullBGRA(gif,0),hxd_PixelFormat.BGRA);
			}
			break;
		case 3:
			var bytes = this.entry.getBytes();
			var r = new format_tga_Reader(new haxe_io_BytesInput(bytes)).read();
			if(r.header.imageType != format_tga_ImageType.UncompressedTrueColor || r.header.bitsPerPixel != 32) {
				throw haxe_Exception.thrown("Not supported TGA " + Std.string(r.header.imageType) + "/" + r.header.bitsPerPixel);
			}
			var w = r.header.width;
			var h = r.header.height;
			if(fmt == hxd_PixelFormat.RGBA) {
				pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.RGBA);
				var bytes = pixels.bytes;
				var _g = 0;
				var _g1 = w * h;
				while(_g < _g1) {
					var i = _g++;
					var c = r.imageData[i];
					c = c >>> 24 | c << 8;
					bytes.setInt32(i << 2,c);
				}
			} else {
				pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.ARGB);
				var access = hxd_PixelsARGB.fromPixels(pixels);
				var p = 0;
				var _g = 0;
				var _g1 = h;
				while(_g < _g1) {
					var y = _g++;
					var _g2 = 0;
					var _g3 = w;
					while(_g2 < _g3) {
						var x = _g2++;
						var c = r.imageData[p++];
						access.bytes.setInt32((x + y * access.width << 2) + access.offset,c >>> 24 | c >> 8 & 65280 | c << 8 & 16711680 | c << 24);
					}
				}
			}
			switch(r.header.imageOrigin._hx_index) {
			case 0:
				pixels.flipY();
				break;
			case 2:
				break;
			default:
				throw haxe_Exception.thrown("Not supported " + Std.string(r.header.imageOrigin));
			}
			break;
		case 4:
			var pos = 128;
			var mipLevel = 0;
			if((this.inf.flags & 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index) != 0) {
				pos += 20;
			}
			index += this.inf.mipOffset;
			if(index > 0) {
				var totLevels = this.inf.mipLevels + this.inf.mipOffset;
				var bpp = hxd_Pixels.calcStride(1,this.inf.pixelFormat);
				var layer = index / totLevels | 0;
				mipLevel = index % totLevels;
				var totSize = 0;
				var _g = 0;
				var _g1 = totLevels;
				while(_g < _g1) {
					var i = _g++;
					var w = this.inf.width << this.inf.mipOffset >> i;
					var h = this.inf.height << this.inf.mipOffset >> i;
					if(w == 0) {
						w = 1;
					}
					if(h == 0) {
						h = 1;
					}
					var size = hxd_Pixels.calcDataSize(w,h,this.inf.pixelFormat);
					totSize += size;
					if(i < mipLevel) {
						pos += size;
					} else if(layer == 0) {
						break;
					}
				}
				pos += totSize * layer;
			}
			var bytes;
			var w = this.inf.width >> mipLevel - this.inf.mipOffset;
			var h = this.inf.height >> mipLevel - this.inf.mipOffset;
			if(w == 0) {
				w = 1;
			}
			if(h == 0) {
				h = 1;
			}
			if(this.inf.mipLevels + this.inf.mipOffset == 1 && (this.inf.flags & 1 << hxd_res_ImageInfoFlag.IsCube._hx_index) == 0) {
				bytes = this.entry.getBytes();
			} else {
				var size = hxd_Pixels.calcDataSize(w,h,this.inf.pixelFormat);
				bytes = new haxe_io_Bytes(new ArrayBuffer(size));
				this.entry.readFull(bytes,pos,size);
				pos = 0;
			}
			pixels = new hxd_Pixels(w,h,bytes,this.inf.pixelFormat,pos);
			break;
		case 5:
			var bytes = this.entry.getBytes();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,bytes,this.inf.pixelFormat);
			break;
		case 6:
			var data = hxd_fmt_hdr_Reader.decode(this.entry.getBytes(),false);
			pixels = new hxd_Pixels(data.width,data.height,data.bytes,this.inf.pixelFormat);
			break;
		}
		if(fmt != null) {
			pixels.convert(fmt);
		}
		return pixels;
	}
	,watchCallb: function() {
		var prevInfo = this.inf;
		this.inf = null;
		try {
			this.getInfo();
		} catch( _g ) {
			this.inf = prevInfo;
			return;
		}
		var s = this.getInfo();
		if(prevInfo.width != s.width || prevInfo.height != s.height) {
			this.tex.resize(s.width,s.height);
		}
		this.tex.realloc = null;
		this.loadTexture();
	}
	,loadTexture: function(asyncData) {
		var _gthis = this;
		if(this.getInfo().dataFormat == 0) {
			this.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
			this.entry.loadBitmap(function(bmp) {
				var bmp1 = hxd_fs_LoadedBitmap.toBitmap(bmp);
				_gthis.tex.alloc();
				_gthis.tex.uploadBitmap(bmp1);
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.tex.realloc = function() {
					_gthis.loadTexture();
				};
				_gthis.tex.flags &= -1 - (1 << h3d_mat_TextureFlags.Loading._hx_index);
				if(_gthis.tex.waitLoads != null) {
					var arr = _gthis.tex.waitLoads;
					_gthis.tex.waitLoads = null;
					var _g = 0;
					while(_g < arr.length) {
						var f = arr[_g];
						++_g;
						f();
					}
				}
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			});
			return;
		}
		var load = function() {
			if((_gthis.enableAsyncLoading || (_gthis.tex.flags & 1 << h3d_mat_TextureFlags.AsyncLoading._hx_index) != 0) && asyncData == null && hxd_res_Image.ASYNC_LOADER != null && hxd_res_Image.ASYNC_LOADER.isSupported(_gthis)) {
				_gthis.tex.dispose();
				_gthis.tex.format = hxd_PixelFormat.RGBA;
				_gthis.tex.width = 1;
				_gthis.tex.height = 1;
				_gthis.tex.customMipLevels = 1;
				_gthis.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
				_gthis.tex.alloc();
				_gthis.tex.uploadPixels(hxd_res_Image.BLACK_1x1);
				_gthis.tex.width = _gthis.inf.width;
				_gthis.tex.height = _gthis.inf.height;
				hxd_res_Image.ASYNC_LOADER.load(_gthis);
				_gthis.tex.realloc = function() {
					_gthis.loadTexture();
				};
				return;
			}
			var t0 = HxOverrides.now() / 1000;
			_gthis.tex.customMipLevels = _gthis.inf.mipLevels;
			_gthis.tex.alloc();
			if(_gthis.inf.dataFormat == 4) {
				var pos = 128;
				if((_gthis.inf.flags & 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index) != 0) {
					pos += 20;
				}
				var _g = 0;
				var _g1 = _gthis.tex.get_layerCount();
				while(_g < _g1) {
					var layer = _g++;
					var _g2 = 0;
					var _g3 = _gthis.inf.mipOffset;
					while(_g2 < _g3) {
						var mip = _g2++;
						var w = _gthis.inf.width << _gthis.inf.mipOffset >> mip;
						var h = _gthis.inf.height << _gthis.inf.mipOffset >> mip;
						var size = hxd_Pixels.calcDataSize(w,h,_gthis.inf.pixelFormat);
						pos += size;
					}
					var _g4 = 0;
					var _g5 = _gthis.inf.mipLevels;
					while(_g4 < _g5) {
						var mip1 = _g4++;
						var w1 = _gthis.inf.width >> mip1;
						var h1 = _gthis.inf.height >> mip1;
						if(w1 == 0) {
							w1 = 1;
						}
						if(h1 == 0) {
							h1 = 1;
						}
						var size1 = hxd_Pixels.calcDataSize(w1,h1,_gthis.inf.pixelFormat);
						var bytes = asyncData == null ? _gthis.entry.fetchBytes(pos,size1) : asyncData;
						_gthis.tex.uploadPixels(new hxd_Pixels(w1,h1,bytes,_gthis.inf.pixelFormat,asyncData == null ? 0 : pos),mip1,layer);
						pos += size1;
					}
				}
			} else {
				var _g = 0;
				var _g1 = _gthis.tex.get_layerCount();
				while(_g < _g1) {
					var layer = _g++;
					var _g2 = 0;
					var _g3 = _gthis.inf.mipLevels;
					while(_g2 < _g3) {
						var mip = _g2++;
						var pixels = _gthis.getPixels(_gthis.tex.format,layer * _gthis.inf.mipLevels + mip);
						_gthis.tex.uploadPixels(pixels,mip,layer);
						pixels.dispose();
					}
				}
			}
			if(hxd_res_Image.LOG_TEXTURE_LOAD && asyncData == null) {
				var time = (HxOverrides.now() / 1000 - t0) * 1000.0;
				var fmtStr = _gthis.inf.pixelFormat._hx_index == 22 ? "DXT" : hxd_res_ImageFormat.getName(_gthis.inf.dataFormat);
				haxe_Log.trace(fmtStr + " " + (time | 0) + "." + (time * 10 | 0) % 10 + "ms " + _gthis.inf.width + "x" + _gthis.inf.height + " " + _gthis.entry.get_path(),{ fileName : "hxd/res/Image.hx", lineNumber : 625, className : "hxd.res.Image", methodName : "loadTexture"});
			}
			_gthis.tex.realloc = function() {
				_gthis.loadTexture();
			};
			if(hxd_res_Image.ENABLE_AUTO_WATCH) {
				_gthis.watch($bind(_gthis,_gthis.watchCallb));
			}
		};
		if(this.entry.get_isAvailable()) {
			load();
		} else {
			this.entry.load(load);
		}
	}
	,toTexture: function() {
		var _gthis = this;
		if(this.tex != null) {
			return this.tex;
		}
		this.getInfo();
		var flags = [h3d_mat_TextureFlags.NoAlloc];
		var fmt = this.inf.pixelFormat;
		if(fmt == hxd_PixelFormat.BGRA || fmt == hxd_PixelFormat.ARGB || fmt == hxd_PixelFormat.RGBA) {
			fmt = h3d_mat_Texture.nativeFormat;
		}
		if((this.inf.flags & 1 << hxd_res_ImageInfoFlag.IsCube._hx_index) != 0) {
			flags.push(h3d_mat_TextureFlags.Cube);
		}
		if(this.inf.mipLevels > 1) {
			flags.push(h3d_mat_TextureFlags.MipMapped);
			flags.push(h3d_mat_TextureFlags.ManualMipMapGen);
		}
		if(this.inf.layerCount > 1) {
			this.tex = new h3d_mat_TextureArray(this.inf.width,this.inf.height,this.inf.layerCount,flags,fmt);
		} else {
			this.tex = new h3d_mat_Texture(this.inf.width,this.inf.height,flags,fmt);
		}
		if(hxd_res_Image.DEFAULT_FILTER != h3d_mat_Filter.Linear) {
			this.tex.set_filter(hxd_res_Image.DEFAULT_FILTER);
		}
		this.tex.setName(this.entry.get_path());
		hxd_res_Image.setupTextureFlags(this.tex);
		if((this.tex.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0 || (this.tex.flags & 1 << h3d_mat_TextureFlags.LazyLoading._hx_index) == 0) {
			this.loadTexture();
		} else {
			this.tex.realloc = function() {
				_gthis.loadTexture();
			};
		}
		return this.tex;
	}
	,toTile: function() {
		this.getInfo();
		return h2d_Tile.fromTexture(this.toTexture()).sub(0,0,this.inf.width,this.inf.height);
	}
	,__class__: hxd_res_Image
});
var hxd_res_Loader = function(fs) {
	this.fs = fs;
	this.cache = new haxe_ds_StringMap();
};
$hxClasses["hxd.res.Loader"] = hxd_res_Loader;
hxd_res_Loader.__name__ = "hxd.res.Loader";
hxd_res_Loader.prototype = {
	load: function(path) {
		return new hxd_res_Any(this,this.fs.get(path));
	}
	,loadCache: function(path,c) {
		var res = this.cache.h[path];
		if(res == null) {
			var entry = this.fs.get(path);
			var old = hxd_res_Loader.currentInstance;
			hxd_res_Loader.currentInstance = this;
			res = Type.createInstance(c,[entry]);
			hxd_res_Loader.currentInstance = old;
			this.cache.h[path] = res;
		} else if((js_Boot.__downcastCheck(res,c) ? res : null) == null) {
			throw haxe_Exception.thrown(path + " has been reintrepreted from " + Std.string(js_Boot.getClass(res)) + " to " + Std.string(c));
		}
		return res;
	}
	,__class__: hxd_res_Loader
};
var hxd_res_Filter = $hxEnums["hxd.res.Filter"] = { __ename__:true,__constructs__:null
	,Fast: {_hx_name:"Fast",_hx_index:0,__enum__:"hxd.res.Filter",toString:$estr}
	,Chromatic: {_hx_name:"Chromatic",_hx_index:1,__enum__:"hxd.res.Filter",toString:$estr}
};
hxd_res_Filter.__constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
hxd_res_Filter.__empty_constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
var hxd_res__$NanoJpeg_Component = function() {
};
$hxClasses["hxd.res._NanoJpeg.Component"] = hxd_res__$NanoJpeg_Component;
hxd_res__$NanoJpeg_Component.__name__ = "hxd.res._NanoJpeg.Component";
hxd_res__$NanoJpeg_Component.prototype = {
	__class__: hxd_res__$NanoJpeg_Component
};
var hxd_res_NanoJpeg = function() {
	this.comps = [new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component()].slice(0);
	this.qtab = [new Array(64),new Array(64),new Array(64),new Array(64)].slice(0);
	this.counts = new Array(16);
	this.block = new Array(64);
	this.njZZ = [0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63].slice(0);
	this.vlctab = [null,null,null,null,null,null,null,null].slice(0);
};
$hxClasses["hxd.res.NanoJpeg"] = hxd_res_NanoJpeg;
hxd_res_NanoJpeg.__name__ = "hxd.res.NanoJpeg";
hxd_res_NanoJpeg.decode = function(bytes,filter,position,size) {
	if(size == null) {
		size = -1;
	}
	if(position == null) {
		position = 0;
	}
	if(hxd_res_NanoJpeg.inst == null) {
		hxd_res_NanoJpeg.inst = new hxd_res_NanoJpeg();
	}
	hxd_res_NanoJpeg.inst.njInit(bytes,position,size,filter);
	return hxd_res_NanoJpeg.inst.njDecode();
};
hxd_res_NanoJpeg.prototype = {
	njInit: function(bytes,pos,size,filter) {
		this.bytes = bytes;
		this.pos = pos;
		this.filter = filter == null ? hxd_res_Filter.Chromatic : filter;
		if(size < 0) {
			size = bytes.length - pos;
		}
		if(this.vlctab[0] == null) {
			this.vlctab[0] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[1] == null) {
			this.vlctab[1] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[2] == null) {
			this.vlctab[2] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[3] == null) {
			this.vlctab[3] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		this.size = size;
		this.qtused = 0;
		this.qtavail = 0;
		this.rstinterval = 0;
		this.length = 0;
		this.buf = 0;
		this.bufbits = 0;
		this.progressive = false;
		this.comps[0].dcpred = 0;
		this.comps[1].dcpred = 0;
		this.comps[2].dcpred = 0;
	}
	,cleanup: function() {
		this.bytes = null;
		var _g = 0;
		var _g1 = this.comps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.pixels != null) {
				c.pixels = null;
			}
		}
		if(this.vlctab[0] != null) {
			this.vlctab[0] = null;
		}
		if(this.vlctab[1] != null) {
			this.vlctab[1] = null;
		}
		if(this.vlctab[2] != null) {
			this.vlctab[2] = null;
		}
		if(this.vlctab[3] != null) {
			this.vlctab[3] = null;
		}
		if(this.vlctab[4] != null) {
			this.vlctab[4] = null;
		}
		if(this.vlctab[5] != null) {
			this.vlctab[5] = null;
		}
		if(this.vlctab[6] != null) {
			this.vlctab[6] = null;
		}
		if(this.vlctab[7] != null) {
			this.vlctab[7] = null;
		}
	}
	,njShowBits: function(bits) {
		if(bits == 0) {
			return 0;
		}
		while(this.bufbits < bits) {
			if(this.size <= 0) {
				this.buf = this.buf << 8 | 255;
				this.bufbits += 8;
				continue;
			}
			var newbyte = this.bytes.b[this.pos];
			this.pos++;
			this.size--;
			this.bufbits += 8;
			this.buf = this.buf << 8 | newbyte;
			if(newbyte == 255) {
				if(this.size == 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				var marker = this.bytes.b[this.pos];
				this.pos++;
				this.size--;
				switch(marker) {
				case 217:
					this.size = 0;
					break;
				case 0:case 255:
					break;
				default:
					if((marker & 248) != 208) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					this.buf = this.buf << 8 | marker;
					this.bufbits += 8;
				}
			}
		}
		return this.buf >> this.bufbits - bits & (1 << bits) - 1;
	}
	,njDecodeSOF: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.length < 9) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.bytes.b[this.pos] != 8) {
			this.notSupported();
		}
		this.height = this.bytes.b[this.pos + 1] << 8 | this.bytes.b[this.pos + 2];
		this.width = this.bytes.b[this.pos + 3] << 8 | this.bytes.b[this.pos + 4];
		this.ncomp = this.bytes.b[this.pos + 5];
		this.pos += 6;
		this.size -= 6;
		this.length -= 6;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		switch(this.ncomp) {
		case 1:case 3:
			break;
		default:
			this.notSupported();
		}
		if(this.length < this.ncomp * 3) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		var ssxmax = 0;
		var ssymax = 0;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.cid = this.bytes.b[this.pos];
			c.ssx = this.bytes.b[this.pos + 1] >> 4;
			if(c.ssx == 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			if((c.ssx & c.ssx - 1) != 0) {
				this.notSupported();
			}
			c.ssy = this.bytes.b[this.pos + 1] & 15;
			if(c.ssy == 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			if((c.ssy & c.ssy - 1) != 0) {
				this.notSupported();
			}
			c.qtsel = this.bytes.b[this.pos + 2];
			if((c.qtsel & 252) != 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.pos += 3;
			this.size -= 3;
			this.length -= 3;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.qtused |= 1 << c.qtsel;
			if(c.ssx > ssxmax) {
				ssxmax = c.ssx;
			}
			if(c.ssy > ssymax) {
				ssymax = c.ssy;
			}
		}
		if(this.ncomp == 1) {
			var c = this.comps[0];
			ssymax = 1;
			ssxmax = ssymax;
			c.ssx = c.ssy = ssxmax;
		}
		this.mbsizex = ssxmax << 3;
		this.mbsizey = ssymax << 3;
		this.mbwidth = (this.width + this.mbsizex - 1) / this.mbsizex | 0;
		this.mbheight = (this.height + this.mbsizey - 1) / this.mbsizey | 0;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.width = (this.width * c.ssx + ssxmax - 1) / ssxmax | 0;
			c.stride = c.width + 7 & 2147483640;
			c.height = (this.height * c.ssy + ssymax - 1) / ssymax | 0;
			c.stride = this.mbwidth * this.mbsizex * c.ssx / ssxmax | 0;
			if(c.width < 3 && c.ssx != ssxmax || c.height < 3 && c.ssy != ssymax) {
				this.notSupported();
			}
			c.pixels = new haxe_io_Bytes(new ArrayBuffer(c.stride * (this.mbheight * this.mbsizey * c.ssy / ssymax | 0)));
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njDecodeDQT: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		while(this.length >= 65) {
			var i = this.bytes.b[this.pos];
			if((i & 252) != 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.qtavail |= 1 << i;
			var t = this.qtab[i];
			var _g = 0;
			while(_g < 64) {
				var k = _g++;
				t[k] = this.bytes.b[this.pos + (k + 1)];
			}
			this.pos += 65;
			this.size -= 65;
			this.length -= 65;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
		}
		if(this.length != 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njDecodeDHT: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		while(this.length >= 17) {
			var i = this.bytes.b[this.pos];
			if((i & 236) != 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			i = i >> 4 & 1 | (i & 3) << 1;
			this.counts[0] = this.bytes.b[this.pos + 1];
			this.counts[1] = this.bytes.b[this.pos + 2];
			this.counts[2] = this.bytes.b[this.pos + 3];
			this.counts[3] = this.bytes.b[this.pos + 4];
			this.counts[4] = this.bytes.b[this.pos + 5];
			this.counts[5] = this.bytes.b[this.pos + 6];
			this.counts[6] = this.bytes.b[this.pos + 7];
			this.counts[7] = this.bytes.b[this.pos + 8];
			this.counts[8] = this.bytes.b[this.pos + 9];
			this.counts[9] = this.bytes.b[this.pos + 10];
			this.counts[10] = this.bytes.b[this.pos + 11];
			this.counts[11] = this.bytes.b[this.pos + 12];
			this.counts[12] = this.bytes.b[this.pos + 13];
			this.counts[13] = this.bytes.b[this.pos + 14];
			this.counts[14] = this.bytes.b[this.pos + 15];
			this.counts[15] = this.bytes.b[this.pos + 16];
			this.pos += 17;
			this.size -= 17;
			this.length -= 17;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			var vlc = this.vlctab[i];
			var vpos = 0;
			var remain = 65536;
			var spread = 65536;
			var _g = 1;
			while(_g < 17) {
				var codelen = _g++;
				spread >>= 1;
				var currcnt = this.counts[codelen - 1];
				if(currcnt == 0) {
					continue;
				}
				if(this.length < currcnt) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				remain -= currcnt << 16 - codelen;
				if(remain < 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				var _g1 = 0;
				var _g2 = currcnt;
				while(_g1 < _g2) {
					var i1 = _g1++;
					var code = this.bytes.b[this.pos + i1];
					var _g3 = 0;
					var _g4 = spread;
					while(_g3 < _g4) {
						var j = _g3++;
						vlc.b[vpos++] = codelen;
						vlc.b[vpos++] = code;
					}
				}
				this.pos += currcnt;
				this.size -= currcnt;
				this.length -= currcnt;
				if(this.size < 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
			}
			while(remain-- != 0) {
				vlc.b[vpos] = 0;
				vpos += 2;
			}
		}
		if(this.length != 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njDecodeDRI: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.length < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.rstinterval = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njDecodeBlock: function(c,po) {
		var out = c.pixels;
		var value;
		var coef = 0;
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			this.block[i] = 0;
		}
		var c1 = c;
		var c2 = c1.dcpred;
		var vlc = this.vlctab[c.dctabsel];
		var value1 = this.njShowBits(16);
		var bits = vlc.b[value1 << 1];
		if(bits == 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value1 = vlc.b[value1 << 1 | 1];
		this.vlcCode = value1;
		bits = value1 & 15;
		var tmp;
		if(bits == 0) {
			tmp = 0;
		} else {
			var r = this.njShowBits(bits);
			this.bufbits -= bits;
			value1 = r;
			if(value1 < 1 << bits - 1) {
				value1 += (-1 << bits) + 1;
			}
			tmp = value1;
		}
		c1.dcpred = c2 + tmp;
		var qt = this.qtab[c.qtsel];
		var at = this.vlctab[c.actabsel];
		this.block[0] = c.dcpred * qt[0];
		do {
			var value1 = this.njShowBits(16);
			var bits = at.b[value1 << 1];
			if(bits == 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			if(this.bufbits < bits) {
				this.njShowBits(bits);
			}
			this.bufbits -= bits;
			value1 = at.b[value1 << 1 | 1];
			this.vlcCode = value1;
			bits = value1 & 15;
			if(bits == 0) {
				value = 0;
			} else {
				var r = this.njShowBits(bits);
				this.bufbits -= bits;
				value1 = r;
				if(value1 < 1 << bits - 1) {
					value1 += (-1 << bits) + 1;
				}
				value = value1;
			}
			if(this.vlcCode == 0) {
				break;
			}
			if((this.vlcCode & 15) == 0 && this.vlcCode != 240) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			coef += (this.vlcCode >> 4) + 1;
			if(coef > 63) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.block[this.njZZ[coef]] = value * qt[coef];
		} while(coef < 63);
		var bp = 0;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 8;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 16;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 24;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 32;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 40;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 48;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 56;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var po1 = po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[32] << 8;
		var x2 = this.block[48];
		var x3 = this.block[16];
		var x4 = this.block[8];
		var x5 = this.block[56];
		var x6 = this.block[40];
		var x7 = this.block[24];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[0] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[0] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 1 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[33] << 8;
		var x2 = this.block[49];
		var x3 = this.block[17];
		var x4 = this.block[9];
		var x5 = this.block[57];
		var x6 = this.block[41];
		var x7 = this.block[25];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[1] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[1] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 2 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[34] << 8;
		var x2 = this.block[50];
		var x3 = this.block[18];
		var x4 = this.block[10];
		var x5 = this.block[58];
		var x6 = this.block[42];
		var x7 = this.block[26];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[2] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[2] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 3 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[35] << 8;
		var x2 = this.block[51];
		var x3 = this.block[19];
		var x4 = this.block[11];
		var x5 = this.block[59];
		var x6 = this.block[43];
		var x7 = this.block[27];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[3] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[3] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 4 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[36] << 8;
		var x2 = this.block[52];
		var x3 = this.block[20];
		var x4 = this.block[12];
		var x5 = this.block[60];
		var x6 = this.block[44];
		var x7 = this.block[28];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[4] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[4] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 5 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[37] << 8;
		var x2 = this.block[53];
		var x3 = this.block[21];
		var x4 = this.block[13];
		var x5 = this.block[61];
		var x6 = this.block[45];
		var x7 = this.block[29];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[5] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[5] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 6 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[38] << 8;
		var x2 = this.block[54];
		var x3 = this.block[22];
		var x4 = this.block[14];
		var x5 = this.block[62];
		var x6 = this.block[46];
		var x7 = this.block[30];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[6] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[6] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 7 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[39] << 8;
		var x2 = this.block[55];
		var x3 = this.block[23];
		var x4 = this.block[15];
		var x5 = this.block[63];
		var x6 = this.block[47];
		var x7 = this.block[31];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[7] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[7] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
	}
	,notSupported: function() {
		throw haxe_Exception.thrown("This JPG file is not supported");
	}
	,njDecodeScan: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.length < 4 + 2 * this.ncomp) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.bytes.b[this.pos] != this.ncomp) {
			this.notSupported();
		}
		this.pos += 1;
		this.size -= 1;
		this.length -= 1;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			if(this.bytes.b[this.pos] != c.cid) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			if((this.bytes.b[this.pos + 1] & 236) != 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			c.dctabsel = this.bytes.b[this.pos + 1] >> 4 << 1;
			c.actabsel = (this.bytes.b[this.pos + 1] & 3) << 1 | 1;
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
		}
		var start = this.bytes.b[this.pos];
		var count = this.bytes.b[this.pos + 1];
		var other = this.bytes.b[this.pos + 2];
		if(!this.progressive && start != 0 || count != 63 - start || other != 0) {
			this.notSupported();
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		var mbx = 0;
		var mby = 0;
		var rstcount = this.rstinterval;
		var nextrst = 0;
		while(true) {
			var _g = 0;
			var _g1 = this.ncomp;
			while(_g < _g1) {
				var i = _g++;
				var c = this.comps[i];
				var _g2 = 0;
				var _g3 = c.ssy;
				while(_g2 < _g3) {
					var sby = _g2++;
					var _g4 = 0;
					var _g5 = c.ssx;
					while(_g4 < _g5) {
						var sbx = _g4++;
						this.njDecodeBlock(c,(mby * c.ssy + sby) * c.stride + mbx * c.ssx + sbx << 3);
					}
				}
			}
			if(++mbx >= this.mbwidth) {
				mbx = 0;
				if(++mby >= this.mbheight) {
					break;
				}
			}
			if(this.rstinterval != 0 && --rstcount == 0) {
				this.bufbits &= 248;
				var r = this.njShowBits(16);
				this.bufbits -= 16;
				var i1 = r;
				if((i1 & 65528) != 65488 || (i1 & 7) != nextrst) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				nextrst = nextrst + 1 & 7;
				rstcount = this.rstinterval;
				this.comps[0].dcpred = 0;
				this.comps[1].dcpred = 0;
				this.comps[2].dcpred = 0;
			}
		}
	}
	,njUpsampleH: function(c) {
		var xmax = c.width - 3;
		var cout = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var lout = cout;
		var lin = c.pixels;
		var pi = 0;
		var po = 0;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var x = 139 * lin.b[pi] + -11 * lin.b[pi + 1] + 64 >> 7;
			lout.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
			var x1 = 104 * lin.b[pi] + 27 * lin.b[pi + 1] + -3 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 1] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			var x2 = 28 * lin.b[pi] + 109 * lin.b[pi + 1] + -9 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 2] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			var _g2 = 0;
			var _g3 = xmax;
			while(_g2 < _g3) {
				var x3 = _g2++;
				var x4 = -9 * lin.b[pi + x3] + 111 * lin.b[pi + x3 + 1] + 29 * lin.b[pi + x3 + 2] + -3 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 3] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				var x5 = -3 * lin.b[pi + x3] + 29 * lin.b[pi + x3 + 1] + 111 * lin.b[pi + x3 + 2] + -9 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 4] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			}
			pi += c.stride;
			po += c.width << 1;
			var x6 = 28 * lin.b[pi - 1] + 109 * lin.b[pi - 2] + -9 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 3] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			var x7 = 104 * lin.b[pi - 1] + 27 * lin.b[pi - 2] + -3 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 2] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			var x8 = 139 * lin.b[pi - 1] + -11 * lin.b[pi - 2] + 64 >> 7;
			lout.b[po - 1] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.width <<= 1;
		c.stride = c.width;
		c.pixels = cout;
	}
	,njUpsampleV: function(c) {
		var w = c.width;
		var s1 = c.stride;
		var s2 = s1 + s1;
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var pi = 0;
		var po = 0;
		var cout = out;
		var cin = c.pixels;
		var _g = 0;
		var _g1 = w;
		while(_g < _g1) {
			var x = _g++;
			po = x;
			pi = po;
			var x1 = 139 * cin.b[pi] + -11 * cin.b[pi + s1] + 64 >> 7;
			cout.b[po] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po += w;
			var x2 = 104 * cin.b[pi] + 27 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po += w;
			var x3 = 28 * cin.b[pi] + 109 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po += w;
			pi += s1;
			var _g2 = 0;
			var _g3 = c.height - 2;
			while(_g2 < _g3) {
				var y = _g2++;
				var x4 = -9 * cin.b[pi - s1] + 111 * cin.b[pi] + 29 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				po += w;
				var x5 = -3 * cin.b[pi - s1] + 29 * cin.b[pi] + 111 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
				po += w;
				pi += s1;
			}
			pi += s1;
			var x6 = 28 * cin.b[pi] + 109 * cin.b[pi - s1] + -9 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po += w;
			var x7 = 104 * cin.b[pi] + 27 * cin.b[pi - s1] + -3 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			po += w;
			var x8 = 139 * cin.b[pi] + -11 * cin.b[pi - s1] + 64 >> 7;
			cout.b[po] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.height <<= 1;
		c.stride = c.width;
		c.pixels = out;
	}
	,njUpsample: function(c) {
		var xshift = 0;
		var yshift = 0;
		while(c.width < this.width) {
			c.width <<= 1;
			++xshift;
		}
		while(c.height < this.height) {
			c.height <<= 1;
			++yshift;
		}
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height));
		var lin = c.pixels;
		var pout = 0;
		var lout = out;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var pin = (y >> yshift) * c.stride;
			var _g2 = 0;
			var _g3 = c.width;
			while(_g2 < _g3) {
				var x = _g2++;
				lout.b[pout++] = lin.b[(x >> xshift) + pin];
			}
		}
		c.stride = c.width;
		c.pixels = out;
	}
	,njConvert: function() {
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			switch(this.filter._hx_index) {
			case 0:
				if(c.width < this.width || c.height < this.height) {
					this.njUpsample(c);
				}
				break;
			case 1:
				while(c.width < this.width || c.height < this.height) {
					if(c.width < this.width) {
						this.njUpsampleH(c);
					}
					if(c.height < this.height) {
						this.njUpsampleV(c);
					}
				}
				break;
			}
			if(c.width < this.width || c.height < this.height) {
				throw haxe_Exception.thrown("assert");
			}
		}
		var pixels = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
		if(this.ncomp == 3) {
			var py = this.comps[0].pixels;
			var pcb = this.comps[1].pixels;
			var pcr = this.comps[2].pixels;
			var pix = pixels;
			var k1 = 0;
			var k2 = 0;
			var k3 = 0;
			var out = 0;
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var yy = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var y = py.b[k1++] << 8;
					var cb = pcb.b[k2++] - 128;
					var cr = pcr.b[k3++] - 128;
					var x1 = y + 359 * cr + 128 >> 8;
					var r = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
					var x2 = y - 88 * cb - 183 * cr + 128 >> 8;
					var g = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
					var x3 = y + 454 * cb + 128 >> 8;
					var b = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
					pix.b[out++] = b;
					pix.b[out++] = g;
					pix.b[out++] = r;
					pix.b[out++] = 255;
				}
				k1 += this.comps[0].stride - this.width;
				k2 += this.comps[1].stride - this.width;
				k3 += this.comps[2].stride - this.width;
			}
		} else {
			throw haxe_Exception.thrown("TODO");
		}
		return pixels;
	}
	,njDecode: function() {
		if(this.size < 2 || this.bytes.b[this.pos] != 255 || this.bytes.b[this.pos + 1] != 216) {
			throw haxe_Exception.thrown("This file is not a JPEG");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		_hx_loop1: while(true) {
			if(this.size < 2 || this.bytes.b[this.pos] != 255) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			switch(this.bytes.b[this.pos + (-1)]) {
			case 192:
				this.njDecodeSOF();
				break;
			case 194:
				this.progressive = true;
				if(this.progressive) {
					throw haxe_Exception.thrown("Unsupported progressive JPG");
				}
				if(this.vlctab[4] == null) {
					this.vlctab[4] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[5] == null) {
					this.vlctab[5] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[6] == null) {
					this.vlctab[6] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[7] == null) {
					this.vlctab[7] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				this.njDecodeSOF();
				break;
			case 195:
				throw haxe_Exception.thrown("Unsupported lossless JPG");
			case 196:
				this.njDecodeDHT();
				break;
			case 218:
				this.njDecodeScan();
				break _hx_loop1;
			case 219:
				this.njDecodeDQT();
				break;
			case 221:
				this.njDecodeDRI();
				break;
			case 254:
				if(this.size < 2) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
				if(this.length > this.size) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				this.pos += 2;
				this.size -= 2;
				this.length -= 2;
				if(this.size < 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				var count = this.length;
				this.pos += count;
				this.size -= count;
				this.length -= count;
				if(this.size < 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				break;
			default:
				switch(this.bytes.b[this.pos + (-1)] & 240) {
				case 192:
					throw haxe_Exception.thrown("Unsupported jpeg type " + (this.bytes.b[this.pos + (-1)] & 15));
				case 224:
					if(this.size < 2) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
					if(this.length > this.size) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					this.pos += 2;
					this.size -= 2;
					this.length -= 2;
					if(this.size < 0) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					var count1 = this.length;
					this.pos += count1;
					this.size -= count1;
					this.length -= count1;
					if(this.size < 0) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					break;
				default:
					throw haxe_Exception.thrown("Unsupported jpeg tag 0x" + StringTools.hex(this.bytes.b[this.pos + (-1)],2));
				}
			}
		}
		var pixels = this.njConvert();
		this.cleanup();
		return { pixels : pixels, width : this.width, height : this.height};
	}
	,__class__: hxd_res_NanoJpeg
};
var hxsl_BufferKind = $hxEnums["hxsl.BufferKind"] = { __ename__:true,__constructs__:null
	,Uniform: {_hx_name:"Uniform",_hx_index:0,__enum__:"hxsl.BufferKind",toString:$estr}
	,Storage: {_hx_name:"Storage",_hx_index:1,__enum__:"hxsl.BufferKind",toString:$estr}
	,RW: {_hx_name:"RW",_hx_index:2,__enum__:"hxsl.BufferKind",toString:$estr}
	,Partial: {_hx_name:"Partial",_hx_index:3,__enum__:"hxsl.BufferKind",toString:$estr}
	,StoragePartial: {_hx_name:"StoragePartial",_hx_index:4,__enum__:"hxsl.BufferKind",toString:$estr}
	,RWPartial: {_hx_name:"RWPartial",_hx_index:5,__enum__:"hxsl.BufferKind",toString:$estr}
};
hxsl_BufferKind.__constructs__ = [hxsl_BufferKind.Uniform,hxsl_BufferKind.Storage,hxsl_BufferKind.RW,hxsl_BufferKind.Partial,hxsl_BufferKind.StoragePartial,hxsl_BufferKind.RWPartial];
hxsl_BufferKind.__empty_constructs__ = [hxsl_BufferKind.Uniform,hxsl_BufferKind.Storage,hxsl_BufferKind.RW,hxsl_BufferKind.Partial,hxsl_BufferKind.StoragePartial,hxsl_BufferKind.RWPartial];
var hxsl_TexDimension = $hxEnums["hxsl.TexDimension"] = { __ename__:true,__constructs__:null
	,T1D: {_hx_name:"T1D",_hx_index:0,__enum__:"hxsl.TexDimension",toString:$estr}
	,T2D: {_hx_name:"T2D",_hx_index:1,__enum__:"hxsl.TexDimension",toString:$estr}
	,T3D: {_hx_name:"T3D",_hx_index:2,__enum__:"hxsl.TexDimension",toString:$estr}
	,TCube: {_hx_name:"TCube",_hx_index:3,__enum__:"hxsl.TexDimension",toString:$estr}
};
hxsl_TexDimension.__constructs__ = [hxsl_TexDimension.T1D,hxsl_TexDimension.T2D,hxsl_TexDimension.T3D,hxsl_TexDimension.TCube];
hxsl_TexDimension.__empty_constructs__ = [hxsl_TexDimension.T1D,hxsl_TexDimension.T2D,hxsl_TexDimension.T3D,hxsl_TexDimension.TCube];
var hxsl_Type = $hxEnums["hxsl.Type"] = { __ename__:true,__constructs__:null
	,TVoid: {_hx_name:"TVoid",_hx_index:0,__enum__:"hxsl.Type",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"hxsl.Type",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:2,__enum__:"hxsl.Type",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:3,__enum__:"hxsl.Type",toString:$estr}
	,TString: {_hx_name:"TString",_hx_index:4,__enum__:"hxsl.Type",toString:$estr}
	,TVec: ($_=function(size,t) { return {_hx_index:5,size:size,t:t,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.size,this.t];}}; },$_._hx_name="TVec",$_)
	,TMat3: {_hx_name:"TMat3",_hx_index:6,__enum__:"hxsl.Type",toString:$estr}
	,TMat4: {_hx_name:"TMat4",_hx_index:7,__enum__:"hxsl.Type",toString:$estr}
	,TMat3x4: {_hx_name:"TMat3x4",_hx_index:8,__enum__:"hxsl.Type",toString:$estr}
	,TBytes: ($_=function(size) { return {_hx_index:9,size:size,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.size];}}; },$_._hx_name="TBytes",$_)
	,TSampler: ($_=function(dim,isArray) { return {_hx_index:10,dim:dim,isArray:isArray,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.dim,this.isArray];}}; },$_._hx_name="TSampler",$_)
	,TRWTexture: ($_=function(dim,isArray,channels) { return {_hx_index:11,dim:dim,isArray:isArray,channels:channels,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.dim,this.isArray,this.channels];}}; },$_._hx_name="TRWTexture",$_)
	,TMat2: {_hx_name:"TMat2",_hx_index:12,__enum__:"hxsl.Type",toString:$estr}
	,TStruct: ($_=function(vl) { return {_hx_index:13,vl:vl,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.vl];}}; },$_._hx_name="TStruct",$_)
	,TFun: ($_=function(variants) { return {_hx_index:14,variants:variants,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.variants];}}; },$_._hx_name="TFun",$_)
	,TArray: ($_=function(t,size) { return {_hx_index:15,t:t,size:size,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.t,this.size];}}; },$_._hx_name="TArray",$_)
	,TBuffer: ($_=function(t,size,kind) { return {_hx_index:16,t:t,size:size,kind:kind,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.t,this.size,this.kind];}}; },$_._hx_name="TBuffer",$_)
	,TChannel: ($_=function(size) { return {_hx_index:17,size:size,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.size];}}; },$_._hx_name="TChannel",$_)
};
hxsl_Type.__constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TVec,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TBytes,hxsl_Type.TSampler,hxsl_Type.TRWTexture,hxsl_Type.TMat2,hxsl_Type.TStruct,hxsl_Type.TFun,hxsl_Type.TArray,hxsl_Type.TBuffer,hxsl_Type.TChannel];
hxsl_Type.__empty_constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TMat2];
var hxsl_VecType = $hxEnums["hxsl.VecType"] = { __ename__:true,__constructs__:null
	,VInt: {_hx_name:"VInt",_hx_index:0,__enum__:"hxsl.VecType",toString:$estr}
	,VFloat: {_hx_name:"VFloat",_hx_index:1,__enum__:"hxsl.VecType",toString:$estr}
	,VBool: {_hx_name:"VBool",_hx_index:2,__enum__:"hxsl.VecType",toString:$estr}
};
hxsl_VecType.__constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
hxsl_VecType.__empty_constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
var hxsl_SizeDecl = $hxEnums["hxsl.SizeDecl"] = { __ename__:true,__constructs__:null
	,SConst: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.SizeDecl",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="SConst",$_)
	,SVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.SizeDecl",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="SVar",$_)
};
hxsl_SizeDecl.__constructs__ = [hxsl_SizeDecl.SConst,hxsl_SizeDecl.SVar];
hxsl_SizeDecl.__empty_constructs__ = [];
var hxsl_Error = function(msg,pos) {
	this.msg = msg;
	this.pos = pos;
};
$hxClasses["hxsl.Error"] = hxsl_Error;
hxsl_Error.__name__ = "hxsl.Error";
hxsl_Error.t = function(msg,pos) {
	throw haxe_Exception.thrown(new hxsl_Error(msg,pos));
};
hxsl_Error.prototype = {
	toString: function() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	,__class__: hxsl_Error
};
var hxsl_VarKind = $hxEnums["hxsl.VarKind"] = { __ename__:true,__constructs__:null
	,Global: {_hx_name:"Global",_hx_index:0,__enum__:"hxsl.VarKind",toString:$estr}
	,Input: {_hx_name:"Input",_hx_index:1,__enum__:"hxsl.VarKind",toString:$estr}
	,Param: {_hx_name:"Param",_hx_index:2,__enum__:"hxsl.VarKind",toString:$estr}
	,Var: {_hx_name:"Var",_hx_index:3,__enum__:"hxsl.VarKind",toString:$estr}
	,Local: {_hx_name:"Local",_hx_index:4,__enum__:"hxsl.VarKind",toString:$estr}
	,Output: {_hx_name:"Output",_hx_index:5,__enum__:"hxsl.VarKind",toString:$estr}
	,Function: {_hx_name:"Function",_hx_index:6,__enum__:"hxsl.VarKind",toString:$estr}
};
hxsl_VarKind.__constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
hxsl_VarKind.__empty_constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
var hxsl_VarQualifier = $hxEnums["hxsl.VarQualifier"] = { __ename__:true,__constructs__:null
	,Const: ($_=function(max) { return {_hx_index:0,max:max,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.max];}}; },$_._hx_name="Const",$_)
	,Private: {_hx_name:"Private",_hx_index:1,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Nullable: {_hx_name:"Nullable",_hx_index:2,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerObject: {_hx_name:"PerObject",_hx_index:3,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Name: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.n];}}; },$_._hx_name="Name",$_)
	,Shared: {_hx_name:"Shared",_hx_index:5,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Precision: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.p];}}; },$_._hx_name="Precision",$_)
	,Range: ($_=function(min,max) { return {_hx_index:7,min:min,max:max,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.min,this.max];}}; },$_._hx_name="Range",$_)
	,Ignore: {_hx_name:"Ignore",_hx_index:8,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerInstance: ($_=function(v) { return {_hx_index:9,v:v,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="PerInstance",$_)
	,Doc: ($_=function(s) { return {_hx_index:10,s:s,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.s];}}; },$_._hx_name="Doc",$_)
	,Borrow: ($_=function(source) { return {_hx_index:11,source:source,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.source];}}; },$_._hx_name="Borrow",$_)
	,Sampler: ($_=function(name) { return {_hx_index:12,name:name,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.name];}}; },$_._hx_name="Sampler",$_)
	,Final: {_hx_name:"Final",_hx_index:13,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:14,__enum__:"hxsl.VarQualifier",toString:$estr}
};
hxsl_VarQualifier.__constructs__ = [hxsl_VarQualifier.Const,hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Name,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Precision,hxsl_VarQualifier.Range,hxsl_VarQualifier.Ignore,hxsl_VarQualifier.PerInstance,hxsl_VarQualifier.Doc,hxsl_VarQualifier.Borrow,hxsl_VarQualifier.Sampler,hxsl_VarQualifier.Final,hxsl_VarQualifier.Flat];
hxsl_VarQualifier.__empty_constructs__ = [hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Ignore,hxsl_VarQualifier.Final,hxsl_VarQualifier.Flat];
var hxsl_Prec = $hxEnums["hxsl.Prec"] = { __ename__:true,__constructs__:null
	,Low: {_hx_name:"Low",_hx_index:0,__enum__:"hxsl.Prec",toString:$estr}
	,Medium: {_hx_name:"Medium",_hx_index:1,__enum__:"hxsl.Prec",toString:$estr}
	,High: {_hx_name:"High",_hx_index:2,__enum__:"hxsl.Prec",toString:$estr}
};
hxsl_Prec.__constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
hxsl_Prec.__empty_constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
var hxsl_Const = $hxEnums["hxsl.Const"] = { __ename__:true,__constructs__:null
	,CNull: {_hx_name:"CNull",_hx_index:0,__enum__:"hxsl.Const",toString:$estr}
	,CBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"hxsl.Const",toString:$estr,__params__:function(){ return [this.b];}}; },$_._hx_name="CBool",$_)
	,CInt: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Const",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="CInt",$_)
	,CFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Const",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="CFloat",$_)
	,CString: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"hxsl.Const",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="CString",$_)
};
hxsl_Const.__constructs__ = [hxsl_Const.CNull,hxsl_Const.CBool,hxsl_Const.CInt,hxsl_Const.CFloat,hxsl_Const.CString];
hxsl_Const.__empty_constructs__ = [hxsl_Const.CNull];
var hxsl_ExprDef = $hxEnums["hxsl.ExprDef"] = { __ename__:true,__constructs__:null
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.c];}}; },$_._hx_name="EConst",$_)
	,EIdent: ($_=function(i) { return {_hx_index:1,i:i,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.i];}}; },$_._hx_name="EIdent",$_)
	,EParenthesis: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="EParenthesis",$_)
	,EField: ($_=function(e,f) { return {_hx_index:3,e:e,f:f,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.e,this.f];}}; },$_._hx_name="EField",$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:4,op:op,e1:e1,e2:e2,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.op,this.e1,this.e2];}}; },$_._hx_name="EBinop",$_)
	,EUnop: ($_=function(op,e1) { return {_hx_index:5,op:op,e1:e1,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.op,this.e1];}}; },$_._hx_name="EUnop",$_)
	,ECall: ($_=function(e,args) { return {_hx_index:6,e:e,args:args,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.e,this.args];}}; },$_._hx_name="ECall",$_)
	,EBlock: ($_=function(el) { return {_hx_index:7,el:el,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.el];}}; },$_._hx_name="EBlock",$_)
	,EVars: ($_=function(v) { return {_hx_index:8,v:v,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="EVars",$_)
	,EFunction: ($_=function(f) { return {_hx_index:9,f:f,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.f];}}; },$_._hx_name="EFunction",$_)
	,EIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.econd,this.eif,this.eelse];}}; },$_._hx_name="EIf",$_)
	,EDiscard: {_hx_name:"EDiscard",_hx_index:11,__enum__:"hxsl.ExprDef",toString:$estr}
	,EFor: ($_=function(v,loop,block) { return {_hx_index:12,v:v,loop:loop,block:block,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.v,this.loop,this.block];}}; },$_._hx_name="EFor",$_)
	,EReturn: ($_=function(e) { return {_hx_index:13,e:e,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="EReturn",$_)
	,EBreak: {_hx_name:"EBreak",_hx_index:14,__enum__:"hxsl.ExprDef",toString:$estr}
	,EContinue: {_hx_name:"EContinue",_hx_index:15,__enum__:"hxsl.ExprDef",toString:$estr}
	,EArray: ($_=function(e,eindex) { return {_hx_index:16,e:e,eindex:eindex,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.e,this.eindex];}}; },$_._hx_name="EArray",$_)
	,EArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.el];}}; },$_._hx_name="EArrayDecl",$_)
	,ESwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.e,this.cases,this.def];}}; },$_._hx_name="ESwitch",$_)
	,EWhile: ($_=function(cond,loop,normalWhile) { return {_hx_index:19,cond:cond,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.cond,this.loop,this.normalWhile];}}; },$_._hx_name="EWhile",$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:20,name:name,args:args,e:e,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.name,this.args,this.e];}}; },$_._hx_name="EMeta",$_)
};
hxsl_ExprDef.__constructs__ = [hxsl_ExprDef.EConst,hxsl_ExprDef.EIdent,hxsl_ExprDef.EParenthesis,hxsl_ExprDef.EField,hxsl_ExprDef.EBinop,hxsl_ExprDef.EUnop,hxsl_ExprDef.ECall,hxsl_ExprDef.EBlock,hxsl_ExprDef.EVars,hxsl_ExprDef.EFunction,hxsl_ExprDef.EIf,hxsl_ExprDef.EDiscard,hxsl_ExprDef.EFor,hxsl_ExprDef.EReturn,hxsl_ExprDef.EBreak,hxsl_ExprDef.EContinue,hxsl_ExprDef.EArray,hxsl_ExprDef.EArrayDecl,hxsl_ExprDef.ESwitch,hxsl_ExprDef.EWhile,hxsl_ExprDef.EMeta];
hxsl_ExprDef.__empty_constructs__ = [hxsl_ExprDef.EDiscard,hxsl_ExprDef.EBreak,hxsl_ExprDef.EContinue];
var hxsl_TExprDef = $hxEnums["hxsl.TExprDef"] = { __ename__:true,__constructs__:null
	,TConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.c];}}; },$_._hx_name="TConst",$_)
	,TVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="TVar",$_)
	,TGlobal: ($_=function(g) { return {_hx_index:2,g:g,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.g];}}; },$_._hx_name="TGlobal",$_)
	,TParenthesis: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="TParenthesis",$_)
	,TBlock: ($_=function(el) { return {_hx_index:4,el:el,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.el];}}; },$_._hx_name="TBlock",$_)
	,TBinop: ($_=function(op,e1,e2) { return {_hx_index:5,op:op,e1:e1,e2:e2,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.op,this.e1,this.e2];}}; },$_._hx_name="TBinop",$_)
	,TUnop: ($_=function(op,e1) { return {_hx_index:6,op:op,e1:e1,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.op,this.e1];}}; },$_._hx_name="TUnop",$_)
	,TVarDecl: ($_=function(v,init) { return {_hx_index:7,v:v,init:init,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.v,this.init];}}; },$_._hx_name="TVarDecl",$_)
	,TCall: ($_=function(e,args) { return {_hx_index:8,e:e,args:args,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e,this.args];}}; },$_._hx_name="TCall",$_)
	,TSwiz: ($_=function(e,regs) { return {_hx_index:9,e:e,regs:regs,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e,this.regs];}}; },$_._hx_name="TSwiz",$_)
	,TIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.econd,this.eif,this.eelse];}}; },$_._hx_name="TIf",$_)
	,TDiscard: {_hx_name:"TDiscard",_hx_index:11,__enum__:"hxsl.TExprDef",toString:$estr}
	,TReturn: ($_=function(e) { return {_hx_index:12,e:e,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="TReturn",$_)
	,TFor: ($_=function(v,it,loop) { return {_hx_index:13,v:v,it:it,loop:loop,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.v,this.it,this.loop];}}; },$_._hx_name="TFor",$_)
	,TContinue: {_hx_name:"TContinue",_hx_index:14,__enum__:"hxsl.TExprDef",toString:$estr}
	,TBreak: {_hx_name:"TBreak",_hx_index:15,__enum__:"hxsl.TExprDef",toString:$estr}
	,TArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e,this.index];}}; },$_._hx_name="TArray",$_)
	,TArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.el];}}; },$_._hx_name="TArrayDecl",$_)
	,TSwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e,this.cases,this.def];}}; },$_._hx_name="TSwitch",$_)
	,TWhile: ($_=function(e,loop,normalWhile) { return {_hx_index:19,e:e,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e,this.loop,this.normalWhile];}}; },$_._hx_name="TWhile",$_)
	,TMeta: ($_=function(m,args,e) { return {_hx_index:20,m:m,args:args,e:e,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.m,this.args,this.e];}}; },$_._hx_name="TMeta",$_)
	,TField: ($_=function(e,name) { return {_hx_index:21,e:e,name:name,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e,this.name];}}; },$_._hx_name="TField",$_)
};
hxsl_TExprDef.__constructs__ = [hxsl_TExprDef.TConst,hxsl_TExprDef.TVar,hxsl_TExprDef.TGlobal,hxsl_TExprDef.TParenthesis,hxsl_TExprDef.TBlock,hxsl_TExprDef.TBinop,hxsl_TExprDef.TUnop,hxsl_TExprDef.TVarDecl,hxsl_TExprDef.TCall,hxsl_TExprDef.TSwiz,hxsl_TExprDef.TIf,hxsl_TExprDef.TDiscard,hxsl_TExprDef.TReturn,hxsl_TExprDef.TFor,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak,hxsl_TExprDef.TArray,hxsl_TExprDef.TArrayDecl,hxsl_TExprDef.TSwitch,hxsl_TExprDef.TWhile,hxsl_TExprDef.TMeta,hxsl_TExprDef.TField];
hxsl_TExprDef.__empty_constructs__ = [hxsl_TExprDef.TDiscard,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak];
var hxsl_FunctionKind = $hxEnums["hxsl.FunctionKind"] = { __ename__:true,__constructs__:null
	,Vertex: {_hx_name:"Vertex",_hx_index:0,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Fragment: {_hx_name:"Fragment",_hx_index:1,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Init: {_hx_name:"Init",_hx_index:2,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Helper: {_hx_name:"Helper",_hx_index:3,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Main: {_hx_name:"Main",_hx_index:4,__enum__:"hxsl.FunctionKind",toString:$estr}
};
hxsl_FunctionKind.__constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper,hxsl_FunctionKind.Main];
hxsl_FunctionKind.__empty_constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper,hxsl_FunctionKind.Main];
var hxsl_TGlobal = $hxEnums["hxsl.TGlobal"] = { __ename__:true,__constructs__:null
	,Radians: {_hx_name:"Radians",_hx_index:0,__enum__:"hxsl.TGlobal",toString:$estr}
	,Degrees: {_hx_name:"Degrees",_hx_index:1,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sin: {_hx_name:"Sin",_hx_index:2,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cos: {_hx_name:"Cos",_hx_index:3,__enum__:"hxsl.TGlobal",toString:$estr}
	,Tan: {_hx_name:"Tan",_hx_index:4,__enum__:"hxsl.TGlobal",toString:$estr}
	,Asin: {_hx_name:"Asin",_hx_index:5,__enum__:"hxsl.TGlobal",toString:$estr}
	,Acos: {_hx_name:"Acos",_hx_index:6,__enum__:"hxsl.TGlobal",toString:$estr}
	,Atan: {_hx_name:"Atan",_hx_index:7,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pow: {_hx_name:"Pow",_hx_index:8,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp: {_hx_name:"Exp",_hx_index:9,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log: {_hx_name:"Log",_hx_index:10,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp2: {_hx_name:"Exp2",_hx_index:11,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log2: {_hx_name:"Log2",_hx_index:12,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sqrt: {_hx_name:"Sqrt",_hx_index:13,__enum__:"hxsl.TGlobal",toString:$estr}
	,Inversesqrt: {_hx_name:"Inversesqrt",_hx_index:14,__enum__:"hxsl.TGlobal",toString:$estr}
	,Abs: {_hx_name:"Abs",_hx_index:15,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sign: {_hx_name:"Sign",_hx_index:16,__enum__:"hxsl.TGlobal",toString:$estr}
	,Floor: {_hx_name:"Floor",_hx_index:17,__enum__:"hxsl.TGlobal",toString:$estr}
	,Ceil: {_hx_name:"Ceil",_hx_index:18,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fract: {_hx_name:"Fract",_hx_index:19,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mod: {_hx_name:"Mod",_hx_index:20,__enum__:"hxsl.TGlobal",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:21,__enum__:"hxsl.TGlobal",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:22,__enum__:"hxsl.TGlobal",toString:$estr}
	,Clamp: {_hx_name:"Clamp",_hx_index:23,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mix: {_hx_name:"Mix",_hx_index:24,__enum__:"hxsl.TGlobal",toString:$estr}
	,InvLerp: {_hx_name:"InvLerp",_hx_index:25,__enum__:"hxsl.TGlobal",toString:$estr}
	,Step: {_hx_name:"Step",_hx_index:26,__enum__:"hxsl.TGlobal",toString:$estr}
	,Smoothstep: {_hx_name:"Smoothstep",_hx_index:27,__enum__:"hxsl.TGlobal",toString:$estr}
	,Length: {_hx_name:"Length",_hx_index:28,__enum__:"hxsl.TGlobal",toString:$estr}
	,Distance: {_hx_name:"Distance",_hx_index:29,__enum__:"hxsl.TGlobal",toString:$estr}
	,Dot: {_hx_name:"Dot",_hx_index:30,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cross: {_hx_name:"Cross",_hx_index:31,__enum__:"hxsl.TGlobal",toString:$estr}
	,Normalize: {_hx_name:"Normalize",_hx_index:32,__enum__:"hxsl.TGlobal",toString:$estr}
	,LReflect: {_hx_name:"LReflect",_hx_index:33,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texture: {_hx_name:"Texture",_hx_index:34,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureLod: {_hx_name:"TextureLod",_hx_index:35,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texel: {_hx_name:"Texel",_hx_index:36,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureSize: {_hx_name:"TextureSize",_hx_index:37,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToInt: {_hx_name:"ToInt",_hx_index:38,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToFloat: {_hx_name:"ToFloat",_hx_index:39,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToBool: {_hx_name:"ToBool",_hx_index:40,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec2: {_hx_name:"Vec2",_hx_index:41,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec3: {_hx_name:"Vec3",_hx_index:42,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec4: {_hx_name:"Vec4",_hx_index:43,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec2: {_hx_name:"IVec2",_hx_index:44,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec3: {_hx_name:"IVec3",_hx_index:45,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec4: {_hx_name:"IVec4",_hx_index:46,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec2: {_hx_name:"BVec2",_hx_index:47,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec3: {_hx_name:"BVec3",_hx_index:48,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec4: {_hx_name:"BVec4",_hx_index:49,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat2: {_hx_name:"Mat2",_hx_index:50,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3: {_hx_name:"Mat3",_hx_index:51,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat4: {_hx_name:"Mat4",_hx_index:52,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3x4: {_hx_name:"Mat3x4",_hx_index:53,__enum__:"hxsl.TGlobal",toString:$estr}
	,Saturate: {_hx_name:"Saturate",_hx_index:54,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pack: {_hx_name:"Pack",_hx_index:55,__enum__:"hxsl.TGlobal",toString:$estr}
	,Unpack: {_hx_name:"Unpack",_hx_index:56,__enum__:"hxsl.TGlobal",toString:$estr}
	,PackNormal: {_hx_name:"PackNormal",_hx_index:57,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackNormal: {_hx_name:"UnpackNormal",_hx_index:58,__enum__:"hxsl.TGlobal",toString:$estr}
	,ScreenToUv: {_hx_name:"ScreenToUv",_hx_index:59,__enum__:"hxsl.TGlobal",toString:$estr}
	,UvToScreen: {_hx_name:"UvToScreen",_hx_index:60,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdx: {_hx_name:"DFdx",_hx_index:61,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdy: {_hx_name:"DFdy",_hx_index:62,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fwidth: {_hx_name:"Fwidth",_hx_index:63,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelRead: {_hx_name:"ChannelRead",_hx_index:64,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelReadLod: {_hx_name:"ChannelReadLod",_hx_index:65,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetch: {_hx_name:"ChannelFetch",_hx_index:66,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelTextureSize: {_hx_name:"ChannelTextureSize",_hx_index:67,__enum__:"hxsl.TGlobal",toString:$estr}
	,Trace: {_hx_name:"Trace",_hx_index:68,__enum__:"hxsl.TGlobal",toString:$estr}
	,VertexID: {_hx_name:"VertexID",_hx_index:69,__enum__:"hxsl.TGlobal",toString:$estr}
	,InstanceID: {_hx_name:"InstanceID",_hx_index:70,__enum__:"hxsl.TGlobal",toString:$estr}
	,FragCoord: {_hx_name:"FragCoord",_hx_index:71,__enum__:"hxsl.TGlobal",toString:$estr}
	,FrontFacing: {_hx_name:"FrontFacing",_hx_index:72,__enum__:"hxsl.TGlobal",toString:$estr}
	,FloatBitsToInt: {_hx_name:"FloatBitsToInt",_hx_index:73,__enum__:"hxsl.TGlobal",toString:$estr}
	,FloatBitsToUint: {_hx_name:"FloatBitsToUint",_hx_index:74,__enum__:"hxsl.TGlobal",toString:$estr}
	,IntBitsToFloat: {_hx_name:"IntBitsToFloat",_hx_index:75,__enum__:"hxsl.TGlobal",toString:$estr}
	,UintBitsToFloat: {_hx_name:"UintBitsToFloat",_hx_index:76,__enum__:"hxsl.TGlobal",toString:$estr}
	,RoundEven: {_hx_name:"RoundEven",_hx_index:77,__enum__:"hxsl.TGlobal",toString:$estr}
	,SetLayout: {_hx_name:"SetLayout",_hx_index:78,__enum__:"hxsl.TGlobal",toString:$estr}
	,ImageStore: {_hx_name:"ImageStore",_hx_index:79,__enum__:"hxsl.TGlobal",toString:$estr}
	,ComputeVar_GlobalInvocation: {_hx_name:"ComputeVar_GlobalInvocation",_hx_index:80,__enum__:"hxsl.TGlobal",toString:$estr}
	,ComputeVar_LocalInvocation: {_hx_name:"ComputeVar_LocalInvocation",_hx_index:81,__enum__:"hxsl.TGlobal",toString:$estr}
	,ComputeVar_WorkGroup: {_hx_name:"ComputeVar_WorkGroup",_hx_index:82,__enum__:"hxsl.TGlobal",toString:$estr}
	,ComputeVar_LocalInvocationIndex: {_hx_name:"ComputeVar_LocalInvocationIndex",_hx_index:83,__enum__:"hxsl.TGlobal",toString:$estr}
	,AtomicAdd: {_hx_name:"AtomicAdd",_hx_index:84,__enum__:"hxsl.TGlobal",toString:$estr}
	,GroupMemoryBarrier: {_hx_name:"GroupMemoryBarrier",_hx_index:85,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackSnorm4x8: {_hx_name:"UnpackSnorm4x8",_hx_index:86,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackUnorm4x8: {_hx_name:"UnpackUnorm4x8",_hx_index:87,__enum__:"hxsl.TGlobal",toString:$estr}
};
hxsl_TGlobal.__constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.InvLerp,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TextureSize,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelTextureSize,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID,hxsl_TGlobal.FragCoord,hxsl_TGlobal.FrontFacing,hxsl_TGlobal.FloatBitsToInt,hxsl_TGlobal.FloatBitsToUint,hxsl_TGlobal.IntBitsToFloat,hxsl_TGlobal.UintBitsToFloat,hxsl_TGlobal.RoundEven,hxsl_TGlobal.SetLayout,hxsl_TGlobal.ImageStore,hxsl_TGlobal.ComputeVar_GlobalInvocation,hxsl_TGlobal.ComputeVar_LocalInvocation,hxsl_TGlobal.ComputeVar_WorkGroup,hxsl_TGlobal.ComputeVar_LocalInvocationIndex,hxsl_TGlobal.AtomicAdd,hxsl_TGlobal.GroupMemoryBarrier,hxsl_TGlobal.UnpackSnorm4x8,hxsl_TGlobal.UnpackUnorm4x8];
hxsl_TGlobal.__empty_constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.InvLerp,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TextureSize,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelTextureSize,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID,hxsl_TGlobal.FragCoord,hxsl_TGlobal.FrontFacing,hxsl_TGlobal.FloatBitsToInt,hxsl_TGlobal.FloatBitsToUint,hxsl_TGlobal.IntBitsToFloat,hxsl_TGlobal.UintBitsToFloat,hxsl_TGlobal.RoundEven,hxsl_TGlobal.SetLayout,hxsl_TGlobal.ImageStore,hxsl_TGlobal.ComputeVar_GlobalInvocation,hxsl_TGlobal.ComputeVar_LocalInvocation,hxsl_TGlobal.ComputeVar_WorkGroup,hxsl_TGlobal.ComputeVar_LocalInvocationIndex,hxsl_TGlobal.AtomicAdd,hxsl_TGlobal.GroupMemoryBarrier,hxsl_TGlobal.UnpackSnorm4x8,hxsl_TGlobal.UnpackUnorm4x8];
var hxsl_Component = $hxEnums["hxsl.Component"] = { __ename__:true,__constructs__:null
	,X: {_hx_name:"X",_hx_index:0,__enum__:"hxsl.Component",toString:$estr}
	,Y: {_hx_name:"Y",_hx_index:1,__enum__:"hxsl.Component",toString:$estr}
	,Z: {_hx_name:"Z",_hx_index:2,__enum__:"hxsl.Component",toString:$estr}
	,W: {_hx_name:"W",_hx_index:3,__enum__:"hxsl.Component",toString:$estr}
};
hxsl_Component.__constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Component.__empty_constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
var hxsl_Tools = function() { };
$hxClasses["hxsl.Tools"] = hxsl_Tools;
hxsl_Tools.__name__ = "hxsl.Tools";
hxsl_Tools.allocVarId = function() {
	return ++hxsl_Tools.UID;
};
hxsl_Tools.getDimSize = function(dim,arr) {
	if(arr == null) {
		arr = false;
	}
	var size;
	switch(dim._hx_index) {
	case 0:
		size = 1;
		break;
	case 2:
		size = 3;
		break;
	case 1:case 3:
		size = 2;
		break;
	}
	if(arr) {
		++size;
	}
	return size;
};
hxsl_Tools.getName = function(v) {
	if(v.qualifiers == null) {
		return v.name;
	}
	var _g = 0;
	var _g1 = v.qualifiers;
	while(_g < _g1.length) {
		var q = _g1[_g];
		++_g;
		if(q._hx_index == 4) {
			var n = q.n;
			return n;
		}
	}
	return v.name;
};
hxsl_Tools.getConstBits = function(v) {
	var _g = v.type;
	switch(_g._hx_index) {
	case 1:
		var _g1 = 0;
		var _g2 = v.qualifiers;
		while(_g1 < _g2.length) {
			var q = _g2[_g1];
			++_g1;
			if(q._hx_index == 0) {
				var n = q.max;
				if(n != null) {
					var bits = 0;
					while(n >= 1 << bits) ++bits;
					return bits;
				}
				return 8;
			}
		}
		break;
	case 2:
		return 1;
	case 16:
		switch(_g.kind._hx_index) {
		case 3:case 4:case 5:
			return hxsl_Tools.MAX_PARTIAL_MAPPINGS_BITS;
		default:
		}
		break;
	case 17:
		return 3 + hxsl_Tools.MAX_CHANNELS_BITS;
	default:
	}
	return 0;
};
hxsl_Tools.isConst = function(v) {
	var _g = v.type;
	var tmp;
	switch(_g._hx_index) {
	case 16:
		switch(_g.kind._hx_index) {
		case 3:case 4:case 5:
			tmp = true;
			break;
		default:
			tmp = false;
		}
		break;
	case 17:
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		return true;
	}
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q._hx_index == 0) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.isStruct = function(v) {
	if(v.type._hx_index == 13) {
		return true;
	} else {
		return false;
	}
};
hxsl_Tools.hasQualifier = function(v,q) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q2 = _g1[_g];
			++_g;
			if(q2 == q) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.hasBorrowQualifier = function(v,path) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q._hx_index == 11) {
				var s = q.source;
				return path == s;
			}
		}
	}
	return false;
};
hxsl_Tools.isTexture = function(t) {
	switch(t._hx_index) {
	case 10:
		return true;
	case 11:
		return true;
	case 17:
		return true;
	default:
		return false;
	}
};
hxsl_Tools.toString = function(t) {
	switch(t._hx_index) {
	case 5:
		var size = t.size;
		var t1 = t.t;
		var prefix;
		switch(t1._hx_index) {
		case 0:
			prefix = "i";
			break;
		case 1:
			prefix = "";
			break;
		case 2:
			prefix = "b";
			break;
		}
		return prefix + "vec" + size;
	case 9:
		var n = t.size;
		return "Bytes" + n;
	case 10:
		var dim = t.dim;
		var arr = t.isArray;
		return "Sampler" + HxOverrides.substr($hxEnums[dim.__enum__].__constructs__[dim._hx_index]._hx_name,1,null) + (arr ? "Array" : "");
	case 11:
		var dim = t.dim;
		var arr = t.isArray;
		var dims = t.channels;
		return "RWTexture" + HxOverrides.substr($hxEnums[dim.__enum__].__constructs__[dim._hx_index]._hx_name,1,null) + (arr ? "Array" : "") + "<" + (dims == 1 ? "Float" : "Vec" + dims) + ">";
	case 13:
		var vl = t.vl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push(v.name + " : " + Std.string(hxsl_Tools.toString(v.type)));
		}
		return "{" + _g.join(",") + "}";
	case 15:
		var t1 = t.t;
		var s = t.size;
		var tmp = Std.string(hxsl_Tools.toString(t1)) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v = s.v;
			tmp1 = v.name;
			break;
		}
		return tmp + tmp1 + "]";
	case 16:
		var t1 = t.t;
		var s = t.size;
		var k = t.kind;
		var prefix;
		switch(k._hx_index) {
		case 0:
			prefix = "Buffer";
			break;
		case 1:
			prefix = "StorageBuffer";
			break;
		case 2:
			prefix = "RWBuffer";
			break;
		case 3:
			prefix = "PartialBuffer";
			break;
		case 4:
			prefix = "StoragePartialBuffer";
			break;
		case 5:
			prefix = "RWPartialBuffer";
			break;
		}
		var tmp = prefix + " " + Std.string(hxsl_Tools.toString(t1)) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v = s.v;
			tmp1 = v.name;
			break;
		}
		return tmp + tmp1 + "]";
	default:
		return HxOverrides.substr($hxEnums[t.__enum__].__constructs__[t._hx_index]._hx_name,1,null);
	}
};
hxsl_Tools.toType = function(t) {
	switch(t._hx_index) {
	case 0:
		return hxsl_Type.TInt;
	case 1:
		return hxsl_Type.TFloat;
	case 2:
		return hxsl_Type.TBool;
	}
};
hxsl_Tools.hasSideEffect = function(e) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		return false;
	case 1:
		return false;
	case 2:
		return false;
	case 3:
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e)) {
				return true;
			}
		}
		return false;
	case 5:
		var _ge = _g.e1;
		var _ge1 = _g.e2;
		switch(_g.op._hx_index) {
		case 4:
			return true;
		case 20:
			return true;
		default:
			var e1 = _ge;
			var e2 = _ge1;
			if(!hxsl_Tools.hasSideEffect(e1)) {
				return hxsl_Tools.hasSideEffect(e2);
			} else {
				return true;
			}
		}
		break;
	case 6:
		var e1 = _g.e1;
		return hxsl_Tools.hasSideEffect(e1);
	case 7:
		return true;
	case 8:
		var _ge = _g.e;
		var _gargs = _g.args;
		var _ge1 = _ge.e;
		if(_ge1._hx_index == 2) {
			if(_ge1.g._hx_index == 78) {
				return true;
			} else {
				var e = _ge;
				var pl = _gargs;
				var _g1 = e.e;
				if(_g1._hx_index == 2) {
					var _gg = _g1.g;
					switch(_gg._hx_index) {
					case 79:case 84:case 85:
						return true;
					default:
						var g = _gg;
					}
				} else {
					return true;
				}
				var _g1 = 0;
				while(_g1 < pl.length) {
					var p = pl[_g1];
					++_g1;
					if(hxsl_Tools.hasSideEffect(p)) {
						return true;
					}
				}
				return false;
			}
		} else {
			var e = _ge;
			var pl = _gargs;
			var _g1 = e.e;
			if(_g1._hx_index == 2) {
				var _gg = _g1.g;
				switch(_gg._hx_index) {
				case 79:case 84:case 85:
					return true;
				default:
					var g = _gg;
				}
			} else {
				return true;
			}
			var _g1 = 0;
			while(_g1 < pl.length) {
				var p = pl[_g1];
				++_g1;
				if(hxsl_Tools.hasSideEffect(p)) {
					return true;
				}
			}
			return false;
		}
		break;
	case 9:
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 10:
		var econd = _g.econd;
		var eif = _g.eif;
		var eelse = _g.eelse;
		if(!(hxsl_Tools.hasSideEffect(econd) || hxsl_Tools.hasSideEffect(eif))) {
			if(eelse != null) {
				return hxsl_Tools.hasSideEffect(eelse);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 12:
		return true;
	case 13:
		var it = _g.it;
		var loop = _g.loop;
		if(!hxsl_Tools.hasSideEffect(it)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 11:case 14:case 15:
		return true;
	case 16:
		var e = _g.e;
		var index = _g.index;
		if(!hxsl_Tools.hasSideEffect(e)) {
			return hxsl_Tools.hasSideEffect(index);
		} else {
			return true;
		}
		break;
	case 17:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e)) {
				return true;
			}
		}
		return false;
	case 18:
		var e = _g.e;
		var cases = _g.cases;
		var def = _g.def;
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = 0;
			var _g3 = c.values;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				if(hxsl_Tools.hasSideEffect(v)) {
					return true;
				}
			}
			if(hxsl_Tools.hasSideEffect(c.expr)) {
				return true;
			}
		}
		if(!hxsl_Tools.hasSideEffect(e)) {
			if(def != null) {
				return hxsl_Tools.hasSideEffect(def);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 19:
		var e = _g.e;
		var loop = _g.loop;
		if(!hxsl_Tools.hasSideEffect(e)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 20:
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 21:
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	}
};
hxsl_Tools.iter = function(e,f) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		break;
	case 1:
		break;
	case 2:
		break;
	case 3:
		var e = _g.e;
		f(e);
		break;
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			f(e);
		}
		break;
	case 5:
		var e1 = _g.e1;
		var e2 = _g.e2;
		f(e1);
		f(e2);
		break;
	case 6:
		var e1 = _g.e1;
		f(e1);
		break;
	case 7:
		var init = _g.init;
		if(init != null) {
			f(init);
		}
		break;
	case 8:
		var e = _g.e;
		var args = _g.args;
		f(e);
		var _g1 = 0;
		while(_g1 < args.length) {
			var a = args[_g1];
			++_g1;
			f(a);
		}
		break;
	case 9:
		var e = _g.e;
		f(e);
		break;
	case 10:
		var econd = _g.econd;
		var eif = _g.eif;
		var eelse = _g.eelse;
		f(econd);
		f(eif);
		if(eelse != null) {
			f(eelse);
		}
		break;
	case 12:
		var e = _g.e;
		if(e != null) {
			f(e);
		}
		break;
	case 13:
		var it = _g.it;
		var loop = _g.loop;
		f(it);
		f(loop);
		break;
	case 11:case 14:case 15:
		break;
	case 16:
		var e = _g.e;
		var index = _g.index;
		f(e);
		f(index);
		break;
	case 17:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			f(e);
		}
		break;
	case 18:
		var e = _g.e;
		var cases = _g.cases;
		var def = _g.def;
		f(e);
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = 0;
			var _g3 = c.values;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 19:
		var e = _g.e;
		var loop = _g.loop;
		f(e);
		f(loop);
		break;
	case 20:
		var e = _g.e;
		f(e);
		break;
	case 21:
		var e = _g.e;
		f(e);
		break;
	}
};
hxsl_Tools.map = function(e,f) {
	var ed;
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		ed = e.e;
		break;
	case 1:
		ed = e.e;
		break;
	case 2:
		ed = e.e;
		break;
	case 3:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TParenthesis(f(e1));
		break;
	case 4:
		var el = _g.el;
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < el.length) {
			var e1 = el[_g2];
			++_g2;
			_g1.push(f(e1));
		}
		ed = hxsl_TExprDef.TBlock(_g1);
		break;
	case 5:
		var op = _g.op;
		var e1 = _g.e1;
		var e2 = _g.e2;
		ed = hxsl_TExprDef.TBinop(op,f(e1),f(e2));
		break;
	case 6:
		var op = _g.op;
		var e1 = _g.e1;
		ed = hxsl_TExprDef.TUnop(op,f(e1));
		break;
	case 7:
		var v = _g.v;
		var init = _g.init;
		ed = hxsl_TExprDef.TVarDecl(v,init != null ? f(init) : null);
		break;
	case 8:
		var e1 = _g.e;
		var args = _g.args;
		var ed1 = f(e1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < args.length) {
			var a = args[_g2];
			++_g2;
			_g1.push(f(a));
		}
		ed = hxsl_TExprDef.TCall(ed1,_g1);
		break;
	case 9:
		var e1 = _g.e;
		var c = _g.regs;
		ed = hxsl_TExprDef.TSwiz(f(e1),c);
		break;
	case 10:
		var econd = _g.econd;
		var eif = _g.eif;
		var eelse = _g.eelse;
		ed = hxsl_TExprDef.TIf(f(econd),f(eif),eelse != null ? f(eelse) : null);
		break;
	case 12:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TReturn(e1 != null ? f(e1) : null);
		break;
	case 13:
		var v = _g.v;
		var it = _g.it;
		var loop = _g.loop;
		ed = hxsl_TExprDef.TFor(v,f(it),f(loop));
		break;
	case 11:case 14:case 15:
		ed = e.e;
		break;
	case 16:
		var e1 = _g.e;
		var index = _g.index;
		ed = hxsl_TExprDef.TArray(f(e1),f(index));
		break;
	case 17:
		var el = _g.el;
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < el.length) {
			var e1 = el[_g2];
			++_g2;
			_g1.push(f(e1));
		}
		ed = hxsl_TExprDef.TArrayDecl(_g1);
		break;
	case 18:
		var e1 = _g.e;
		var cases = _g.cases;
		var def = _g.def;
		var ed1 = f(e1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < cases.length) {
			var c = cases[_g2];
			++_g2;
			var _g3 = [];
			var _g4 = 0;
			var _g5 = c.values;
			while(_g4 < _g5.length) {
				var v = _g5[_g4];
				++_g4;
				_g3.push(f(v));
			}
			_g1.push({ values : _g3, expr : f(c.expr)});
		}
		ed = hxsl_TExprDef.TSwitch(ed1,_g1,def == null ? null : f(def));
		break;
	case 19:
		var e1 = _g.e;
		var loop = _g.loop;
		var normalWhile = _g.normalWhile;
		ed = hxsl_TExprDef.TWhile(f(e1),f(loop),normalWhile);
		break;
	case 20:
		var m = _g.m;
		var args = _g.args;
		var e1 = _g.e;
		ed = hxsl_TExprDef.TMeta(m,args,f(e1));
		break;
	case 21:
		var e1 = _g.e;
		var name = _g.name;
		ed = hxsl_TExprDef.TField(f(e1),name);
		break;
	}
	return { e : ed, t : e.t, p : e.p};
};
hxsl_Tools.size = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:case 3:
		return 1;
	case 2:case 4:
		return 0;
	case 5:
		var n = t.size;
		return n;
	case 6:
		return 9;
	case 7:
		return 16;
	case 8:
		return 12;
	case 9:
		var s = t.size;
		return s;
	case 10:
		return 0;
	case 11:
		return 0;
	case 12:
		return 4;
	case 13:
		var vl = t.vl;
		var s = 0;
		var _g = 0;
		while(_g < vl.length) {
			var v = vl[_g];
			++_g;
			s += hxsl_Tools.size(v.type);
		}
		return s;
	case 14:
		return 0;
	case 15:
		var _gt = t.t;
		var _gsize = t.size;
		switch(_gsize._hx_index) {
		case 0:
			var v = _gsize.v;
			var t1 = _gt;
			return hxsl_Tools.size(t1) * v;
		case 1:
			return 0;
		}
		break;
	case 16:
		var _gsize = t.size;
		if(_gsize._hx_index == 0) {
			var v = _gsize.v;
			var t1 = t.t;
			return hxsl_Tools.size(t1) * v;
		} else {
			return 0;
		}
		break;
	case 17:
		var n = t.size;
		return n;
	}
};
var hxsl_Tools2 = function() { };
$hxClasses["hxsl.Tools2"] = hxsl_Tools2;
hxsl_Tools2.__name__ = "hxsl.Tools2";
hxsl_Tools2.toString = function(g) {
	var n = $hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name;
	return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
};
var hxsl_BatchShader = function() {
	this.Batch_Count__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["hxsl.BatchShader"] = hxsl_BatchShader;
hxsl_BatchShader.__name__ = "hxsl.BatchShader";
hxsl_BatchShader.__super__ = hxsl_Shader;
hxsl_BatchShader.prototype = $extend(hxsl_Shader.prototype,{
	get_Batch_HasOffset: function() {
		return this.Batch_HasOffset__;
	}
	,set_Batch_HasOffset: function(_v) {
		this.constModified = true;
		return this.Batch_HasOffset__ = _v;
	}
	,get_Batch_UseStorage: function() {
		return this.Batch_UseStorage__;
	}
	,set_Batch_UseStorage: function(_v) {
		this.constModified = true;
		return this.Batch_UseStorage__ = _v;
	}
	,get_Batch_Count: function() {
		return this.Batch_Count__;
	}
	,set_Batch_Count: function(_v) {
		this.constModified = true;
		return this.Batch_Count__ = _v;
	}
	,get_Batch_Buffer: function() {
		return this.Batch_Buffer__;
	}
	,set_Batch_Buffer: function(_v) {
		return this.Batch_Buffer__ = _v;
	}
	,get_Batch_StorageBuffer: function() {
		return this.Batch_StorageBuffer__;
	}
	,set_Batch_StorageBuffer: function(_v) {
		return this.Batch_StorageBuffer__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.Batch_HasOffset__) {
			this.constBits |= 1;
		}
		if(this.Batch_UseStorage__) {
			this.constBits |= 2;
		}
		var v = this.Batch_Count__;
		if(v >>> 13 != 0) {
			throw haxe_Exception.thrown("Batch_Count" + " is out of range " + v + ">" + 8191 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v << 2;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.Batch_HasOffset__;
		case 1:
			return this.Batch_UseStorage__;
		case 2:
			return this.Batch_Count__;
		case 3:
			return this.Batch_Buffer__;
		case 4:
			return this.Batch_StorageBuffer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 2) {
			return this.Batch_Count__;
		}
		return 0.;
	}
	,__class__: hxsl_BatchShader
});
var hxsl_SearchMap = function() {
	this.minId = 0;
	this.nexts = [];
};
$hxClasses["hxsl.SearchMap"] = hxsl_SearchMap;
hxsl_SearchMap.__name__ = "hxsl.SearchMap";
hxsl_SearchMap.prototype = {
	set: function(id,s) {
		if(this.minId == 0) {
			this.minId = id;
			this.nexts = [s];
			return;
		}
		var offset = id - this.minId;
		if(offset < 0) {
			var n = [];
			var _g = 0;
			var _g1 = this.nexts.length;
			while(_g < _g1) {
				var i = _g++;
				n[i - offset] = this.nexts[i];
			}
			this.nexts = n;
			this.minId += offset;
			offset = 0;
		}
		this.nexts[offset] = s;
	}
	,__class__: hxsl_SearchMap
};
var hxsl_Cache = function() {
	this.linkCache = new hxsl_SearchMap();
	this.linkShaders = new haxe_ds_StringMap();
	this.batchShaders = new haxe_ds_ObjectMap();
	this.batchShadersParams = new haxe_ds_StringMap();
	this.byID = new haxe_ds_StringMap();
};
$hxClasses["hxsl.Cache"] = hxsl_Cache;
hxsl_Cache.__name__ = "hxsl.Cache";
hxsl_Cache.get = function() {
	var c = hxsl_Cache.INST;
	if(c == null) {
		c = new hxsl_Cache();
		hxsl_Cache.INST = c;
	}
	return c;
};
hxsl_Cache.prototype = {
	getLinkShader: function(vars) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < vars.length) {
			var v = vars[_g1];
			++_g1;
			_g.push(Std.string(v));
		}
		var key = _g.join(",");
		var shader = this.linkShaders.h[key];
		if(shader != null) {
			return shader;
		}
		var s = new hxsl_SharedShader("");
		var id = HxOverrides.substr(haxe_crypto_Md5.encode(key),0,8);
		s.data = { name : "shaderLinker_" + id, vars : [], funs : []};
		var pos = null;
		var outVars_h = Object.create(null);
		var outputCount = 0;
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var makeVec = function(g,size,args,makeOutExpr) {
			var out = [];
			var rem = size;
			var _g = 0;
			var _g1 = args.length;
			while(_g < _g1) {
				var i = _g++;
				var e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl_Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},out), t : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : pos};
		};
		var makeVar = function(name,t,parent) {
			var path = parent == null ? name : hxsl_Tools.getName(parent) + "." + name;
			var v = outVars_h[path];
			if(v != null) {
				return v;
			}
			v = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v);
			} else {
				var _g = parent.type;
				if(_g._hx_index == 13) {
					var vl = _g.vl;
					vl.push(v);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			}
			outVars_h[path] = v;
			return v;
		};
		var makeOutExpr = null;
		makeOutExpr = function(v,rem) {
			switch(v._hx_index) {
			case 0:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(v1)), t : hxsl_Type.TFloat, p : pos};
			case 1:
				var vname = v.v;
				var size = v.size;
				var v1 = outVars_h[vname];
				if(v1 != null) {
					return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
				}
				var path = vname.split(".");
				var parent = null;
				while(path.length > 1) parent = makeVar(path.shift(),hxsl_Type.TStruct([]),parent);
				if(size != null) {
					rem = size;
				}
				v1 = makeVar(path.shift(),rem == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(rem,hxsl_VecType.VFloat),parent);
				return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
			case 2:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.PackNormal), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v1,3)]), t : tvec4, p : pos};
			case 3:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Pack), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v1,1)]), t : tvec4, p : pos};
			case 4:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec2,2,args,makeOutExpr);
			case 5:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec3,3,args,makeOutExpr);
			case 6:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec4,4,args,makeOutExpr);
			case 7:
				var v1 = v.a;
				var comps = v.swiz;
				return { e : hxsl_TExprDef.TSwiz(makeOutExpr(v1,4),comps), t : hxsl_Type.TVec(comps.length,hxsl_VecType.VFloat), p : pos};
			}
		};
		var makeOutput = function(v) {
			outputCount += 1;
			var ov = { id : hxsl_Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl_VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr(v,4)), t : hxsl_Type.TVoid, p : pos};
		};
		var defineFun = function(kind,vars) {
			var fv = { id : hxsl_Tools.allocVarId(), type : hxsl_Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl_VarKind.Function};
			var _g = [];
			var _g1 = 0;
			while(_g1 < vars.length) {
				var v = vars[_g1];
				++_g1;
				_g.push(makeOutput(v));
			}
			var f = { kind : kind, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(_g), p : pos, t : hxsl_Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl_FunctionKind.Vertex,[hxsl_Output.Value("output.position")]);
		defineFun(hxsl_FunctionKind.Fragment,vars);
		shader = Object.create(hxsl_Shader.prototype);
		shader.shader = s;
		this.linkShaders.h[key] = shader;
		shader.updateConstantsFinal(null);
		return shader;
	}
	,link: function(shaders,mode) {
		var c = this.linkCache;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			var cs = c.nexts[i.id - c.minId];
			if(cs == null) {
				cs = new hxsl_SearchMap();
				c.set(i.id,cs);
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders,mode);
		}
		return c.linked;
	}
	,compileRuntimeShader: function(shaders,mode) {
		var shaderDatas = [];
		var index = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			shaderDatas.push({ inst : i, p : s1.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe_ds_ArraySort.sort(shaderDatas,function(s1,s2) {
			return s2.p - s1.p;
		});
		var _g = 0;
		while(_g < shaderDatas.length) {
			var s = shaderDatas[_g];
			++_g;
			hxsl_Printer.check(s.inst.shader);
		}
		var linker = new hxsl_Linker(mode);
		var s;
		try {
			var _g = [];
			var _g1 = 0;
			while(_g1 < shaderDatas.length) {
				var s1 = shaderDatas[_g1];
				++_g1;
				_g.push(s1.inst.shader);
			}
			s = linker.link(_g);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				var _g1 = [];
				var _g2 = 0;
				while(_g2 < shaderDatas.length) {
					var s1 = shaderDatas[_g2];
					++_g2;
					_g1.push(hxsl_Printer.shaderToString(s1.inst.shader));
				}
				var shaders1 = _g1;
				e.msg += "\n\nin\n\n" + shaders1.join("\n-----\n");
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		if(mode == hxsl_LinkMode.Batch) {
			var checkRec = null;
			checkRec = function(v) {
				if(v.qualifiers != null && v.qualifiers.indexOf(hxsl_VarQualifier.PerObject) >= 0) {
					if(v.qualifiers.length == 1) {
						v.qualifiers = null;
					} else {
						v.qualifiers = v.qualifiers.slice();
						HxOverrides.remove(v.qualifiers,hxsl_VarQualifier.PerObject);
					}
					if(v.kind != hxsl_VarKind.Var) {
						v.kind = hxsl_VarKind.Local;
					}
				}
				var _g = v.type;
				if(_g._hx_index == 13) {
					var vl = _g.vl;
					var _g = 0;
					while(_g < vl.length) {
						var v = vl[_g];
						++_g;
						checkRec(v);
					}
				}
			};
			var _g = 0;
			var _g1 = s.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				checkRec(v);
			}
		}
		var _g = [];
		var _g1 = 0;
		while(_g1 < shaderDatas.length) {
			var s1 = shaderDatas[_g1];
			++_g1;
			_g.push(s1.inst.shader);
		}
		hxsl_Printer.check(s,_g);
		var prev = s;
		var splitter = new hxsl_Splitter();
		var sl;
		try {
			sl = splitter.split(s,mode == hxsl_LinkMode.Batch);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				e.msg += "\n\nin\n\n" + hxsl_Printer.shaderToString(s);
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		var paramVars = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = linker.allVars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			if(v.v.kind == hxsl_VarKind.Param) {
				if(v.v.type._hx_index == 13) {
					continue;
				}
				var inf = shaderDatas[v.instanceIndex];
				var nv = splitter.varMap.h[v.v.__id__];
				paramVars.h[nv == null ? v.id : nv.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		var _g = 0;
		while(_g < sl.length) {
			var s = sl[_g];
			++_g;
			hxsl_Printer.check(s,[prev]);
		}
		var prev = sl;
		var sl1 = new hxsl_Dce().dce(sl);
		var _g_current = 0;
		var _g_array = sl1;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var s = _g_value;
			hxsl_Printer.check(s,[prev[i]]);
		}
		var r = this.buildRuntimeShader(sl1,paramVars);
		r.mode = mode;
		var _g = [];
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			_g.push(new hxsl_ShaderInstanceDesc(s1.shader,s1.constBits));
		}
		r.spec = { instances : _g, signature : null};
		var _g = 0;
		var _g1 = shaderDatas.length;
		while(_g < _g1) {
			var i = _g++;
			var s = shaderDatas[shaderDatas.length - 1 - i];
			r.spec.instances[s.index].index = i;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = r.spec.instances;
		while(_g1 < _g2.length) {
			var i = _g2[_g1];
			++_g1;
			_g.push(i.shader.data.name + "_" + i.bits + "_" + i.index);
		}
		var signParts = _g;
		var tmp = signParts.join(":");
		r.spec.signature = haxe_crypto_Md5.encode(tmp);
		var _g = [];
		var _g1 = 0;
		var _g2 = r.getShaders();
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			_g.push(hxsl_Printer.shaderToString(s.data));
		}
		r.signature = haxe_crypto_Md5.encode(_g.join(""));
		var r2 = this.byID.h[r.signature];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			this.byID.h[r.signature] = r;
		}
		return r;
	}
	,buildRuntimeShader: function(shaders,paramVars) {
		var r = new hxsl_RuntimeShader();
		r.globals = new haxe_ds_IntMap();
		var _g = 0;
		while(_g < shaders.length) {
			var s = shaders[_g];
			++_g;
			var kind;
			switch(s.name) {
			case "fragment":
				kind = hxsl_FunctionKind.Fragment;
				break;
			case "main":
				kind = hxsl_FunctionKind.Main;
				break;
			case "vertex":
				kind = hxsl_FunctionKind.Vertex;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			var fl = this.flattenShader(s,kind,paramVars);
			fl.kind = kind;
			switch(kind._hx_index) {
			case 0:
				r.vertex = fl;
				break;
			case 1:
				r.fragment = fl;
				break;
			case 4:
				r.vertex = fl;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			this.initGlobals(r,fl);
			hxsl_Printer.check(fl.data,[s]);
		}
		return r;
	}
	,initGlobals: function(r,s) {
		var p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		var p = s.params;
		while(p != null) {
			if(p.perObjectGlobal != null) {
				r.globals.h[p.perObjectGlobal.gid] = true;
			}
			p = p.next;
		}
	}
	,getPath: function(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	,flattenShader: function(s,kind,params) {
		var flat = new hxsl_Flatten();
		var c = new hxsl_RuntimeShaderData();
		var data = flat.flatten(s,kind);
		var textures = [];
		var buffers = [];
		c.texturesCount = 0;
		var g = flat.allocData.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var alloc = flat.allocData.h[g1.__id__];
			switch(g1.kind._hx_index) {
			case 0:
				var _g = [];
				var _g1 = 0;
				while(_g1 < alloc.length) {
					var a = alloc[_g1];
					++_g1;
					if(a.v != null) {
						_g.push(new hxsl_AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				var out = _g;
				var _g2 = 0;
				var _g3 = out.length - 1;
				while(_g2 < _g3) {
					var i = _g2++;
					out[i].next = out[i + 1];
				}
				var _g4 = g1.type;
				if(_g4._hx_index == 15) {
					var _gt = _g4.t;
					var _gsize = _g4.size;
					if(_gt._hx_index == 5) {
						if(_gt.size == 4) {
							if(_gt.t._hx_index == 1) {
								if(_gsize._hx_index == 0) {
									var size = _gsize.v;
									c.globals = out[0];
									c.globalsSize = size;
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
						} else {
							throw haxe_Exception.thrown("assert");
						}
					} else {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			case 2:
				var out1 = [];
				var count = 0;
				var _g5 = 0;
				while(_g5 < alloc.length) {
					var a1 = alloc[_g5];
					++_g5;
					if(a1.v == null) {
						continue;
					}
					var p = params.h[a1.v.id];
					if(p == null) {
						var ap = new hxsl_AllocParam(a1.v.name,a1.pos,-1,-1,a1.v.type);
						ap.perObjectGlobal = new hxsl_AllocGlobal(-1,this.getPath(a1.v),a1.v.type);
						out1.push(ap);
						++count;
						continue;
					}
					var ap1 = new hxsl_AllocParam(a1.v.name,a1.pos,p.instance,p.index,a1.v.type);
					var _g6 = a1.v.type;
					if(_g6._hx_index == 15) {
						var t = _g6.t;
						if(hxsl_Tools.isTexture(t)) {
							ap1.pos = -a1.size;
							count += a1.size;
						} else {
							++count;
						}
					} else {
						++count;
					}
					out1.push(ap1);
				}
				var _g7 = 0;
				var _g8 = out1.length - 1;
				while(_g7 < _g8) {
					var i1 = _g7++;
					out1[i1].next = out1[i1 + 1];
				}
				var _g9 = g1.type;
				if(_g9._hx_index == 15) {
					var _gt1 = _g9.t;
					var _gsize1 = _g9.size;
					var t1 = _gt1;
					if(hxsl_Tools.isTexture(t1)) {
						textures.push({ t : t1, all : out1});
						c.texturesCount += count;
					} else {
						switch(_gt1._hx_index) {
						case 5:
							if(_gt1.size == 4) {
								if(_gt1.t._hx_index == 1) {
									if(_gsize1._hx_index == 0) {
										var size1 = _gsize1.v;
										c.params = out1[0];
										c.paramsSize = size1;
									} else {
										throw haxe_Exception.thrown("assert");
									}
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
							break;
						case 16:
							var kind = _gt1.kind;
							var _g10 = 0;
							while(_g10 < out1.length) {
								var outBuf = out1[_g10];
								++_g10;
								if(outBuf != null) {
									buffers.push(outBuf);
								}
							}
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		if(textures.length > 0) {
			textures.sort(function(t1,t2) {
				var _g = t1.t;
				var _g1 = t2.t;
				switch(_g._hx_index) {
				case 10:
					if(_g1._hx_index == 10) {
						var t21 = _g1.dim;
						var a2 = _g1.isArray;
						var a1 = _g.isArray;
						var t11 = _g.dim;
						if(a1 != a2) {
							if(a1) {
								return 1;
							} else {
								return -1;
							}
						} else {
							return t11._hx_index - t21._hx_index;
						}
					} else {
						return t1.t._hx_index - t2.t._hx_index;
					}
					break;
				case 11:
					if(_g1._hx_index == 11) {
						var t21 = _g1.dim;
						var a2 = _g1.isArray;
						var a1 = _g.isArray;
						var t11 = _g.dim;
						if(a1 != a2) {
							if(a1) {
								return 1;
							} else {
								return -1;
							}
						} else {
							return t11._hx_index - t21._hx_index;
						}
					} else {
						return t1.t._hx_index - t2.t._hx_index;
					}
					break;
				default:
					return t1.t._hx_index - t2.t._hx_index;
				}
			});
			c.textures = textures[0].all[0];
			var _g = 1;
			var _g1 = textures.length;
			while(_g < _g1) {
				var i = _g++;
				var prevAll = textures[i - 1].all;
				var prev = prevAll[prevAll.length - 1];
				prev.next = textures[i].all[0];
			}
		}
		if(buffers.length > 0) {
			buffers.sort(function(b1,b2) {
				var _g = b1.type;
				var _g1 = b2.type;
				if(_g._hx_index == 16) {
					if(_g1._hx_index == 16) {
						var k2 = _g1.kind;
						var k1 = _g.kind;
						return k1._hx_index - k2._hx_index;
					} else {
						return b1.type._hx_index - b2.type._hx_index;
					}
				} else {
					return b1.type._hx_index - b2.type._hx_index;
				}
			});
		}
		var p = null;
		var _g = 0;
		while(_g < buffers.length) {
			var b = buffers[_g];
			++_g;
			if(c.buffers == null) {
				c.buffers = b;
				p = c.buffers;
			} else {
				p.next = b;
				p = p.next;
			}
		}
		c.bufferCount = buffers.length;
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		c.data = data;
		return c;
	}
	,__class__: hxsl_Cache
};
var hxsl_Channel = $hxEnums["hxsl.Channel"] = { __ename__:true,__constructs__:null
	,Unknown: {_hx_name:"Unknown",_hx_index:0,__enum__:"hxsl.Channel",toString:$estr}
	,R: {_hx_name:"R",_hx_index:1,__enum__:"hxsl.Channel",toString:$estr}
	,G: {_hx_name:"G",_hx_index:2,__enum__:"hxsl.Channel",toString:$estr}
	,B: {_hx_name:"B",_hx_index:3,__enum__:"hxsl.Channel",toString:$estr}
	,A: {_hx_name:"A",_hx_index:4,__enum__:"hxsl.Channel",toString:$estr}
	,PackedFloat: {_hx_name:"PackedFloat",_hx_index:5,__enum__:"hxsl.Channel",toString:$estr}
	,PackedNormal: {_hx_name:"PackedNormal",_hx_index:6,__enum__:"hxsl.Channel",toString:$estr}
};
hxsl_Channel.__constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
hxsl_Channel.__empty_constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
var hxsl__$Checker_FieldAccess = $hxEnums["hxsl._Checker.FieldAccess"] = { __ename__:true,__constructs__:null
	,FField: ($_=function(e) { return {_hx_index:0,e:e,__enum__:"hxsl._Checker.FieldAccess",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="FField",$_)
	,FGlobal: ($_=function(g,arg,variants) { return {_hx_index:1,g:g,arg:arg,variants:variants,__enum__:"hxsl._Checker.FieldAccess",toString:$estr,__params__:function(){ return [this.g,this.arg,this.variants];}}; },$_._hx_name="FGlobal",$_)
};
hxsl__$Checker_FieldAccess.__constructs__ = [hxsl__$Checker_FieldAccess.FField,hxsl__$Checker_FieldAccess.FGlobal];
hxsl__$Checker_FieldAccess.__empty_constructs__ = [];
var hxsl__$Checker_WithType = $hxEnums["hxsl._Checker.WithType"] = { __ename__:true,__constructs__:null
	,NoValue: {_hx_name:"NoValue",_hx_index:0,__enum__:"hxsl._Checker.WithType",toString:$estr}
	,Value: {_hx_name:"Value",_hx_index:1,__enum__:"hxsl._Checker.WithType",toString:$estr}
	,InBlock: {_hx_name:"InBlock",_hx_index:2,__enum__:"hxsl._Checker.WithType",toString:$estr}
	,With: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"hxsl._Checker.WithType",toString:$estr,__params__:function(){ return [this.t];}}; },$_._hx_name="With",$_)
};
hxsl__$Checker_WithType.__constructs__ = [hxsl__$Checker_WithType.NoValue,hxsl__$Checker_WithType.Value,hxsl__$Checker_WithType.InBlock,hxsl__$Checker_WithType.With];
hxsl__$Checker_WithType.__empty_constructs__ = [hxsl__$Checker_WithType.NoValue,hxsl__$Checker_WithType.Value,hxsl__$Checker_WithType.InBlock];
var hxsl_Checker = function() {
	this.globals = hxsl_Checker.initGlobals();
};
$hxClasses["hxsl.Checker"] = hxsl_Checker;
hxsl_Checker.__name__ = "hxsl.Checker";
hxsl_Checker.initGlobals = function() {
	var globals = hxsl_Checker.GLOBALS;
	if(hxsl_Checker.GLOBALS != null) {
		return hxsl_Checker.GLOBALS;
	}
	var globals = new haxe_ds_StringMap();
	var genType = [hxsl_Type.TFloat,hxsl_Checker.vec2,hxsl_Checker.vec3,hxsl_Checker.vec4];
	var genIType = [hxsl_Type.TInt,hxsl_Checker.ivec2,hxsl_Checker.ivec3,hxsl_Checker.ivec4];
	var baseType = [hxsl_Type.TFloat,hxsl_Type.TBool,hxsl_Type.TInt];
	var _g = [];
	var _g1 = 0;
	while(_g1 < genType.length) {
		var t = genType[_g1];
		++_g1;
		_g.push({ args : [{ name : "value", type : t}], ret : t});
	}
	var genFloat = _g;
	var _g = [];
	var _g1 = 0;
	while(_g1 < genType.length) {
		var t = genType[_g1];
		++_g1;
		_g.push({ args : [{ name : "a", type : t},{ name : "b", type : t}], ret : t});
	}
	var genFloat2 = _g;
	var _g = [];
	var _g1 = 0;
	while(_g1 < genType.length) {
		var t = genType[_g1];
		++_g1;
		_g.push({ args : [{ name : "a", type : t},{ name : "b", type : hxsl_Type.TFloat}], ret : t});
	}
	var genWithFloat = _g;
	var texDefs = [{ dim : hxsl_TexDimension.T1D, arr : false, uv : hxsl_Type.TFloat, iuv : hxsl_Type.TInt},{ dim : hxsl_TexDimension.T2D, arr : false, uv : hxsl_Checker.vec2, iuv : hxsl_Checker.ivec2},{ dim : hxsl_TexDimension.T3D, arr : false, uv : hxsl_Checker.vec3, iuv : hxsl_Checker.ivec3},{ dim : hxsl_TexDimension.TCube, arr : false, uv : hxsl_Checker.vec3, iuv : hxsl_Checker.ivec3},{ dim : hxsl_TexDimension.T1D, arr : true, uv : hxsl_Checker.vec2, iuv : hxsl_Checker.ivec2},{ dim : hxsl_TexDimension.T2D, arr : true, uv : hxsl_Checker.vec3, iuv : hxsl_Checker.ivec3},{ dim : hxsl_TexDimension.TCube, arr : true, uv : hxsl_Checker.vec4, iuv : hxsl_Checker.ivec4}];
	var gvars_h = Object.create(null);
	var _g = 0;
	var _g1 = hxsl_TGlobal.__empty_constructs__.slice();
	while(_g < _g1.length) {
		var g = _g1[_g];
		++_g;
		var def;
		switch(g._hx_index) {
		case 7:
			def = genFloat.concat(genFloat2);
			break;
		case 8:
			def = genFloat2;
			break;
		case 20:case 21:case 22:
			def = genFloat2.concat(genWithFloat);
			break;
		case 23:
			var r = [{ args : [{ name : "value", type : hxsl_Type.TInt},{ name : "min", type : hxsl_Type.TInt},{ name : "max", type : hxsl_Type.TInt}], ret : hxsl_Type.TInt}];
			var _g2 = 0;
			while(_g2 < genType.length) {
				var t = genType[_g2];
				++_g2;
				r.push({ args : [{ name : "value", type : t},{ name : "min", type : t},{ name : "max", type : t}], ret : t});
				if(t != hxsl_Type.TFloat) {
					r.push({ args : [{ name : "value", type : t},{ name : "min", type : hxsl_Type.TFloat},{ name : "max", type : hxsl_Type.TFloat}], ret : t});
				}
			}
			def = r;
			break;
		case 24:
			var r1 = [];
			var _g3 = 0;
			while(_g3 < genType.length) {
				var t1 = genType[_g3];
				++_g3;
				r1.push({ args : [{ name : "x", type : t1},{ name : "y", type : t1},{ name : "a", type : t1}], ret : t1});
				if(t1 != hxsl_Type.TFloat) {
					r1.push({ args : [{ name : "x", type : t1},{ name : "y", type : t1},{ name : "a", type : hxsl_Type.TFloat}], ret : t1});
				}
			}
			def = r1;
			break;
		case 25:
			def = [{ args : [{ name : "a", type : hxsl_Type.TFloat},{ name : "x", type : hxsl_Type.TFloat},{ name : "y", type : hxsl_Type.TFloat}], ret : hxsl_Type.TFloat}];
			break;
		case 26:
			var r2 = [];
			var _g4 = 0;
			while(_g4 < genType.length) {
				var t2 = genType[_g4];
				++_g4;
				r2.push({ args : [{ name : "edge", type : t2},{ name : "x", type : t2}], ret : t2});
				if(t2 != hxsl_Type.TFloat) {
					r2.push({ args : [{ name : "edge", type : hxsl_Type.TFloat},{ name : "x", type : t2}], ret : t2});
				}
			}
			def = r2;
			break;
		case 27:
			var r3 = [];
			var _g5 = 0;
			while(_g5 < genType.length) {
				var t3 = genType[_g5];
				++_g5;
				r3.push({ args : [{ name : "edge0", type : t3},{ name : "edge1", type : t3},{ name : "x", type : t3}], ret : t3});
				if(t3 != hxsl_Type.TFloat) {
					r3.push({ args : [{ name : "edge0", type : hxsl_Type.TFloat},{ name : "edge1", type : hxsl_Type.TFloat},{ name : "x", type : t3}], ret : t3});
				}
			}
			def = r3;
			break;
		case 28:
			var _g6 = [];
			var _g7 = 0;
			while(_g7 < genType.length) {
				var t4 = genType[_g7];
				++_g7;
				_g6.push({ args : [{ name : "value", type : t4}], ret : hxsl_Type.TFloat});
			}
			def = _g6;
			break;
		case 29:case 30:
			var _g8 = [];
			var _g9 = 0;
			while(_g9 < genType.length) {
				var t5 = genType[_g9];
				++_g9;
				_g8.push({ args : [{ name : "a", type : t5},{ name : "b", type : t5}], ret : hxsl_Type.TFloat});
			}
			def = _g8;
			break;
		case 31:
			def = [{ args : [{ name : "a", type : hxsl_Checker.vec3},{ name : "b", type : hxsl_Checker.vec3}], ret : hxsl_Checker.vec3}];
			break;
		case 32:
			def = genFloat;
			break;
		case 33:
			def = genFloat2;
			break;
		case 34:
			var _g10 = [];
			var _g11 = 0;
			while(_g11 < texDefs.length) {
				var t6 = texDefs[_g11];
				++_g11;
				_g10.push({ args : [{ name : "tex", type : hxsl_Type.TSampler(t6.dim,t6.arr)},{ name : "uv", type : t6.uv}], ret : hxsl_Checker.vec4});
			}
			def = _g10;
			break;
		case 35:
			var _g12 = [];
			var _g13 = 0;
			while(_g13 < texDefs.length) {
				var t7 = texDefs[_g13];
				++_g13;
				_g12.push({ args : [{ name : "tex", type : hxsl_Type.TSampler(t7.dim,t7.arr)},{ name : "uv", type : t7.uv},{ name : "lod", type : hxsl_Type.TFloat}], ret : hxsl_Checker.vec4});
			}
			def = _g12;
			break;
		case 36:
			var _g14 = [];
			var _g15 = 0;
			while(_g15 < texDefs.length) {
				var t8 = texDefs[_g15];
				++_g15;
				_g14.push({ args : [{ name : "tex", type : hxsl_Type.TSampler(t8.dim,t8.arr)},{ name : "pos", type : t8.iuv}], ret : hxsl_Checker.vec4});
			}
			def = _g14;
			break;
		case 37:
			def = [];
			break;
		case 38:
			var _g16 = [];
			var _g17 = 0;
			while(_g17 < baseType.length) {
				var t9 = baseType[_g17];
				++_g17;
				_g16.push({ args : [{ name : "value", type : t9}], ret : hxsl_Type.TInt});
			}
			def = _g16;
			break;
		case 39:
			var _g18 = [];
			var _g19 = 0;
			while(_g19 < baseType.length) {
				var t10 = baseType[_g19];
				++_g19;
				_g18.push({ args : [{ name : "value", type : t10}], ret : hxsl_Type.TFloat});
			}
			def = _g18;
			break;
		case 40:
			var _g20 = [];
			var _g21 = 0;
			while(_g21 < baseType.length) {
				var t11 = baseType[_g21];
				++_g21;
				_g20.push({ args : [{ name : "value", type : t11}], ret : hxsl_Type.TBool});
			}
			def = _g20;
			break;
		case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 48:case 49:case 50:case 51:case 52:case 53:
			def = [];
			break;
		case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 54:case 77:
			def = genFloat;
			break;
		case 55:
			def = [{ args : [{ name : "value", type : hxsl_Type.TFloat}], ret : hxsl_Checker.vec4}];
			break;
		case 56:
			def = [{ args : [{ name : "value", type : hxsl_Checker.vec4}], ret : hxsl_Type.TFloat}];
			break;
		case 57:
			def = [{ args : [{ name : "value", type : hxsl_Checker.vec3}], ret : hxsl_Checker.vec4}];
			break;
		case 58:
			def = [{ args : [{ name : "value", type : hxsl_Checker.vec4}], ret : hxsl_Checker.vec3}];
			break;
		case 59:
			def = [{ args : [{ name : "screenPos", type : hxsl_Checker.vec2}], ret : hxsl_Checker.vec2}];
			break;
		case 60:
			def = [{ args : [{ name : "uv", type : hxsl_Checker.vec2}], ret : hxsl_Checker.vec2}];
			break;
		case 61:case 62:case 63:
			def = genFloat;
			break;
		case 64:
			def = [{ args : [{ name : "channel", type : hxsl_Type.TChannel(1)},{ name : "uv", type : hxsl_Checker.vec2}], ret : hxsl_Type.TFloat},{ args : [{ name : "channel", type : hxsl_Type.TChannel(2)},{ name : "uv", type : hxsl_Checker.vec2}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(3)},{ name : "uv", type : hxsl_Checker.vec2}], ret : hxsl_Checker.vec3},{ args : [{ name : "channel", type : hxsl_Type.TChannel(4)},{ name : "uv", type : hxsl_Checker.vec2}], ret : hxsl_Checker.vec4}];
			break;
		case 65:
			def = [{ args : [{ name : "channel", type : hxsl_Type.TChannel(1)},{ name : "uv", type : hxsl_Checker.vec2},{ name : "lod", type : hxsl_Type.TFloat}], ret : hxsl_Type.TFloat},{ args : [{ name : "channel", type : hxsl_Type.TChannel(2)},{ name : "uv", type : hxsl_Checker.vec2},{ name : "lod", type : hxsl_Type.TFloat}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(3)},{ name : "uv", type : hxsl_Checker.vec2},{ name : "lod", type : hxsl_Type.TFloat}], ret : hxsl_Checker.vec3},{ args : [{ name : "channel", type : hxsl_Type.TChannel(4)},{ name : "uv", type : hxsl_Checker.vec2},{ name : "lod", type : hxsl_Type.TFloat}], ret : hxsl_Checker.vec4}];
			break;
		case 66:
			def = [{ args : [{ name : "channel", type : hxsl_Type.TChannel(1)},{ name : "pos", type : hxsl_Checker.ivec2}], ret : hxsl_Type.TFloat},{ args : [{ name : "channel", type : hxsl_Type.TChannel(2)},{ name : "pos", type : hxsl_Checker.ivec2}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(3)},{ name : "pos", type : hxsl_Checker.ivec2}], ret : hxsl_Checker.vec3},{ args : [{ name : "channel", type : hxsl_Type.TChannel(4)},{ name : "pos", type : hxsl_Checker.ivec2}], ret : hxsl_Checker.vec4},{ args : [{ name : "channel", type : hxsl_Type.TChannel(1)},{ name : "pos", type : hxsl_Checker.ivec2},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Type.TFloat},{ args : [{ name : "channel", type : hxsl_Type.TChannel(2)},{ name : "pos", type : hxsl_Checker.ivec2},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(3)},{ name : "pos", type : hxsl_Checker.ivec2},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec3},{ args : [{ name : "channel", type : hxsl_Type.TChannel(4)},{ name : "pos", type : hxsl_Checker.ivec2},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec4}];
			break;
		case 67:
			def = [{ args : [{ name : "channel", type : hxsl_Type.TChannel(1)}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(2)}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(3)}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(4)}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(1)},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(2)},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(3)},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(4)},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec2}];
			break;
		case 69:case 70:case 71:case 72:
			def = null;
			break;
		case 73:case 74:
			var _g22 = [];
			var _g_current = 0;
			var _g_array = genType;
			while(_g_current < _g_array.length) {
				var _g_value = _g_array[_g_current];
				var _g_key = _g_current++;
				var i = _g_key;
				var t12 = _g_value;
				_g22.push({ args : [{ name : "x", type : t12}], ret : genIType[i]});
			}
			def = _g22;
			break;
		case 75:case 76:
			var _g23 = [];
			var _g_current1 = 0;
			var _g_array1 = genType;
			while(_g_current1 < _g_array1.length) {
				var _g_value1 = _g_array1[_g_current1];
				var _g_key1 = _g_current1++;
				var i1 = _g_key1;
				var t13 = _g_value1;
				_g23.push({ args : [{ name : "x", type : genIType[i1]}], ret : t13});
			}
			def = _g23;
			break;
		case 78:
			def = [{ args : [{ name : "x", type : hxsl_Type.TInt},{ name : "y", type : hxsl_Type.TInt},{ name : "z", type : hxsl_Type.TInt}], ret : hxsl_Type.TVoid},{ args : [{ name : "x", type : hxsl_Type.TInt},{ name : "y", type : hxsl_Type.TInt}], ret : hxsl_Type.TVoid},{ args : [{ name : "x", type : hxsl_Type.TInt}], ret : hxsl_Type.TVoid}];
			break;
		case 79:
			def = [];
			break;
		case 84:
			def = [{ args : [{ name : "buf", type : hxsl_Type.TBuffer(hxsl_Type.TInt,hxsl_SizeDecl.SConst(0),hxsl_BufferKind.RW)},{ name : "index", type : hxsl_Type.TInt},{ name : "data", type : hxsl_Type.TInt}], ret : hxsl_Type.TInt}];
			break;
		case 68:case 85:
			def = [];
			break;
		case 86:
			if($hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name.indexOf("_") > 0) {
				var name = $hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name;
				var idx = name.indexOf("_");
				var vname = HxOverrides.substr(name,0,idx);
				vname = vname.charAt(0).toLowerCase() + HxOverrides.substr(vname,1,null);
				var vl = gvars_h[vname];
				if(vl == null) {
					vl = [];
					gvars_h[vname] = vl;
				}
				var vt;
				switch(g._hx_index) {
				case 80:case 81:case 82:
					vt = hxsl_Checker.ivec3;
					break;
				case 83:
					vt = hxsl_Type.TInt;
					break;
				default:
					throw haxe_Exception.thrown("Unknown type for global var " + Std.string(g));
				}
				var fname = HxOverrides.substr(name,idx + 1,null);
				fname = fname.charAt(0).toLowerCase() + HxOverrides.substr(fname,1,null);
				vl.push({ name : fname, type : vt});
				def = null;
			} else {
				def = [{ args : [{ name : "value", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec4}];
			}
			break;
		case 87:
			if($hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name.indexOf("_") > 0) {
				var name1 = $hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name;
				var idx1 = name1.indexOf("_");
				var vname1 = HxOverrides.substr(name1,0,idx1);
				vname1 = vname1.charAt(0).toLowerCase() + HxOverrides.substr(vname1,1,null);
				var vl1 = gvars_h[vname1];
				if(vl1 == null) {
					vl1 = [];
					gvars_h[vname1] = vl1;
				}
				var vt1;
				switch(g._hx_index) {
				case 80:case 81:case 82:
					vt1 = hxsl_Checker.ivec3;
					break;
				case 83:
					vt1 = hxsl_Type.TInt;
					break;
				default:
					throw haxe_Exception.thrown("Unknown type for global var " + Std.string(g));
				}
				var fname1 = HxOverrides.substr(name1,idx1 + 1,null);
				fname1 = fname1.charAt(0).toLowerCase() + HxOverrides.substr(fname1,1,null);
				vl1.push({ name : fname1, type : vt1});
				def = null;
			} else {
				def = [{ args : [{ name : "value", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec4}];
			}
			break;
		default:
			if($hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name.indexOf("_") > 0) {
				var name2 = $hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name;
				var idx2 = name2.indexOf("_");
				var vname2 = HxOverrides.substr(name2,0,idx2);
				vname2 = vname2.charAt(0).toLowerCase() + HxOverrides.substr(vname2,1,null);
				var vl2 = gvars_h[vname2];
				if(vl2 == null) {
					vl2 = [];
					gvars_h[vname2] = vl2;
				}
				var vt2;
				switch(g._hx_index) {
				case 80:case 81:case 82:
					vt2 = hxsl_Checker.ivec3;
					break;
				case 83:
					vt2 = hxsl_Type.TInt;
					break;
				default:
					throw haxe_Exception.thrown("Unknown type for global var " + Std.string(g));
				}
				var fname2 = HxOverrides.substr(name2,idx2 + 1,null);
				fname2 = fname2.charAt(0).toLowerCase() + HxOverrides.substr(fname2,1,null);
				vl2.push({ name : fname2, type : vt2});
				def = null;
			} else {
				throw haxe_Exception.thrown("Unsupported global " + Std.string(g));
			}
		}
		if(def != null) {
			var key = hxsl_Tools2.toString(g);
			globals.h[key] = { t : hxsl_Type.TFun(def), g : g};
		}
	}
	globals.h["vertexID"] = { t : hxsl_Type.TInt, g : hxsl_TGlobal.VertexID};
	globals.h["instanceID"] = { t : hxsl_Type.TInt, g : hxsl_TGlobal.InstanceID};
	globals.h["fragCoord"] = { t : hxsl_Checker.vec4, g : hxsl_TGlobal.FragCoord};
	globals.h["frontFacing"] = { t : hxsl_Type.TBool, g : hxsl_TGlobal.FrontFacing};
	var h = gvars_h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g_key = key;
		var _g_value = _g_h[key];
		var gname = _g_key;
		var vl = _g_value;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push({ name : v.name, kind : hxsl_VarKind.Global, type : v.type, id : 0});
		}
		globals.h[gname] = { t : hxsl_Type.TStruct(_g), g : null};
	}
	globals.h["int"] = globals.h["toInt"];
	globals.h["float"] = globals.h["toFloat"];
	globals.h["reflect"] = globals.h["lReflect"];
	globals.h["ivec" + 2] = globals.h["iVec" + 2];
	var key = "iVec" + 2;
	if(Object.prototype.hasOwnProperty.call(globals.h,key)) {
		delete(globals.h[key]);
	}
	globals.h["ivec" + 3] = globals.h["iVec" + 3];
	var key = "iVec" + 3;
	if(Object.prototype.hasOwnProperty.call(globals.h,key)) {
		delete(globals.h[key]);
	}
	globals.h["ivec" + 4] = globals.h["iVec" + 4];
	var key = "iVec" + 4;
	if(Object.prototype.hasOwnProperty.call(globals.h,key)) {
		delete(globals.h[key]);
	}
	if(Object.prototype.hasOwnProperty.call(globals.h,"lReflect")) {
		delete(globals.h["lReflect"]);
	}
	if(Object.prototype.hasOwnProperty.call(globals.h,"toInt")) {
		delete(globals.h["toInt"]);
	}
	if(Object.prototype.hasOwnProperty.call(globals.h,"toFloat")) {
		delete(globals.h["toFloat"]);
	}
	hxsl_Checker.GLOBALS = globals;
	return globals;
};
hxsl_Checker.prototype = {
	error: function(msg,pos) {
		return hxsl_Error.t(msg,pos);
	}
	,warning: function(msg,pos) {
	}
	,loadShader: function(path) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,check: function(name,shader) {
		this.vars = new haxe_ds_StringMap();
		this.inits = [];
		this.inLoop = false;
		this.inWhile = false;
		var funs = [];
		this.checkExpr(shader,funs,false,false);
		var tfuns = [];
		var _g = 0;
		while(_g < funs.length) {
			var f = funs[_g];
			++_g;
			var pos = f.p;
			var f1 = f.f;
			var _g1 = [];
			var _g2 = 0;
			var _g3 = f1.args;
			while(_g2 < _g3.length) {
				var a = _g3[_g2];
				++_g2;
				if(a.type == null) {
					this.error("Argument type required",pos);
				}
				if(a.expr != null) {
					this.error("Optional argument not supported",pos);
				}
				if(a.kind == null) {
					a.kind = hxsl_VarKind.Local;
				}
				if(a.kind != hxsl_VarKind.Local) {
					this.error("Argument should be local",pos);
				}
				if(a.qualifiers.length != 0) {
					this.error("No qualifier allowed for argument",pos);
				}
				_g1.push({ id : hxsl_Tools.allocVarId(), name : a.name, kind : hxsl_VarKind.Local, type : a.type});
			}
			var args = _g1;
			var kind;
			switch(f1.name) {
			case "fragment":
				kind = hxsl_FunctionKind.Fragment;
				break;
			case "main":
				kind = hxsl_FunctionKind.Main;
				break;
			case "vertex":
				kind = hxsl_FunctionKind.Vertex;
				break;
			default:
				kind = StringTools.startsWith(f1.name,"__init__") ? hxsl_FunctionKind.Init : hxsl_FunctionKind.Helper;
			}
			if(args.length != 0 && kind != hxsl_FunctionKind.Helper) {
				this.error(Std.string(kind) + " function should have no argument",pos);
			}
			var fv = hxsl_Tools.allocVarId();
			var f2 = f1.name;
			var _g4 = [];
			var _g5 = 0;
			while(_g5 < args.length) {
				var a1 = args[_g5];
				++_g5;
				_g4.push({ type : a1.type, name : a1.name});
			}
			var fv1 = { id : fv, name : f2, kind : hxsl_VarKind.Function, type : hxsl_Type.TFun([{ args : _g4, ret : f1.ret == null ? hxsl_Type.TVoid : f1.ret}])};
			var f3 = { kind : kind, ref : fv1, args : args, ret : f1.ret == null ? hxsl_Type.TVoid : f1.ret, expr : null};
			if(Object.prototype.hasOwnProperty.call(this.vars.h,fv1.name)) {
				this.error("Duplicate function name",pos);
			}
			this.vars.h[fv1.name] = fv1;
			tfuns.push(f3);
		}
		var _g = 0;
		var _g1 = tfuns.length;
		while(_g < _g1) {
			var i = _g++;
			this.typeFun(tfuns[i],funs[i].f.expr);
		}
		var localInits = [];
		var _g = 0;
		var _g1 = this.inits.slice();
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.v.kind == hxsl_VarKind.Local) {
				localInits.push({ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(i.v), p : i.e.p, t : i.v.type},i.e), p : i.e.p, t : i.v.type});
				HxOverrides.remove(this.inits,i);
			}
		}
		if(localInits.length > 0) {
			var fv = { id : hxsl_Tools.allocVarId(), name : "__init__consts__", kind : hxsl_VarKind.Function, type : hxsl_Type.TFun([{ args : [], ret : hxsl_Type.TVoid}])};
			if(Object.prototype.hasOwnProperty.call(this.vars.h,fv.name)) {
				this.error("assert",localInits[0].p);
			}
			this.vars.h[fv.name] = fv;
			tfuns.push({ kind : hxsl_FunctionKind.Init, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(localInits), p : localInits[0].p, t : hxsl_Type.TVoid}});
		}
		var vars = Lambda.array(this.vars);
		vars.sort(function(v1,v2) {
			return (v1.id < 0 ? -v1.id : v1.id) - (v2.id < 0 ? -v2.id : v2.id);
		});
		return { name : name, vars : vars, funs : tfuns};
	}
	,saveVars: function() {
		var old = new haxe_ds_StringMap();
		var h = this.vars.h;
		var v_h = h;
		var v_keys = Object.keys(h);
		var v_length = v_keys.length;
		var v_current = 0;
		while(v_current < v_length) {
			var v = v_keys[v_current++];
			old.h[v] = this.vars.h[v];
		}
		return old;
	}
	,typeFun: function(f,e) {
		var old = this.saveVars();
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.vars.h[a.name] = a;
		}
		this.curFun = f;
		f.expr = this.typeExpr(e,hxsl__$Checker_WithType.NoValue);
		this.vars = old;
	}
	,tryUnify: function(t1,t2) {
		if(Type.enumEq(t1,t2)) {
			return true;
		}
		switch(t1._hx_index) {
		case 5:
			if(t2._hx_index == 5) {
				var s2 = t2.size;
				var t21 = t2.t;
				var t11 = t1.t;
				var s1 = t1.size;
				if(s1 == s2 && t11 == t21) {
					return true;
				}
			}
			break;
		case 10:
			if(t2._hx_index == 10) {
				var dim2 = t2.dim;
				var arr2 = t2.isArray;
				var arr1 = t1.isArray;
				var dim1 = t1.dim;
				if(dim1 == dim2) {
					return arr1 == arr2;
				} else {
					return false;
				}
			}
			break;
		case 11:
			if(t2._hx_index == 11) {
				var dim2 = t2.dim;
				var arr2 = t2.isArray;
				var chans2 = t2.channels;
				var chans1 = t1.channels;
				var arr1 = t1.isArray;
				var dim1 = t1.dim;
				if(dim1 == dim2 && arr1 == arr2) {
					return chans1 == chans2;
				} else {
					return false;
				}
			}
			break;
		case 15:
			if(t2._hx_index == 15) {
				var t21 = t2.t;
				var size2 = t2.size;
				var size1 = t1.size;
				var t11 = t1.t;
				switch(size1._hx_index) {
				case 0:
					if(size2._hx_index == 0) {
						var b = size2.v;
						var a = size1.v;
						if(a != b) {
							return false;
						}
					} else {
						return false;
					}
					break;
				case 1:
					if(size2._hx_index == 1) {
						var v2 = size2.v;
						var v1 = size1.v;
						if(v1 != v2) {
							return false;
						}
					} else {
						return false;
					}
					break;
				default:
					return false;
				}
				return this.tryUnify(t11,t21);
			}
			break;
		case 17:
			if(t2._hx_index == 17) {
				var n2 = t2.size;
				var n1 = t1.size;
				if(n1 == n2) {
					return true;
				}
			}
			break;
		default:
		}
		return false;
	}
	,unify: function(t1,t2,p) {
		if(!this.tryUnify(t1,t2)) {
			this.error(hxsl_Tools.toString(t1) + " should be " + hxsl_Tools.toString(t2),p);
		}
	}
	,unifyExpr: function(e,t) {
		if(!this.tryUnify(e.t,t)) {
			if(e.t == hxsl_Type.TInt && t == hxsl_Type.TFloat) {
				this.toFloat(e);
				return;
			}
			this.error(hxsl_Tools.toString(e.t) + " should be " + hxsl_Tools.toString(t),e.p);
		}
	}
	,checkWrite: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			switch(v.kind._hx_index) {
			case 2:
				var _g1 = v.type;
				var tmp;
				switch(_g1._hx_index) {
				case 11:
					tmp = true;
					break;
				case 16:
					switch(_g1.kind._hx_index) {
					case 2:case 5:
						tmp = true;
						break;
					default:
						tmp = false;
					}
					break;
				default:
					tmp = false;
				}
				if(tmp) {
					return;
				}
				break;
			case 4:
				if(v.qualifiers == null || v.qualifiers.indexOf(hxsl_VarQualifier.Final) < 0) {
					return;
				} else {
					var _g1 = v.type;
					var tmp;
					switch(_g1._hx_index) {
					case 11:
						tmp = true;
						break;
					case 16:
						switch(_g1.kind._hx_index) {
						case 2:case 5:
							tmp = true;
							break;
						default:
							tmp = false;
						}
						break;
					default:
						tmp = false;
					}
					if(tmp) {
						return;
					}
				}
				break;
			case 3:case 5:
				return;
			default:
			}
			break;
		case 9:
			var e1 = _g.e;
			this.checkWrite(e1);
			return;
		case 16:
			var e1 = _g.e;
			this.checkWrite(e1);
			return;
		case 21:
			var e1 = _g.e;
			this.checkWrite(e1);
			return;
		default:
		}
		this.error("This expression cannot be assigned",e.p);
	}
	,typeWith: function(e,t) {
		if(t == null) {
			return this.typeExpr(e,hxsl__$Checker_WithType.Value);
		}
		var e1 = this.typeExpr(e,hxsl__$Checker_WithType.With(t));
		this.unifyExpr(e1,t);
		return e1;
	}
	,typeExpr: function(e,$with) {
		var _gthis = this;
		var type = null;
		var ed;
		var _g = e.expr;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 0:
				type = hxsl_Type.TVoid;
				break;
			case 1:
				type = hxsl_Type.TBool;
				break;
			case 2:
				var i = c.v;
				if($with._hx_index == 3) {
					if($with.t._hx_index == 3) {
						c = hxsl_Const.CFloat(i);
						type = hxsl_Type.TFloat;
					} else {
						type = hxsl_Type.TInt;
					}
				} else {
					type = hxsl_Type.TInt;
				}
				break;
			case 3:
				type = hxsl_Type.TFloat;
				break;
			case 4:
				type = hxsl_Type.TString;
				break;
			}
			ed = hxsl_TExprDef.TConst(c);
			break;
		case 1:
			var name = _g.i;
			var v = this.vars.h[name];
			if(v != null) {
				var canCall;
				switch(name) {
				case "fragment":case "main":case "vertex":
					canCall = false;
					break;
				default:
					canCall = !StringTools.startsWith(name,"__init__");
				}
				if(!canCall) {
					this.error("Function cannot be accessed",e.pos);
				}
				type = v.type;
				ed = hxsl_TExprDef.TVar(v);
			} else {
				var g = this.globals.h[name];
				if(g != null && g.g != null) {
					type = g.t;
					ed = hxsl_TExprDef.TGlobal(g.g);
				} else if(name == "PI") {
					type = hxsl_Type.TFloat;
					ed = hxsl_TExprDef.TConst(hxsl_Const.CFloat(Math.PI));
				} else {
					ed = this.error("Unknown identifier '" + name + "'",e.pos);
				}
			}
			break;
		case 2:
			var e1 = _g.e;
			var e2 = this.typeExpr(e1,$with);
			type = e2.t;
			ed = hxsl_TExprDef.TParenthesis(e2);
			break;
		case 3:
			var _ge = _g.e;
			var _gf = _g.f;
			var _gexpr = _ge.expr;
			if(_gexpr._hx_index == 1) {
				var name = _gexpr.i;
				var f = _gf;
				if(this.vars.h[name] == null && this.globals.h[name] != null && this.globals.h[name].g == null) {
					var _g1 = this.globals.h[name].t;
					if(_g1._hx_index == 13) {
						var vl = _g1.vl;
						var _g1 = 0;
						while(_g1 < vl.length) {
							var v = vl[_g1];
							++_g1;
							if(v.name == f) {
								var g = name.charAt(0).toUpperCase() + HxOverrides.substr(name,1,null) + "_" + f.charAt(0).toUpperCase() + HxOverrides.substr(f,1,null);
								return { e : hxsl_TExprDef.TGlobal(Type.createEnum(hxsl_TGlobal,g,null)), t : v.type, p : e.pos};
							}
						}
						var ed1 = name + " field should be ";
						var _g1 = [];
						var _g2 = 0;
						while(_g2 < vl.length) {
							var v = vl[_g2];
							++_g2;
							_g1.push(v.name);
						}
						ed = this.error(ed1 + _g1.join("|"),e.pos);
					} else {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					var e1 = _ge;
					var f = _gf;
					var e11 = this.typeExpr(e1,hxsl__$Checker_WithType.Value);
					var ef = this.fieldAccess(e11,f,$with,e.pos);
					if(ef == null) {
						this.error(hxsl_Tools.toString(e11.t) + " has no field '" + f + "'",e.pos);
					}
					switch(ef._hx_index) {
					case 0:
						var ef1 = ef.e;
						type = ef1.t;
						ed = ef1.e;
						break;
					case 1:
						ed = this.error("Global function must be called immediately",e.pos);
						break;
					}
				}
			} else {
				var e1 = _ge;
				var f = _gf;
				var e11 = this.typeExpr(e1,hxsl__$Checker_WithType.Value);
				var ef = this.fieldAccess(e11,f,$with,e.pos);
				if(ef == null) {
					this.error(hxsl_Tools.toString(e11.t) + " has no field '" + f + "'",e.pos);
				}
				switch(ef._hx_index) {
				case 0:
					var ef1 = ef.e;
					type = ef1.t;
					ed = ef1.e;
					break;
				case 1:
					ed = this.error("Global function must be called immediately",e.pos);
					break;
				}
			}
			break;
		case 4:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var e11 = this.typeExpr(e1,hxsl__$Checker_WithType.Value);
			var e21 = this.typeExpr(e2,hxsl__$Checker_WithType.With(e11.t));
			switch(op._hx_index) {
			case 4:
				this.checkWrite(e11);
				this.unify(e21.t,e11.t,e21.p);
				type = e11.t;
				break;
			case 20:
				var op1 = op.op;
				this.checkWrite(e11);
				this.unify(this.typeBinop(op1,e11,e21,e.pos),e11.t,e21.p);
				type = e11.t;
				break;
			default:
				type = this.typeBinop(op,e11,e21,e.pos);
			}
			ed = hxsl_TExprDef.TBinop(op,e11,e21);
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e11 = this.typeExpr(e1,hxsl__$Checker_WithType.Value);
			switch(op._hx_index) {
			case 0:case 1:
				switch(e11.t._hx_index) {
				case 1:case 3:
					break;
				default:
					this.error("Cannot increment " + hxsl_Tools.toString(e11.t),e.pos);
				}
				type = hxsl_Type.TVoid;
				ed = hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssignOp(op == haxe_macro_Unop.OpIncrement ? haxe_macro_Binop.OpAdd : haxe_macro_Binop.OpSub),e11,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(1)), t : hxsl_Type.TInt, p : e11.p});
				break;
			case 2:
				this.unifyExpr(e11,hxsl_Type.TBool);
				type = hxsl_Type.TBool;
				ed = hxsl_TExprDef.TUnop(op,e11);
				break;
			case 3:
				var _g1 = e11.t;
				switch(_g1._hx_index) {
				case 1:case 3:
					break;
				case 5:
					switch(_g1.t._hx_index) {
					case 0:case 1:
						break;
					default:
						this.error("Cannot negate " + hxsl_Tools.toString(e11.t),e.pos);
					}
					break;
				default:
					this.error("Cannot negate " + hxsl_Tools.toString(e11.t),e.pos);
				}
				type = e11.t;
				ed = hxsl_TExprDef.TUnop(op,e11);
				break;
			default:
				ed = this.error("Operation non supported",e.pos);
			}
			break;
		case 6:
			var e1 = _g.e;
			var args = _g.args;
			var makeCall = function(e1) {
				var _g = e1.t;
				if(_g._hx_index == 14) {
					var variants = _g.variants;
					var e2 = _gthis.unifyCallParams(e1,args,variants,e.pos);
					type = e2.t;
					return e2.e;
				} else {
					return _gthis.error(hxsl_Tools.toString(e1.t) + " cannot be called",e.pos);
				}
			};
			var _g1 = e1.expr;
			if(_g1._hx_index == 3) {
				var e11 = _g1.e;
				var f = _g1.f;
				var e12 = this.typeExpr(e11,hxsl__$Checker_WithType.Value);
				var ef = this.fieldAccess(e12,f,$with,e.pos);
				if(ef == null) {
					this.error(hxsl_Tools.toString(e12.t) + " has no field '" + f + "'",e.pos);
				}
				switch(ef._hx_index) {
				case 0:
					var ef1 = ef.e;
					ed = makeCall(ef1);
					break;
				case 1:
					var g = ef.g;
					var arg = ef.arg;
					var variants = ef.variants;
					var eg = { e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TFun(variants), p : e12.p};
					if(variants.length == 0) {
						var _g1 = [];
						var _g2 = 0;
						while(_g2 < args.length) {
							var a = args[_g2];
							++_g2;
							_g1.push(this.typeExpr(a,hxsl__$Checker_WithType.Value));
						}
						var args1 = _g1;
						args1.unshift(arg);
						var e2 = this.specialGlobal(g,eg,args1,e.pos);
						type = e2.t;
						ed = e2.e;
					} else {
						var e2 = this.unifyCallParams(eg,args,variants,e.pos);
						var _g1 = e2.e;
						var _g2 = eg.t;
						if(_g1._hx_index == 8) {
							if(_g2._hx_index == 14) {
								var _gvariants = _g2.variants;
								if(_gvariants.length == 1) {
									var f = _gvariants[0];
									var args1 = _g1.args;
									args1.unshift(arg);
									f.args.unshift({ name : "_", type : arg.t});
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
						} else {
							throw haxe_Exception.thrown("assert");
						}
						type = e2.t;
						ed = e2.e;
					}
					break;
				}
			} else {
				ed = makeCall(this.typeExpr(e1,hxsl__$Checker_WithType.Value));
			}
			break;
		case 7:
			var el = _g.el;
			var old = this.saveVars();
			var el1 = el.slice();
			var tl = [];
			$with = this.propagate($with);
			if(el1.length == 0 && $with != hxsl__$Checker_WithType.NoValue) {
				this.error("Value expected",e.pos);
			}
			while(true) {
				var e1 = el1.shift();
				if(e1 == null) {
					break;
				}
				var _g1 = e1.expr;
				if(_g1._hx_index == 8) {
					var vl = _g1.v;
					if(vl.length > 1) {
						var v0 = vl.shift();
						el1.unshift(e1);
						e1 = { expr : hxsl_ExprDef.EVars([v0]), pos : e1.pos};
					}
				}
				var ew = e1.expr._hx_index == 8 ? hxsl__$Checker_WithType.InBlock : el1.length == 0 ? $with : hxsl__$Checker_WithType.NoValue;
				var et = this.typeExpr(e1,ew);
				if(el1.length != 0 && !hxsl_Tools.hasSideEffect(et)) {
					this.warning("This expression has no side effect",e1.pos);
				}
				tl.push(et);
			}
			this.vars = old;
			type = $with == hxsl__$Checker_WithType.NoValue ? hxsl_Type.TVoid : tl[tl.length - 1].t;
			ed = hxsl_TExprDef.TBlock(tl);
			break;
		case 8:
			var vl = _g.v;
			if($with != hxsl__$Checker_WithType.InBlock) {
				this.error("Cannot declare a variable outside of a block",e.pos);
			}
			if(vl.length != 1) {
				throw haxe_Exception.thrown("assert");
			}
			var v = vl[0];
			if(v.kind == null) {
				v.kind = hxsl_VarKind.Local;
			}
			if(v.kind != hxsl_VarKind.Local) {
				this.error("Should be local var",e.pos);
			}
			if(v.qualifiers.length != 0) {
				this.error("Unexpected qualifier",e.pos);
			}
			var tv = this.makeVar(vl[0],e.pos);
			var init = v.expr == null ? null : this.typeWith(v.expr,tv.type);
			if(tv.type == null) {
				if(init == null) {
					this.error("Type required for unitialized local var",e.pos);
				}
				tv.type = init.t;
			}
			this.vars.h[tv.name] = tv;
			type = hxsl_Type.TVoid;
			ed = hxsl_TExprDef.TVarDecl(tv,init);
			break;
		case 9:
			throw haxe_Exception.thrown("assert");
		case 10:
			var cond = _g.econd;
			var e1 = _g.eif;
			var e2 = _g.eelse;
			$with = this.propagate($with);
			var cond1 = this.typeWith(cond,hxsl_Type.TBool);
			var e11 = this.typeExpr(e1,$with);
			var e21 = e2 == null ? null : this.typeExpr(e2,$with);
			if($with == hxsl__$Checker_WithType.NoValue) {
				type = hxsl_Type.TVoid;
				ed = hxsl_TExprDef.TIf(cond1,e11,e21);
			} else {
				if(e21 == null) {
					this.error("Missing else",e.pos);
				}
				if(this.tryUnify(e11.t,e21.t)) {
					type = e11.t;
				} else {
					this.unifyExpr(e21,e11.t);
					type = e21.t;
				}
				ed = hxsl_TExprDef.TIf(cond1,e11,e21);
			}
			break;
		case 11:
			type = hxsl_Type.TVoid;
			ed = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var v = _g.v;
			var it = _g.loop;
			var block = _g.block;
			type = hxsl_Type.TVoid;
			var it1 = this.typeExpr(it,hxsl__$Checker_WithType.Value);
			var _g1 = it1.t;
			if(_g1._hx_index == 15) {
				var t = _g1.t;
				var v1 = { id : hxsl_Tools.allocVarId(), name : v, type : t, kind : hxsl_VarKind.Local};
				var old = this.vars.h[v1.name];
				this.vars.h[v1.name] = v1;
				var oldL = this.inLoop;
				this.inLoop = true;
				var block1 = this.typeExpr(block,hxsl__$Checker_WithType.NoValue);
				this.inLoop = oldL;
				if(old == null) {
					var key = v1.name;
					var _this = this.vars;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
				} else {
					this.vars.h[v1.name] = old;
				}
				ed = hxsl_TExprDef.TFor(v1,it1,block1);
			} else {
				ed = this.error("Cannot iterate on " + hxsl_Tools.toString(it1.t),it1.p);
			}
			break;
		case 13:
			var e1 = _g.e;
			if(e1 == null != (this.curFun.ret == hxsl_Type.TVoid)) {
				this.error("This function should return " + hxsl_Tools.toString(this.curFun.ret),e.pos);
			}
			var e2 = e1 == null ? null : this.typeWith(e1,this.curFun.ret);
			type = hxsl_Type.TVoid;
			ed = hxsl_TExprDef.TReturn(e2);
			break;
		case 14:
			if(!this.inLoop) {
				this.error("Break outside loop",e.pos);
			}
			type = hxsl_Type.TVoid;
			ed = hxsl_TExprDef.TBreak;
			break;
		case 15:
			if(!this.inLoop) {
				this.error("Continue outside loop",e.pos);
			}
			type = hxsl_Type.TVoid;
			ed = hxsl_TExprDef.TContinue;
			break;
		case 16:
			var e1 = _g.e;
			var e2 = _g.eindex;
			var e11 = this.typeExpr(e1,hxsl__$Checker_WithType.Value);
			var e21 = this.typeExpr(e2,hxsl__$Checker_WithType.With(hxsl_Type.TInt));
			this.unify(e21.t,hxsl_Type.TInt,e21.p);
			var _g1 = e11.t;
			switch(_g1._hx_index) {
			case 5:
				switch(_g1.t._hx_index) {
				case 0:
					type = hxsl_Type.TInt;
					break;
				case 1:
					type = hxsl_Type.TFloat;
					break;
				default:
					this.error("Cannot index " + hxsl_Tools.toString(e11.t) + " : should be an array",e.pos);
				}
				break;
			case 6:
				type = hxsl_Checker.vec3;
				break;
			case 7:case 8:
				type = hxsl_Checker.vec4;
				break;
			case 12:
				type = hxsl_Checker.vec2;
				break;
			case 15:
				var t = _g1.t;
				var size = _g1.size;
				var _g2 = e21.e;
				if(size._hx_index == 0) {
					if(_g2._hx_index == 0) {
						var _gc = _g2.c;
						if(_gc._hx_index == 2) {
							var _gv = _gc.v;
							var i = _gv;
							var v = size.v;
							if(i >= v) {
								this.error("Indexing outside array bounds",e.pos);
							} else {
								var i = _gv;
								if(i < 0) {
									this.error("Cannot index with negative value",e.pos);
								}
							}
						}
					}
				} else if(_g2._hx_index == 0) {
					var _gc = _g2.c;
					if(_gc._hx_index == 2) {
						var i = _gc.v;
						if(i < 0) {
							this.error("Cannot index with negative value",e.pos);
						}
					}
				}
				type = t;
				break;
			case 16:
				var _gt = _g1.t;
				var _gsize = _g1.size;
				switch(_g1.kind._hx_index) {
				case 0:case 3:
					var size = _gsize;
					var t = _gt;
					var _g1 = e21.e;
					if(size._hx_index == 0) {
						if(_g1._hx_index == 0) {
							var _gc = _g1.c;
							if(_gc._hx_index == 2) {
								var _gv = _gc.v;
								var i = _gv;
								var v = size.v;
								if(i >= v) {
									this.error("Indexing outside array bounds",e.pos);
								} else {
									var i = _gv;
									if(i < 0) {
										this.error("Cannot index with negative value",e.pos);
									}
								}
							}
						}
					} else if(_g1._hx_index == 0) {
						var _gc = _g1.c;
						if(_gc._hx_index == 2) {
							var i = _gc.v;
							if(i < 0) {
								this.error("Cannot index with negative value",e.pos);
							}
						}
					}
					type = t;
					break;
				default:
					var size = _gsize;
					var t = _gt;
					type = t;
				}
				break;
			default:
				this.error("Cannot index " + hxsl_Tools.toString(e11.t) + " : should be an array",e.pos);
			}
			ed = hxsl_TExprDef.TArray(e11,e21);
			break;
		case 17:
			var el = _g.el;
			if(el.length == 0) {
				this.error("Empty array not supported",e.pos);
			}
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < el.length) {
				var e1 = el[_g2];
				++_g2;
				_g1.push(this.typeExpr(e1,hxsl__$Checker_WithType.Value));
			}
			var el = _g1;
			var t = el[0].t;
			var _g1 = 1;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				this.unifyExpr(el[i],t);
			}
			type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(el.length));
			ed = hxsl_TExprDef.TArrayDecl(el);
			break;
		case 18:
			var e1 = _g.e;
			var cases = _g.cases;
			var def = _g.def;
			var et = this.typeExpr(e1,hxsl__$Checker_WithType.Value);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < cases.length) {
				var c = cases[_g2];
				++_g2;
				var _g3 = [];
				var _g4 = 0;
				var _g5 = c.values;
				while(_g4 < _g5.length) {
					var v = _g5[_g4];
					++_g4;
					_g3.push(this.typeWith(v,et.t));
				}
				_g1.push({ values : _g3, expr : this.typeExpr(c.expr,$with)});
			}
			var cases = _g1;
			var def1 = def == null ? null : this.typeExpr(def,$with);
			type = hxsl_Type.TVoid;
			ed = hxsl_TExprDef.TSwitch(et,cases,def1);
			break;
		case 19:
			var cond = _g.cond;
			var loop = _g.loop;
			var normalWhile = _g.normalWhile;
			type = hxsl_Type.TVoid;
			var cond1 = this.typeWith(cond,hxsl_Type.TBool);
			var oldL = this.inLoop;
			var oldW = this.inWhile;
			this.inLoop = true;
			this.inWhile = true;
			var loop1 = this.typeExpr(loop,hxsl__$Checker_WithType.NoValue);
			this.inLoop = oldL;
			this.inWhile = oldW;
			ed = hxsl_TExprDef.TWhile(cond1,loop1,normalWhile);
			break;
		case 20:
			var name = _g.name;
			var args1 = _g.args;
			var e1 = _g.e;
			var e2 = this.typeExpr(e1,$with);
			type = e2.t;
			var _g = [];
			var _g1 = 0;
			while(_g1 < args1.length) {
				var c = args1[_g1];
				++_g1;
				var _g2 = c.expr;
				var ed1;
				switch(_g2._hx_index) {
				case 0:
					var c1 = _g2.c;
					ed1 = c1;
					break;
				case 1:
					var i = _g2.i;
					ed1 = hxsl_Const.CString(i);
					break;
				default:
					ed1 = this.error("Metadata parameter should be constant",c.pos);
				}
				_g.push(ed1);
			}
			ed = hxsl_TExprDef.TMeta(name,_g,e2);
			break;
		}
		if(type == null) {
			throw haxe_Exception.thrown("assert");
		}
		return { e : ed, t : type, p : e.pos};
	}
	,propagate: function($with) {
		if($with._hx_index == 2) {
			return hxsl__$Checker_WithType.NoValue;
		} else {
			return $with;
		}
	}
	,checkExpr: function(e,funs,isImport,isExtends) {
		var _gthis = this;
		var _g = e.expr;
		switch(_g._hx_index) {
		case 6:
			var _gargs = _g.args;
			var _gexpr = _g.e.expr;
			if(_gexpr._hx_index == 1) {
				switch(_gexpr.i) {
				case "extends":
					if(_gargs.length == 1) {
						var e1 = _gargs[0];
						var path = [];
						var loop = null;
						loop = function(e) {
							var _g = e.expr;
							switch(_g._hx_index) {
							case 0:
								var _gc = _g.c;
								if(_gc._hx_index == 4) {
									var s = _gc.v;
									path.push(s);
								} else {
									_gthis.error("Should be a shader type path",e.pos);
								}
								break;
							case 1:
								var n = _g.i;
								path.push(n);
								break;
							case 3:
								var e1 = _g.e;
								var f = _g.f;
								loop(e1);
								path.push(f);
								break;
							default:
								_gthis.error("Should be a shader type path",e.pos);
							}
						};
						loop(e1);
						var sexpr = null;
						try {
							sexpr = this.loadShader(path.join("."));
						} catch( _g1 ) {
							var _g2 = haxe_Exception.caught(_g1).unwrap();
							if(((_g2) instanceof hxsl_Error)) {
								var err = _g2;
								this.error(Std.string(err),e1.pos);
							} else {
								throw _g1;
							}
						}
						if(sexpr != null) {
							this.checkExpr(sexpr,funs,isImport,true);
						}
					} else {
						this.error("This expression is not allowed at shader declaration level",e.pos);
					}
					break;
				case "import":
					if(_gargs.length == 1) {
						var e1 = _gargs[0];
						var path1 = [];
						var loop1 = null;
						loop1 = function(e) {
							var _g = e.expr;
							switch(_g._hx_index) {
							case 1:
								var n = _g.i;
								path1.push(n);
								break;
							case 3:
								var e1 = _g.e;
								var f = _g.f;
								loop1(e1);
								path1.push(f);
								break;
							default:
								_gthis.error("Should be a shader type path",e.pos);
							}
						};
						loop1(e1);
						var sexpr = null;
						try {
							sexpr = this.loadShader(path1.join("."));
						} catch( _g1 ) {
							var _g2 = haxe_Exception.caught(_g1);
							var _g3 = _g2.unwrap();
							if(((_g2) instanceof haxe_macro_Error)) {
								var err = _g2;
								throw err;
							} else {
								var err = _g3;
								this.error(Std.string(err),e1.pos);
							}
						}
						if(sexpr != null) {
							this.checkExpr(sexpr,funs,true,isExtends);
						}
					} else {
						this.error("This expression is not allowed at shader declaration level",e.pos);
					}
					break;
				default:
					this.error("This expression is not allowed at shader declaration level",e.pos);
				}
			} else {
				this.error("This expression is not allowed at shader declaration level",e.pos);
			}
			break;
		case 7:
			var el = _g.el;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				this.checkExpr(e1,funs,isImport,isExtends);
			}
			break;
		case 8:
			var vl = _g.v;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				if(v.kind == null) {
					v.kind = hxsl_VarKind.Local;
					var _g2 = 0;
					var _g3 = v.qualifiers;
					while(_g2 < _g3.length) {
						var q = _g3[_g2];
						++_g2;
						if(q._hx_index == 0) {
							v.kind = hxsl_VarKind.Param;
						}
					}
				}
				var einit = null;
				if(v.expr != null) {
					if(v.kind != hxsl_VarKind.Param && v.kind != hxsl_VarKind.Local) {
						this.error("Cannot initialize variable declaration if not @param or local",v.expr.pos);
					}
					var e1 = this.typeExpr(v.expr,v.type == null ? hxsl__$Checker_WithType.Value : hxsl__$Checker_WithType.With(v.type));
					if(v.type == null) {
						v.type = e1.t;
					} else {
						this.unify(e1.t,v.type,v.expr.pos);
					}
					this.checkConst(e1);
					einit = e1;
				}
				if(v.type == null) {
					this.error("Type required for variable declaration",e.pos);
				}
				if(isImport && v.kind == hxsl_VarKind.Param) {
					continue;
				}
				if(Object.prototype.hasOwnProperty.call(this.vars.h,v.name)) {
					this.error("Duplicate var decl '" + v.name + "'",e.pos);
				}
				var v1 = this.makeVar(v,e.pos);
				var _g4 = v1.type;
				switch(_g4._hx_index) {
				case 10:
					if(_g4.dim._hx_index == 2) {
						if(_g4.isArray == true) {
							this.error("Unsupported texture type",e.pos);
						}
					}
					break;
				case 11:
					var _gchannels = _g4.channels;
					if(_g4.dim._hx_index == 2) {
						if(_g4.isArray == true) {
							this.error("Unsupported texture type",e.pos);
						} else if(_gchannels == 3) {
							this.error("Unsupported texture type",e.pos);
						}
					} else if(_gchannels == 3) {
						this.error("Unsupported texture type",e.pos);
					}
					break;
				default:
				}
				if(einit != null) {
					this.inits.push({ v : v1, e : einit});
				} else if(v1.qualifiers != null && v1.qualifiers.indexOf(hxsl_VarQualifier.Final) >= 0) {
					this.error("Final variable needs initializer",e.pos);
				}
				this.vars.h[v1.name] = v1;
			}
			break;
		case 9:
			var f = _g.f;
			if(isImport && (f.name == "fragment" || f.name == "vertex" || StringTools.startsWith(f.name,"__init__"))) {
				return;
			}
			var _g = 0;
			var _g1 = funs.slice();
			while(_g < _g1.length) {
				var f2 = _g1[_g];
				++_g;
				if(f2.f.name == f.name && f2.inherit) {
					HxOverrides.remove(funs,f2);
				}
			}
			funs.push({ f : f, p : e.pos, inherit : isExtends || isImport});
			break;
		default:
			this.error("This expression is not allowed at shader declaration level",e.pos);
		}
	}
	,checkConst: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			break;
		case 3:
			var e1 = _g.e;
			this.checkConst(e1);
			break;
		case 8:
			var _gargs = _g.args;
			var _ge = _g.e.e;
			if(_ge._hx_index == 2) {
				switch(_ge.g._hx_index) {
				case 41:case 42:case 43:case 44:case 45:case 46:
					var args = _gargs;
					var _g1 = 0;
					while(_g1 < args.length) {
						var a = args[_g1];
						++_g1;
						this.checkConst(a);
					}
					break;
				default:
					this.error("This expression should be constant",e.p);
				}
			} else {
				this.error("This expression should be constant",e.p);
			}
			break;
		case 17:
			var el = _g.el;
			var _g = 0;
			while(_g < el.length) {
				var e1 = el[_g];
				++_g;
				this.checkConst(e1);
			}
			break;
		default:
			this.error("This expression should be constant",e.p);
		}
	}
	,makeVar: function(v,pos,parent) {
		var tv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type, qualifiers : v.qualifiers};
		if(parent != null) {
			tv.parent = parent;
		}
		if(tv.kind == null) {
			if(parent == null) {
				tv.kind = hxsl_VarKind.Local;
			} else {
				tv.kind = parent.kind;
			}
		} else if(parent != null && tv.kind != parent.kind) {
			if(parent.kind._hx_index == 0) {
				if(tv.kind._hx_index != 3) {
					this.error("Variable " + Std.string(parent.kind) + " cannot be changed to " + Std.string(tv.kind),pos);
				}
			} else {
				this.error("Variable " + Std.string(parent.kind) + " cannot be changed to " + Std.string(tv.kind),pos);
			}
		}
		if(v.qualifiers.length > 0) {
			tv.qualifiers = v.qualifiers;
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				switch(q._hx_index) {
				case 0:
					var p = parent;
					while(p != null) {
						if(!hxsl_Tools.isStruct(p)) {
							this.error("@const only allowed in structure",pos);
						}
						p = p.parent;
					}
					if(tv.kind != hxsl_VarKind.Global && tv.kind != hxsl_VarKind.Param) {
						this.error("@const only allowed on parameter or global",pos);
					}
					break;
				case 1:
					break;
				case 2:
					if(tv.kind != hxsl_VarKind.Param) {
						this.error("@nullable only allowed on parameter or global",pos);
					}
					break;
				case 3:
					if(tv.kind != hxsl_VarKind.Global) {
						this.error("@perObject only allowed on global",pos);
					}
					break;
				case 4:
					if(parent != null) {
						this.error("Cannot have an explicit name for a structure variable",pos);
					}
					if(tv.kind != hxsl_VarKind.Global) {
						this.error("Explicit name is only allowed for global var",pos);
					}
					break;
				case 5:
					if(parent != null) {
						this.error("Cannot share a structure field",pos);
					}
					if(tv.kind != hxsl_VarKind.Param) {
						this.error("Can only share a @param",pos);
					}
					break;
				case 6:
					var _g2 = v.type;
					if(_g2 == null) {
						this.error("Precision qualifier not supported on " + Std.string(v.type),pos);
					} else {
						switch(_g2._hx_index) {
						case 3:
							break;
						case 5:
							if(_g2.t._hx_index != 1) {
								this.error("Precision qualifier not supported on " + Std.string(v.type),pos);
							}
							break;
						default:
							this.error("Precision qualifier not supported on " + Std.string(v.type),pos);
						}
					}
					break;
				case 7:
					var min = q.min;
					var max = q.max;
					var _g3 = v.type;
					if(_g3 == null) {
						this.error("Precision qualifier not supported on " + Std.string(v.type),pos);
					} else {
						switch(_g3._hx_index) {
						case 1:case 3:
							break;
						case 5:
							if(_g3.t._hx_index != 1) {
								this.error("Precision qualifier not supported on " + Std.string(v.type),pos);
							}
							break;
						default:
							this.error("Precision qualifier not supported on " + Std.string(v.type),pos);
						}
					}
					break;
				case 8:
					break;
				case 9:
					if(tv.kind != hxsl_VarKind.Input && tv.kind != hxsl_VarKind.Param && (tv.kind != hxsl_VarKind.Global || v.qualifiers.indexOf(hxsl_VarQualifier.PerObject) < 0)) {
						this.error("@perInstance only allowed on input/param",pos);
					}
					break;
				case 10:
					break;
				case 11:
					var source = q.source;
					if(v.kind != hxsl_VarKind.Local) {
						this.error("Borrow should not have a type qualifier",pos);
					}
					break;
				case 12:
					var _g4 = v.type;
					if(_g4 == null) {
						this.error("Sampler should be on sampler type or sampler array",pos);
					} else {
						switch(_g4._hx_index) {
						case 10:
							break;
						case 15:
							if(_g4.t._hx_index != 10) {
								this.error("Sampler should be on sampler type or sampler array",pos);
							}
							break;
						default:
							this.error("Sampler should be on sampler type or sampler array",pos);
						}
					}
					break;
				case 13:
					if(tv.kind != hxsl_VarKind.Local) {
						this.error("final only allowed on local",pos);
					}
					break;
				case 14:
					if(tv.kind != hxsl_VarKind.Local) {
						this.error("flat only allowed on local",pos);
					}
					break;
				}
			}
		}
		if(tv.type != null) {
			tv.type = this.makeVarType(tv.type,tv,pos);
		}
		return tv;
	}
	,makeVarType: function(vt,parent,pos) {
		switch(vt._hx_index) {
		case 13:
			var vl = vt.vl;
			var vl1 = vl.slice();
			parent.type = hxsl_Type.TStruct(vl1);
			var _g = 0;
			var _g1 = vl1.length;
			while(_g < _g1) {
				var i = _g++;
				var v = vl1[i];
				vl1[i] = this.makeVar({ type : v.type, qualifiers : v.qualifiers, name : v.name, kind : v.kind, expr : null},pos,parent);
			}
			return parent.type;
		case 15:
			var t = vt.t;
			var size = vt.size;
			if(t._hx_index == 15) {
				this.error("Multidimentional arrays are not allowed",pos);
			}
			var s;
			switch(size._hx_index) {
			case 0:
				s = size;
				break;
			case 1:
				var v = size.v;
				var path = v.name.split(".");
				var v2 = null;
				var _g = 0;
				while(_g < path.length) {
					var n = path[_g];
					++_g;
					if(v2 == null) {
						v2 = this.vars.h[n];
						if(v2 == null && parent != null) {
							var p = parent;
							while(p.parent != null) p = p.parent;
							if(p.name == n) {
								v2 = p;
							}
						}
					} else {
						var _g1 = v2.type;
						if(_g1._hx_index == 13) {
							var vl = _g1.vl;
							var f = null;
							var _g2 = 0;
							while(_g2 < vl.length) {
								var v1 = vl[_g2];
								++_g2;
								if(v1.name == n) {
									f = v1;
									break;
								}
							}
							v2 = f;
						} else {
							v2 = null;
						}
					}
					if(v2 == null) {
						break;
					}
				}
				if(v2 == null) {
					this.error("Array size variable '" + v.name + "'not found",pos);
				}
				if(!hxsl_Tools.isConst(v2)) {
					this.error("Array size variable '" + v.name + "'should be a constant",pos);
				}
				s = hxsl_SizeDecl.SVar(v2);
				break;
			}
			t = this.makeVarType(t,parent,pos);
			switch(vt._hx_index) {
			case 15:
				return hxsl_Type.TArray(t,s);
			case 16:
				var kind = vt.kind;
				return hxsl_Type.TBuffer(t,s,kind);
			default:
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 16:
			var t = vt.t;
			var size = vt.size;
			if(t._hx_index == 15) {
				this.error("Multidimentional arrays are not allowed",pos);
			}
			var s;
			switch(size._hx_index) {
			case 0:
				s = size;
				break;
			case 1:
				var v = size.v;
				var path = v.name.split(".");
				var v2 = null;
				var _g = 0;
				while(_g < path.length) {
					var n = path[_g];
					++_g;
					if(v2 == null) {
						v2 = this.vars.h[n];
						if(v2 == null && parent != null) {
							var p = parent;
							while(p.parent != null) p = p.parent;
							if(p.name == n) {
								v2 = p;
							}
						}
					} else {
						var _g1 = v2.type;
						if(_g1._hx_index == 13) {
							var vl = _g1.vl;
							var f = null;
							var _g2 = 0;
							while(_g2 < vl.length) {
								var v1 = vl[_g2];
								++_g2;
								if(v1.name == n) {
									f = v1;
									break;
								}
							}
							v2 = f;
						} else {
							v2 = null;
						}
					}
					if(v2 == null) {
						break;
					}
				}
				if(v2 == null) {
					this.error("Array size variable '" + v.name + "'not found",pos);
				}
				if(!hxsl_Tools.isConst(v2)) {
					this.error("Array size variable '" + v.name + "'should be a constant",pos);
				}
				s = hxsl_SizeDecl.SVar(v2);
				break;
			}
			t = this.makeVarType(t,parent,pos);
			switch(vt._hx_index) {
			case 15:
				return hxsl_Type.TArray(t,s);
			case 16:
				var kind = vt.kind;
				return hxsl_Type.TBuffer(t,s,kind);
			default:
				throw haxe_Exception.thrown("assert");
			}
			break;
		default:
			return vt;
		}
	}
	,isParentArray: function(v) {
		if(v.parent == null) {
			return false;
		}
		switch(v.parent.type._hx_index) {
		case 13:
			return this.isParentArray(v.parent);
		case 15:
			return true;
		case 16:
			return true;
		default:
			return false;
		}
	}
	,fieldAccess: function(e,f,$with,pos) {
		var ef;
		var _g = e.t;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var found = null;
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				if(v.name == f) {
					found = v;
					break;
				}
			}
			ef = found == null ? null : this.isParentArray(found) ? { e : hxsl_TExprDef.TField(e,f), t : found.type, p : pos} : { e : hxsl_TExprDef.TVar(found), t : found.type, p : pos};
		} else {
			ef = null;
		}
		if(ef != null) {
			return hxsl__$Checker_FieldAccess.FField(ef);
		}
		var g = this.globals.h[f];
		if(g == null) {
			var gl;
			var _g = e.t;
			switch(f) {
			case "fetch":
				switch(_g._hx_index) {
				case 10:
					gl = hxsl_TGlobal.Texel;
					break;
				case 17:
					gl = hxsl_TGlobal.ChannelFetch;
					break;
				default:
					gl = null;
				}
				break;
			case "fetchLod":
				switch(_g._hx_index) {
				case 10:
					gl = hxsl_TGlobal.Texel;
					break;
				case 17:
					gl = hxsl_TGlobal.ChannelFetch;
					break;
				default:
					gl = null;
				}
				break;
			case "get":
				switch(_g._hx_index) {
				case 10:
					gl = hxsl_TGlobal.Texture;
					break;
				case 17:
					gl = hxsl_TGlobal.ChannelRead;
					break;
				default:
					gl = null;
				}
				break;
			case "getLod":
				switch(_g._hx_index) {
				case 10:
					gl = hxsl_TGlobal.TextureLod;
					break;
				case 17:
					gl = hxsl_TGlobal.ChannelReadLod;
					break;
				default:
					gl = null;
				}
				break;
			case "size":
				switch(_g._hx_index) {
				case 10:
					gl = hxsl_TGlobal.TextureSize;
					break;
				case 11:
					gl = hxsl_TGlobal.TextureSize;
					break;
				case 17:
					gl = hxsl_TGlobal.ChannelTextureSize;
					break;
				default:
					gl = null;
				}
				break;
			case "store":
				gl = _g._hx_index == 11 ? hxsl_TGlobal.ImageStore : null;
				break;
			default:
				gl = null;
			}
			if(gl != null) {
				if(f == "get" && this.inWhile) {
					this.error("Cannot use .get() in while loop, use .getLod instead",pos);
				}
				var this1 = this.globals;
				var key = hxsl_Tools2.toString(gl);
				g = this1.h[key];
			}
		}
		if(g != null) {
			var _g = g.t;
			if(_g._hx_index == 14) {
				var variants = _g.variants;
				var sel = [];
				var _g = 0;
				while(_g < variants.length) {
					var v = variants[_g];
					++_g;
					if(v.args.length == 0 || !this.tryUnify(e.t,v.args[0].type)) {
						continue;
					}
					var args = v.args.slice();
					args.shift();
					sel.push({ args : args, ret : v.ret});
				}
				if(sel.length > 0 || variants.length == 0) {
					return hxsl__$Checker_FieldAccess.FGlobal(g.g,e,sel);
				}
			}
			if(g.g._hx_index == 28) {
				if(e.t._hx_index == 15) {
					return hxsl__$Checker_FieldAccess.FField({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Length), t : hxsl_Type.TVoid, p : pos},[e]), t : hxsl_Type.TInt, p : pos});
				}
			}
		}
		var stype;
		var ncomps;
		var _g = e.t;
		switch(_g._hx_index) {
		case 1:
			stype = hxsl_VecType.VInt;
			ncomps = 1;
			break;
		case 2:
			stype = hxsl_VecType.VBool;
			ncomps = 1;
			break;
		case 3:
			stype = hxsl_VecType.VFloat;
			ncomps = 1;
			break;
		case 5:
			var size = _g.size;
			var t = _g.t;
			stype = t;
			ncomps = size;
			break;
		case 9:
			var size = _g.size;
			stype = hxsl_VecType.VFloat;
			ncomps = size;
			break;
		default:
			stype = null;
			ncomps = 0;
		}
		if(ncomps > 0 && f.length <= 4) {
			var str = "xrsygtzbpwaq";
			var comps = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
			var cat = -1;
			var out = [];
			var _g = 0;
			var _g1 = f.length;
			while(_g < _g1) {
				var i = _g++;
				var idx = str.indexOf(f.charAt(i));
				if(idx < 0) {
					return null;
				}
				var icat = idx % 3;
				if(cat < 0) {
					cat = icat;
				} else if(icat != cat) {
					return null;
				}
				var cid = idx / 3 | 0;
				if(cid >= ncomps) {
					this.error(hxsl_Tools.toString(e.t) + " does not have component " + f.charAt(i),pos);
				}
				out.push(comps[cid]);
			}
			return hxsl__$Checker_FieldAccess.FField({ e : hxsl_TExprDef.TSwiz(e,out), t : out.length == 1 ? hxsl_Tools.toType(stype) : hxsl_Type.TVec(out.length,stype), p : pos});
		}
		return null;
	}
	,getSizeType: function(size,vtype) {
		switch(size) {
		case 1:
			if(vtype == hxsl_VecType.VInt) {
				return hxsl_Type.TInt;
			} else {
				return hxsl_Type.TFloat;
			}
			break;
		case 2:
			if(vtype == hxsl_VecType.VInt) {
				return hxsl_Checker.ivec2;
			} else {
				return hxsl_Checker.vec2;
			}
			break;
		case 3:
			if(vtype == hxsl_VecType.VInt) {
				return hxsl_Checker.ivec3;
			} else {
				return hxsl_Checker.vec3;
			}
			break;
		case 4:
			if(vtype == hxsl_VecType.VInt) {
				return hxsl_Checker.ivec4;
			} else {
				return hxsl_Checker.vec4;
			}
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,specialGlobal: function(g,e,args,pos) {
		var _gthis = this;
		var type = null;
		switch(g._hx_index) {
		case 37:
			if(args.length != 1) {
				this.error("TextureSize() requires one single argument",pos);
			}
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:
				var dim = _g.dim;
				var arr = _g.isArray;
				type = this.getSizeType(hxsl_Tools.getDimSize(dim,arr),hxsl_VecType.VFloat);
				break;
			case 11:
				var dim = _g.dim;
				var arr = _g.isArray;
				type = this.getSizeType(hxsl_Tools.getDimSize(dim,arr),hxsl_VecType.VFloat);
				break;
			default:
				this.unify(args[0].t,hxsl_Type.TSampler(hxsl_TexDimension.T2D,false),args[0].p);
				type = hxsl_Checker.vec2;
			}
			break;
		case 41:
			var t = hxsl_Type.TFloat;
			var skip = false;
			if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
				var _g = args[0].t;
				if(_g._hx_index == 5) {
					var n2 = _g.size;
					var t2 = _g.t;
					if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == 2) {
						skip = true;
					}
				}
			}
			if(!skip) {
				var tsize = 0;
				var _g = 0;
				while(_g < args.length) {
					var a = args[_g];
					++_g;
					var _g1 = a.t;
					if(_g1._hx_index == 5) {
						var size = _g1.size;
						var k = _g1.t;
						if(hxsl_Tools.toType(k) != t) {
							_gthis.unify(a.t,t,a.p);
						}
						tsize += size;
					} else {
						_gthis.unifyExpr(a,t);
						++tsize;
					}
				}
				if(tsize != 2 && tsize > 1) {
					_gthis.error(hxsl_Tools2.toString(g) + " requires " + 2 + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
				}
			}
			type = hxsl_Type.TVec(2,hxsl_VecType.VFloat);
			break;
		case 42:
			var t = hxsl_Type.TFloat;
			var skip = false;
			if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
				var _g = args[0].t;
				if(_g._hx_index == 5) {
					var n2 = _g.size;
					var t2 = _g.t;
					if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == 3) {
						skip = true;
					}
				}
			}
			if(!skip) {
				var tsize = 0;
				var _g = 0;
				while(_g < args.length) {
					var a = args[_g];
					++_g;
					var _g1 = a.t;
					if(_g1._hx_index == 5) {
						var size = _g1.size;
						var k = _g1.t;
						if(hxsl_Tools.toType(k) != t) {
							_gthis.unify(a.t,t,a.p);
						}
						tsize += size;
					} else {
						_gthis.unifyExpr(a,t);
						++tsize;
					}
				}
				if(tsize != 3 && tsize > 1) {
					_gthis.error(hxsl_Tools2.toString(g) + " requires " + 3 + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
				}
			}
			type = hxsl_Type.TVec(3,hxsl_VecType.VFloat);
			break;
		case 43:
			var t = hxsl_Type.TFloat;
			var skip = false;
			if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
				var _g = args[0].t;
				if(_g._hx_index == 5) {
					var n2 = _g.size;
					var t2 = _g.t;
					if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == 4) {
						skip = true;
					}
				}
			}
			if(!skip) {
				var tsize = 0;
				var _g = 0;
				while(_g < args.length) {
					var a = args[_g];
					++_g;
					var _g1 = a.t;
					if(_g1._hx_index == 5) {
						var size = _g1.size;
						var k = _g1.t;
						if(hxsl_Tools.toType(k) != t) {
							_gthis.unify(a.t,t,a.p);
						}
						tsize += size;
					} else {
						_gthis.unifyExpr(a,t);
						++tsize;
					}
				}
				if(tsize != 4 && tsize > 1) {
					_gthis.error(hxsl_Tools2.toString(g) + " requires " + 4 + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
				}
			}
			type = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
			break;
		case 44:case 45:case 46:
			var k;
			switch(g._hx_index) {
			case 44:
				k = 2;
				break;
			case 45:
				k = 3;
				break;
			case 46:
				k = 4;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			if(args.length == 1) {
				switch(args[0].t._hx_index) {
				case 1:case 3:
					break;
				default:
					var t = hxsl_Type.TInt;
					var skip = false;
					if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
						var _g = args[0].t;
						if(_g._hx_index == 5) {
							var n2 = _g.size;
							var t2 = _g.t;
							if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == k) {
								skip = true;
							}
						}
					}
					if(!skip) {
						var tsize = 0;
						var _g = 0;
						while(_g < args.length) {
							var a = args[_g];
							++_g;
							var _g1 = a.t;
							if(_g1._hx_index == 5) {
								var size = _g1.size;
								var k1 = _g1.t;
								if(hxsl_Tools.toType(k1) != t) {
									_gthis.unify(a.t,t,a.p);
								}
								tsize += size;
							} else {
								_gthis.unifyExpr(a,t);
								++tsize;
							}
						}
						if(tsize != k && tsize > 1) {
							_gthis.error(hxsl_Tools2.toString(g) + " requires " + k + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
						}
					}
				}
			} else {
				var t = hxsl_Type.TInt;
				var skip = false;
				if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
					var _g = args[0].t;
					if(_g._hx_index == 5) {
						var n2 = _g.size;
						var t2 = _g.t;
						if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == k) {
							skip = true;
						}
					}
				}
				if(!skip) {
					var tsize = 0;
					var _g = 0;
					while(_g < args.length) {
						var a = args[_g];
						++_g;
						var _g1 = a.t;
						if(_g1._hx_index == 5) {
							var size = _g1.size;
							var k1 = _g1.t;
							if(hxsl_Tools.toType(k1) != t) {
								_gthis.unify(a.t,t,a.p);
							}
							tsize += size;
						} else {
							_gthis.unifyExpr(a,t);
							++tsize;
						}
					}
					if(tsize != k && tsize > 1) {
						_gthis.error(hxsl_Tools2.toString(g) + " requires " + k + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
					}
				}
			}
			type = hxsl_Type.TVec(k,hxsl_VecType.VInt);
			break;
		case 47:
			var t = hxsl_Type.TBool;
			var skip = false;
			if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
				var _g = args[0].t;
				if(_g._hx_index == 5) {
					var n2 = _g.size;
					var t2 = _g.t;
					if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == 2) {
						skip = true;
					}
				}
			}
			if(!skip) {
				var tsize = 0;
				var _g = 0;
				while(_g < args.length) {
					var a = args[_g];
					++_g;
					var _g1 = a.t;
					if(_g1._hx_index == 5) {
						var size = _g1.size;
						var k = _g1.t;
						if(hxsl_Tools.toType(k) != t) {
							_gthis.unify(a.t,t,a.p);
						}
						tsize += size;
					} else {
						_gthis.unifyExpr(a,t);
						++tsize;
					}
				}
				if(tsize != 2 && tsize > 1) {
					_gthis.error(hxsl_Tools2.toString(g) + " requires " + 2 + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
				}
			}
			type = hxsl_Type.TVec(2,hxsl_VecType.VBool);
			break;
		case 48:
			var t = hxsl_Type.TBool;
			var skip = false;
			if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
				var _g = args[0].t;
				if(_g._hx_index == 5) {
					var n2 = _g.size;
					var t2 = _g.t;
					if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == 3) {
						skip = true;
					}
				}
			}
			if(!skip) {
				var tsize = 0;
				var _g = 0;
				while(_g < args.length) {
					var a = args[_g];
					++_g;
					var _g1 = a.t;
					if(_g1._hx_index == 5) {
						var size = _g1.size;
						var k = _g1.t;
						if(hxsl_Tools.toType(k) != t) {
							_gthis.unify(a.t,t,a.p);
						}
						tsize += size;
					} else {
						_gthis.unifyExpr(a,t);
						++tsize;
					}
				}
				if(tsize != 3 && tsize > 1) {
					_gthis.error(hxsl_Tools2.toString(g) + " requires " + 3 + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
				}
			}
			type = hxsl_Type.TVec(3,hxsl_VecType.VBool);
			break;
		case 49:
			var t = hxsl_Type.TBool;
			var skip = false;
			if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
				var _g = args[0].t;
				if(_g._hx_index == 5) {
					var n2 = _g.size;
					var t2 = _g.t;
					if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == 4) {
						skip = true;
					}
				}
			}
			if(!skip) {
				var tsize = 0;
				var _g = 0;
				while(_g < args.length) {
					var a = args[_g];
					++_g;
					var _g1 = a.t;
					if(_g1._hx_index == 5) {
						var size = _g1.size;
						var k = _g1.t;
						if(hxsl_Tools.toType(k) != t) {
							_gthis.unify(a.t,t,a.p);
						}
						tsize += size;
					} else {
						_gthis.unifyExpr(a,t);
						++tsize;
					}
				}
				if(tsize != 4 && tsize > 1) {
					_gthis.error(hxsl_Tools2.toString(g) + " requires " + 4 + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
				}
			}
			type = hxsl_Type.TVec(4,hxsl_VecType.VBool);
			break;
		case 50:
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(a.t);
			}
			var _g1 = _g;
			switch(_g1.length) {
			case 1:
				if(_g1[0]._hx_index == 12) {
					type = hxsl_Type.TMat2;
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			case 2:
				var _ga = _g1[0];
				var _ga1 = _g1[1];
				if(_ga._hx_index == 5) {
					if(_ga.size == 2) {
						if(_ga.t._hx_index == 1) {
							if(_ga1._hx_index == 5) {
								if(_ga1.size == 2) {
									if(_ga1.t._hx_index == 1) {
										type = hxsl_Type.TMat2;
									} else {
										this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
									}
								} else {
									this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
								}
							} else {
								this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
							}
						} else {
							this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
						}
					} else {
						this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
					}
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			case 4:
				if(_g1[0]._hx_index == 3) {
					if(_g1[1]._hx_index == 3) {
						if(_g1[2]._hx_index == 3) {
							if(_g1[3]._hx_index == 3) {
								type = hxsl_Type.TMat2;
							} else {
								this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
							}
						} else {
							this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
						}
					} else {
						this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
					}
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			default:
				this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
			}
			break;
		case 51:
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(a.t);
			}
			var _g1 = _g;
			switch(_g1.length) {
			case 1:
				switch(_g1[0]._hx_index) {
				case 7:case 8:
					type = hxsl_Type.TMat3;
					break;
				default:
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			case 3:
				var _ga = _g1[0];
				var _ga1 = _g1[1];
				var _ga2 = _g1[2];
				if(_ga._hx_index == 5) {
					if(_ga.size == 3) {
						if(_ga.t._hx_index == 1) {
							if(_ga1._hx_index == 5) {
								if(_ga1.size == 3) {
									if(_ga1.t._hx_index == 1) {
										if(_ga2._hx_index == 5) {
											if(_ga2.size == 3) {
												if(_ga2.t._hx_index == 1) {
													type = hxsl_Type.TMat3;
												} else {
													this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
												}
											} else {
												this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
											}
										} else {
											this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
										}
									} else {
										this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
									}
								} else {
									this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
								}
							} else {
								this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
							}
						} else {
							this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
						}
					} else {
						this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
					}
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			case 9:
				if(_g1[0]._hx_index == 3) {
					if(_g1[1]._hx_index == 3) {
						if(_g1[2]._hx_index == 3) {
							if(_g1[3]._hx_index == 3) {
								if(_g1[4]._hx_index == 3) {
									if(_g1[5]._hx_index == 3) {
										if(_g1[6]._hx_index == 3) {
											if(_g1[7]._hx_index == 3) {
												if(_g1[8]._hx_index == 3) {
													type = hxsl_Type.TMat3;
												} else {
													this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
												}
											} else {
												this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
											}
										} else {
											this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
										}
									} else {
										this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
									}
								} else {
									this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
								}
							} else {
								this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
							}
						} else {
							this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
						}
					} else {
						this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
					}
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			default:
				this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
			}
			break;
		case 52:
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(a.t);
			}
			var _g1 = _g;
			switch(_g1.length) {
			case 1:
				if(_g1[0]._hx_index == 7) {
					type = hxsl_Type.TMat4;
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			case 4:
				var _ga = _g1[0];
				var _ga1 = _g1[1];
				var _ga2 = _g1[2];
				var _ga3 = _g1[3];
				if(_ga._hx_index == 5) {
					if(_ga.size == 4) {
						if(_ga.t._hx_index == 1) {
							if(_ga1._hx_index == 5) {
								if(_ga1.size == 4) {
									if(_ga1.t._hx_index == 1) {
										if(_ga2._hx_index == 5) {
											if(_ga2.size == 4) {
												if(_ga2.t._hx_index == 1) {
													if(_ga3._hx_index == 5) {
														if(_ga3.size == 4) {
															if(_ga3.t._hx_index == 1) {
																type = hxsl_Type.TMat4;
															} else {
																this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
															}
														} else {
															this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
														}
													} else {
														this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
													}
												} else {
													this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
												}
											} else {
												this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
											}
										} else {
											this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
										}
									} else {
										this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
									}
								} else {
									this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
								}
							} else {
								this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
							}
						} else {
							this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
						}
					} else {
						this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
					}
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			default:
				this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
			}
			break;
		case 53:
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(a.t);
			}
			var _g1 = _g;
			switch(_g1.length) {
			case 1:
				if(_g1[0]._hx_index == 7) {
					type = hxsl_Type.TMat3x4;
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			case 3:
				var _ga = _g1[0];
				var _ga1 = _g1[1];
				var _ga2 = _g1[2];
				if(_ga._hx_index == 5) {
					if(_ga.size == 4) {
						if(_ga.t._hx_index == 1) {
							if(_ga1._hx_index == 5) {
								if(_ga1.size == 4) {
									if(_ga1.t._hx_index == 1) {
										if(_ga2._hx_index == 5) {
											if(_ga2.size == 4) {
												if(_ga2.t._hx_index == 1) {
													type = hxsl_Type.TMat3x4;
												} else {
													this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
												}
											} else {
												this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
											}
										} else {
											this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
										}
									} else {
										this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
									}
								} else {
									this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
								}
							} else {
								this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
							}
						} else {
							this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
						}
					} else {
						this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
					}
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			default:
				this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
			}
			break;
		case 68:
			type = hxsl_Type.TVoid;
			break;
		case 79:
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(a.t);
			}
			var _g1 = _g;
			if(_g1.length == 3) {
				var _ga = _g1[0];
				if(_ga._hx_index == 11) {
					var dim = _ga.dim;
					var arr = _ga.isArray;
					var chans = _ga.channels;
					var uv = _g1[1];
					var color = _g1[2];
					var szt = this.getSizeType(hxsl_Tools.getDimSize(dim,arr),hxsl_VecType.VInt);
					this.unify(uv,szt,args[1].p);
					this.unify(color,chans == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(chans,hxsl_VecType.VFloat),args[2].p);
					type = hxsl_Type.TVoid;
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
			} else {
				this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
			}
			break;
		default:
		}
		if(type == null) {
			throw haxe_Exception.thrown("Custom Global not supported " + Std.string(g));
		}
		return { e : hxsl_TExprDef.TCall(e,args), t : type, p : pos};
	}
	,unifyCallParams: function(efun,args,variants,pos) {
		var minArgs = 1000;
		var maxArgs = -1000;
		var sel = [];
		var _g = 0;
		while(_g < variants.length) {
			var v = variants[_g];
			++_g;
			var n = v.args.length;
			if(n < minArgs) {
				minArgs = n;
			}
			if(n > maxArgs) {
				maxArgs = n;
			}
			if(n == args.length) {
				sel.push(v);
			}
		}
		switch(sel.length) {
		case 0:
			if(variants.length == 0) {
				var _g = efun.e;
				if(_g._hx_index == 2) {
					var g = _g.g;
					var _g = [];
					var _g1 = 0;
					while(_g1 < args.length) {
						var a = args[_g1];
						++_g1;
						_g.push(this.typeExpr(a,hxsl__$Checker_WithType.Value));
					}
					return this.specialGlobal(g,efun,_g,pos);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				return this.error("Function expects " + (minArgs == maxArgs ? "" + minArgs : minArgs + "-" + maxArgs) + " arguments",pos);
			}
			break;
		case 1:
			var f = sel[0];
			var targs = [];
			var _g = 0;
			var _g1 = args.length;
			while(_g < _g1) {
				var i = _g++;
				var ft = f.args[i].type;
				var a = this.typeExpr(args[i],hxsl__$Checker_WithType.With(ft));
				try {
					this.unifyExpr(a,ft);
				} catch( _g2 ) {
					var _g3 = haxe_Exception.caught(_g2).unwrap();
					if(((_g3) instanceof hxsl_Error)) {
						var e = _g3;
						e.msg += " for argument '" + f.args[i].name + "'";
						throw haxe_Exception.thrown(e);
					} else {
						throw _g2;
					}
				}
				targs.push(a);
			}
			if(variants.length > 1) {
				efun.t = hxsl_Type.TFun([f]);
			}
			return { e : hxsl_TExprDef.TCall(efun,targs), t : f.ret, p : pos};
		default:
			var bestMatch = null;
			var mcount = -1;
			var _g = 0;
			while(_g < sel.length) {
				var f = sel[_g];
				++_g;
				var outArgs = [];
				var _g1 = 0;
				var _g2 = args.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var a = this.typeExpr(args[i],hxsl__$Checker_WithType.With(f.args[i].type));
					if(!this.tryUnify(a.t,f.args[i].type)) {
						break;
					}
					outArgs.push(a);
				}
				if(outArgs.length > mcount) {
					bestMatch = f;
					mcount = outArgs.length;
					if(mcount == args.length) {
						efun.t = hxsl_Type.TFun([f]);
						return { e : hxsl_TExprDef.TCall(efun,outArgs), t : f.ret, p : pos};
					}
				}
			}
			var _g = 0;
			var _g1 = args.length;
			while(_g < _g1) {
				var i = _g++;
				try {
					var e = this.typeExpr(args[i],hxsl__$Checker_WithType.Value);
					this.unify(e.t,bestMatch.args[i].type,e.p);
				} catch( _g2 ) {
					var _g3 = haxe_Exception.caught(_g2).unwrap();
					if(((_g3) instanceof hxsl_Error)) {
						var e1 = _g3;
						e1.msg += " for argument '" + bestMatch.args[i].name + "'";
						throw haxe_Exception.thrown(e1);
					} else {
						throw _g2;
					}
				}
			}
			throw haxe_Exception.thrown("assert");
		}
	}
	,toFloat: function(e) {
		if(e.t != hxsl_Type.TInt) {
			throw haxe_Exception.thrown("assert");
		}
		var _g = e.e;
		if(_g._hx_index == 0) {
			var _gc = _g.c;
			if(_gc._hx_index == 2) {
				var v = _gc.v;
				e.e = hxsl_TExprDef.TConst(hxsl_Const.CFloat(v));
				e.t = hxsl_Type.TFloat;
			} else {
				e.e = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : e.p},[{ e : e.e, t : e.t, p : e.p}]);
				e.t = hxsl_Type.TFloat;
			}
		} else {
			e.e = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : e.p},[{ e : e.e, t : e.t, p : e.p}]);
			e.t = hxsl_Type.TFloat;
		}
	}
	,typeBinop: function(op,e1,e2,pos) {
		switch(op._hx_index) {
		case 4:
			throw haxe_Exception.thrown("assert");
		case 5:case 6:case 7:case 8:case 9:case 10:
			switch(e1.t._hx_index) {
			case 2:
				if((op == haxe_macro_Binop.OpEq || op == haxe_macro_Binop.OpNotEq) && e2.t != hxsl_Type.TVoid) {
					this.unifyExpr(e2,e1.t);
					return hxsl_Type.TBool;
				} else {
					var _g = e1.e;
					var _g1 = e2.e;
					switch(_g._hx_index) {
					case 0:
						if(_g.c._hx_index == 0) {
							if(_g1._hx_index == 1) {
								var v = _g1.v;
								if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
									this.error("Variable is not declared as nullable",e1.p);
								}
								return hxsl_Type.TBool;
							} else {
								return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					case 1:
						if(_g1._hx_index == 0) {
							if(_g1.c._hx_index == 0) {
								var v = _g.v;
								if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
									this.error("Variable is not declared as nullable",e1.p);
								}
								return hxsl_Type.TBool;
							} else {
								return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
				}
				break;
			case 1:case 3:case 4:
				if(e2.t != hxsl_Type.TVoid) {
					this.unifyExpr(e2,e1.t);
					return hxsl_Type.TBool;
				} else {
					var _g = e1.e;
					var _g1 = e2.e;
					switch(_g._hx_index) {
					case 0:
						if(_g.c._hx_index == 0) {
							if(_g1._hx_index == 1) {
								var v = _g1.v;
								if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
									this.error("Variable is not declared as nullable",e1.p);
								}
								return hxsl_Type.TBool;
							} else {
								return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					case 1:
						if(_g1._hx_index == 0) {
							if(_g1.c._hx_index == 0) {
								var v = _g.v;
								if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
									this.error("Variable is not declared as nullable",e1.p);
								}
								return hxsl_Type.TBool;
							} else {
								return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
				}
				break;
			case 5:
				if(e2.t != hxsl_Type.TVoid) {
					this.unifyExpr(e2,e1.t);
					return e1.t;
				} else {
					var _g = e1.e;
					var _g1 = e2.e;
					switch(_g._hx_index) {
					case 0:
						if(_g.c._hx_index == 0) {
							if(_g1._hx_index == 1) {
								var v = _g1.v;
								if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
									this.error("Variable is not declared as nullable",e1.p);
								}
								return hxsl_Type.TBool;
							} else {
								return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					case 1:
						if(_g1._hx_index == 0) {
							if(_g1.c._hx_index == 0) {
								var v = _g.v;
								if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
									this.error("Variable is not declared as nullable",e1.p);
								}
								return hxsl_Type.TBool;
							} else {
								return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
				}
				break;
			default:
				var _g = e1.e;
				var _g1 = e2.e;
				switch(_g._hx_index) {
				case 0:
					if(_g.c._hx_index == 0) {
						if(_g1._hx_index == 1) {
							var v = _g1.v;
							if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
								this.error("Variable is not declared as nullable",e1.p);
							}
							return hxsl_Type.TBool;
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
					} else {
						return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				case 1:
					if(_g1._hx_index == 0) {
						if(_g1.c._hx_index == 0) {
							var v = _g.v;
							if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
								this.error("Variable is not declared as nullable",e1.p);
							}
							return hxsl_Type.TBool;
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
					} else {
						return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				default:
					return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
				}
			}
			break;
		case 11:case 12:case 13:case 16:case 17:case 18:
			this.unifyExpr(e1,hxsl_Type.TInt);
			this.unifyExpr(e2,hxsl_Type.TInt);
			return hxsl_Type.TInt;
		case 14:case 15:
			this.unifyExpr(e1,hxsl_Type.TBool);
			this.unifyExpr(e2,hxsl_Type.TBool);
			return hxsl_Type.TBool;
		case 0:case 1:case 2:case 3:case 19:
			var _g = e1.t;
			var _g1 = e2.t;
			if(op._hx_index == 1) {
				switch(_g._hx_index) {
				case 1:
					switch(_g1._hx_index) {
					case 1:
						return hxsl_Type.TInt;
					case 3:
						this.toFloat(e1);
						return hxsl_Type.TFloat;
					case 5:
						if(_g1.t._hx_index == 1) {
							this.toFloat(e1);
							return e2.t;
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						var opName;
						switch(op._hx_index) {
						case 0:
							opName = "add";
							break;
						case 1:
							opName = "multiply";
							break;
						case 2:
							opName = "divide";
							break;
						case 3:
							opName = "subtract";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				case 3:
					switch(_g1._hx_index) {
					case 1:
						this.toFloat(e2);
						return hxsl_Type.TFloat;
					case 3:
						return hxsl_Type.TFloat;
					case 5:
						if(_g1.t._hx_index == 1) {
							return e2.t;
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						var opName;
						switch(op._hx_index) {
						case 0:
							opName = "add";
							break;
						case 1:
							opName = "multiply";
							break;
						case 2:
							opName = "divide";
							break;
						case 3:
							opName = "subtract";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				case 5:
					var _gsize = _g.size;
					var _gt = _g.t;
					switch(_gsize) {
					case 2:
						if(_gt._hx_index == 1) {
							switch(_g1._hx_index) {
							case 1:
								this.toFloat(e2);
								return e1.t;
							case 3:
								return e1.t;
							case 5:
								if(_g1.t._hx_index == 1) {
									var a = _gsize;
									var b = _g1.size;
									if(a == b) {
										return hxsl_Type.TVec(a,hxsl_VecType.VFloat);
									} else {
										var opName;
										switch(op._hx_index) {
										case 0:
											opName = "add";
											break;
										case 1:
											opName = "multiply";
											break;
										case 2:
											opName = "divide";
											break;
										case 3:
											opName = "subtract";
											break;
										default:
											throw haxe_Exception.thrown("assert");
										}
										return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
									}
								} else {
									var opName;
									switch(op._hx_index) {
									case 0:
										opName = "add";
										break;
									case 1:
										opName = "multiply";
										break;
									case 2:
										opName = "divide";
										break;
									case 3:
										opName = "subtract";
										break;
									default:
										throw haxe_Exception.thrown("assert");
									}
									return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
								}
								break;
							case 12:
								return hxsl_Checker.vec2;
							default:
								var opName;
								switch(op._hx_index) {
								case 0:
									opName = "add";
									break;
								case 1:
									opName = "multiply";
									break;
								case 2:
									opName = "divide";
									break;
								case 3:
									opName = "subtract";
									break;
								default:
									throw haxe_Exception.thrown("assert");
								}
								return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					case 3:
						if(_gt._hx_index == 1) {
							switch(_g1._hx_index) {
							case 1:
								this.toFloat(e2);
								return e1.t;
							case 3:
								return e1.t;
							case 5:
								if(_g1.t._hx_index == 1) {
									var a = _gsize;
									var b = _g1.size;
									if(a == b) {
										return hxsl_Type.TVec(a,hxsl_VecType.VFloat);
									} else {
										var opName;
										switch(op._hx_index) {
										case 0:
											opName = "add";
											break;
										case 1:
											opName = "multiply";
											break;
										case 2:
											opName = "divide";
											break;
										case 3:
											opName = "subtract";
											break;
										default:
											throw haxe_Exception.thrown("assert");
										}
										return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
									}
								} else {
									var opName;
									switch(op._hx_index) {
									case 0:
										opName = "add";
										break;
									case 1:
										opName = "multiply";
										break;
									case 2:
										opName = "divide";
										break;
									case 3:
										opName = "subtract";
										break;
									default:
										throw haxe_Exception.thrown("assert");
									}
									return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
								}
								break;
							case 6:
								return hxsl_Checker.vec3;
							case 8:
								return hxsl_Checker.vec3;
							default:
								var opName;
								switch(op._hx_index) {
								case 0:
									opName = "add";
									break;
								case 1:
									opName = "multiply";
									break;
								case 2:
									opName = "divide";
									break;
								case 3:
									opName = "subtract";
									break;
								default:
									throw haxe_Exception.thrown("assert");
								}
								return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					case 4:
						if(_gt._hx_index == 1) {
							switch(_g1._hx_index) {
							case 1:
								this.toFloat(e2);
								return e1.t;
							case 3:
								return e1.t;
							case 5:
								if(_g1.t._hx_index == 1) {
									var a = _gsize;
									var b = _g1.size;
									if(a == b) {
										return hxsl_Type.TVec(a,hxsl_VecType.VFloat);
									} else {
										var opName;
										switch(op._hx_index) {
										case 0:
											opName = "add";
											break;
										case 1:
											opName = "multiply";
											break;
										case 2:
											opName = "divide";
											break;
										case 3:
											opName = "subtract";
											break;
										default:
											throw haxe_Exception.thrown("assert");
										}
										return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
									}
								} else {
									var opName;
									switch(op._hx_index) {
									case 0:
										opName = "add";
										break;
									case 1:
										opName = "multiply";
										break;
									case 2:
										opName = "divide";
										break;
									case 3:
										opName = "subtract";
										break;
									default:
										throw haxe_Exception.thrown("assert");
									}
									return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
								}
								break;
							case 7:
								return hxsl_Checker.vec4;
							default:
								var opName;
								switch(op._hx_index) {
								case 0:
									opName = "add";
									break;
								case 1:
									opName = "multiply";
									break;
								case 2:
									opName = "divide";
									break;
								case 3:
									opName = "subtract";
									break;
								default:
									throw haxe_Exception.thrown("assert");
								}
								return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						if(_gt._hx_index == 1) {
							switch(_g1._hx_index) {
							case 1:
								this.toFloat(e2);
								return e1.t;
							case 3:
								return e1.t;
							case 5:
								if(_g1.t._hx_index == 1) {
									var a = _gsize;
									var b = _g1.size;
									if(a == b) {
										return hxsl_Type.TVec(a,hxsl_VecType.VFloat);
									} else {
										var opName;
										switch(op._hx_index) {
										case 0:
											opName = "add";
											break;
										case 1:
											opName = "multiply";
											break;
										case 2:
											opName = "divide";
											break;
										case 3:
											opName = "subtract";
											break;
										default:
											throw haxe_Exception.thrown("assert");
										}
										return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
									}
								} else {
									var opName;
									switch(op._hx_index) {
									case 0:
										opName = "add";
										break;
									case 1:
										opName = "multiply";
										break;
									case 2:
										opName = "divide";
										break;
									case 3:
										opName = "subtract";
										break;
									default:
										throw haxe_Exception.thrown("assert");
									}
									return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
								}
								break;
							default:
								var opName;
								switch(op._hx_index) {
								case 0:
									opName = "add";
									break;
								case 1:
									opName = "multiply";
									break;
								case 2:
									opName = "divide";
									break;
								case 3:
									opName = "subtract";
									break;
								default:
									throw haxe_Exception.thrown("assert");
								}
								return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
					}
					break;
				case 7:
					if(_g1._hx_index == 7) {
						return hxsl_Type.TMat4;
					} else {
						var opName;
						switch(op._hx_index) {
						case 0:
							opName = "add";
							break;
						case 1:
							opName = "multiply";
							break;
						case 2:
							opName = "divide";
							break;
						case 3:
							opName = "subtract";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				default:
					var opName;
					switch(op._hx_index) {
					case 0:
						opName = "add";
						break;
					case 1:
						opName = "multiply";
						break;
					case 2:
						opName = "divide";
						break;
					case 3:
						opName = "subtract";
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
					return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
				}
			} else {
				switch(_g._hx_index) {
				case 1:
					switch(_g1._hx_index) {
					case 1:
						return hxsl_Type.TInt;
					case 3:
						this.toFloat(e1);
						return hxsl_Type.TFloat;
					case 5:
						if(_g1.t._hx_index == 1) {
							this.toFloat(e1);
							return e2.t;
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						var opName;
						switch(op._hx_index) {
						case 0:
							opName = "add";
							break;
						case 1:
							opName = "multiply";
							break;
						case 2:
							opName = "divide";
							break;
						case 3:
							opName = "subtract";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				case 3:
					switch(_g1._hx_index) {
					case 1:
						this.toFloat(e2);
						return hxsl_Type.TFloat;
					case 3:
						return hxsl_Type.TFloat;
					case 5:
						if(_g1.t._hx_index == 1) {
							return e2.t;
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						var opName;
						switch(op._hx_index) {
						case 0:
							opName = "add";
							break;
						case 1:
							opName = "multiply";
							break;
						case 2:
							opName = "divide";
							break;
						case 3:
							opName = "subtract";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				case 5:
					var _gsize = _g.size;
					if(_g.t._hx_index == 1) {
						switch(_g1._hx_index) {
						case 1:
							this.toFloat(e2);
							return e1.t;
						case 3:
							return e1.t;
						case 5:
							if(_g1.t._hx_index == 1) {
								var b = _g1.size;
								var a = _gsize;
								if(a == b) {
									return hxsl_Type.TVec(a,hxsl_VecType.VFloat);
								} else {
									var opName;
									switch(op._hx_index) {
									case 0:
										opName = "add";
										break;
									case 1:
										opName = "multiply";
										break;
									case 2:
										opName = "divide";
										break;
									case 3:
										opName = "subtract";
										break;
									default:
										throw haxe_Exception.thrown("assert");
									}
									return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
								}
							} else {
								var opName;
								switch(op._hx_index) {
								case 0:
									opName = "add";
									break;
								case 1:
									opName = "multiply";
									break;
								case 2:
									opName = "divide";
									break;
								case 3:
									opName = "subtract";
									break;
								default:
									throw haxe_Exception.thrown("assert");
								}
								return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
							break;
						default:
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
					} else {
						var opName;
						switch(op._hx_index) {
						case 0:
							opName = "add";
							break;
						case 1:
							opName = "multiply";
							break;
						case 2:
							opName = "divide";
							break;
						case 3:
							opName = "subtract";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				default:
					var opName;
					switch(op._hx_index) {
					case 0:
						opName = "add";
						break;
					case 1:
						opName = "multiply";
						break;
					case 2:
						opName = "divide";
						break;
					case 3:
						opName = "subtract";
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
					return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
				}
			}
			break;
		case 20:
			throw haxe_Exception.thrown("assert");
		case 21:
			this.unifyExpr(e1,hxsl_Type.TInt);
			this.unifyExpr(e2,hxsl_Type.TInt);
			return hxsl_Type.TArray(hxsl_Type.TInt,hxsl_SizeDecl.SConst(0));
		default:
			return this.error("Unsupported operator " + Std.string(op),pos);
		}
	}
	,__class__: hxsl_Checker
};
var hxsl_Clone = function() {
	this.varMap = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Clone"] = hxsl_Clone;
hxsl_Clone.__name__ = "hxsl.Clone";
hxsl_Clone.shaderData = function(s) {
	return new hxsl_Clone().shader(s);
};
hxsl_Clone.prototype = {
	tvar: function(v) {
		var v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl_Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	,tfun: function(f) {
		var tmp = this.ttype(f.ret);
		var f1 = f.kind;
		var tmp1 = this.tvar(f.ref);
		var _g = [];
		var _g1 = 0;
		var _g2 = f.args;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	,ttype: function(t) {
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.tvar(v));
			}
			return hxsl_Type.TStruct(_g);
		case 14:
			var vars = t.variants;
			return hxsl_Type.TFun(vars);
		case 15:
			var t1 = t.t;
			var size = t.size;
			var tmp = this.ttype(t1);
			var tmp1;
			switch(size._hx_index) {
			case 0:
				tmp1 = size;
				break;
			case 1:
				var v = size.v;
				tmp1 = hxsl_SizeDecl.SVar(this.tvar(v));
				break;
			}
			return hxsl_Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	,texpr: function(e) {
		var e2 = hxsl_Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		var _g = e2.e;
		var tmp;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			tmp = hxsl_TExprDef.TVar(this.tvar(v));
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			tmp = hxsl_TExprDef.TVarDecl(this.tvar(v),init);
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			tmp = hxsl_TExprDef.TFor(this.tvar(v),it,loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	,shader: function(s) {
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		var tmp = _g;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.funs;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(this.tfun(f));
		}
		return { name : s1, vars : tmp, funs : _g};
	}
	,__class__: hxsl_Clone
};
var hxsl__$Dce_VarRel = function(v) {
	this.fields = 0;
	this.v = v;
};
$hxClasses["hxsl._Dce.VarRel"] = hxsl__$Dce_VarRel;
hxsl__$Dce_VarRel.__name__ = "hxsl._Dce.VarRel";
hxsl__$Dce_VarRel.prototype = {
	__class__: hxsl__$Dce_VarRel
};
var hxsl__$Dce_VarDeps = function(v) {
	this.used = 0;
	this.keep = 0;
	this.v = v;
	this.deps = new haxe_ds_IntMap();
	this.adeps = [];
};
$hxClasses["hxsl._Dce.VarDeps"] = hxsl__$Dce_VarDeps;
hxsl__$Dce_VarDeps.__name__ = "hxsl._Dce.VarDeps";
hxsl__$Dce_VarDeps.prototype = {
	__class__: hxsl__$Dce_VarDeps
};
var hxsl__$Dce_WriteTo = function() {
	this.vars = [];
	this.bits = [];
};
$hxClasses["hxsl._Dce.WriteTo"] = hxsl__$Dce_WriteTo;
hxsl__$Dce_WriteTo.__name__ = "hxsl._Dce.WriteTo";
hxsl__$Dce_WriteTo.prototype = {
	push: function(v,b) {
		this.vars.push(v);
		this.bits.push(b);
	}
	,pop: function() {
		this.vars.pop();
		this.bits.pop();
	}
	,append: function(v,b) {
		var _g_current = 0;
		var _g_array = this.vars;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var v2 = _g_value;
			if(v2 == v) {
				this.bits[i] |= b;
				return;
			}
		}
		this.push(v,b);
	}
	,appendTo: function(w) {
		var _g_current = 0;
		var _g_array = this.vars;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var v = _g_value;
			w.append(v,this.bits[i]);
		}
	}
	,__class__: hxsl__$Dce_WriteTo
};
var hxsl_Dce = function() {
};
$hxClasses["hxsl.Dce"] = hxsl_Dce;
hxsl_Dce.__name__ = "hxsl.Dce";
hxsl_Dce.prototype = {
	dce: function(shaders) {
		this.used = new haxe_ds_IntMap();
		this.channelVars = [];
		var inputs = [];
		var _g = 0;
		while(_g < shaders.length) {
			var s = shaders[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.vars;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				var i = this.get(v);
				if(v.kind == hxsl_VarKind.Input) {
					inputs.push(i);
				}
				var tmp;
				if(v.kind != hxsl_VarKind.Output) {
					var _g3 = v.type;
					switch(_g3._hx_index) {
					case 11:
						tmp = true;
						break;
					case 16:
						tmp = _g3.kind._hx_index == 2;
						break;
					default:
						tmp = false;
					}
				} else {
					tmp = true;
				}
				if(tmp) {
					i.keep = 15;
				}
			}
		}
		var _g = 0;
		while(_g < shaders.length) {
			var s = shaders[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				this.check(f.expr,new hxsl__$Dce_WriteTo(),new hxsl__$Dce_WriteTo());
			}
		}
		var outExprs = [];
		do {
			if(hxsl_Debug.TRACE) {
				haxe_Log.trace("DCE LOOP",{ fileName : "hxsl/Debug.hx", lineNumber : 9, className : "hxsl.Dce", methodName : "dce"});
			}
			var v = this.used.iterator();
			while(v.hasNext()) {
				var v1 = v.next();
				if(v1.keep != 0) {
					this.markRec(v1,v1.keep);
				}
			}
			while(inputs.length > 1 && inputs[inputs.length - 1].used == 0) inputs.pop();
			var _g = 0;
			while(_g < inputs.length) {
				var v2 = inputs[_g];
				++_g;
				this.markRec(v2,15);
			}
			outExprs = [];
			var _g1 = 0;
			while(_g1 < shaders.length) {
				var s = shaders[_g1];
				++_g1;
				var _g2 = 0;
				var _g3 = s.funs;
				while(_g2 < _g3.length) {
					var f = _g3[_g2];
					++_g2;
					outExprs.push(this.mapExpr(f.expr,false));
				}
			}
			this.markAsKeep = false;
			var _g4 = 0;
			while(_g4 < outExprs.length) {
				var e = outExprs[_g4];
				++_g4;
				this.checkBranches(e);
			}
		} while(this.markAsKeep);
		var _g = 0;
		while(_g < shaders.length) {
			var s = shaders[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				f.expr = outExprs.shift();
			}
		}
		var v = this.used.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.used != 0) {
				continue;
			}
			if(v1.v.kind == hxsl_VarKind.Input) {
				continue;
			}
			var _g = 0;
			while(_g < shaders.length) {
				var s = shaders[_g];
				++_g;
				HxOverrides.remove(s.vars,v1.v);
			}
		}
		return shaders.slice();
	}
	,get: function(v) {
		var vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl__$Dce_VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	,varName: function(v,bits) {
		if(bits == null) {
			bits = 15;
		}
		return hxsl_Debug.varName(v,bits);
	}
	,markRec: function(v,bits) {
		if((v.used & bits) == bits) {
			return;
		}
		bits &= ~v.used;
		if(hxsl_Debug.TRACE) {
			haxe_Log.trace(this.varName(v.v,bits) + " is used",{ fileName : "hxsl/Debug.hx", lineNumber : 9, className : "hxsl.Dce", methodName : "markRec"});
		}
		v.used |= bits;
		var _g = 0;
		var _g1 = v.adeps;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			var mask = this.makeFieldsBits(15,bits);
			if((d.fields & mask) != 0) {
				this.markRec(d.v,this.extractFieldsBits(d.fields,bits));
			}
		}
	}
	,extractFieldsBits: function(fields,write) {
		return (((write & 1) == 0 ? 0 : fields) | ((write & 2) == 0 ? 0 : fields >> 4) | ((write & 4) == 0 ? 0 : fields >> 8) | ((write & 8) == 0 ? 0 : fields >> 12)) & 15;
	}
	,makeFieldsBits: function(read,write) {
		return read * ((write & 1) + ((write & 2) << 3) + ((write & 4) << 6) + ((write & 8) << 9));
	}
	,link: function(v,writeTo,bits) {
		if(bits == null) {
			bits = 15;
		}
		var vd = this.get(v);
		var _g_current = 0;
		var _g_array = writeTo.vars;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var w = _g_value;
			if(w == null) {
				if(vd.keep == 0) {
					if(hxsl_Debug.TRACE) {
						haxe_Log.trace("Force keep " + this.varName(vd.v),{ fileName : "hxsl/Debug.hx", lineNumber : 9, className : "hxsl.Dce", methodName : "link"});
					}
					vd.keep = 15;
					this.markAsKeep = true;
				}
				continue;
			}
			var d = w.deps.h[v.id];
			if(d == null) {
				d = new hxsl__$Dce_VarRel(vd);
				w.deps.h[v.id] = d;
				w.adeps.push(d);
			}
			var fields = this.makeFieldsBits(bits,writeTo.bits[i]);
			if((d.fields & fields) != fields) {
				d.fields |= fields;
				if(hxsl_Debug.TRACE) {
					haxe_Log.trace(this.varName(w.v,writeTo.bits[i]) + " depends on " + this.varName(vd.v,bits),{ fileName : "hxsl/Debug.hx", lineNumber : 9, className : "hxsl.Dce", methodName : "link"});
				}
			}
		}
	}
	,swizBits: function(sw) {
		var b = 0;
		var _g = 0;
		while(_g < sw.length) {
			var c = sw[_g];
			++_g;
			b |= 1 << c._hx_index;
		}
		return b;
	}
	,check: function(e,writeTo,isAffected) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			this.link(v,writeTo);
			break;
		case 4:
			var el = _g.el;
			var noWrite = new hxsl__$Dce_WriteTo();
			var _g1 = 0;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				this.check(el[i],i < el.length - 1 ? noWrite : writeTo,isAffected);
			}
			break;
		case 5:
			var _ge = _g.e1;
			var _ge1 = _g.e2;
			switch(_g.op._hx_index) {
			case 4:
				var _ge2 = _ge.e;
				switch(_ge2._hx_index) {
				case 1:
					var v = _ge2.v;
					var e1 = _ge1;
					var v1 = this.get(v);
					writeTo.push(v1,15);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					isAffected.append(v1,15);
					break;
				case 9:
					var _gregs = _ge2.regs;
					var _ge3 = _ge2.e.e;
					switch(_ge3._hx_index) {
					case 1:
						var v = _ge3.v;
						var swiz = _gregs;
						var e1 = _ge1;
						var v1 = this.get(v);
						var bits = this.swizBits(swiz);
						writeTo.push(v1,bits);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						isAffected.append(v1,bits);
						break;
					case 16:
						var _ge4 = _ge3.e.e;
						if(_ge4._hx_index == 1) {
							var v = _ge4.v;
							var i = _ge3.index;
							var e1 = _ge1;
							var v1 = this.get(v);
							writeTo.push(v1,15);
							this.check(i,writeTo,isAffected);
							this.check(e1,writeTo,isAffected);
							writeTo.pop();
							isAffected.append(v1,15);
						} else {
							var _g1 = this;
							var writeTo1 = writeTo;
							var isAffected1 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g1.check(e,writeTo1,isAffected1);
							});
						}
						break;
					default:
						var _g2 = this;
						var writeTo2 = writeTo;
						var isAffected2 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g2.check(e,writeTo2,isAffected2);
						});
					}
					break;
				case 16:
					var _ge3 = _ge2.e.e;
					if(_ge3._hx_index == 1) {
						var v = _ge3.v;
						var i = _ge2.index;
						var e1 = _ge1;
						var v1 = this.get(v);
						writeTo.push(v1,15);
						this.check(i,writeTo,isAffected);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						isAffected.append(v1,15);
					} else {
						var _g3 = this;
						var writeTo3 = writeTo;
						var isAffected3 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g3.check(e,writeTo3,isAffected3);
						});
					}
					break;
				case 21:
					var _ge3 = _ge2.e.e;
					if(_ge3._hx_index == 16) {
						var _ge2 = _ge3.e.e;
						if(_ge2._hx_index == 1) {
							var v = _ge2.v;
							var i = _ge3.index;
							var e1 = _ge1;
							var v1 = this.get(v);
							writeTo.push(v1,15);
							this.check(i,writeTo,isAffected);
							this.check(e1,writeTo,isAffected);
							writeTo.pop();
							isAffected.append(v1,15);
						} else {
							var _g4 = this;
							var writeTo4 = writeTo;
							var isAffected4 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g4.check(e,writeTo4,isAffected4);
							});
						}
					} else {
						var _g5 = this;
						var writeTo5 = writeTo;
						var isAffected5 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g5.check(e,writeTo5,isAffected5);
						});
					}
					break;
				default:
					var _g6 = this;
					var writeTo6 = writeTo;
					var isAffected6 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g6.check(e,writeTo6,isAffected6);
					});
				}
				break;
			case 20:
				var _ge2 = _ge.e;
				switch(_ge2._hx_index) {
				case 1:
					var v = _ge2.v;
					var e1 = _ge1;
					var v1 = this.get(v);
					writeTo.push(v1,15);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					isAffected.append(v1,15);
					break;
				case 9:
					var _gregs = _ge2.regs;
					var _ge = _ge2.e.e;
					switch(_ge._hx_index) {
					case 1:
						var v = _ge.v;
						var swiz = _gregs;
						var e1 = _ge1;
						var v1 = this.get(v);
						var bits = this.swizBits(swiz);
						writeTo.push(v1,bits);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						isAffected.append(v1,bits);
						break;
					case 16:
						var _ge3 = _ge.e.e;
						if(_ge3._hx_index == 1) {
							var v = _ge3.v;
							var i = _ge.index;
							var e1 = _ge1;
							var v1 = this.get(v);
							writeTo.push(v1,15);
							this.check(i,writeTo,isAffected);
							this.check(e1,writeTo,isAffected);
							writeTo.pop();
							isAffected.append(v1,15);
						} else {
							var _g7 = this;
							var writeTo7 = writeTo;
							var isAffected7 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g7.check(e,writeTo7,isAffected7);
							});
						}
						break;
					default:
						var _g8 = this;
						var writeTo8 = writeTo;
						var isAffected8 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g8.check(e,writeTo8,isAffected8);
						});
					}
					break;
				case 16:
					var _ge = _ge2.e.e;
					if(_ge._hx_index == 1) {
						var v = _ge.v;
						var i = _ge2.index;
						var e1 = _ge1;
						var v1 = this.get(v);
						writeTo.push(v1,15);
						this.check(i,writeTo,isAffected);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						isAffected.append(v1,15);
					} else {
						var _g9 = this;
						var writeTo9 = writeTo;
						var isAffected9 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g9.check(e,writeTo9,isAffected9);
						});
					}
					break;
				case 21:
					var _ge = _ge2.e.e;
					if(_ge._hx_index == 16) {
						var _ge2 = _ge.e.e;
						if(_ge2._hx_index == 1) {
							var v = _ge2.v;
							var i = _ge.index;
							var e1 = _ge1;
							var v1 = this.get(v);
							writeTo.push(v1,15);
							this.check(i,writeTo,isAffected);
							this.check(e1,writeTo,isAffected);
							writeTo.pop();
							isAffected.append(v1,15);
						} else {
							var _g10 = this;
							var writeTo10 = writeTo;
							var isAffected10 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g10.check(e,writeTo10,isAffected10);
							});
						}
					} else {
						var _g11 = this;
						var writeTo11 = writeTo;
						var isAffected11 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g11.check(e,writeTo11,isAffected11);
						});
					}
					break;
				default:
					var _g12 = this;
					var writeTo12 = writeTo;
					var isAffected12 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g12.check(e,writeTo12,isAffected12);
					});
				}
				break;
			default:
				var _g13 = this;
				var writeTo13 = writeTo;
				var isAffected13 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g13.check(e,writeTo13,isAffected13);
				});
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			if(init != null) {
				writeTo.push(this.get(v),15);
				this.check(init,writeTo,isAffected);
				writeTo.pop();
			} else {
				var _g14 = this;
				var writeTo14 = writeTo;
				var isAffected14 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g14.check(e,writeTo14,isAffected14);
				});
			}
			break;
		case 8:
			var _gargs = _g.args;
			var _ge = _g.e.e;
			if(_ge._hx_index == 2) {
				switch(_ge.g._hx_index) {
				case 64:
					if(_gargs.length == 3) {
						var _ge = _gargs[0].e;
						if(_ge._hx_index == 1) {
							var _ge1 = _gargs[2].e;
							if(_ge1._hx_index == 0) {
								var _gc = _ge1.c;
								if(_gc._hx_index == 2) {
									var cid = _gc.v;
									var uv = _gargs[1];
									var c = _ge.v;
									this.check(uv,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var _g15 = this;
									var writeTo15 = writeTo;
									var isAffected15 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g15.check(e,writeTo15,isAffected15);
									});
								}
							} else {
								var _g16 = this;
								var writeTo16 = writeTo;
								var isAffected16 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g16.check(e,writeTo16,isAffected16);
								});
							}
						} else {
							var _g17 = this;
							var writeTo17 = writeTo;
							var isAffected17 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g17.check(e,writeTo17,isAffected17);
							});
						}
					} else {
						var _g18 = this;
						var writeTo18 = writeTo;
						var isAffected18 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g18.check(e,writeTo18,isAffected18);
						});
					}
					break;
				case 65:
					if(_gargs.length == 4) {
						var _ge = _gargs[0].e;
						if(_ge._hx_index == 1) {
							var _ge1 = _gargs[3].e;
							if(_ge1._hx_index == 0) {
								var _gc = _ge1.c;
								if(_gc._hx_index == 2) {
									var cid = _gc.v;
									var lod = _gargs[2];
									var uv = _gargs[1];
									var c = _ge.v;
									this.check(uv,writeTo,isAffected);
									this.check(lod,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var _g19 = this;
									var writeTo19 = writeTo;
									var isAffected19 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g19.check(e,writeTo19,isAffected19);
									});
								}
							} else {
								var _g20 = this;
								var writeTo20 = writeTo;
								var isAffected20 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g20.check(e,writeTo20,isAffected20);
								});
							}
						} else {
							var _g21 = this;
							var writeTo21 = writeTo;
							var isAffected21 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g21.check(e,writeTo21,isAffected21);
							});
						}
					} else {
						var _g22 = this;
						var writeTo22 = writeTo;
						var isAffected22 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g22.check(e,writeTo22,isAffected22);
						});
					}
					break;
				case 79:
					if(_gargs.length == 3) {
						var _ge = _gargs[0].e;
						if(_ge._hx_index == 1) {
							var v = _ge.v;
							var uv = _gargs[1];
							var val = _gargs[2];
							var v1 = this.get(v);
							writeTo.push(v1,15);
							this.check(uv,writeTo,isAffected);
							this.check(val,writeTo,isAffected);
							writeTo.pop();
							isAffected.append(v1,15);
						} else {
							var _g23 = this;
							var writeTo23 = writeTo;
							var isAffected23 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g23.check(e,writeTo23,isAffected23);
							});
						}
					} else {
						var _g24 = this;
						var writeTo24 = writeTo;
						var isAffected24 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g24.check(e,writeTo24,isAffected24);
						});
					}
					break;
				default:
					var _g25 = this;
					var writeTo25 = writeTo;
					var isAffected25 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g25.check(e,writeTo25,isAffected25);
					});
				}
			} else {
				var _g26 = this;
				var writeTo26 = writeTo;
				var isAffected26 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g26.check(e,writeTo26,isAffected26);
				});
			}
			break;
		case 9:
			var _ge = _g.e.e;
			if(_ge._hx_index == 1) {
				var v = _ge.v;
				var swiz = _g.regs;
				this.link(v,writeTo,this.swizBits(swiz));
			} else {
				var _g27 = this;
				var writeTo27 = writeTo;
				var isAffected27 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g27.check(e,writeTo27,isAffected27);
				});
			}
			break;
		case 10:
			var e1 = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			var affect = new hxsl__$Dce_WriteTo();
			this.check(eif,writeTo,affect);
			if(eelse != null) {
				this.check(eelse,writeTo,affect);
			}
			affect.appendTo(isAffected);
			writeTo.appendTo(affect);
			this.check(e1,affect,isAffected);
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var affect = new hxsl__$Dce_WriteTo();
			this.check(loop,writeTo,affect);
			affect.appendTo(isAffected);
			this.check(it,affect,isAffected);
			break;
		default:
			var _g = this;
			var writeTo28 = writeTo;
			var isAffected28 = isAffected;
			hxsl_Tools.iter(e,function(e) {
				_g.check(e,writeTo28,isAffected28);
			});
		}
	}
	,checkBranches: function(e) {
		var _g = e.e;
		if(_g._hx_index == 10) {
			var cond = _g.econd;
			var writeTo = new hxsl__$Dce_WriteTo();
			writeTo.append(null,0);
			this.check(cond,writeTo,new hxsl__$Dce_WriteTo());
		}
		hxsl_Tools.iter(e,$bind(this,this.checkBranches));
	}
	,mapExpr: function(e,isVar) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var out = [];
			var count = 0;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				var isVar1 = isVar && count == el.length - 1;
				var e2 = this.mapExpr(e1,isVar1);
				if(hxsl_Tools.hasSideEffect(e2) || isVar1) {
					out.push(e2);
				}
				++count;
			}
			return { e : hxsl_TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			var _ge = _g.e1;
			switch(_g.op._hx_index) {
			case 4:
				var _ge1 = _ge.e;
				switch(_ge1._hx_index) {
				case 1:
					var v = _ge1.v;
					if(this.get(v).used == 0) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					var _ge2 = _ge1.e.e;
					if(_ge2._hx_index == 1) {
						var _gv = _ge2.v;
						var v = _gv;
						if(this.get(v).used == 0) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							var v = _gv;
							var swiz = _ge1.regs;
							if((this.get(v).used & this.swizBits(swiz)) == 0) {
								return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 16:
					var _ge2 = _ge1.e.e;
					if(_ge2._hx_index == 1) {
						var v = _ge2.v;
						if(this.get(v).used == 0) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			case 20:
				var _ge1 = _ge.e;
				switch(_ge1._hx_index) {
				case 1:
					var v = _ge1.v;
					if(this.get(v).used == 0) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					var _ge = _ge1.e.e;
					if(_ge._hx_index == 1) {
						var _gv = _ge.v;
						var v = _gv;
						if(this.get(v).used == 0) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							var v = _gv;
							var swiz = _ge1.regs;
							if((this.get(v).used & this.swizBits(swiz)) == 0) {
								return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 16:
					var _ge = _ge1.e.e;
					if(_ge._hx_index == 1) {
						var v = _ge.v;
						if(this.get(v).used == 0) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			default:
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 7:
			var v = _g.v;
			if(this.get(v).used == 0) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 8:
			var _gargs = _g.args;
			var _ge = _g.e.e;
			if(_ge._hx_index == 2) {
				switch(_ge.g._hx_index) {
				case 64:
					if(_gargs.length == 3) {
						var _ge = _gargs[2].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var cid = _gc.v;
								var uv = _gargs[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texture), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 65:
					if(_gargs.length == 4) {
						var _ge = _gargs[3].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var cid = _gc.v;
								var lod = _gargs[2];
								var uv = _gargs[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureLod), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 66:
					switch(_gargs.length) {
					case 3:
						var _ge = _gargs[2].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var cid = _gc.v;
								var pos = _gargs[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					case 4:
						var _ge = _gargs[3].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var cid = _gc.v;
								var lod = _gargs[2];
								var pos = _gargs[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					default:
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 67:
					switch(_gargs.length) {
					case 2:
						var _ge = _gargs[1].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var cid = _gc.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureSize), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p}]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					case 3:
						var _ge = _gargs[2].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var cid = _gc.v;
								var lod = _gargs[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureSize), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					default:
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 10:
			var e1 = _g.econd;
			var econd = _g.eif;
			var eelse = _g.eelse;
			var e2 = this.mapExpr(e1,true);
			var econd1 = this.mapExpr(econd,isVar);
			var eelse1 = eelse == null ? null : this.mapExpr(eelse,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(econd1) && (eelse1 == null || !hxsl_Tools.hasSideEffect(eelse1))) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e2.t, p : e2.p};
			}
			return { e : hxsl_TExprDef.TIf(e2,econd1,eelse1), p : e2.p, t : e2.t};
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var it1 = this.mapExpr(it,true);
			var loop1 = this.mapExpr(loop,false);
			if(!hxsl_Tools.hasSideEffect(loop1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TFor(v,it1,loop1), p : e.p, t : e.t};
		case 20:
			var m = _g.m;
			var args = _g.args;
			var em = _g.e;
			var em1 = this.mapExpr(em,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(em1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TMeta(m,args,em1), t : e.t, p : e.p};
		default:
			return hxsl_Tools.map(e,function(e) {
				return _gthis.mapExpr(e,true);
			});
		}
	}
	,__class__: hxsl_Dce
};
var hxsl_Debug = function() { };
$hxClasses["hxsl.Debug"] = hxsl_Debug;
hxsl_Debug.__name__ = "hxsl.Debug";
hxsl_Debug.varName = function(v,swizBits) {
	if(swizBits == null) {
		swizBits = 15;
	}
	var name = v.name;
	if(swizBits != 15) {
		name += hxsl_Debug.swizStr(swizBits);
	}
	if(hxsl_Debug.VAR_IDS) {
		return name + "@" + v.id;
	} else {
		return name;
	}
};
hxsl_Debug.swizStr = function(bits) {
	var str = ".";
	if((bits & 1) != 0) {
		str += "x";
	}
	if((bits & 2) != 0) {
		str += "y";
	}
	if((bits & 4) != 0) {
		str += "z";
	}
	if((bits & 8) != 0) {
		str += "w";
	}
	return str;
};
var hxsl_Eval = function() {
	this.mapped = [];
	this.varMap = new haxe_ds_ObjectMap();
	this.funMap = new haxe_ds_ObjectMap();
	this.constants = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Eval"] = hxsl_Eval;
hxsl_Eval.__name__ = "hxsl.Eval";
hxsl_Eval.prototype = {
	setConstant: function(v,c) {
		this.constants.h[v.id] = hxsl_TExprDef.TConst(c);
	}
	,mapVar: function(v,isLocal) {
		var v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			return v2;
		}
		if(v.parent != null) {
			this.mapVar(v.parent,isLocal);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2,isLocal);
				}
			}
		}
		v2 = { id : v.type._hx_index == 17 ? v.id : hxsl_Tools.allocVarId(), name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent,isLocal);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		if(isLocal) {
			this.mapped.push(v);
		}
		var _g = v2.type;
		switch(_g._hx_index) {
		case 13:
			var vl = _g.vl;
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < vl.length) {
				var v = vl[_g2];
				++_g2;
				_g1.push(this.mapVar(v,isLocal));
			}
			v2.type = hxsl_Type.TStruct(_g1);
			break;
		case 15:
			var _gsize = _g.size;
			if(_gsize._hx_index == 1) {
				var vs = _gsize.v;
				var t = _g.t;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _gc = c.c;
						if(_gc._hx_index == 2) {
							var v = _gc.v;
							var _g1 = v2.type;
							var tmp;
							switch(_g1._hx_index) {
							case 15:
								tmp = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v));
								break;
							case 16:
								var kind = _g1.kind;
								tmp = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v),kind);
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							v2.type = tmp;
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs,isLocal);
					var _g1 = v2.type;
					var tmp;
					switch(_g1._hx_index) {
					case 15:
						tmp = hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2));
						break;
					case 16:
						var kind = _g1.kind;
						tmp = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2),kind);
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
					v2.type = tmp;
				}
			}
			break;
		case 16:
			var _gsize = _g.size;
			if(_gsize._hx_index == 1) {
				var vs = _gsize.v;
				var t = _g.t;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _gc = c.c;
						if(_gc._hx_index == 2) {
							var v = _gc.v;
							var _g = v2.type;
							var tmp;
							switch(_g._hx_index) {
							case 15:
								tmp = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v));
								break;
							case 16:
								var kind = _g.kind;
								tmp = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v),kind);
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							v2.type = tmp;
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs,isLocal);
					var _g = v2.type;
					var tmp;
					switch(_g._hx_index) {
					case 15:
						tmp = hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2));
						break;
					case 16:
						var kind = _g.kind;
						tmp = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2),kind);
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
					v2.type = tmp;
				}
			}
			break;
		default:
		}
		return v2;
	}
	,checkTextureRec: function(t) {
		if(hxsl_Tools.isTexture(t)) {
			return true;
		}
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				if(this.checkTextureRec(v.type)) {
					return true;
				}
			}
			return false;
		case 15:
			var t1 = t.t;
			return this.checkTextureRec(t1);
		case 16:
			return true;
		default:
		}
		return false;
	}
	,needsInline: function(f) {
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(this.checkTextureRec(a.type)) {
				return true;
			}
		}
		return false;
	}
	,'eval': function(s) {
		var funs = [];
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var f1 = f.kind;
			var f2 = this.mapVar(f.ref,false);
			var _g2 = [];
			var _g3 = 0;
			var _g4 = f.args;
			while(_g3 < _g4.length) {
				var a = _g4[_g3];
				++_g3;
				_g2.push(this.mapVar(a,false));
			}
			var f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(f.kind == hxsl_FunctionKind.Helper && this.inlineCalls || this.needsInline(f21)) {
				this.funMap.set(f21.ref,f);
			} else {
				funs.push(f21);
			}
		}
		var _g = 0;
		var _g1 = funs.length;
		while(_g < _g1) {
			var i = _g++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.mapVar(v,false));
		}
		return { name : s1, vars : _g, funs : funs};
	}
	,hasReturn: function(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	,hasReturnLoop: function(e) {
		if(e.e._hx_index == 12) {
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl_Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	,handleReturn: function(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		var _g = e.e;
		switch(_g._hx_index) {
		case 3:
			var v = _g.e;
			var v1 = this.handleReturn(v,isFinal);
			return { e : hxsl_TExprDef.TParenthesis(v1), t : v1.t, p : e.p};
		case 4:
			var el = _g.el;
			var i = 0;
			var last = el.length;
			var out = [];
			_hx_loop1: while(i < last) {
				var e1 = el[i++];
				if(i == last) {
					out.push(this.handleReturn(e1,isFinal));
				} else {
					var _g1 = e1.e;
					switch(_g1._hx_index) {
					case 10:
						if(_g1.eelse == null) {
							var eif = _g1.eif;
							var econd = _g1.econd;
							if(isFinal && this.hasReturn(eif)) {
								out.push(this.handleReturn({ e : hxsl_TExprDef.TIf(econd,eif,{ e : hxsl_TExprDef.TBlock(el.slice(i)), t : e1.t, p : e1.p}), t : e1.t, p : e1.p}));
								break _hx_loop1;
							} else {
								out.push(this.handleReturn(e1));
							}
						} else {
							out.push(this.handleReturn(e1));
						}
						break;
					case 12:
						var e2 = _g1.e;
						out.push(this.handleReturn(e2,isFinal));
						break _hx_loop1;
					default:
						out.push(this.handleReturn(e1));
					}
				}
			}
			var t = isFinal ? out.length == 0 ? hxsl_Type.TVoid : out[out.length - 1].t : e.t;
			return { e : hxsl_TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			var cond = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			if(eelse != null && isFinal) {
				var cond1 = this.handleReturn(cond);
				var eif1 = this.handleReturn(eif,isFinal);
				return { e : hxsl_TExprDef.TIf(cond1,eif1,this.handleReturn(eelse,isFinal)), t : eif1.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			var v = _g.e;
			if(!isFinal) {
				hxsl_Error.t("Cannot inline not final return",e.p);
			}
			if(v == null) {
				return { e : hxsl_TExprDef.TBlock([]), t : hxsl_Type.TVoid, p : e.p};
			}
			return this.handleReturn(v,true);
		default:
			return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	,handleReturnDef: function(e) {
		return this.handleReturn(e);
	}
	,evalCall: function(g,args,oldArgs,pos) {
		switch(g._hx_index) {
		case 28:
			if(args.length == 1) {
				var _ge = args[0].e;
				if(_ge._hx_index == 1) {
					var v = _ge.v;
					var _g = v.type;
					if(_g._hx_index == 15) {
						var _gsize = _g.size;
						if(_gsize._hx_index == 0) {
							var v = _gsize.v;
							return hxsl_TExprDef.TConst(hxsl_Const.CInt(v));
						} else {
							return null;
						}
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 39:
			if(args.length == 1) {
				var _ge = args[0].e;
				if(_ge._hx_index == 0) {
					var _gc = _ge.c;
					if(_gc._hx_index == 2) {
						var i = _gc.v;
						return hxsl_TExprDef.TConst(hxsl_Const.CFloat(i));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 64:case 65:
			var i;
			var _g = args[0].e;
			if(_g._hx_index == 0) {
				var _gc = _g.c;
				if(_gc._hx_index == 2) {
					var i1 = _gc.v;
					i = i1;
				} else {
					hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
					throw haxe_Exception.thrown("assert");
				}
			} else {
				hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
				throw haxe_Exception.thrown("assert");
			}
			var channel = oldArgs[0];
			var _g = channel.e;
			var channel1;
			if(_g._hx_index == 1) {
				var v = _g.v;
				channel1 = hxsl_TExprDef.TVar(this.mapVar(v,false));
			} else {
				throw haxe_Exception.thrown("assert");
			}
			channel = { e : channel1, t : channel.t, p : channel.p};
			var count;
			var _g = channel.t;
			if(_g._hx_index == 17) {
				var i1 = _g.size;
				count = i1;
			} else {
				throw haxe_Exception.thrown("assert");
			}
			var channelMode = Type.createEnumIndex(hxsl_Channel,i & 7,null);
			var targs = [channel];
			var _g = 1;
			var _g1 = args.length;
			while(_g < _g1) {
				var i1 = _g++;
				targs.push(args[i1]);
			}
			targs.push({ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(i >> 3)), t : hxsl_Type.TInt, p : pos});
			var tget = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},targs), t : hxsl_Type.TVoid, p : pos};
			switch(channelMode._hx_index) {
			case 0:
				var zero = { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0.)), t : hxsl_Type.TFloat, p : pos};
				if(count == 1) {
					return zero.e;
				}
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4][count - 2]), t : hxsl_Type.TVoid, p : pos},[zero]);
			case 1:case 2:case 3:case 4:
				var tmp;
				switch(count) {
				case 1:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X];
						break;
					case 2:
						tmp = [hxsl_Component.Y];
						break;
					case 3:
						tmp = [hxsl_Component.Z];
						break;
					case 4:
						tmp = [hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 2:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 3:
						tmp = [hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 3:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				default:
					throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
				}
				return hxsl_TExprDef.TSwiz(tget,tmp);
			case 5:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Unpack), t : hxsl_Type.TVoid, p : pos},[tget]);
			case 6:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackNormal), t : hxsl_Type.TVoid, p : pos},[tget]);
			}
			break;
		case 68:
			var args1 = args;
			var _g = 0;
			while(_g < args1.length) {
				var a = args1[_g];
				++_g;
				haxe_Log.trace(hxsl_Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl_TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	,constantsToString: function() {
		var _g = [];
		var c = this.constants.keys();
		while(c.hasNext()) {
			var c1 = c.next();
			_g.push(c1 + " => " + hxsl_Printer.toString({ e : this.constants.h[c1], t : hxsl_Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	,ifBlock: function(e) {
		if(e == null || e.e._hx_index != 10) {
			return e;
		}
		return { e : hxsl_TExprDef.TBlock([e]), t : e.t, p : e.p};
	}
	,evalExpr: function(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		var _gthis = this;
		var t = e.t;
		var d;
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			d = e.e;
			break;
		case 1:
			var v = _g.v;
			var c = this.constants.h[v.id];
			if(c != null) {
				d = c;
			} else {
				var v2 = this.mapVar(v,false);
				t = v2.type;
				d = hxsl_TExprDef.TVar(v2);
			}
			break;
		case 2:
			d = e.e;
			break;
		case 3:
			var e1 = _g.e;
			var e2 = this.evalExpr(e1,isVal);
			d = e2.e._hx_index == 0 ? e2.e : hxsl_TExprDef.TParenthesis(e2);
			break;
		case 4:
			var el = _g.el;
			var index = this.mapped.length;
			var out = [];
			var last = el.length - 1;
			var _g1 = 0;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var isVal1 = isVal && i == last;
				var e1 = this.evalExpr(el[i],isVal1);
				switch(e1.e._hx_index) {
				case 0:
					if(isVal1) {
						out.push(e1);
					}
					break;
				case 1:
					if(isVal1) {
						out.push(e1);
					}
					break;
				default:
					out.push(e1);
				}
			}
			while(this.mapped.length > index) {
				var v = this.mapped.pop();
				var v2 = this.varMap.h[v.__id__];
				if(v2 != null) {
					this.varMap.remove(v);
					this.varMap.remove(v2);
				}
			}
			d = out.length == 1 && this.curFun.kind != hxsl_FunctionKind.Init ? out[0].e : hxsl_TExprDef.TBlock(out);
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var e11 = this.evalExpr(e1);
			var e21 = this.evalExpr(e2);
			switch(op._hx_index) {
			case 0:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a + b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 3) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a + b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 1:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a * b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 3) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a * b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 2:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a / b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 3) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a / b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 3:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a - b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 3) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a - b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 4:case 21:
				d = hxsl_TExprDef.TBinop(op,e11,e21);
				break;
			case 5:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var b = _gc1.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							switch(_gc._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var b = _gc.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 6:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var b = _gc1.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							switch(_gc._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var b = _gc.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 7:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var b = _gc1.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							switch(_gc._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var b = _gc.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 8:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var b = _gc1.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							switch(_gc._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var b = _gc.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 9:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var b = _gc1.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							switch(_gc._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var b = _gc.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 10:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var b = _gc1.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							switch(_gc._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var b = _gc.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 11:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a & b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 12:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a | b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 13:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a ^ b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 14:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 1) {
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							if(_gc._hx_index == 1) {
								var b = _gc.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a && b));
							} else {
								var a = _gb;
								d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
							}
						} else {
							var a = _gb;
							d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
						}
					} else if(_g2._hx_index == 0) {
						var _gc = _g2.c;
						if(_gc._hx_index == 1) {
							var a = _gc.b;
							d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else if(_g2._hx_index == 0) {
					var _gc = _g2.c;
					if(_gc._hx_index == 1) {
						var a = _gc.b;
						d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 15:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 1) {
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							if(_gc._hx_index == 1) {
								var b = _gc.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a || b));
							} else {
								var a = _gb;
								d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
							}
						} else {
							var a = _gb;
							d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
						}
					} else if(_g2._hx_index == 0) {
						var _gc = _g2.c;
						if(_gc._hx_index == 1) {
							var a = _gc.b;
							d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else if(_g2._hx_index == 0) {
					var _gc = _g2.c;
					if(_gc._hx_index == 1) {
						var a = _gc.b;
						d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 16:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a << b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 17:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a >> b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 18:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a >>> b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 19:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a % b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 3) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a % b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 20:
				d = hxsl_TExprDef.TBinop(op,e11,e21);
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 6:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = this.evalExpr(e1);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var c = _g1.c;
				switch(op._hx_index) {
				case 2:
					if(c._hx_index == 1) {
						var b = c.b;
						d = hxsl_TExprDef.TConst(hxsl_Const.CBool(!b));
					} else {
						d = hxsl_TExprDef.TUnop(op,e2);
					}
					break;
				case 3:
					switch(c._hx_index) {
					case 2:
						var i = c.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CInt(-i));
						break;
					case 3:
						var f = c.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(-f));
						break;
					default:
						d = hxsl_TExprDef.TUnop(op,e2);
					}
					break;
				default:
					d = hxsl_TExprDef.TUnop(op,e2);
				}
			} else {
				d = hxsl_TExprDef.TUnop(op,e2);
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			d = hxsl_TExprDef.TVarDecl(this.mapVar(v,true),init == null ? null : this.evalExpr(init));
			break;
		case 8:
			var c = _g.e;
			var eargs = _g.args;
			var c1 = this.evalExpr(c);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < eargs.length) {
				var a = eargs[_g2];
				++_g2;
				_g1.push(this.evalExpr(a));
			}
			var args = _g1;
			var _g1 = c1.e;
			switch(_g1._hx_index) {
			case 1:
				var v = _g1.v;
				if(this.funMap.h.__keys__[v.__id__] != null) {
					var f = this.funMap.h[v.__id__];
					var outExprs = [];
					var undo = [];
					var _g2 = 0;
					var _g3 = f.args.length;
					while(_g2 < _g3) {
						var i = _g2++;
						var v = [f.args[i]];
						var e1 = args[i];
						var _g4 = e1.e;
						switch(_g4._hx_index) {
						case 0:
							var old = [this.constants.h[v[0].id]];
							undo.push((function(old,v) {
								return function() {
									if(old[0] == null) {
										_gthis.constants.remove(v[0].id);
									} else {
										_gthis.constants.h[v[0].id] = old[0];
									}
								};
							})(old,v));
							this.constants.h[v[0].id] = e1.e;
							break;
						case 1:
							switch(_g4.v.kind._hx_index) {
							case 0:case 1:case 2:
								var old1 = [this.constants.h[v[0].id]];
								undo.push((function(old,v) {
									return function() {
										if(old[0] == null) {
											_gthis.constants.remove(v[0].id);
										} else {
											_gthis.constants.h[v[0].id] = old[0];
										}
									};
								})(old1,v));
								this.constants.h[v[0].id] = e1.e;
								break;
							default:
								var old2 = [this.varMap.h[v[0].__id__]];
								if(old2[0] == null) {
									undo.push((function(v) {
										return function() {
											_gthis.varMap.remove(v[0]);
										};
									})(v));
								} else {
									this.varMap.remove(v[0]);
									undo.push((function(old,v) {
										return function() {
											_gthis.varMap.set(v[0],old[0]);
										};
									})(old2,v));
								}
								var v2 = this.mapVar(v[0],false);
								outExprs.push({ e : hxsl_TExprDef.TVarDecl(v2,e1), t : hxsl_Type.TVoid, p : e1.p});
							}
							break;
						default:
							var old3 = [this.varMap.h[v[0].__id__]];
							if(old3[0] == null) {
								undo.push((function(v) {
									return function() {
										_gthis.varMap.remove(v[0]);
									};
								})(v));
							} else {
								this.varMap.remove(v[0]);
								undo.push((function(old,v) {
									return function() {
										_gthis.varMap.set(v[0],old[0]);
									};
								})(old3,v));
							}
							var v21 = this.mapVar(v[0],false);
							outExprs.push({ e : hxsl_TExprDef.TVarDecl(v21,e1), t : hxsl_Type.TVoid, p : e1.p});
						}
					}
					var e1 = this.handleReturn(this.evalExpr(f.expr,false),true);
					var _g2 = 0;
					while(_g2 < undo.length) {
						var u = undo[_g2];
						++_g2;
						u();
					}
					var _g2 = e1.e;
					if(_g2._hx_index == 4) {
						var el = _g2.el;
						var _g2 = 0;
						while(_g2 < el.length) {
							var e2 = el[_g2];
							++_g2;
							outExprs.push(e2);
						}
					} else {
						outExprs.push(e1);
					}
					d = hxsl_TExprDef.TBlock(outExprs);
				} else {
					d = hxsl_TExprDef.TCall(c1,args);
				}
				break;
			case 2:
				var g = _g1.g;
				var v1 = this.evalCall(g,args,eargs,e.p);
				d = v1 != null ? v1 : hxsl_TExprDef.TCall(c1,args);
				break;
			default:
				d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c1) + "'",c1.p);
			}
			break;
		case 9:
			var e1 = _g.e;
			var r = _g.regs;
			d = hxsl_TExprDef.TSwiz(this.evalExpr(e1),r.slice());
			break;
		case 10:
			var econd = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			var econd1 = this.evalExpr(econd);
			var _g1 = econd1.e;
			if(_g1._hx_index == 0) {
				var _gc = _g1.c;
				if(_gc._hx_index == 1) {
					var b = _gc.b;
					d = b ? this.evalExpr(eif,isVal).e : eelse == null ? hxsl_TExprDef.TConst(hxsl_Const.CNull) : this.evalExpr(eelse,isVal).e;
				} else if(isVal && eelse != null && this.eliminateConditionals) {
					d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
				} else {
					eif = this.evalExpr(eif,isVal);
					if(eelse != null) {
						eelse = this.evalExpr(eelse,isVal);
						var _g1 = eelse.e;
						if(_g1._hx_index == 0 && _g1.c._hx_index == 0) {
							eelse = null;
						}
					}
					eif = this.ifBlock(eif);
					eelse = this.ifBlock(eelse);
					d = hxsl_TExprDef.TIf(econd1,eif,eelse);
				}
			} else if(isVal && eelse != null && this.eliminateConditionals) {
				d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
			} else {
				eif = this.evalExpr(eif,isVal);
				if(eelse != null) {
					eelse = this.evalExpr(eelse,isVal);
					var _g1 = eelse.e;
					if(_g1._hx_index == 0 && _g1.c._hx_index == 0) {
						eelse = null;
					}
				}
				eif = this.ifBlock(eif);
				eelse = this.ifBlock(eelse);
				d = hxsl_TExprDef.TIf(econd1,eif,eelse);
			}
			break;
		case 11:
			d = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var e1 = _g.e;
			d = hxsl_TExprDef.TReturn(e1 == null ? null : this.evalExpr(e1));
			break;
		case 13:
			var v1 = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var v2 = this.mapVar(v1,true);
			var it1 = this.evalExpr(it);
			var e1;
			var _g1 = it1.e;
			if(_g1._hx_index == 5) {
				if(_g1.op._hx_index == 21) {
					var _ge = _g1.e1.e;
					if(_ge._hx_index == 0) {
						var _gc = _ge.c;
						if(_gc._hx_index == 2) {
							var _ge = _g1.e2.e;
							if(_ge._hx_index == 0) {
								var _gc1 = _ge.c;
								if(_gc1._hx_index == 2) {
									var len = _gc1.v;
									var start = _gc.v;
									if(this.unrollLoops) {
										var out = [];
										var _g1 = start;
										var _g2 = len;
										while(_g1 < _g2) {
											var i = _g1++;
											this.constants.h[v1.id] = hxsl_TExprDef.TConst(hxsl_Const.CInt(i));
											out.push(this.evalExpr(loop,false));
										}
										this.constants.remove(v1.id);
										e1 = hxsl_TExprDef.TBlock(out);
									} else {
										e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
									}
								} else {
									e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
								}
							} else {
								e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
							}
						} else {
							e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
						}
					} else {
						e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
					}
				} else {
					e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
				}
			} else {
				e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
			}
			this.varMap.remove(v1);
			d = e1;
			break;
		case 14:
			d = hxsl_TExprDef.TContinue;
			break;
		case 15:
			d = hxsl_TExprDef.TBreak;
			break;
		case 16:
			var e1 = _g.e;
			var e2 = _g.index;
			var e11 = this.evalExpr(e1);
			var e21 = this.evalExpr(e2);
			var _g1 = e11.e;
			var _g2 = e21.e;
			if(_g1._hx_index == 17) {
				if(_g2._hx_index == 0) {
					var _gc = _g2.c;
					if(_gc._hx_index == 2) {
						var i = _gc.v;
						var el = _g1.el;
						if(i >= 0 && i < el.length) {
							d = el[i].e;
						} else {
							var _g1 = e11.t;
							switch(_g1._hx_index) {
							case 15:
								var at = _g1.t;
								t = at;
								break;
							case 16:
								var at = _g1.t;
								t = at;
								break;
							default:
							}
							d = hxsl_TExprDef.TArray(e11,e21);
						}
					} else {
						var _g1 = e11.t;
						switch(_g1._hx_index) {
						case 15:
							var at = _g1.t;
							t = at;
							break;
						case 16:
							var at = _g1.t;
							t = at;
							break;
						default:
						}
						d = hxsl_TExprDef.TArray(e11,e21);
					}
				} else {
					var _g1 = e11.t;
					switch(_g1._hx_index) {
					case 15:
						var at = _g1.t;
						t = at;
						break;
					case 16:
						var at = _g1.t;
						t = at;
						break;
					default:
					}
					d = hxsl_TExprDef.TArray(e11,e21);
				}
			} else {
				var _g1 = e11.t;
				switch(_g1._hx_index) {
				case 15:
					var at = _g1.t;
					t = at;
					break;
				case 16:
					var at = _g1.t;
					t = at;
					break;
				default:
				}
				d = hxsl_TExprDef.TArray(e11,e21);
			}
			break;
		case 17:
			var el = _g.el;
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < el.length) {
				var e1 = el[_g2];
				++_g2;
				_g1.push(this.evalExpr(e1));
			}
			d = hxsl_TExprDef.TArrayDecl(_g1);
			break;
		case 18:
			var e1 = _g.e;
			var cases = _g.cases;
			var def = _g.def;
			var e2 = this.evalExpr(e1);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < cases.length) {
				var c = cases[_g2];
				++_g2;
				var _g3 = [];
				var _g4 = 0;
				var _g5 = c.values;
				while(_g4 < _g5.length) {
					var v1 = _g5[_g4];
					++_g4;
					_g3.push(this.evalExpr(v1));
				}
				_g1.push({ values : _g3, expr : this.evalExpr(c.expr,isVal)});
			}
			var cases = _g1;
			var def1 = def == null ? null : this.evalExpr(def,isVal);
			var hasCase = false;
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var c = _g1.c;
				if(c._hx_index == 2) {
					var val = c.v;
					var _g1 = 0;
					while(_g1 < cases.length) {
						var c1 = cases[_g1];
						++_g1;
						var _g2 = 0;
						var _g3 = c1.values;
						while(_g2 < _g3.length) {
							var v1 = _g3[_g2];
							++_g2;
							var _g4 = v1.e;
							if(_g4._hx_index == 0) {
								var cst = _g4.c;
								switch(cst._hx_index) {
								case 2:
									var k = cst.v;
									if(k == val) {
										return c1.expr;
									}
									break;
								case 3:
									var k1 = cst.v;
									if(k1 == val) {
										return c1.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw haxe_Exception.thrown("Unsupported switch constant " + Std.string(c));
				}
			} else {
				hasCase = true;
			}
			d = hasCase ? hxsl_TExprDef.TSwitch(e2,cases,def1) : def1 == null ? hxsl_TExprDef.TBlock([]) : def1.e;
			break;
		case 19:
			var cond = _g.e;
			var loop = _g.loop;
			var normalWhile = _g.normalWhile;
			var cond1 = this.evalExpr(cond);
			var loop1 = this.evalExpr(loop,false);
			d = hxsl_TExprDef.TWhile(cond1,this.ifBlock(loop1),normalWhile);
			break;
		case 20:
			var name = _g.m;
			var args = _g.args;
			var e1 = _g.e;
			var e2;
			if(name == "unroll") {
				var old4 = this.unrollLoops;
				this.unrollLoops = true;
				e2 = this.evalExpr(e1,isVal);
				this.unrollLoops = false;
			} else {
				e2 = this.evalExpr(e1,isVal);
			}
			d = hxsl_TExprDef.TMeta(name,args,e2);
			break;
		case 21:
			var e1 = _g.e;
			var name = _g.name;
			d = hxsl_TExprDef.TField(this.evalExpr(e1),name);
			break;
		}
		return { e : d, t : t, p : e.p};
	}
	,__class__: hxsl_Eval
};
var hxsl__$Flatten_Alloc = function(g,t,pos,size) {
	this.g = g;
	this.t = t;
	this.pos = pos;
	this.size = size;
};
$hxClasses["hxsl._Flatten.Alloc"] = hxsl__$Flatten_Alloc;
hxsl__$Flatten_Alloc.__name__ = "hxsl._Flatten.Alloc";
hxsl__$Flatten_Alloc.prototype = {
	__class__: hxsl__$Flatten_Alloc
};
var hxsl_ARead = $hxEnums["hxsl.ARead"] = { __ename__:true,__constructs__:null
	,AIndex: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"hxsl.ARead",toString:$estr,__params__:function(){ return [this.a];}}; },$_._hx_name="AIndex",$_)
	,AOffset: ($_=function(a,stride,delta) { return {_hx_index:1,a:a,stride:stride,delta:delta,__enum__:"hxsl.ARead",toString:$estr,__params__:function(){ return [this.a,this.stride,this.delta];}}; },$_._hx_name="AOffset",$_)
};
hxsl_ARead.__constructs__ = [hxsl_ARead.AIndex,hxsl_ARead.AOffset];
hxsl_ARead.__empty_constructs__ = [];
var hxsl_Flatten = function() {
};
$hxClasses["hxsl.Flatten"] = hxsl_Flatten;
hxsl_Flatten.__name__ = "hxsl.Flatten";
hxsl_Flatten.prototype = {
	flatten: function(s,kind) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		this.textureFormats = [];
		this.varMap = new haxe_ds_ObjectMap();
		this.allocData = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.gatherVar(v);
		}
		var prefix;
		switch(kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		case 4:
			prefix = "compute";
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		this.pack(prefix + "Globals",hxsl_VarKind.Global,this.globals,hxsl_VecType.VFloat);
		this.pack(prefix + "Params",hxsl_VarKind.Param,this.params,hxsl_VecType.VFloat);
		var allVars = this.globals.concat(this.params);
		this.textureFormats.sort(function(t1,t2) {
			if(t1.rw != t2.rw) {
				return t1.rw - t2.rw;
			}
			if(t1.arr != t2.arr) {
				if(t1.arr) {
					return 1;
				} else {
					return -1;
				}
			}
			return t1.dim._hx_index - t2.dim._hx_index;
		});
		var _g = 0;
		var _g1 = this.textureFormats;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			var name;
			if(t.dim == hxsl_TexDimension.T2D) {
				name = "";
			} else {
				var e = t.dim;
				name = HxOverrides.substr($hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name,1,null);
			}
			if(t.rw > 0) {
				name = "RW" + name + t.rw;
			}
			if(t.arr) {
				name += "Array";
			}
			this.packTextures(prefix + "Textures" + name,allVars,t.rw == 0 ? hxsl_Type.TSampler(t.dim,t.arr) : hxsl_Type.TRWTexture(t.dim,t.arr,t.rw));
		}
		this.packBuffers("buffers",allVars,hxsl_BufferKind.Uniform);
		this.packBuffers("storagebuffers",allVars,hxsl_BufferKind.Storage);
		this.packBuffers("rwbuffers",allVars,hxsl_BufferKind.RW);
		var _g = [];
		var _g1 = 0;
		var _g2 = s.funs;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(this.mapFun(f,$bind(this,this.mapExpr)));
		}
		var funs = _g;
		return { name : s.name, vars : this.outVars, funs : funs};
	}
	,mapFun: function(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	,mkOp: function(e,by,f,binop,pos) {
		var _g = e.e;
		if(_g._hx_index == 0) {
			var _gc = _g.c;
			if(_gc._hx_index == 2) {
				var i = _gc.v;
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CInt(f(i,by))), t : hxsl_Type.TInt, p : pos};
			}
		}
		return { e : hxsl_TExprDef.TBinop(binop,e,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(by)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
	}
	,mkAdd: function(e,offset,pos) {
		if(offset == 0) {
			return e;
		}
		return this.mkOp(e,offset,function(x,y) {
			return x + y;
		},haxe_macro_Binop.OpAdd,pos);
	}
	,mkMult: function(e,by,pos) {
		if(by == 1) {
			return e;
		}
		return this.mkOp(e,by,function(x,y) {
			return x * y;
		},haxe_macro_Binop.OpMult,pos);
	}
	,mapExpr: function(e) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var a = this.varMap.h[v.__id__];
			if(a != null) {
				e = this.access(a,v.type,e.p,hxsl_ARead.AIndex(a));
			}
			break;
		case 5:
			if(_g.op._hx_index == 4) {
				var e1 = _g.e1;
				var e2 = _g.e2;
				if(e.t._hx_index == 7 && e1.e._hx_index == 21) {
					var _ge = e1.e;
					if(_ge._hx_index == 21) {
						if(e1.t._hx_index == 7) {
							var name = _ge.name;
							var expr = _ge.e;
							var pos = -1;
							var _g1 = expr.t;
							if(_g1._hx_index == 13) {
								var vl = _g1.vl;
								var cur = 0;
								var _g1 = 0;
								while(_g1 < vl.length) {
									var v = vl[_g1];
									++_g1;
									if(v.name == name) {
										pos = cur;
										break;
									}
									cur += hxsl_Tools.size(v.type);
								}
							}
							if(pos < 0) {
								throw haxe_Exception.thrown("assert");
							}
							var pos1 = pos;
							var expr1 = this.mapExpr(expr);
							var idx = pos1 >> 2;
							var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
							var e1;
							if((pos1 & 3) == 0) {
								e1 = arr;
							} else {
								var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + 4);
								e1 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
							}
							var e3 = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,e1,{ e : hxsl_TExprDef.TArray(e2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(0)), t : hxsl_Type.TInt, p : null}), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : null}), t : e.t, p : e.p};
							var pos = pos1 + 4;
							var idx = pos >> 2;
							var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
							var e1;
							if((pos & 3) == 0) {
								e1 = arr;
							} else {
								var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
								e1 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
							}
							var e4 = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,e1,{ e : hxsl_TExprDef.TArray(e2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(1)), t : hxsl_Type.TInt, p : null}), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : null}), t : e.t, p : e.p};
							var pos = pos1 + 8;
							var idx = pos >> 2;
							var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
							var e1;
							if((pos & 3) == 0) {
								e1 = arr;
							} else {
								var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
								e1 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
							}
							var e5 = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,e1,{ e : hxsl_TExprDef.TArray(e2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(2)), t : hxsl_Type.TInt, p : null}), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : null}), t : e.t, p : e.p};
							var pos = pos1 + 12;
							var idx = pos >> 2;
							var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
							var e1;
							if((pos & 3) == 0) {
								e1 = arr;
							} else {
								var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
								e1 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
							}
							e = { e : hxsl_TExprDef.TBlock([e3,e4,e5,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,e1,{ e : hxsl_TExprDef.TArray(e2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(3)), t : hxsl_Type.TInt, p : null}), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : null}), t : e.t, p : e.p}]), t : e.t, p : e.p};
						} else {
							throw haxe_Exception.thrown("assert");
						}
					} else {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			if(v.type._hx_index == 13) {
				var size = Math.ceil(hxsl_Tools.size(v.type) / 4);
				var v2 = { id : hxsl_Tools.allocVarId(), name : v.name, type : hxsl_Type.TArray(hxsl_Type.TVec(4,hxsl_VecType.VFloat),hxsl_SizeDecl.SConst(size)), kind : v.kind, qualifiers : v.qualifiers};
				var a = new hxsl__$Flatten_Alloc(v2,hxsl_VecType.VFloat,0,0);
				a.v = v;
				this.varMap.set(v,a);
				e = { e : hxsl_TExprDef.TVarDecl(v2,init == null ? null : this.mapExpr(init)), t : hxsl_Type.TVoid, p : e.p};
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		case 16:
			var _ge = _g.e;
			var _ge1 = _ge.e;
			if(_ge1._hx_index == 1) {
				var v = _ge1.v;
				var vp = _ge.p;
				var eindex = _g.index;
				var a = this.varMap.h[v.__id__];
				var e1;
				if(a != null) {
					if(v.type._hx_index != 16) {
						var _g1 = eindex.e;
						e1 = _g1._hx_index == 0 && _g1.c._hx_index == 2;
					} else {
						e1 = false;
					}
				} else {
					e1 = true;
				}
				if(e1) {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				} else {
					var _g1 = v.type;
					switch(_g1._hx_index) {
					case 5:
						switch(_g1.t._hx_index) {
						case 0:case 1:
							e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						break;
					case 15:
						var _gt = _g1.t;
						var t = _gt;
						if(hxsl_Tools.isTexture(t)) {
							eindex = this.toInt(this.mapExpr(eindex));
							e = this.access(a,t,vp,hxsl_ARead.AOffset(a,1,eindex));
						} else {
							var t = _gt;
							var stride = this.varSize4Bytes(t,a.t);
							if(stride == 0 || v.type._hx_index == 15 && (stride & 3) != 0) {
								throw haxe_Exception.thrown(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
							}
							stride = stride + 3 >> 2;
							eindex = this.toInt(this.mapExpr(eindex));
							e = this.access(a,t,vp,hxsl_ARead.AOffset(a,stride,this.mkMult(eindex,stride,vp)));
						}
						break;
					case 16:
						var _gt = _g1.t;
						switch(_gt._hx_index) {
						case 1:case 3:
							e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
							break;
						default:
							var t = _gt;
							var stride = this.varSize4Bytes(t,a.t);
							if(stride == 0 || v.type._hx_index == 15 && (stride & 3) != 0) {
								throw haxe_Exception.thrown(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
							}
							stride = stride + 3 >> 2;
							eindex = this.toInt(this.mapExpr(eindex));
							e = this.access(a,t,vp,hxsl_ARead.AOffset(a,stride,this.mkMult(eindex,stride,vp)));
						}
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		case 21:
			var expr = _g.e;
			var name = _g.name;
			var pos = -1;
			var _g = expr.t;
			if(_g._hx_index == 13) {
				var vl = _g.vl;
				var cur = 0;
				var _g = 0;
				while(_g < vl.length) {
					var v = vl[_g];
					++_g;
					if(v.name == name) {
						pos = cur;
						break;
					}
					cur += hxsl_Tools.size(v.type);
				}
			}
			if(pos < 0) {
				throw haxe_Exception.thrown("assert");
			}
			var pos1 = pos;
			var expr1 = this.mapExpr(expr);
			var _g = e.t;
			switch(_g._hx_index) {
			case 3:
				var idx = pos1 >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + 1);
				e = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TFloat, p : e.p};
				break;
			case 5:
				if(_g.t._hx_index == 1) {
					var size = _g.size;
					var idx = pos1 >> 2;
					var idx2 = pos1 + size - 1 >> 2;
					if(idx == idx2) {
						var idx = pos1 >> 2;
						var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
						if(size == 4 && (pos1 & 3) == 0) {
							e = arr;
						} else {
							var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + size);
							e = { e : hxsl_TExprDef.TSwiz(arr,sw), t : size == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : e.p};
						}
					} else {
						var k = (idx2 << 2) - pos1;
						var type;
						switch(size) {
						case 2:
							type = hxsl_TGlobal.Vec2;
							break;
						case 3:
							type = hxsl_TGlobal.Vec3;
							break;
						case 4:
							type = hxsl_TGlobal.Vec4;
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						var e1 = { e : hxsl_TExprDef.TGlobal(type), p : e.p, t : hxsl_Type.TVoid};
						var idx = pos1 >> 2;
						var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
						var e2;
						if(k == 4 && (pos1 & 3) == 0) {
							e2 = arr;
						} else {
							var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + k);
							e2 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : k == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(k,hxsl_VecType.VFloat), p : e.p};
						}
						var pos = pos1 + k;
						var size1 = size - k;
						var idx = pos >> 2;
						var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
						var e3;
						if(size1 == 4 && (pos & 3) == 0) {
							e3 = arr;
						} else {
							var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + size1);
							e3 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : size1 == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(size1,hxsl_VecType.VFloat), p : e.p};
						}
						e = { e : hxsl_TExprDef.TCall(e1,[e2,e3]), t : e.t, p : e.p};
					}
				} else {
					throw haxe_Exception.thrown("Unsupported type " + hxsl_Tools.toString(e.t));
				}
				break;
			case 7:
				var e1 = { e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4), p : e.p, t : hxsl_Type.TVoid};
				var idx = pos1 >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e2;
				if((pos1 & 3) == 0) {
					e2 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + 4);
					e2 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				var pos = pos1 + 4;
				var idx = pos >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e3;
				if((pos & 3) == 0) {
					e3 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
					e3 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				var pos = pos1 + 8;
				var idx = pos >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e4;
				if((pos & 3) == 0) {
					e4 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
					e4 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				var pos = pos1 + 12;
				var idx = pos >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e5;
				if((pos & 3) == 0) {
					e5 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
					e5 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				e = { e : hxsl_TExprDef.TCall(e1,[e2,e3,e4,e5]), t : e.t, p : e.p};
				break;
			case 8:
				var e1 = { e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4), p : e.p, t : hxsl_Type.TVoid};
				var idx = pos1 >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e2;
				if((pos1 & 3) == 0) {
					e2 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + 4);
					e2 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				var pos = pos1 + 4;
				var idx = pos >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e3;
				if((pos & 3) == 0) {
					e3 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
					e3 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				var pos = pos1 + 8;
				var idx = pos >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e4;
				if((pos & 3) == 0) {
					e4 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
					e4 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				e = { e : hxsl_TExprDef.TCall(e1,[e2,e3,e4]), t : e.t, p : e.p};
				break;
			case 9:
				var size = _g.size;
				var e1 = { e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackSnorm4x8), p : e.p, t : hxsl_Type.TVec(size,hxsl_VecType.VFloat)};
				var idx = pos1 >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + 1);
				e = { e : hxsl_TExprDef.TCall(e1,[this.floatBitsToUint({ e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TFloat, p : e.p})]), t : e.t, p : e.p};
				break;
			default:
				throw haxe_Exception.thrown("Unsupported type " + hxsl_Tools.toString(e.t));
			}
			break;
		default:
			e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	,access: function(a,t,pos,acc) {
		var _gthis = this;
		switch(t._hx_index) {
		case 6:
			var tmp = this.access(a,hxsl_Type.TMat3x4,pos,acc);
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3), t : hxsl_Type.TFun([]), p : pos},[tmp]), t : hxsl_Type.TMat3, p : pos};
		case 7:
			var tmp = { e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4), t : hxsl_Type.TFun([]), p : pos};
			var tmp1;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp2;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 1;
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 2;
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 3;
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall(tmp,[tmp1,tmp2,tmp3,tmp4]), t : hxsl_Type.TMat4, p : pos};
		case 8:
			var tmp = { e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4), t : hxsl_Type.TFun([]), p : pos};
			var tmp1;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp2;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 1;
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 2;
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall(tmp,[tmp1,tmp2,tmp3]), t : hxsl_Type.TMat3x4, p : pos};
		case 13:
			var vl = t.vl;
			var size = 0;
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				size += this.varSize(v.type,a.t);
			}
			var stride = Math.ceil(size / 4);
			var _g = [];
			var _g1 = 0;
			var _g2 = stride;
			while(_g1 < _g2) {
				var i = _g1++;
				var tmp;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					tmp = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + i)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var a2 = acc.a;
					var stride1 = acc.stride;
					var delta = acc.delta;
					var index = (a2.t == null ? a2.pos : a2.pos >> 2) + i;
					var offset = _gthis.mkAdd(delta,index,pos);
					tmp = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a2.g), t : a2.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a2.t), p : pos};
					break;
				}
				_g.push(tmp);
			}
			var earr = _g;
			return { e : hxsl_TExprDef.TArrayDecl(earr), t : hxsl_Type.TArray(hxsl_Type.TVec(4,hxsl_VecType.VFloat),hxsl_SizeDecl.SConst(stride)), p : pos};
		case 15:
			var _gsize = t.size;
			if(_gsize._hx_index == 0) {
				var len = _gsize.v;
				var t1 = t.t;
				var stride = a.size / len | 0;
				var _g = [];
				var _g1 = 0;
				var _g2 = len;
				while(_g1 < _g2) {
					var i = _g1++;
					var a1 = new hxsl__$Flatten_Alloc(a.g,a.t,a.pos + stride * i,stride);
					_g.push(this.access(a1,t1,pos,hxsl_ARead.AIndex(a1)));
				}
				var earr = _g;
				return { e : hxsl_TExprDef.TArrayDecl(earr), t : t1, p : pos};
			} else {
				var t1 = t;
				if(hxsl_Tools.isTexture(t1)) {
					var e;
					switch(acc._hx_index) {
					case 0:
						var a1 = acc.a;
						var offs = a1.t == null ? a1.pos : a1.pos >> 2;
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					case 1:
						var a1 = acc.a;
						var stride = acc.stride;
						var delta = acc.delta;
						var index = a1.t == null ? a1.pos : a1.pos >> 2;
						var offset = _gthis.mkAdd(delta,index,pos);
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					}
					e.t = t1;
					return e;
				} else {
					var size = this.varSize(t,a.t);
					if(size > 4) {
						return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
					}
					var e;
					switch(acc._hx_index) {
					case 0:
						var a1 = acc.a;
						var offs = a1.t == null ? a1.pos : a1.pos >> 2;
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					case 1:
						var a1 = acc.a;
						var stride = acc.stride;
						var delta = acc.delta;
						var index = a1.t == null ? a1.pos : a1.pos >> 2;
						var offset = _gthis.mkAdd(delta,index,pos);
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					}
					if(size == 4) {
						if(a.pos == -1) {
							return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TFun([]), p : pos},[{ e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0)), t : hxsl_Type.TFloat, p : pos}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : pos};
						}
					} else {
						var sw = [];
						var _g = 0;
						var _g1 = size;
						while(_g < _g1) {
							var i = _g++;
							sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
						}
						e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
					}
					switch(t._hx_index) {
					case 1:
						e.t = hxsl_Type.TFloat;
						e = this.toInt(e);
						break;
					case 5:
						if(t.t._hx_index == 0) {
							var size = t.size;
							e.t = hxsl_Type.TVec(size,hxsl_VecType.VFloat);
							e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
						}
						break;
					default:
					}
					return e;
				}
			}
			break;
		case 16:
			return { e : hxsl_TExprDef.TVar(a.g), t : t, p : pos};
		default:
			var t1 = t;
			if(hxsl_Tools.isTexture(t1)) {
				var e;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var a1 = acc.a;
					var stride = acc.stride;
					var delta = acc.delta;
					var index = a1.t == null ? a1.pos : a1.pos >> 2;
					var offset = _gthis.mkAdd(delta,index,pos);
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				}
				e.t = t1;
				return e;
			} else {
				var size = this.varSize(t,a.t);
				if(size > 4) {
					return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
				}
				var e;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var a1 = acc.a;
					var stride = acc.stride;
					var delta = acc.delta;
					var index = a1.t == null ? a1.pos : a1.pos >> 2;
					var offset = _gthis.mkAdd(delta,index,pos);
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				}
				if(size == 4) {
					if(a.pos == -1) {
						return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TFun([]), p : pos},[{ e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0)), t : hxsl_Type.TFloat, p : pos}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : pos};
					}
				} else {
					var sw = [];
					var _g = 0;
					var _g1 = size;
					while(_g < _g1) {
						var i = _g++;
						sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
					}
					e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
				}
				switch(t._hx_index) {
				case 1:
					e.t = hxsl_Type.TFloat;
					e = this.toInt(e);
					break;
				case 5:
					if(t.t._hx_index == 0) {
						var size = t.size;
						e.t = hxsl_Type.TVec(size,hxsl_VecType.VFloat);
						e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
					}
					break;
				default:
				}
				return e;
			}
		}
	}
	,floatBitsToUint: function(e) {
		return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.FloatBitsToUint), t : hxsl_Type.TFun([]), p : e.p},[e]), t : hxsl_Type.TInt, p : e.p};
	}
	,toInt: function(e) {
		if(e.t == hxsl_Type.TInt) {
			return e;
		}
		return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : e.p},[e]), t : hxsl_Type.TInt, p : e.p};
	}
	,optimize: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 8:
			var _gargs = _g.args;
			var _ge = _g.e.e;
			if(_ge._hx_index == 2) {
				if(_ge.g._hx_index == 53) {
					if(_gargs.length == 1) {
						var _ge = _gargs[0].e;
						if(_ge._hx_index == 8) {
							var _ge1 = _ge.e.e;
							if(_ge1._hx_index == 2) {
								if(_ge1.g._hx_index == 52) {
									var args = _ge.args;
									var rem = 0;
									var size = 0;
									while(size < 4) {
										var t = args[args.length - 1 - rem].t;
										size += this.varSize(t,hxsl_VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										var _g1 = 0;
										var _g2 = rem;
										while(_g1 < _g2) {
											var i = _g1++;
											args.pop();
										}
										var emat;
										var _g1 = e.e;
										if(_g1._hx_index == 8) {
											var e1 = _g1.e;
											emat = e1;
										} else {
											throw haxe_Exception.thrown("assert");
										}
										return { e : hxsl_TExprDef.TCall(emat,args), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			var _ge = _g.e.e;
			if(_ge._hx_index == 17) {
				var _ge1 = _g.index.e;
				if(_ge1._hx_index == 0) {
					var _gc = _ge1.c;
					if(_gc._hx_index == 2) {
						var i = _gc.v;
						var el = _ge.el;
						if(i >= 0 && i < el.length) {
							return el[i];
						}
						hxsl_Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	,packTextures: function(name,vars,t) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Param};
		var pos = 0;
		var samplers = [];
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var count = 1;
			if(!Type.enumEq(v.type,t)) {
				var _g1 = v.type;
				switch(_g1._hx_index) {
				case 15:
					var _gsize = _g1.size;
					if(_gsize._hx_index == 0) {
						var n = _gsize.v;
						var t2 = _g1.t;
						if(Type.enumEq(t2,t)) {
							count = n;
						} else {
							continue;
						}
					} else {
						continue;
					}
					break;
				case 17:
					if(!(t._hx_index == 10 && (t.dim._hx_index == 1 && t.isArray == false))) {
						continue;
					}
					break;
				default:
					continue;
				}
			}
			var a = new hxsl__$Flatten_Alloc(g,null,pos,count);
			a.v = v;
			if(v.qualifiers != null) {
				var _g2 = 0;
				var _g3 = v.qualifiers;
				while(_g2 < _g3.length) {
					var q = _g3[_g2];
					++_g2;
					if(q._hx_index == 12) {
						var name = q.name;
						var _g4 = 0;
						var _g5 = count;
						while(_g4 < _g5) {
							var i = _g4++;
							samplers[pos + i] = name;
						}
					}
				}
			}
			this.varMap.set(v,a);
			alloc.push(a);
			pos += count;
		}
		g.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(pos));
		if(samplers.length > 0) {
			var _g = 0;
			var _g1 = pos;
			while(_g < _g1) {
				var i = _g++;
				if(samplers[i] == null) {
					samplers[i] = "";
				}
			}
			if(g.qualifiers == null) {
				g.qualifiers = [];
			}
			g.qualifiers.push(hxsl_VarQualifier.Sampler(samplers.join(",")));
		}
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	,packBuffers: function(name,vars,kind) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVoid, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var _g1 = v.type;
			if(_g1._hx_index == 16) {
				var _gsize = _g1.size;
				if(_gsize._hx_index == 0) {
					var size = _gsize.v;
					var t = _g1.t;
					var k = _g1.kind;
					if(kind == k) {
						var stride = Math.ceil(hxsl_Tools.size(t) / 4);
						var bt;
						switch(t._hx_index) {
						case 1:case 3:
							var bt1;
							switch(kind._hx_index) {
							case 1:case 2:case 4:case 5:
								bt1 = true;
								break;
							default:
								bt1 = false;
							}
							bt = bt1 ? v.type : hxsl_Type.TBuffer(hxsl_Type.TVec(4,hxsl_VecType.VFloat),hxsl_SizeDecl.SConst(size * stride),k);
							break;
						default:
							bt = hxsl_Type.TBuffer(hxsl_Type.TVec(4,hxsl_VecType.VFloat),hxsl_SizeDecl.SConst(size * stride),k);
						}
						var vbuf = { id : hxsl_Tools.allocVarId(), name : v.name, type : bt, kind : hxsl_VarKind.Param};
						var a = new hxsl__$Flatten_Alloc(vbuf,null,alloc.length,1);
						a.t = hxsl_VecType.VFloat;
						a.v = v;
						alloc.push(a);
						this.varMap.set(v,a);
						this.outVars.push(vbuf);
					}
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TBuffer(hxsl_Type.TVoid,hxsl_SizeDecl.SConst(0),kind),hxsl_SizeDecl.SConst(alloc.length));
		this.allocData.set(g,alloc);
	}
	,pack: function(name,kind,vars,t) {
		var alloc = [];
		var apos = 0;
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVec(0,t), kind : kind};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			if(hxsl_Tools.isTexture(v.type) || v.type._hx_index == 16) {
				continue;
			}
			var _g1 = v.type;
			if(_g1._hx_index == 15) {
				var t1 = _g1.t;
				if(hxsl_Tools.isTexture(t1)) {
					continue;
				}
			}
			var size = this.varSize(v.type,t);
			if(size == 0) {
				var a = new hxsl__$Flatten_Alloc(g,t,-1,size);
				a.v = v;
				this.varMap.set(v,a);
				continue;
			}
			var best = null;
			var _g2 = 0;
			while(_g2 < alloc.length) {
				var a1 = alloc[_g2];
				++_g2;
				if(a1.v == null && a1.size >= size && (best == null || best.size > a1.size)) {
					best = a1;
				}
			}
			if(best != null) {
				var free = best.size - size;
				if(free > 0) {
					var i = alloc.indexOf(best);
					var a2 = new hxsl__$Flatten_Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a2);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				var a3 = new hxsl__$Flatten_Alloc(g,t,apos,size);
				apos += size;
				a3.v = v;
				this.varMap.set(v,a3);
				alloc.push(a3);
				var pad = (4 - size % 4) % 4;
				if(pad > 0) {
					var a4 = new hxsl__$Flatten_Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a4);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TVec(4,t),hxsl_SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	,varSize: function(v,t) {
		switch(v._hx_index) {
		case 1:case 3:
			if(t == hxsl_VecType.VFloat) {
				return 1;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			var n = v.size;
			var t2 = v.t;
			if(t == t2) {
				return n;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl_VecType.VFloat) {
				return 16;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl_VecType.VFloat) {
				return 12;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 9:
			var n = v.size;
			return n;
		case 13:
			var vl = v.vl;
			var size = 0;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				size += this.varSize(v1.type,t);
			}
			return size;
		case 15:
			var _gsize = v.size;
			if(_gsize._hx_index == 0) {
				var n = _gsize.v;
				var at = v.t;
				return this.varSize(at,t) * n;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	,varSize4Bytes: function(v,t) {
		switch(v._hx_index) {
		case 9:
			if(v.size == 4) {
				return 1;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " 4 bytes size unknown for type" + Std.string(t));
			}
			break;
		case 13:
			var vl = v.vl;
			var size = 0;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				size += this.varSize4Bytes(v1.type,t);
			}
			return size;
		case 15:
			var _gsize = v.size;
			if(_gsize._hx_index == 0) {
				var n = _gsize.v;
				var at = v.t;
				return this.varSize4Bytes(at,t) * n;
			} else {
				return this.varSize(v,t);
			}
			break;
		default:
			return this.varSize(v,t);
		}
	}
	,addTextureFormat: function(dim,arr,rw) {
		if(rw == null) {
			rw = 0;
		}
		var _g = 0;
		var _g1 = this.textureFormats;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f.dim == dim && f.arr == arr && f.rw == rw) {
				return;
			}
		}
		this.textureFormats.push({ dim : dim, arr : arr, rw : rw});
	}
	,gatherVar: function(v) {
		var _g = v.type;
		switch(_g._hx_index) {
		case 10:
			var dim = _g.dim;
			var arr = _g.isArray;
			var rw;
			var _g1 = v.type;
			if(_g1._hx_index == 11) {
				var chans = _g1.channels;
				rw = chans;
			} else {
				rw = 0;
			}
			this.addTextureFormat(dim,arr,rw);
			break;
		case 11:
			var dim = _g.dim;
			var arr = _g.isArray;
			var rw;
			var _g1 = v.type;
			if(_g1._hx_index == 11) {
				var chans = _g1.channels;
				rw = chans;
			} else {
				rw = 0;
			}
			this.addTextureFormat(dim,arr,rw);
			break;
		case 13:
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.gatherVar(v1);
			}
			return;
		case 15:
			var type = _g.t;
			switch(type._hx_index) {
			case 10:
				var dim = type.dim;
				var arr = type.isArray;
				this.addTextureFormat(dim,arr,0);
				break;
			case 11:
				var dim = type.dim;
				var arr = type.isArray;
				var chans = type.channels;
				this.addTextureFormat(dim,arr,chans);
				break;
			default:
			}
			break;
		case 17:
			this.addTextureFormat(hxsl_TexDimension.T2D,false);
			break;
		default:
		}
		switch(v.kind._hx_index) {
		case 0:
			if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.PerObject)) {
				this.params.push(v);
			} else {
				this.globals.push(v);
			}
			break;
		case 2:
			this.params.push(v);
			break;
		default:
			this.outVars.push(v);
		}
	}
	,__class__: hxsl_Flatten
};
var hxsl_Globals = function() {
	this.channels = [];
	this.map = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Globals"] = hxsl_Globals;
hxsl_Globals.__name__ = "hxsl.Globals";
hxsl_Globals.allocID = function(path) {
	if(hxsl_Globals.MAP == null) {
		hxsl_Globals.MAP = new haxe_ds_StringMap();
		hxsl_Globals.ALL = [];
	}
	var id = hxsl_Globals.MAP.h[path];
	if(id == null) {
		id = hxsl_Globals.ALL.length;
		hxsl_Globals.ALL.push(path);
		hxsl_Globals.MAP.h[path] = id;
	}
	return id;
};
hxsl_Globals.prototype = {
	set: function(path,v) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		this1.h[key] = v;
	}
	,allocChannelID: function(t) {
		var _g = 0;
		var _g1 = this.maxChannels;
		while(_g < _g1) {
			var i = _g++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl_Tools.MAX_CHANNELS_BITS) {
			throw haxe_Exception.thrown("Too many unique channels");
		}
		var i = this.maxChannels++;
		this.channels[i] = t;
		return i;
	}
	,__class__: hxsl_Globals
};
var hxsl_GlslOut = function() {
	this.computeLayout = [1,1,1];
	this.outIndex = 0;
	this.uniformBuffer = 0;
	this.exprIds = 0;
	this.varNames = new haxe_ds_IntMap();
	this.allNames = new haxe_ds_StringMap();
};
$hxClasses["hxsl.GlslOut"] = hxsl_GlslOut;
hxsl_GlslOut.__name__ = "hxsl.GlslOut";
hxsl_GlslOut.prototype = {
	decl: function(s) {
		var _g = 0;
		var _g1 = this.decls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	,getSamplerType: function(dim,arr) {
		var name = "sampler" + HxOverrides.substr($hxEnums[dim.__enum__].__constructs__[dim._hx_index]._hx_name,1,null);
		if(arr) {
			name += "Array";
		}
		return name;
	}
	,addType: function(t) {
		switch(t._hx_index) {
		case 0:
			this.buf.b += Std.string("void");
			break;
		case 1:
			this.buf.b += Std.string("int");
			break;
		case 2:
			this.buf.b += Std.string("bool");
			break;
		case 3:
			this.buf.b += Std.string("float");
			break;
		case 4:
			this.buf.b += Std.string("string");
			break;
		case 5:
			var size = t.size;
			var k = t.t;
			switch(k._hx_index) {
			case 0:
				this.buf.b += Std.string("i");
				break;
			case 1:
				break;
			case 2:
				this.buf.b += Std.string("b");
				break;
			}
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(size);
			break;
		case 6:
			this.buf.b += Std.string("mat3");
			break;
		case 7:
			this.buf.b += Std.string("mat4");
			break;
		case 8:
			this.decl(hxsl_GlslOut.MAT34);
			this.buf.b += Std.string("_mat3x4");
			break;
		case 9:
			var n = t.size;
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(n);
			break;
		case 10:
			var dim = t.dim;
			var arr = t.isArray;
			var name = this.getSamplerType(dim,arr);
			this.buf.b += Std.string(name);
			if(this.glES != null && (arr || dim == hxsl_TexDimension.T3D)) {
				this.decl("precision lowp " + name + ";");
			}
			break;
		case 11:
			var dim = t.dim;
			var arr = t.isArray;
			var chans = t.channels;
			this.buf.b += Std.string("image" + HxOverrides.substr($hxEnums[dim.__enum__].__constructs__[dim._hx_index]._hx_name,1,null) + (arr ? "Array" : ""));
			break;
		case 12:
			this.buf.b += Std.string("mat2");
			break;
		case 13:
			var vl = t.vl;
			this.buf.b += Std.string("struct { ");
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.addVar(v);
				this.buf.b += Std.string(";");
			}
			this.buf.b += Std.string(" }");
			break;
		case 14:
			this.buf.b += Std.string("function");
			break;
		case 15:
			var t1 = t.t;
			var size = t.size;
			this.addType(t1);
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _gv = size.v;
				switch(_gv) {
				case 0:
					break;
				case 1:
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var v = _gv;
						this.buf.b += Std.string(v);
					}
					break;
				default:
					var v = _gv;
					this.buf.b += Std.string(v);
				}
				break;
			case 1:
				var v = size.v;
				var v1 = this.varName(v);
				this.buf.b += Std.string(v1);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			throw haxe_Exception.thrown("assert");
		case 17:
			var n = t.size;
			this.buf.b += Std.string("channel" + n);
			break;
		}
	}
	,addVar: function(v) {
		var _g = v.type;
		switch(_g._hx_index) {
		case 15:
			var t = _g.t;
			var size = _g.size;
			var old = v.type;
			v.type = t;
			this.addVar(v);
			v.type = old;
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _gv = size.v;
				switch(_gv) {
				case 0:
					break;
				case 1:
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var n = _gv;
						this.buf.b += Std.string(n);
					}
					break;
				default:
					var n = _gv;
					this.buf.b += Std.string(n);
				}
				break;
			case 1:
				var v1 = size.v;
				var v2 = this.varName(v1);
				this.buf.b += Std.string(v2);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var t = _g.t;
			var size = _g.size;
			var kind = _g.kind;
			switch(kind._hx_index) {
			case 0:case 3:
				break;
			case 1:case 4:
				this.buf.b += Std.string("storage_");
				break;
			case 2:case 5:
				this.buf.b += Std.string("rw_");
				break;
			}
			this.buf.b += Std.string((this.isVertex ? "vertex_" : "") + "uniform_buffer" + this.uniformBuffer++);
			this.buf.b += Std.string(" { ");
			v.type = hxsl_Type.TArray(t,size);
			this.addVar(v);
			v.type = hxsl_Type.TBuffer(t,size,kind);
			this.buf.b += Std.string("; }");
			break;
		default:
			this.addType(v.type);
			this.buf.b += Std.string(" ");
			var v1 = this.varName(v);
			this.buf.b += Std.string(v1);
		}
	}
	,addValue: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var name = "_val" + this.exprIds++;
			var tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += Std.string(" ");
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("(void)");
			var el2 = el.slice();
			var last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl_TExprDef.TReturn(last), t : e.t, p : last.p};
			var e2 = { t : hxsl_Type.TVoid, e : hxsl_TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("()");
			break;
		case 10:
			var econd = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			this.buf.b += Std.string("( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(" ) ? ");
			this.addValue(eif,tabs);
			this.buf.b += Std.string(" : ");
			this.addValue(eelse,tabs);
			break;
		case 20:
			var e1 = _g.e;
			this.addValue(e1,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	,addBlock: function(e,tabs) {
		this.addExpr(e,tabs);
	}
	,getFunName: function(g,args,rt) {
		switch(g._hx_index) {
		case 20:
			if(rt == hxsl_Type.TInt && this.glES != null) {
				this.decl("int _imod( int x, int y ) { return int(mod(float(x),float(y))); }");
				return "_imod";
			}
			break;
		case 25:
			this.decl("float invLerp(float v, float a, float b) { return clamp((v - a) / (b - a), 0.0, 1.0); }");
			break;
		case 34:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:
				switch(_g.dim._hx_index) {
				case 1:
					if(this.glES != null && this.glES <= 2) {
						return "texture2D";
					}
					break;
				case 3:
					if(this.glES != null && this.glES <= 2) {
						return "textureCube";
					}
					break;
				default:
				}
				break;
			case 17:
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			default:
			}
			break;
		case 35:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:
				switch(_g.dim._hx_index) {
				case 1:
					if(this.glES != null && this.glES <= 2) {
						this.decl("#extension GL_EXT_shader_texture_lod : enable");
						return "texture2DLodEXT";
					}
					break;
				case 3:
					if(this.glES != null && this.glES <= 2) {
						this.decl("#extension GL_EXT_shader_texture_lod : enable");
						return "textureCubeLodEXT";
					}
					break;
				default:
				}
				break;
			case 17:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			default:
			}
			break;
		case 36:
			return "texelFetch";
		case 37:
			var sufix = "";
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:
				var dim = _g.dim;
				var arr = _g.isArray;
				var size = hxsl_Tools.getDimSize(dim,arr);
				sufix = arr ? "Array" : "";
				var t = "sampler" + HxOverrides.substr($hxEnums[dim.__enum__].__constructs__[dim._hx_index]._hx_name,1,null) + sufix;
				this.decl("vec" + size + " _texture" + sufix + "Size(" + t + " sampler, int lod) { return vec" + size + "(textureSize(sampler, lod)); }");
				break;
			case 11:
				var dim = _g.dim;
				var arr = _g.isArray;
				var size = hxsl_Tools.getDimSize(dim,arr);
				return "vec" + size + "(imageSize";
			case 17:
				this.decl("vec2 _textureSize(sampler2D sampler, int lod) { return vec2(textureSize(sampler, lod)); }");
				break;
			default:
			}
			return "_texture" + sufix + "Size";
		case 51:
			if(args[0].t == hxsl_Type.TMat3x4) {
				this.decl(hxsl_GlslOut.MAT34);
				this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
				return "_mat3";
			}
			break;
		case 53:
			this.decl(hxsl_GlslOut.MAT34);
			if(args.length == 1) {
				this.decl("_mat3x4 mat_to_34( mat4 m ) { return _mat3x4(m[0],m[1],m[2]); }");
				return "mat_to_34";
			}
			break;
		case 55:
			this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
			break;
		case 56:
			this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
			break;
		case 57:
			this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
			break;
		case 58:
			this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
			break;
		case 59:
			this.decl("vec2 screenToUv( vec2 v ) { return v * vec2(0.5,-0.5) + vec2(0.5,0.5); }");
			break;
		case 60:
			this.decl("vec2 uvToScreen( vec2 v ) { return v * vec2(2.,-2.) + vec2(-1., 1.); }");
			break;
		case 61:case 62:case 63:
			if(this.isVertex) {
				throw haxe_Exception.thrown("Can't use " + Std.string(g) + " in vertex shader");
			}
			if(this.version < 300) {
				this.decl("#extension GL_OES_standard_derivatives:enable");
			}
			break;
		case 74:
			if(this.version < 330) {
				this.decl("#extension GL_ARB_shader_bit_encoding :enable");
			}
			this.decl("int _floatBitsToUint( float v) { return int(floatBitsToUint(v)); }");
			this.decl("ivec2 _floatBitsToUint( vec2 v ) { return ivec2(floatBitsToUint(v)); }");
			this.decl("ivec3 _floatBitsToUint( vec3 v ) { return ivec3(floatBitsToUint(v)); }");
			this.decl("ivec4 _floatBitsToUint( vec4 v ) { return ivec4(floatBitsToUint(v)); }");
			break;
		case 73:case 75:
			if(this.version < 330) {
				this.decl("#extension GL_ARB_shader_bit_encoding :enable");
			}
			break;
		case 76:
			if(this.version < 330) {
				this.decl("#extension GL_ARB_shader_bit_encoding :enable");
			}
			this.decl("float _uintBitsToFloat( int v ) { return uintBitsToFloat(uint(v)); }");
			this.decl("vec2 _uintBitsToFloat( ivec2 v ) { return uintBitsToFloat(uvec2(v)); }");
			this.decl("vec3 _uintBitsToFloat( ivec3 v ) { return uintBitsToFloat(uvec3(v)); }");
			this.decl("vec4 _uintBitsToFloat( ivec4 v ) { return uintBitsToFloat(uvec4(v)); }");
			break;
		default:
		}
		return hxsl_GlslOut.GLOBALS[g._hx_index];
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 0:
				this.buf.b += Std.string("null");
				break;
			case 1:
				var b = c.b;
				this.buf.b += Std.string(b);
				break;
			case 2:
				var v = c.v;
				this.buf.b += Std.string(v);
				break;
			case 3:
				var f = c.v;
				var str = "" + f;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += Std.string(".");
				}
				break;
			case 4:
				var v = c.v;
				this.buf.b += Std.string("\"" + v + "\"");
				break;
			}
			break;
		case 1:
			var v = _g.v;
			var v1 = this.varName(v);
			this.buf.b += Std.string(v1);
			break;
		case 2:
			var g = _g.g;
			this.buf.b += Std.string(hxsl_GlslOut.GLOBALS[g._hx_index]);
			break;
		case 3:
			var e1 = _g.e;
			this.buf.b += Std.string("(");
			this.addValue(e1,tabs);
			this.buf.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buf.b += Std.string("{\n");
			var t2 = tabs + "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				this.buf.b += Std.string(t2);
				this.addExpr(e1,t2);
				this.newLine(e1);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += Std.string("}");
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var _g1 = e1.t;
			var _g2 = e2.t;
			switch(op._hx_index) {
			case 1:
				if(_g1._hx_index == 5) {
					if(_g1.size == 3) {
						if(_g1.t._hx_index == 1) {
							if(_g2._hx_index == 8) {
								this.decl(hxsl_GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								if(op._hx_index == 20) {
									this.addValue(e1,tabs);
									this.buf.b += Std.string(" = ");
								}
								this.buf.b += Std.string("m3x4mult(");
								this.addValue(e1,tabs);
								this.buf.b += Std.string(",");
								this.addValue(e2,tabs);
								this.buf.b += Std.string(")");
							} else {
								this.addValue(e1,tabs);
								this.buf.b += Std.string(" ");
								var v = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" ");
							var v = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 5:
				if(_g1._hx_index == 5) {
					if(_g2._hx_index == 5) {
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 6:
				if(_g1._hx_index == 5) {
					if(_g2._hx_index == 5) {
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 7:
				if(_g1._hx_index == 5) {
					if(_g2._hx_index == 5) {
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 8:
				if(_g1._hx_index == 5) {
					if(_g2._hx_index == 5) {
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 9:
				if(_g1._hx_index == 5) {
					if(_g2._hx_index == 5) {
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 10:
				if(_g1._hx_index == 5) {
					if(_g2._hx_index == 5) {
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += Std.string("_ushr(");
				this.addValue(e1,tabs);
				this.buf.b += Std.string(",");
				this.addValue(e2,tabs);
				this.buf.b += Std.string(")");
				break;
			case 19:
				if(e.t != hxsl_Type.TInt) {
					if(op._hx_index == 20) {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" = ");
					}
					this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e1,e2]), t : e.t, p : e.p},tabs);
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 20:
				switch(op.op._hx_index) {
				case 1:
					if(_g1._hx_index == 5) {
						if(_g1.size == 3) {
							if(_g1.t._hx_index == 1) {
								if(_g2._hx_index == 8) {
									this.decl(hxsl_GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									if(op._hx_index == 20) {
										this.addValue(e1,tabs);
										this.buf.b += Std.string(" = ");
									}
									this.buf.b += Std.string("m3x4mult(");
									this.addValue(e1,tabs);
									this.buf.b += Std.string(",");
									this.addValue(e2,tabs);
									this.buf.b += Std.string(")");
								} else {
									this.addValue(e1,tabs);
									this.buf.b += Std.string(" ");
									var v = hxsl_Printer.opStr(op);
									this.buf.b += Std.string(v);
									this.buf.b += Std.string(" ");
									this.addValue(e2,tabs);
								}
							} else {
								this.addValue(e1,tabs);
								this.buf.b += Std.string(" ");
								var v = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" ");
							var v = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				case 19:
					if(e.t != hxsl_Type.TInt) {
						if(op._hx_index == 20) {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" = ");
						}
						this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e1,e2]), t : e.t, p : e.p},tabs);
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				default:
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			default:
				this.addValue(e1,tabs);
				this.buf.b += Std.string(" ");
				var v = hxsl_Printer.opStr(op);
				this.buf.b += Std.string(v);
				this.buf.b += Std.string(" ");
				this.addValue(e2,tabs);
			}
			break;
		case 6:
			var op = _g.op;
			var e1 = _g.e1;
			var v;
			switch(op._hx_index) {
			case 0:
				v = "++";
				break;
			case 1:
				v = "--";
				break;
			case 2:
				v = "!";
				break;
			case 3:
				v = "-";
				break;
			case 4:
				v = "~";
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			this.buf.b += Std.string(v);
			this.addValue(e1,tabs);
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			this.locals.h[v.id] = v;
			if(init != null) {
				var v1 = this.varName(v);
				this.buf.b += Std.string(v1);
				this.buf.b += Std.string(" = ");
				this.addValue(init,tabs);
			} else {
				this.buf.b += Std.string("/*var*/");
			}
			break;
		case 8:
			var _ge = _g.e;
			var _gargs = _g.args;
			var _ge1 = _ge.e;
			if(_ge1._hx_index == 2) {
				var _gg = _ge1.g;
				switch(_gg._hx_index) {
				case 36:
					var g = _gg;
					var args = _gargs;
					var v = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string("(");
					this.addValue(args[0],tabs);
					this.buf.b += Std.string(", ");
					this.addValue(args[1],tabs);
					if(args.length != 2) {
						this.buf.b += Std.string(", ");
						this.addValue(args[2],tabs);
						this.buf.b += Std.string(")");
					} else {
						this.buf.b += Std.string(", 0)");
					}
					break;
				case 37:
					var g = _gg;
					var args = _gargs;
					var v = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string("(");
					this.addValue(args[0],tabs);
					if(args.length != 1) {
						this.buf.b += Std.string(", ");
						this.addValue(args[1],tabs);
						this.buf.b += Std.string(")");
					} else if(args[0].t._hx_index == 11) {
						this.buf.b += Std.string("))");
					} else {
						this.buf.b += Std.string(", 0)");
					}
					break;
				case 54:
					if(_gargs.length == 1) {
						var e1 = _gargs[0];
						this.buf.b += Std.string("clamp(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(", 0., 1.)");
					} else {
						var v = _ge;
						var args = _gargs;
						var _g1 = v.e;
						if(_g1._hx_index == 2) {
							var g = _g1.g;
							var v1 = this.getFunName(g,args,e.t);
							this.buf.b += Std.string(v1);
						} else {
							this.addValue(v,tabs);
						}
						this.buf.b += Std.string("(");
						var first = true;
						var _g1 = 0;
						while(_g1 < args.length) {
							var e1 = args[_g1];
							++_g1;
							if(first) {
								first = false;
							} else {
								this.buf.b += Std.string(", ");
							}
							this.addValue(e1,tabs);
						}
						this.buf.b += Std.string(")");
					}
					break;
				case 78:
					break;
				case 79:
					if(_gargs.length == 3) {
						var tex = _gargs[0];
						var uv = _gargs[1];
						var color = _gargs[2];
						var chans;
						var _g1 = tex.t;
						if(_g1._hx_index == 11) {
							var chans1 = _g1.channels;
							chans = chans1;
						} else {
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string("imageStore(");
						this.addValue(tex,tabs);
						this.buf.b += Std.string(",");
						this.addValue(uv,tabs);
						this.buf.b += Std.string(",");
						if(chans != 4) {
							this.buf.b += Std.string("(");
						}
						this.addValue(color,tabs);
						if(chans != 4) {
							this.buf.b += Std.string(")" + (chans == 1 ? ".xx" : ".xyyy"));
						}
						this.buf.b += Std.string(")");
					} else {
						var v = _ge;
						var args = _gargs;
						var _g1 = v.e;
						if(_g1._hx_index == 2) {
							var g = _g1.g;
							var v1 = this.getFunName(g,args,e.t);
							this.buf.b += Std.string(v1);
						} else {
							this.addValue(v,tabs);
						}
						this.buf.b += Std.string("(");
						var first = true;
						var _g1 = 0;
						while(_g1 < args.length) {
							var e1 = args[_g1];
							++_g1;
							if(first) {
								first = false;
							} else {
								this.buf.b += Std.string(", ");
							}
							this.addValue(e1,tabs);
						}
						this.buf.b += Std.string(")");
					}
					break;
				case 84:
					var args = _gargs;
					this.buf.b += Std.string("atomicAdd(");
					this.addValue(args[0],tabs);
					this.buf.b += Std.string("[");
					this.addValue(args[1],tabs);
					this.buf.b += Std.string("],");
					this.addValue(args[2],tabs);
					this.buf.b += Std.string(")");
					break;
				default:
					var v = _ge;
					var args = _gargs;
					var _g1 = v.e;
					if(_g1._hx_index == 2) {
						var g = _g1.g;
						var v1 = this.getFunName(g,args,e.t);
						this.buf.b += Std.string(v1);
					} else {
						this.addValue(v,tabs);
					}
					this.buf.b += Std.string("(");
					var first = true;
					var _g1 = 0;
					while(_g1 < args.length) {
						var e1 = args[_g1];
						++_g1;
						if(first) {
							first = false;
						} else {
							this.buf.b += Std.string(", ");
						}
						this.addValue(e1,tabs);
					}
					this.buf.b += Std.string(")");
				}
			} else {
				var v = _ge;
				var args = _gargs;
				var _g1 = v.e;
				if(_g1._hx_index == 2) {
					var g = _g1.g;
					var v1 = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v1);
				} else {
					this.addValue(v,tabs);
				}
				this.buf.b += Std.string("(");
				var first = true;
				var _g1 = 0;
				while(_g1 < args.length) {
					var e1 = args[_g1];
					++_g1;
					if(first) {
						first = false;
					} else {
						this.buf.b += Std.string(", ");
					}
					this.addValue(e1,tabs);
				}
				this.buf.b += Std.string(")");
			}
			break;
		case 9:
			var e1 = _g.e;
			var regs = _g.regs;
			if(e1.t._hx_index == 3) {
				var _g1 = 0;
				while(_g1 < regs.length) {
					var r = regs[_g1];
					++_g1;
					if(r != hxsl_Component.X) {
						throw haxe_Exception.thrown("assert");
					}
				}
				switch(regs.length) {
				case 1:
					this.addValue(e1,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += Std.string("_vec2(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += Std.string("_vec3(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += Std.string("_vec4(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
			} else {
				this.addValue(e1,tabs);
				this.buf.b += Std.string(".");
				var _g1 = 0;
				while(_g1 < regs.length) {
					var r = regs[_g1];
					++_g1;
					var _this = this.buf;
					var _this1 = _this.b;
					var tmp;
					switch(r._hx_index) {
					case 0:
						tmp = "x";
						break;
					case 1:
						tmp = "y";
						break;
					case 2:
						tmp = "z";
						break;
					case 3:
						tmp = "w";
						break;
					}
					_this.b = _this1 + Std.string(tmp);
				}
			}
			break;
		case 10:
			var econd = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			this.buf.b += Std.string("if( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(") ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				if(!this.isBlock(eif)) {
					this.buf.b += Std.string(";");
				}
				this.buf.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buf.b += Std.string("discard");
			break;
		case 12:
			var e1 = _g.e;
			if(e1 == null) {
				this.buf.b += Std.string("return");
			} else {
				this.buf.b += Std.string("return ");
				this.addValue(e1,tabs);
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			this.locals.h[v.id] = v;
			var _g1 = it.e;
			if(_g1._hx_index == 5) {
				if(_g1.op._hx_index == 21) {
					var e1 = _g1.e1;
					var e2 = _g1.e2;
					this.buf.b += Std.string("for(");
					this.buf.b += Std.string(v.name + "=");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(";" + v.name + "<");
					this.addValue(e2,tabs);
					this.buf.b += Std.string(";" + v.name + "++) ");
					this.addBlock(loop,tabs);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 14:
			this.buf.b += Std.string("continue");
			break;
		case 15:
			this.buf.b += Std.string("break");
			break;
		case 16:
			var e1 = _g.e;
			var index = _g.index;
			this.addValue(e1,tabs);
			this.buf.b += Std.string("[");
			this.addValue(index,tabs);
			this.buf.b += Std.string("]");
			break;
		case 17:
			var el = _g.el;
			var _g1 = e.t;
			if(_g1._hx_index == 15) {
				var t = _g1.t;
				this.addType(t);
			} else {
				throw haxe_Exception.thrown("assert");
			}
			this.buf.b += Std.string("[" + el.length + "]");
			this.buf.b += Std.string("(");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buf.b += Std.string(", ");
				}
				this.addValue(e,tabs);
			}
			this.buf.b += Std.string(")");
			break;
		case 18:
			this.buf.b += Std.string("switch(...)");
			break;
		case 19:
			var _ge = _g.e;
			var _gloop = _g.loop;
			if(_g.normalWhile == false) {
				var loop = _gloop;
				var e = _ge;
				var old = tabs;
				tabs += "\t";
				this.buf.b += Std.string("do ");
				this.addBlock(loop,tabs);
				this.buf.b += Std.string(" while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" )");
			} else {
				var loop = _gloop;
				var e = _ge;
				this.buf.b += Std.string("while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" ) ");
				this.addBlock(loop,tabs);
			}
			break;
		case 20:
			var e = _g.e;
			this.addExpr(e,tabs);
			break;
		case 21:
			var val = _g.e;
			var name = _g.name;
			this.addExpr(val,tabs);
			this.buf.b += Std.string(".");
			this.buf.b += Std.string(name);
			break;
		}
	}
	,varName: function(v) {
		if(v.kind == hxsl_VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES != null && this.glES <= 2) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		var n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		if(v.kind == hxsl_VarKind.Var) {
			n += "_varying";
		}
		if(Object.prototype.hasOwnProperty.call(hxsl_GlslOut.KWDS.h,n)) {
			n = "_" + n;
		}
		if(Object.prototype.hasOwnProperty.call(this.allNames.h,n)) {
			var k = 2;
			n += "_";
			while(Object.prototype.hasOwnProperty.call(this.allNames.h,n + k)) ++k;
			n += k;
		}
		this.varNames.h[v.id] = n;
		this.allNames.h[n] = v.id;
		return n;
	}
	,newLine: function(e) {
		if(this.isBlock(e)) {
			this.buf.b += Std.string("\n");
		} else {
			this.buf.b += Std.string(";\n");
		}
	}
	,isBlock: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			return true;
		case 13:
			var loop = _g.loop;
			return this.isBlock(loop);
		case 19:
			if(_g.normalWhile == true) {
				var loop = _g.loop;
				return this.isBlock(loop);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,initVar: function(v) {
		switch(v.kind._hx_index) {
		case 0:case 2:
			var _g = v.type;
			switch(_g._hx_index) {
			case 15:
				var _gt = _g.t;
				if(_gt._hx_index == 11) {
					var chans = _gt.channels;
					var format = HxOverrides.substr("rgba",0,chans);
					this.buf.b += Std.string("layout(" + format + "32f) uniform ");
				} else {
					this.buf.b += Std.string("uniform ");
				}
				break;
			case 16:
				var _gkind = _g.kind;
				switch(_gkind._hx_index) {
				case 1:case 4:
					if(this.version < 430) {
						throw haxe_Exception.thrown("SSBO are available since version 4.3");
					}
					this.buf.b += Std.string("layout(std430) readonly buffer ");
					break;
				case 2:case 5:
					if(this.version < 430) {
						throw haxe_Exception.thrown("SSBO are available since version 4.3");
					}
					this.buf.b += Std.string("layout(std430) buffer ");
					break;
				default:
					var kind = _gkind;
					this.buf.b += Std.string("layout(std140) ");
					switch(kind._hx_index) {
					case 0:case 3:
						this.buf.b += Std.string("uniform ");
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
				}
				break;
			default:
				this.buf.b += Std.string("uniform ");
			}
			break;
		case 1:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "attribute " : "in ");
			break;
		case 3:
			if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Flat)) {
				this.buf.b += Std.string("flat ");
			}
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "varying " : this.isVertex ? "out " : "in ");
			break;
		case 4:
			break;
		case 5:
			if(this.glES != null && this.glES <= 2) {
				this.outIndexes.h[v.id] = this.outIndex++;
				return;
			}
			if(this.isVertex) {
				return;
			}
			if(this.glES != null) {
				this.buf.b += Std.string("layout(location=" + this.outIndex++ + ") ");
			}
			this.buf.b += Std.string("out ");
			break;
		case 6:
			return;
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 6) {
					var p = q.p;
					switch(p._hx_index) {
					case 0:
						this.buf.b += Std.string("lowp ");
						break;
					case 1:
						this.buf.b += Std.string("mediump ");
						break;
					case 2:
						this.buf.b += Std.string("highp ");
						break;
					}
				}
			}
		}
		this.addVar(v);
		this.buf.b += Std.string(";\n");
	}
	,initVars: function(s) {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.outIndexes = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.initVar(v);
		}
		this.buf.b += Std.string("\n");
		if(this.outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && (this.glES != null && this.glES <= 2)) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
	}
	,collectGlobals: function(m,e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 2:
			var g = _g.g;
			m.set(g,true);
			break;
		case 8:
			var _gargs = _g.args;
			var _ge = _g.e.e;
			if(_ge._hx_index == 2) {
				if(_ge.g._hx_index == 78) {
					switch(_gargs.length) {
					case 1:
						var _ge = _gargs[0].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var x = _gc.v;
								this.computeLayout = [x,1,1];
							} else {
								var _g = this;
								var m1 = m;
								hxsl_Tools.iter(e,function(e) {
									_g.collectGlobals(m1,e);
								});
							}
						} else {
							var _g1 = this;
							var m2 = m;
							hxsl_Tools.iter(e,function(e) {
								_g1.collectGlobals(m2,e);
							});
						}
						break;
					case 2:
						var _ge = _gargs[0].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var _ge = _gargs[1].e;
								if(_ge._hx_index == 0) {
									var _gc1 = _ge.c;
									if(_gc1._hx_index == 2) {
										var y = _gc1.v;
										var x = _gc.v;
										this.computeLayout = [x,y,1];
									} else {
										var _g2 = this;
										var m3 = m;
										hxsl_Tools.iter(e,function(e) {
											_g2.collectGlobals(m3,e);
										});
									}
								} else {
									var _g3 = this;
									var m4 = m;
									hxsl_Tools.iter(e,function(e) {
										_g3.collectGlobals(m4,e);
									});
								}
							} else {
								var _g4 = this;
								var m5 = m;
								hxsl_Tools.iter(e,function(e) {
									_g4.collectGlobals(m5,e);
								});
							}
						} else {
							var _g5 = this;
							var m6 = m;
							hxsl_Tools.iter(e,function(e) {
								_g5.collectGlobals(m6,e);
							});
						}
						break;
					case 3:
						var _ge = _gargs[0].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var _ge = _gargs[1].e;
								if(_ge._hx_index == 0) {
									var _gc1 = _ge.c;
									if(_gc1._hx_index == 2) {
										var _ge = _gargs[2].e;
										if(_ge._hx_index == 0) {
											var _gc2 = _ge.c;
											if(_gc2._hx_index == 2) {
												var z = _gc2.v;
												var x = _gc.v;
												var y = _gc1.v;
												this.computeLayout = [x,y,z];
											} else {
												var _g6 = this;
												var m7 = m;
												hxsl_Tools.iter(e,function(e) {
													_g6.collectGlobals(m7,e);
												});
											}
										} else {
											var _g7 = this;
											var m8 = m;
											hxsl_Tools.iter(e,function(e) {
												_g7.collectGlobals(m8,e);
											});
										}
									} else {
										var _g8 = this;
										var m9 = m;
										hxsl_Tools.iter(e,function(e) {
											_g8.collectGlobals(m9,e);
										});
									}
								} else {
									var _g9 = this;
									var m10 = m;
									hxsl_Tools.iter(e,function(e) {
										_g9.collectGlobals(m10,e);
									});
								}
							} else {
								var _g10 = this;
								var m11 = m;
								hxsl_Tools.iter(e,function(e) {
									_g10.collectGlobals(m11,e);
								});
							}
						} else {
							var _g11 = this;
							var m12 = m;
							hxsl_Tools.iter(e,function(e) {
								_g11.collectGlobals(m12,e);
							});
						}
						break;
					default:
						var _g12 = this;
						var m13 = m;
						hxsl_Tools.iter(e,function(e) {
							_g12.collectGlobals(m13,e);
						});
					}
				} else {
					var _g13 = this;
					var m14 = m;
					hxsl_Tools.iter(e,function(e) {
						_g13.collectGlobals(m14,e);
					});
				}
			} else {
				var _g14 = this;
				var m15 = m;
				hxsl_Tools.iter(e,function(e) {
					_g14.collectGlobals(m15,e);
				});
			}
			break;
		default:
			var _g15 = this;
			var m16 = m;
			hxsl_Tools.iter(e,function(e) {
				_g15.collectGlobals(m16,e);
			});
		}
	}
	,run: function(s) {
		var foundGlobals = new haxe_ds_EnumValueMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.collectGlobals(foundGlobals,f.expr);
		}
		this.locals = new haxe_ds_IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		if(s.funs.length != 1) {
			throw haxe_Exception.thrown("assert");
		}
		var f = s.funs[0];
		this.isVertex = f.kind == hxsl_FunctionKind.Vertex;
		this.isCompute = f.kind == hxsl_FunctionKind.Main;
		if(!this.isCompute) {
			if(this.isVertex) {
				this.decl("precision highp float;");
			} else {
				this.decl("precision mediump float;");
			}
		}
		this.initVars(s);
		if(this.isCompute) {
			this.decl("layout(local_size_x = " + this.computeLayout[0] + ", local_size_y = " + this.computeLayout[1] + ", local_size_z = " + this.computeLayout[2] + ") in;");
		}
		var tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += Std.string("void main(void) {\n");
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			var _g = 0;
			while(_g < el.length) {
				var e = el[_g];
				++_g;
				this.buf.b += Std.string("\t");
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		if(this.isVertex) {
			this.buf.b += Std.string("\tgl_Position.z += gl_Position.z - gl_Position.w;\n");
		}
		this.buf.b += Std.string("}");
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		var locals = Lambda.array(this.locals);
		locals.sort(function(v1,v2) {
			return Reflect.compare(v1.name,v2.name);
		});
		var _g = 0;
		while(_g < locals.length) {
			var v = locals[_g];
			++_g;
			this.addVar(v);
			this.buf.b += Std.string(";\n");
		}
		this.buf.b += Std.string("\n");
		var _g = 0;
		var _g1 = this.exprValues;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			this.buf.b += Std.string(e);
			this.buf.b += Std.string("\n\n");
		}
		if(this.glES != null) {
			this.decl("#version " + (this.version < 100 ? 100 : this.version) + (this.version > 150 ? " es" : ""));
		} else if(this.isCompute || this.version >= 430) {
			this.decl("#version 430");
		} else if(this.version != null) {
			this.decl("#version " + (this.version > 150 ? 150 : this.version));
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
	,__class__: hxsl_GlslOut
};
var hxsl__$Linker_AllocatedVar = function() {
};
$hxClasses["hxsl._Linker.AllocatedVar"] = hxsl__$Linker_AllocatedVar;
hxsl__$Linker_AllocatedVar.__name__ = "hxsl._Linker.AllocatedVar";
hxsl__$Linker_AllocatedVar.prototype = {
	__class__: hxsl__$Linker_AllocatedVar
};
var hxsl__$Linker_ShaderInfos = function(n,v) {
	this.name = n;
	this.uid = hxsl__$Linker_ShaderInfos.UID++;
	this.vertex = v;
	this.processed = new haxe_ds_IntMap();
	this.usedFunctions = [];
	this.readMap = new haxe_ds_IntMap();
	this.readVars = [];
	this.writeMap = new haxe_ds_IntMap();
	this.writeVars = [];
};
$hxClasses["hxsl._Linker.ShaderInfos"] = hxsl__$Linker_ShaderInfos;
hxsl__$Linker_ShaderInfos.__name__ = "hxsl._Linker.ShaderInfos";
hxsl__$Linker_ShaderInfos.prototype = {
	__class__: hxsl__$Linker_ShaderInfos
};
var hxsl_Linker = function(mode) {
	this.debugDepth = 0;
	this.mode = mode;
};
$hxClasses["hxsl.Linker"] = hxsl_Linker;
hxsl_Linker.__name__ = "hxsl.Linker";
hxsl_Linker.prototype = {
	error: function(msg,p) {
		return hxsl_Error.t(msg,p);
	}
	,mergeVar: function(path,v,v2,p,shaderName) {
		switch(v.kind._hx_index) {
		case 2:
			if(!(shaderName != null && hxsl_Tools.hasBorrowQualifier(v2,shaderName))) {
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 0:case 1:case 3:case 4:case 5:
			break;
		case 6:
			throw haxe_Exception.thrown("assert");
		}
		if(v.kind != v2.kind && v.kind != hxsl_VarKind.Local && v2.kind != hxsl_VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		var _g = v.type;
		var _g1 = v2.type;
		if(_g._hx_index == 13) {
			if(_g1._hx_index == 13) {
				var fl2 = _g1.vl;
				var fl1 = _g.vl;
				var _g = 0;
				while(_g < fl1.length) {
					var f1 = fl1[_g];
					++_g;
					var ft = null;
					var _g1 = 0;
					while(_g1 < fl2.length) {
						var f2 = fl2[_g1];
						++_g1;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						fl2.push(this.allocVar(f1,p,shaderName).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p,shaderName);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
		}
	}
	,allocVar: function(v,p,shaderName,path,parent) {
		var _gthis = this;
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p,shaderName);
			var p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		var key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 4) {
					var n = q.n;
					key = n;
				}
			}
		}
		var ukey = key.toLowerCase();
		var v2 = this.varMap.h[ukey];
		var vname = v.name;
		if(v2 != null) {
			var _g = 0;
			var _g1 = v2.merged;
			while(_g < _g1.length) {
				var vm = _g1[_g];
				++_g;
				if(vm == v) {
					return v2;
				}
			}
			var tmp;
			var borrowed = hxsl_Tools.hasBorrowQualifier(v2.v,shaderName);
			if(!(v.kind == hxsl_VarKind.Param && !borrowed && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v.kind == hxsl_VarKind.Function || (v.kind == hxsl_VarKind.Var || v.kind == hxsl_VarKind.Local) && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private))) {
				var v1 = v2.v;
				var borrowed = hxsl_Tools.hasBorrowQualifier(v,v2.rootShaderName);
				tmp = v1.kind == hxsl_VarKind.Param && !borrowed && !hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v1.kind == hxsl_VarKind.Function || (v1.kind == hxsl_VarKind.Var || v1.kind == hxsl_VarKind.Local) && hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Private);
			} else {
				tmp = true;
			}
			if(tmp || v.kind == hxsl_VarKind.Param && v2.v.kind == hxsl_VarKind.Param) {
				var k = 2;
				while(true) {
					var a = this.varMap.h[ukey + k];
					if(a == null) {
						break;
					}
					var _g = 0;
					var _g1 = a.merged;
					while(_g < _g1.length) {
						var vm = _g1[_g];
						++_g;
						if(vm == v) {
							return a;
						}
					}
					++k;
				}
				if(v.kind == hxsl_VarKind.Input) {
					var _this = this.varMap;
					if(Object.prototype.hasOwnProperty.call(_this.h,ukey)) {
						delete(_this.h[ukey]);
					}
					this.varMap.h[ukey + k] = v2;
					v2.v.name += k;
					v2.path += k;
				} else {
					vname += k;
					key += k;
					ukey += k;
				}
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p,v2.rootShaderName);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		var v2 = { id : hxsl_Tools.allocVarId(), name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		var a = new hxsl__$Linker_AllocatedVar();
		a.v = v2;
		a.merged = [v];
		a.path = key;
		a.id = v2.id;
		a.parent = parent;
		a.instanceIndex = this.curInstance;
		a.rootShaderName = shaderName;
		this.allVars.push(a);
		this.varMap.h[ukey] = a;
		var _g = v2.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.allocVar(v,p,shaderName,key,a).v);
			}
			v2.type = hxsl_Type.TStruct(_g);
		}
		return a;
	}
	,mapExprVar: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			if(!this.locals.h.hasOwnProperty(v.id)) {
				var v1 = this.allocVar(v,e.p);
				if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
					if(hxsl_Debug.TRACE) {
						var msg = this.curShader.name + " read " + v1.path;
						var _g1 = 0;
						var _g2 = this.debugDepth;
						while(_g1 < _g2) {
							var i = _g1++;
							msg = "    " + msg;
						}
						haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
					}
					if(!this.curShader.readMap.h.hasOwnProperty(v1.id)) {
						this.curShader.readMap.h[v1.id] = v1;
						this.curShader.readVars.push(v1);
					}
					if(this.curShader.vertex == null && v1.v.kind == hxsl_VarKind.Var) {
						if(hxsl_Debug.TRACE) {
							var msg = "Force " + this.curShader.name + " into fragment (use varying)";
							var _g1 = 0;
							var _g2 = this.debugDepth;
							while(_g1 < _g2) {
								var i = _g1++;
								msg = "    " + msg;
							}
							haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
						}
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
			}
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var _g1 = e1.e;
			switch(op._hx_index) {
			case 4:
				switch(_g1._hx_index) {
				case 1:
					var _gv = _g1.v;
					var v = _gv;
					if(!this.locals.h.hasOwnProperty(v.id)) {
						var e21 = this.mapExprVar(e2);
						var v1 = this.allocVar(v,e1.p);
						if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
							if(hxsl_Debug.TRACE) {
								var msg = this.curShader.name + " write " + v1.path;
								var _g2 = 0;
								var _g3 = this.debugDepth;
								while(_g2 < _g3) {
									var i = _g2++;
									msg = "    " + msg;
								}
								haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
							}
							this.curShader.writeMap.h[v1.id] = v1;
							this.curShader.writeVars.push(v1);
						}
						return { e : hxsl_TExprDef.TBinop(op,{ e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p},e21), t : e.t, p : e.p};
					} else {
						var v = _gv;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
								if(hxsl_Debug.TRACE) {
									var msg = this.curShader.name + " write " + v1.path;
									var _g2 = 0;
									var _g3 = this.debugDepth;
									while(_g2 < _g3) {
										var i = _g2++;
										msg = "    " + msg;
									}
									haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
								}
								this.curShader.writeMap.h[v1.id] = v1;
								this.curShader.writeVars.push(v1);
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				case 9:
					var _ge = _g1.e.e;
					if(_ge._hx_index == 1) {
						var v = _ge.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
								if(hxsl_Debug.TRACE) {
									var msg = this.curShader.name + " write " + v1.path;
									var _g2 = 0;
									var _g3 = this.debugDepth;
									while(_g2 < _g3) {
										var i = _g2++;
										msg = "    " + msg;
									}
									haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
								}
								this.curShader.writeMap.h[v1.id] = v1;
								this.curShader.writeVars.push(v1);
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				switch(_g1._hx_index) {
				case 1:
					var v = _g1.v;
					if(!this.locals.h.hasOwnProperty(v.id)) {
						var e11 = this.mapExprVar(e1);
						var e21 = this.mapExprVar(e2);
						var v1 = this.allocVar(v,e11.p);
						if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
							if(hxsl_Debug.TRACE) {
								var msg = this.curShader.name + " write " + v1.path;
								var _g2 = 0;
								var _g3 = this.debugDepth;
								while(_g2 < _g3) {
									var i = _g2++;
									msg = "    " + msg;
								}
								haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
							}
							this.curShader.writeMap.h[v1.id] = v1;
							this.curShader.writeVars.push(v1);
						}
						return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
					}
					break;
				case 9:
					var _ge = _g1.e.e;
					if(_ge._hx_index == 1) {
						var v = _ge.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
								if(hxsl_Debug.TRACE) {
									var msg = this.curShader.name + " write " + v1.path;
									var _g1 = 0;
									var _g2 = this.debugDepth;
									while(_g1 < _g2) {
										var i = _g1++;
										msg = "    " + msg;
									}
									haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
								}
								this.curShader.writeMap.h[v1.id] = v1;
								this.curShader.writeVars.push(v1);
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			var v = _g.v;
			this.locals.h[v.id] = true;
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			var v = _g.v;
			this.locals.h[v.id] = true;
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapExprVar));
	}
	,addShader: function(name,vertex,e,p) {
		var s = new hxsl__$Linker_ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		if(hxsl_Debug.TRACE) {
			var msg = "Adding shader " + name + " with priority " + p;
			var _g = 0;
			var _g1 = this.debugDepth;
			while(_g < _g1) {
				var i = _g++;
				msg = "    " + msg;
			}
			haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "addShader"});
		}
		return s;
	}
	,sortByPriorityDesc: function(s1,s2) {
		if(s1.priority == s2.priority) {
			return s1.uid - s2.uid;
		}
		return s2.priority - s1.priority;
	}
	,buildDependency: function(s,v,isWritten) {
		var found = !isWritten;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.writeMap.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex) {
				if(parent.vertex == false) {
					continue;
				}
				if(parent.vertex == null) {
					parent.vertex = true;
				}
			}
			if(hxsl_Debug.TRACE) {
				var msg = s.name + " => " + parent.name + " (" + v.path + ")";
				var _g2 = 0;
				var _g3 = this.debugDepth;
				while(_g2 < _g3) {
					var i = _g2++;
					msg = "    " + msg;
				}
				haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "buildDependency"});
			}
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.readMap.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl_VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	,initDependencies: function(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.readVars;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			this.buildDependency(s,r,s.writeMap.h.hasOwnProperty(r.id));
		}
	}
	,collect: function(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		var _g = [];
		var d = cur.deps.keys();
		while(d.hasNext()) {
			var d1 = d.next();
			_g.push(d1);
		}
		var deps = _g;
		deps.sort($bind(this,this.sortByPriorityDesc));
		var _g = 0;
		while(_g < deps.length) {
			var d = deps[_g];
			++_g;
			this.collect(d,out,vertex);
		}
		if(cur.vertex == null) {
			if(hxsl_Debug.TRACE) {
				var msg = "MARK " + cur.name + " " + (vertex ? "vertex" : "fragment");
				var _g = 0;
				var _g1 = this.debugDepth;
				while(_g < _g1) {
					var i = _g++;
					msg = "    " + msg;
				}
				haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "collect"});
			}
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			if(hxsl_Debug.TRACE) {
				var msg = "COLLECT " + cur.name + " " + (vertex ? "vertex" : "fragment");
				var _g = 0;
				var _g1 = this.debugDepth;
				while(_g < _g1) {
					var i = _g++;
					msg = "    " + msg;
				}
				haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "collect"});
			}
			out.push(cur);
		}
		cur.onStack = false;
	}
	,link: function(shadersData) {
		if(hxsl_Debug.TRACE) {
			var msg = "---------------------- LINKING -----------------------";
			var _g = 0;
			var _g1 = this.debugDepth;
			while(_g < _g1) {
				var i = _g++;
				msg = "    " + msg;
			}
			haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "link"});
		}
		this.varMap = new haxe_ds_StringMap();
		this.varIdMap = new haxe_ds_IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe_ds_IntMap();
		var dupShaders = [];
		var _g = [];
		var _g_current = 0;
		var _g_array = shadersData;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var s = _g_value;
			if(shadersData.indexOf(s) < i) {
				var s2 = hxsl_Clone.shaderData(s);
				dupShaders.push({ origin : s, cloned : s2});
				_g.push(s2);
			} else {
				_g.push(s);
			}
		}
		shadersData = _g;
		this.curInstance = 0;
		var outVars = [];
		var _g = 0;
		while(_g < shadersData.length) {
			var s = shadersData[_g];
			++_g;
			this.isBatchShader = this.mode == hxsl_LinkMode.Batch && StringTools.startsWith(s.name,"batchShader_");
			var _g1 = 0;
			var _g2 = s.vars;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				var v2 = this.allocVar(v,null,s.name);
				if(this.isBatchShader && v2.v.kind == hxsl_VarKind.Param && !StringTools.startsWith(v2.path,"Batch_")) {
					v2.v.kind = hxsl_VarKind.Local;
				}
				if(v.kind == hxsl_VarKind.Output) {
					outVars.push(v);
				}
			}
			var _g3 = 0;
			var _g4 = s.funs;
			while(_g3 < _g4.length) {
				var f = _g4[_g3];
				++_g3;
				var v1 = this.allocVar(f.ref,f.expr.p);
				v1.kind = f.kind;
			}
			this.curInstance++;
		}
		var priority = 0;
		var initPrio_init = [-3000];
		var initPrio_vert = [-2000];
		var initPrio_frag = [-1000];
		var initPrio_main = [-2500];
		var shaderOffset_vert = -1500;
		var shaderOffset_frag = -500;
		var _g = 0;
		while(_g < shadersData.length) {
			var s = shadersData[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				var v = this.allocVar(f.ref,f.expr.p);
				if(v.kind == null) {
					throw haxe_Exception.thrown("assert");
				}
				switch(v.kind._hx_index) {
				case 0:case 1:
					if(this.mode == hxsl_LinkMode.Compute) {
						var e = v.kind;
						throw haxe_Exception.thrown("Unexpected " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name.toLowerCase() + "() function in compute shader");
					}
					var offset = v.kind == hxsl_FunctionKind.Vertex ? shaderOffset_vert : shaderOffset_frag;
					this.addShader(s.name + "." + (v.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment"),v.kind == hxsl_FunctionKind.Vertex,f.expr,priority + offset);
					break;
				case 2:
					var prio;
					var status;
					switch(f.ref.name) {
					case "__init__fragment":
						prio = initPrio_frag;
						status = false;
						break;
					case "__init__main":
						prio = initPrio_main;
						status = false;
						break;
					case "__init__vertex":
						prio = initPrio_vert;
						status = true;
						break;
					default:
						prio = initPrio_init;
						status = null;
					}
					var _g3 = f.expr.e;
					if(_g3._hx_index == 4) {
						var el = _g3.el;
						var index = 0;
						var _g4 = 0;
						while(_g4 < el.length) {
							var e1 = el[_g4];
							++_g4;
							this.addShader(s.name + "." + f.ref.name + index++,status,e1,prio[0]++);
						}
					} else {
						this.addShader(s.name + "." + f.ref.name,status,f.expr,prio[0]++);
					}
					break;
				case 3:
					throw haxe_Exception.thrown("Unexpected helper function in linker " + v.v.name);
				case 4:
					if(this.mode != hxsl_LinkMode.Compute) {
						throw haxe_Exception.thrown("Unexpected main() outside compute shader");
					}
					this.addShader(s.name,true,f.expr,priority).isCompute = true;
					break;
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		var uid = 0;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.uid = uid++;
		}
		var entry = new hxsl__$Linker_ShaderInfos("<entry>",false);
		entry.deps = new haxe_ds_ObjectMap();
		var _g = 0;
		while(_g < outVars.length) {
			var v = outVars[_g];
			++_g;
			this.buildDependency(entry,this.allocVar(v,null),false);
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.hasDiscard || s.isCompute) {
				this.initDependencies(s);
				entry.deps.set(s,true);
			}
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.vertex != null) {
				continue;
			}
			var onlyParams = true;
			var _g2 = 0;
			var _g3 = s.readVars;
			while(_g2 < _g3.length) {
				var r = _g3[_g2];
				++_g2;
				if(r.v.kind != hxsl_VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				if(hxsl_Debug.TRACE) {
					var msg = "Force " + s.name + " into fragment since it only reads params";
					var _g4 = 0;
					var _g5 = this.debugDepth;
					while(_g4 < _g5) {
						var i = _g4++;
						msg = "    " + msg;
					}
					haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "link"});
				}
				s.vertex = false;
			}
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.deps == null) {
				continue;
			}
			if(s.vertex == null) {
				var d = s.deps.keys();
				while(d.hasNext()) {
					var d1 = d.next();
					if(d1.vertex == false) {
						if(hxsl_Debug.TRACE) {
							var msg = s.name + " marked as fragment because of " + d1.name;
							var _g2 = 0;
							var _g3 = this.debugDepth;
							while(_g2 < _g3) {
								var i = _g2++;
								msg = "    " + msg;
							}
							haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "link"});
						}
						s.vertex = false;
						break;
					}
				}
			}
			if(s.vertex) {
				var d2 = s.deps.keys();
				while(d2.hasNext()) {
					var d3 = d2.next();
					if(d3.vertex == null) {
						if(hxsl_Debug.TRACE) {
							var msg1 = d3.name + " marked as vertex because of " + s.name;
							var _g4 = 0;
							var _g5 = this.debugDepth;
							while(_g4 < _g5) {
								var i1 = _g4++;
								msg1 = "    " + msg1;
							}
							haxe_Log.trace(msg1,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "link"});
						}
						d3.vertex = true;
					}
				}
			}
		}
		var v = [];
		var f = [];
		this.collect(entry,v,true);
		this.collect(entry,f,false);
		if(f.pop() != entry) {
			throw haxe_Exception.thrown("assert");
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.marked = null;
		}
		var _g = 0;
		var _g1 = v.concat(f);
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s.name + " is unreachable",null);
				}
			}
			s.marked = true;
		}
		var outVars = [];
		var varMap_h = { };
		var addVar = null;
		addVar = function(v) {
			if(varMap_h.hasOwnProperty(v.id)) {
				return;
			}
			varMap_h[v.id] = true;
			if(v.v.parent != null) {
				addVar(v.parent);
			} else {
				outVars.push(v.v);
			}
		};
		var _g = 0;
		var _g1 = v.concat(f);
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = s.readVars;
			while(_g2 < _g3.length) {
				var v1 = _g3[_g2];
				++_g2;
				addVar(v1);
			}
			var _g4 = 0;
			var _g5 = s.writeVars;
			while(_g4 < _g5.length) {
				var v2 = _g5[_g4];
				++_g4;
				addVar(v2);
			}
		}
		var cleanVar = null;
		cleanVar = function(v) {
			var _g = v.type;
			if(_g._hx_index == 13) {
				var vl = _g.vl;
				if(v.kind != hxsl_VarKind.Input) {
					var vout = [];
					var _g = 0;
					while(_g < vl.length) {
						var v1 = vl[_g];
						++_g;
						if(varMap_h.hasOwnProperty(v1.id)) {
							cleanVar(v1);
							vout.push(v1);
						}
					}
					v.type = hxsl_Type.TStruct(vout);
				}
			}
		};
		var _g = 0;
		while(_g < outVars.length) {
			var v1 = outVars[_g];
			++_g;
			cleanVar(v1);
		}
		var build = function(kind,name,a) {
			var v = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TFun([{ ret : hxsl_Type.TVoid, args : []}]), kind : hxsl_VarKind.Function};
			outVars.push(v);
			var exprs = [];
			var _g = 0;
			while(_g < a.length) {
				var s = a[_g];
				++_g;
				var _g1 = s.body.e;
				if(_g1._hx_index == 4) {
					var el = _g1.el;
					var _g2 = 0;
					while(_g2 < el.length) {
						var e = el[_g2];
						++_g2;
						exprs.push(e);
					}
				} else {
					exprs.push(s.body);
				}
			}
			var expr = { e : hxsl_TExprDef.TBlock(exprs), t : hxsl_Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			return { kind : kind, ref : v, ret : hxsl_Type.TVoid, args : [], expr : expr};
		};
		var funs = this.mode == hxsl_LinkMode.Compute ? [build(hxsl_FunctionKind.Main,"main",v)] : [build(hxsl_FunctionKind.Vertex,"vertex",v),build(hxsl_FunctionKind.Fragment,"fragment",f)];
		var _g = 0;
		while(_g < dupShaders.length) {
			var d = dupShaders[_g];
			++_g;
			var _g1 = 0;
			var _g2 = d.cloned.vars.length;
			while(_g1 < _g2) {
				var i = _g1++;
				this.allocVar(d.cloned.vars[i],null).merged.unshift(d.origin.vars[i]);
			}
		}
		return { name : "out", vars : outVars, funs : funs};
	}
	,__class__: hxsl_Linker
};
var hxsl_Output = $hxEnums["hxsl.Output"] = { __ename__:true,__constructs__:null
	,Const: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="Const",$_)
	,Value: ($_=function(v,size) { return {_hx_index:1,v:v,size:size,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.v,this.size];}}; },$_._hx_name="Value",$_)
	,PackNormal: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="PackNormal",$_)
	,PackFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="PackFloat",$_)
	,Vec2: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.a];}}; },$_._hx_name="Vec2",$_)
	,Vec3: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.a];}}; },$_._hx_name="Vec3",$_)
	,Vec4: ($_=function(a) { return {_hx_index:6,a:a,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.a];}}; },$_._hx_name="Vec4",$_)
	,Swiz: ($_=function(a,swiz) { return {_hx_index:7,a:a,swiz:swiz,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.a,this.swiz];}}; },$_._hx_name="Swiz",$_)
};
hxsl_Output.__constructs__ = [hxsl_Output.Const,hxsl_Output.Value,hxsl_Output.PackNormal,hxsl_Output.PackFloat,hxsl_Output.Vec2,hxsl_Output.Vec3,hxsl_Output.Vec4,hxsl_Output.Swiz];
hxsl_Output.__empty_constructs__ = [];
var hxsl_Printer = function(varId) {
	if(varId == null) {
		varId = false;
	}
	this.varId = varId;
};
$hxClasses["hxsl.Printer"] = hxsl_Printer;
hxsl_Printer.__name__ = "hxsl.Printer";
hxsl_Printer.opStr = function(op) {
	switch(op._hx_index) {
	case 0:
		return "+";
	case 1:
		return "*";
	case 2:
		return "/";
	case 3:
		return "-";
	case 4:
		return "=";
	case 5:
		return "==";
	case 6:
		return "!=";
	case 7:
		return ">";
	case 8:
		return ">=";
	case 9:
		return "<";
	case 10:
		return "<=";
	case 11:
		return "&";
	case 12:
		return "|";
	case 13:
		return "^";
	case 14:
		return "&&";
	case 15:
		return "||";
	case 16:
		return "<<";
	case 17:
		return ">>";
	case 18:
		return ">>>";
	case 19:
		return "%";
	case 20:
		var op1 = op.op;
		return Std.string(hxsl_Printer.opStr(op1)) + "=";
	case 21:
		return "...";
	case 22:
		return "=>";
	default:
		return "??" + Std.string(op);
	}
};
hxsl_Printer.toString = function(e,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).exprString(e);
};
hxsl_Printer.shaderToString = function(s,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).shaderString(s);
};
hxsl_Printer.check = function(s,from) {
	try {
		var vars = new haxe_ds_IntMap();
		var regVars = [];
		var regVar = null;
		regVar = function(v,reg) {
			if(reg) {
				if(vars.h.hasOwnProperty(v.id)) {
					throw haxe_Exception.thrown("Duplicate var " + v.id);
				}
				vars.h[v.id] = v;
				regVars.push(v);
			} else {
				vars.remove(v.id);
			}
			var _g = v.type;
			if(_g._hx_index == 13) {
				var vl = _g.vl;
				var _g = 0;
				while(_g < vl.length) {
					var v = vl[_g];
					++_g;
					regVar(v,reg);
				}
			}
		};
		var checkExpr = null;
		checkExpr = function(e) {
			var _g = e.e;
			switch(_g._hx_index) {
			case 1:
				var v = _g.v;
				if(!vars.h.hasOwnProperty(v.id)) {
					throw haxe_Exception.thrown("Unbound var " + v.name + "@" + v.id);
				}
				break;
			case 4:
				var el = _g.el;
				var old = regVars;
				regVars = [];
				var _g1 = 0;
				while(_g1 < el.length) {
					var e1 = el[_g1];
					++_g1;
					checkExpr(e1);
				}
				var _g1 = 0;
				while(_g1 < regVars.length) {
					var v = regVars[_g1];
					++_g1;
					regVar(v,false);
				}
				regVars = old;
				break;
			case 7:
				var v = _g.v;
				var init = _g.init;
				if(init != null) {
					checkExpr(init);
				}
				regVar(v,true);
				break;
			case 13:
				var v = _g.v;
				var it = _g.it;
				var loop = _g.loop;
				checkExpr(it);
				regVar(v,true);
				checkExpr(loop);
				regVar(v,false);
				break;
			default:
				hxsl_Tools.iter(e,checkExpr);
			}
		};
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			regVar(v,true);
		}
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = f.args;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				regVar(v,true);
			}
			checkExpr(f.expr);
			var _g4 = 0;
			var _g5 = f.args;
			while(_g4 < _g5.length) {
				var v1 = _g5[_g4];
				++_g4;
				regVar(v1,false);
			}
		}
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		if(typeof(_g1) == "string") {
			var e = _g1;
			var msg = e + "\n    in\n" + hxsl_Printer.shaderToString(s,true);
			if(from != null) {
				var _g1 = [];
				var _g2 = 0;
				while(_g2 < from.length) {
					var s = from[_g2];
					++_g2;
					_g1.push(hxsl_Printer.shaderToString(s,true));
				}
				msg += "\n    from\n\n" + _g1.join("\n\n");
			}
			throw haxe_Exception.thrown(msg);
		} else {
			throw _g;
		}
	}
};
hxsl_Printer.prototype = {
	shaderString: function(s) {
		this.buffer = new StringBuf();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addVar(v,null);
			this.buffer.b += Std.string(";\n");
		}
		if(s.vars.length > 0) {
			this.buffer.b += Std.string("\n");
		}
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.addFun(f);
			this.buffer.b += Std.string("\n\n");
		}
		return this.buffer.b;
	}
	,exprString: function(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	,addVar: function(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				var v1;
				switch(q._hx_index) {
				case 0:
					var max = q.max;
					v1 = "const" + (max == null ? "" : "(" + max + ")");
					break;
				case 1:
					v1 = "private";
					break;
				case 2:
					v1 = "nullable";
					break;
				case 3:
					v1 = "perObject";
					break;
				case 4:
					var n = q.n;
					v1 = "name('" + n + "')";
					break;
				case 5:
					v1 = "shared";
					break;
				case 6:
					var p = q.p;
					v1 = $hxEnums[p.__enum__].__constructs__[p._hx_index]._hx_name.toLowerCase() + "p";
					break;
				case 7:
					var min = q.min;
					var max1 = q.max;
					v1 = "range(" + min + "," + max1 + ")";
					break;
				case 8:
					v1 = "ignore";
					break;
				case 9:
					var n1 = q.v;
					v1 = "perInstance(" + n1 + ")";
					break;
				case 10:
					var s = q.s;
					v1 = "doc(\"" + StringTools.replace(s,"\"","\\\"") + "\")";
					break;
				case 11:
					var s1 = q.source;
					v1 = "borrow(" + s1 + ")";
					break;
				case 12:
					var s2 = q.name;
					v1 = "sampler(" + s2 + ")";
					break;
				case 13:
					v1 = "final";
					break;
				case 14:
					v1 = "flat";
					break;
				}
				this.buffer.b += Std.string("@" + v1 + " ");
			}
		}
		if(v.kind != defKind) {
			switch(v.kind._hx_index) {
			case 0:
				this.buffer.b += Std.string("@global ");
				break;
			case 1:
				this.buffer.b += Std.string("@input ");
				break;
			case 2:
				this.buffer.b += Std.string("@param ");
				break;
			case 3:
				this.buffer.b += Std.string("@varying ");
				break;
			case 4:
				this.buffer.b += Std.string("@local ");
				break;
			case 5:
				this.buffer.b += Std.string("@output ");
				break;
			case 6:
				this.buffer.b += Std.string("@function ");
				break;
			}
		}
		this.buffer.b += Std.string("var ");
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += Std.string(" : ");
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			this.buffer.b += Std.string("{");
			var first = true;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addVar(v1,v1.kind,tabs,v1);
			}
			this.buffer.b += Std.string("}");
		} else {
			var v1 = hxsl_Tools.toString(v.type);
			this.buffer.b += Std.string(v1);
		}
	}
	,addFun: function(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		var first = true;
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += Std.string(" ");
				first = false;
			} else {
				this.buffer.b += Std.string(", ");
			}
			this.addVar(a,hxsl_VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += Std.string(" ");
		}
		var v = ") : " + hxsl_Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	,addVarName: function(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += Std.string(".");
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	,addConst: function(c) {
		var _this = this.buffer;
		var _this1 = _this.b;
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "null";
			break;
		case 1:
			var b = c.b;
			tmp = b;
			break;
		case 2:
			var i = c.v;
			tmp = i;
			break;
		case 3:
			var f = c.v;
			tmp = f;
			break;
		case 4:
			var s = c.v;
			tmp = "\"" + s + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			this.addConst(c);
			break;
		case 1:
			var v = _g.v;
			this.addVarName(v);
			break;
		case 2:
			var g = _g.g;
			var v = hxsl_Tools2.toString(g);
			this.buffer.b += Std.string(v);
			break;
		case 3:
			var e = _g.e;
			this.buffer.b += Std.string("(");
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buffer.b += Std.string("{");
			tabs += "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(";");
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(el.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += Std.string("}");
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			this.addExpr(e1,tabs);
			var v = " " + hxsl_Printer.opStr(op) + " ";
			this.buffer.b += Std.string(v);
			this.addExpr(e2,tabs);
			break;
		case 6:
			var op = _g.op;
			var e = _g.e1;
			var v;
			switch(op._hx_index) {
			case 0:
				v = "++";
				break;
			case 1:
				v = "--";
				break;
			case 2:
				v = "!";
				break;
			case 3:
				v = "-";
				break;
			case 4:
				v = "~";
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			this.buffer.b += Std.string(v);
			this.addExpr(e,tabs);
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			this.addVar(v,hxsl_VarKind.Local,tabs);
			if(init != null) {
				this.buffer.b += Std.string(" = ");
				this.addExpr(init,tabs);
			}
			break;
		case 8:
			var e = _g.e;
			var el = _g.args;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string("(");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string(")");
			break;
		case 9:
			var e = _g.e;
			var regs = _g.regs;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(".");
			var _g1 = 0;
			while(_g1 < regs.length) {
				var r = regs[_g1];
				++_g1;
				this.buffer.b += Std.string(hxsl_Printer.SWIZ[r._hx_index]);
			}
			break;
		case 10:
			var cond = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			this.buffer.b += Std.string("if( ");
			this.addExpr(cond,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				this.buffer.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buffer.b += Std.string("discard");
			break;
		case 12:
			var e = _g.e;
			this.buffer.b += Std.string("return");
			if(e != null) {
				this.buffer.b += Std.string(" ");
				this.addExpr(e,tabs);
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			this.buffer.b += Std.string("for( ");
			this.addVarName(v);
			this.buffer.b += Std.string(" in ");
			this.addExpr(it,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(loop,tabs);
			break;
		case 14:
			this.buffer.b += Std.string("continue");
			break;
		case 15:
			this.buffer.b += Std.string("break");
			break;
		case 16:
			var e1 = _g.e;
			var e2 = _g.index;
			this.addExpr(e1,tabs);
			this.buffer.b += Std.string("[");
			this.addExpr(e2,tabs);
			this.buffer.b += Std.string("]");
			break;
		case 17:
			var el = _g.el;
			this.buffer.b += Std.string("[");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string("]");
			break;
		case 18:
			var e = _g.e;
			var cases = _g.cases;
			var def = _g.def;
			this.buffer.b += Std.string("switch( ");
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(") {");
			var old = tabs;
			var _g1 = 0;
			while(_g1 < cases.length) {
				var c = cases[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += Std.string("case ");
				var first = true;
				var _g2 = 0;
				var _g3 = c.values;
				while(_g2 < _g3.length) {
					var v = _g3[_g2];
					++_g2;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addExpr(v,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c.expr,tabs);
				tabs = old;
			}
			if(def != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(def,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			var _ge = _g.e;
			var _gloop = _g.loop;
			if(_g.normalWhile == false) {
				var loop = _gloop;
				var e = _ge;
				var old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "} while( ");
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(" )");
			} else {
				var loop = _gloop;
				var e = _ge;
				this.buffer.b += Std.string("while( ");
				this.addExpr(e,tabs);
				var old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "}");
			}
			break;
		case 20:
			var m = _g.m;
			var args = _g.args;
			var e = _g.e;
			this.buffer.b += Std.string("@");
			this.buffer.b += Std.string(m);
			if(args.length > 0) {
				this.buffer.b += Std.string("(");
				var first = true;
				var _g1 = 0;
				while(_g1 < args.length) {
					var c = args[_g1];
					++_g1;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addConst(c);
				}
				this.buffer.b += Std.string(")");
			}
			this.buffer.b += Std.string(" ");
			this.addExpr(e,tabs);
			break;
		case 21:
			var e = _g.e;
			var name = _g.name;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(".");
			this.buffer.b += Std.string(name);
			break;
		}
	}
	,__class__: hxsl_Printer
};
var hxsl_LinkMode = $hxEnums["hxsl.LinkMode"] = { __ename__:true,__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"hxsl.LinkMode",toString:$estr}
	,Batch: {_hx_name:"Batch",_hx_index:1,__enum__:"hxsl.LinkMode",toString:$estr}
	,Compute: {_hx_name:"Compute",_hx_index:2,__enum__:"hxsl.LinkMode",toString:$estr}
};
hxsl_LinkMode.__constructs__ = [hxsl_LinkMode.Default,hxsl_LinkMode.Batch,hxsl_LinkMode.Compute];
hxsl_LinkMode.__empty_constructs__ = [hxsl_LinkMode.Default,hxsl_LinkMode.Batch,hxsl_LinkMode.Compute];
var hxsl_AllocParam = function(name,pos,instance,index,type) {
	this.name = name;
	this.pos = pos;
	this.instance = instance;
	this.index = index;
	this.type = type;
};
$hxClasses["hxsl.AllocParam"] = hxsl_AllocParam;
hxsl_AllocParam.__name__ = "hxsl.AllocParam";
hxsl_AllocParam.prototype = {
	__class__: hxsl_AllocParam
};
var hxsl_AllocGlobal = function(pos,path,type) {
	this.pos = pos;
	this.path = path;
	this.gid = hxsl_Globals.allocID(path);
	this.type = type;
};
$hxClasses["hxsl.AllocGlobal"] = hxsl_AllocGlobal;
hxsl_AllocGlobal.__name__ = "hxsl.AllocGlobal";
hxsl_AllocGlobal.prototype = {
	__class__: hxsl_AllocGlobal
};
var hxsl_RuntimeShaderData = function() {
};
$hxClasses["hxsl.RuntimeShaderData"] = hxsl_RuntimeShaderData;
hxsl_RuntimeShaderData.__name__ = "hxsl.RuntimeShaderData";
hxsl_RuntimeShaderData.prototype = {
	__class__: hxsl_RuntimeShaderData
};
var hxsl_ShaderInstanceDesc = function(shader,bits) {
	this.shader = shader;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderInstanceDesc"] = hxsl_ShaderInstanceDesc;
hxsl_ShaderInstanceDesc.__name__ = "hxsl.ShaderInstanceDesc";
hxsl_ShaderInstanceDesc.prototype = {
	__class__: hxsl_ShaderInstanceDesc
};
var hxsl_RuntimeShader = function() {
	this.id = hxsl_RuntimeShader.UID++;
};
$hxClasses["hxsl.RuntimeShader"] = hxsl_RuntimeShader;
hxsl_RuntimeShader.__name__ = "hxsl.RuntimeShader";
hxsl_RuntimeShader.prototype = {
	getShaders: function() {
		if(this.mode == hxsl_LinkMode.Compute) {
			return [this.vertex];
		} else {
			return [this.vertex,this.fragment];
		}
	}
	,__class__: hxsl_RuntimeShader
};
var hxsl_Serializer = function() {
};
$hxClasses["hxsl.Serializer"] = hxsl_Serializer;
hxsl_Serializer.__name__ = "hxsl.Serializer";
hxsl_Serializer.prototype = {
	readVarInt: function() {
		var b = this.input.readByte();
		if(b < 128) {
			return b;
		}
		if(b == 255) {
			return this.input.readInt32();
		}
		return (b & 127) << 8 | this.input.readByte();
	}
	,readType: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Type.TVoid;
		case 1:
			return hxsl_Type.TInt;
		case 2:
			return hxsl_Type.TBool;
		case 3:
			return hxsl_Type.TFloat;
		case 4:
			return hxsl_Type.TString;
		case 5:
			var bits = this.input.readByte();
			var v = hxsl_Serializer.TVECS.h[bits];
			if(v == null) {
				v = hxsl_Type.TVec(bits & 7,Type.createEnumIndex(hxsl_VecType,bits >> 3,null));
				hxsl_Serializer.TVECS.h[bits] = v;
			}
			return v;
		case 6:
			return hxsl_Type.TMat3;
		case 7:
			return hxsl_Type.TMat4;
		case 8:
			return hxsl_Type.TMat3x4;
		case 9:
			return hxsl_Type.TBytes(this.input.readInt32());
		case 10:
			if(this.version == 0) {
				return hxsl_Type.TSampler(hxsl_TexDimension.T2D,false);
			} else {
				var b = this.input.readByte();
				var dim = hxsl_Serializer.TDIMS[b >> 1];
				return hxsl_Type.TSampler(dim,(b & 1) != 0);
			}
			break;
		case 11:
			if(this.version == 0) {
				return hxsl_Type.TSampler(hxsl_TexDimension.T2D,true);
			} else {
				var b = this.input.readByte();
				var dim = hxsl_Serializer.TDIMS[b >> 3];
				return hxsl_Type.TRWTexture(dim,(b & 1) != 0,(b >> 1 & 3) + 1);
			}
			break;
		case 12:
			if(this.version == 0) {
				return hxsl_Type.TSampler(hxsl_TexDimension.TCube,false);
			} else {
				return hxsl_Type.TMat2;
			}
			break;
		case 13:
			var id = this.readVarInt();
			var t = this.types[id];
			if(t != null) {
				return t;
			}
			var f = $bind(this,this.readVar);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			t = hxsl_Type.TStruct(_g);
			this.types[id] = t;
			return t;
		case 14:
			return hxsl_Type.TFun(null);
		case 15:
			var t = this.readType();
			var v = this.readVar();
			return hxsl_Type.TArray(t,v == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v));
		case 16:
			var tag = this.input.readByte();
			var kind = hxsl_BufferKind.Uniform;
			if((tag & 128) == 0) {
				var fh = this.input;
				fh.set_position(fh.pos - 1);
			} else {
				kind = Type.createEnumIndex(hxsl_BufferKind,tag & 127,null);
			}
			var t = this.readType();
			var v = this.readVar();
			return hxsl_Type.TBuffer(t,v == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v),kind);
		case 17:
			return hxsl_Type.TChannel(this.input.readByte());
		case 18:
			if(this.version == 0) {
				return hxsl_Type.TMat2;
			} else {
				throw haxe_Exception.thrown("assert");
			}
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,readString: function() {
		var len = this.readVarInt();
		var s = this.input.read(len).getString(0,len);
		return s;
	}
	,readConst: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Const.CNull;
		case 1:
			return hxsl_Const.CBool(this.input.readByte() != 0);
		case 2:
			return hxsl_Const.CInt(this.input.readInt32());
		case 3:
			return hxsl_Const.CFloat(this.input.readDouble());
		case 4:
			return hxsl_Const.CString(this.readString());
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,readExpr: function() {
		var _gthis = this;
		var k = this.input.readByte();
		if(k-- == 0) {
			return null;
		}
		var e;
		switch(k) {
		case 0:
			e = hxsl_TExprDef.TConst(this.readConst());
			break;
		case 1:
			e = hxsl_TExprDef.TVar(this.readVar());
			break;
		case 2:
			e = hxsl_TExprDef.TGlobal(hxsl_Serializer.TGLOBALS[this.input.readByte()]);
			break;
		case 3:
			e = hxsl_TExprDef.TParenthesis(this.readExpr());
			break;
		case 4:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TBlock(_g);
			break;
		case 5:
			var op = this.input.readByte();
			e = hxsl_TExprDef.TBinop(op >= 128 ? haxe_macro_Binop.OpAssignOp(hxsl_Serializer.BOPS[op & 127]) : hxsl_Serializer.BOPS[op],this.readExpr(),this.readExpr());
			break;
		case 6:
			e = hxsl_TExprDef.TUnop(hxsl_Serializer.UNOPS[this.input.readByte()],this.readExpr());
			break;
		case 7:
			e = hxsl_TExprDef.TVarDecl(this.readVar(),this.readExpr());
			break;
		case 8:
			var e1 = this.readExpr();
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TCall(e1,_g);
			break;
		case 9:
			var e1 = this.readExpr();
			var bits = this.input.readUInt16();
			var swiz = hxsl_Serializer.TSWIZ.h[bits];
			if(swiz == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = (bits & 3) + 1;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(hxsl_Serializer.REGS[bits >> i * 2 + 2 & 3]);
				}
				swiz = _g;
				hxsl_Serializer.TSWIZ.h[bits] = swiz;
			}
			e = hxsl_TExprDef.TSwiz(e1,swiz);
			break;
		case 10:
			e = hxsl_TExprDef.TIf(this.readExpr(),this.readExpr(),this.readExpr());
			break;
		case 11:
			e = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			e = hxsl_TExprDef.TReturn(this.readExpr());
			break;
		case 13:
			e = hxsl_TExprDef.TFor(this.readVar(),this.readExpr(),this.readExpr());
			break;
		case 14:
			e = hxsl_TExprDef.TContinue;
			break;
		case 15:
			e = hxsl_TExprDef.TBreak;
			break;
		case 16:
			e = hxsl_TExprDef.TArray(this.readExpr(),this.readExpr());
			break;
		case 17:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TArrayDecl(_g);
			break;
		case 18:
			var e1 = this.readExpr();
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				var f = $bind(_gthis,_gthis.readExpr);
				var _g3 = [];
				var _g4 = 0;
				var _g5 = _gthis.readVarInt();
				while(_g4 < _g5) {
					var i1 = _g4++;
					_g3.push(f());
				}
				_g.push({ values : _g3, expr : _gthis.readExpr()});
			}
			e = hxsl_TExprDef.TSwitch(e1,_g,this.readExpr());
			break;
		case 19:
			e = hxsl_TExprDef.TWhile(this.readExpr(),this.readExpr(),this.input.readByte() != 0);
			break;
		case 20:
			var e1 = this.readString();
			var f = $bind(this,this.readConst);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TMeta(e1,_g,this.readExpr());
			break;
		case 21:
			e = hxsl_TExprDef.TField(this.readExpr(),this.readString());
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		return { e : e, t : this.readType(), p : null};
	}
	,readVar: function() {
		var id = this.readVarInt();
		if(id == 0) {
			return null;
		}
		var v = this.varMap.h[id];
		if(v != null) {
			return v;
		}
		v = { id : hxsl_Tools.allocVarId(), name : this.readString(), type : null, kind : null};
		this.varMap.h[id] = v;
		v.type = this.readType();
		v.kind = hxsl_Serializer.VKINDS[this.input.readByte()];
		v.parent = this.readVar();
		var nq = this.input.readByte();
		if(nq > 0) {
			v.qualifiers = [];
			var _g = 0;
			var _g1 = nq;
			while(_g < _g1) {
				var i = _g++;
				var qid = this.input.readByte();
				var q;
				switch(qid) {
				case 0:
					var n = this.input.readInt32();
					q = hxsl_VarQualifier.Const(n == 0 ? null : n);
					break;
				case 1:
					q = hxsl_VarQualifier.Private;
					break;
				case 2:
					q = hxsl_VarQualifier.Nullable;
					break;
				case 3:
					q = hxsl_VarQualifier.PerObject;
					break;
				case 4:
					q = hxsl_VarQualifier.Name(this.readString());
					break;
				case 5:
					q = hxsl_VarQualifier.Shared;
					break;
				case 6:
					q = hxsl_VarQualifier.Precision(hxsl_Serializer.PRECS[this.input.readByte()]);
					break;
				case 7:
					q = hxsl_VarQualifier.Range(this.input.readDouble(),this.input.readDouble());
					break;
				case 8:
					q = hxsl_VarQualifier.Ignore;
					break;
				case 9:
					q = hxsl_VarQualifier.PerInstance(this.input.readInt32());
					break;
				case 10:
					q = hxsl_VarQualifier.Doc(this.readString());
					break;
				case 11:
					q = hxsl_VarQualifier.Borrow(this.readString());
					break;
				case 12:
					q = hxsl_VarQualifier.Sampler(this.readString());
					break;
				case 13:
					q = hxsl_VarQualifier.Final;
					break;
				case 14:
					q = hxsl_VarQualifier.Flat;
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
				v.qualifiers.push(q);
			}
		}
		return v;
	}
	,readFun: function() {
		var tmp = hxsl_Serializer.FKIND[this.input.readByte()];
		var tmp1 = this.readVar();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { kind : tmp, ref : tmp1, args : _g, ret : this.readType(), expr : this.readExpr()};
	}
	,unserialize: function(data) {
		this.input = new haxe_io_BytesInput(haxe_crypto_Base64.decode(data,false));
		if(this.input.readByte() != (hxsl_Serializer.SIGN & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 8 & 255)) {
			throw haxe_Exception.thrown("Invalid HXSL data");
		}
		this.version = this.input.readByte() - 139;
		if(this.version < 0 || this.version > 1) {
			throw haxe_Exception.thrown("Invalid HXSL data");
		}
		this.varMap = new haxe_ds_IntMap();
		this.types = [];
		var tmp = this.readString();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		var tmp1 = _g;
		var f = $bind(this,this.readFun);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { name : tmp, vars : tmp1, funs : _g};
	}
	,__class__: hxsl_Serializer
};
var hxsl_ShaderList = function(s,n) {
	this.s = s;
	this.next = n;
};
$hxClasses["hxsl.ShaderList"] = hxsl_ShaderList;
hxsl_ShaderList.__name__ = "hxsl.ShaderList";
hxsl_ShaderList.addSort = function(s,shaders) {
	var prev = null;
	var hd = shaders;
	while(hd != null && hd.s.priority < s.priority) {
		prev = hd;
		hd = hd.next;
	}
	if(prev == null) {
		var l = new hxsl_ShaderList(s,shaders);
		hxsl_ShaderList.checkSize(l);
		return l;
	}
	prev.next = new hxsl_ShaderList(s,prev.next);
	hxsl_ShaderList.checkSize(shaders);
	return shaders;
};
hxsl_ShaderList.checkSize = function(list) {
	if(hxsl_ShaderList.MAX_LIST_SIZE <= 0) {
		return;
	}
	var hd = list;
	var count = 0;
	while(hd != null) {
		if(!hxsl_ShaderList.ALLOW_DUPLICATES && hd.next != null && hd.next.s == hd.s) {
			throw haxe_Exception.thrown("Duplicate shader " + Std.string(hd.s));
		}
		++count;
		hd = hd.next;
	}
	if(count > hxsl_ShaderList.MAX_LIST_SIZE) {
		throw haxe_Exception.thrown("Too many shaders");
	}
};
hxsl_ShaderList.prototype = {
	__class__: hxsl_ShaderList
};
var hxsl_ShaderInstance = function(shader) {
	this.id = ++hxsl_ShaderInstance.UID;
	this.shader = shader;
	this.params = new haxe_ds_IntMap();
};
$hxClasses["hxsl.ShaderInstance"] = hxsl_ShaderInstance;
hxsl_ShaderInstance.__name__ = "hxsl.ShaderInstance";
hxsl_ShaderInstance.prototype = {
	__class__: hxsl_ShaderInstance
};
var hxsl_ShaderGlobal = function(v,gid) {
	this.v = v;
	this.globalId = gid;
};
$hxClasses["hxsl.ShaderGlobal"] = hxsl_ShaderGlobal;
hxsl_ShaderGlobal.__name__ = "hxsl.ShaderGlobal";
hxsl_ShaderGlobal.prototype = {
	__class__: hxsl_ShaderGlobal
};
var hxsl_ShaderConst = function(v,pos,bits) {
	this.v = v;
	this.pos = pos;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderConst"] = hxsl_ShaderConst;
hxsl_ShaderConst.__name__ = "hxsl.ShaderConst";
hxsl_ShaderConst.prototype = {
	__class__: hxsl_ShaderConst
};
var hxsl_SharedShader = function(src,module) {
	this.instanceCache = new haxe_ds_IntMap();
	this.consts = null;
	this.globals = [];
	if(src == "") {
		return;
	}
	this.module = module;
	this.data = new hxsl_Serializer().unserialize(src);
	var _g = 0;
	var _g1 = this.data.vars;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		this.initVarId(v);
	}
	this.data = hxsl_SharedShader.compactMem(this.data);
	this.initialize();
	this.initLiveReload();
};
$hxClasses["hxsl.SharedShader"] = hxsl_SharedShader;
hxsl_SharedShader.__name__ = "hxsl.SharedShader";
hxsl_SharedShader.mergeVars = function(vl,vl2) {
	if(vl.length != vl2.length) {
		return false;
	}
	var _g_current = 0;
	var _g_array = vl;
	while(_g_current < _g_array.length) {
		var _g_value = _g_array[_g_current];
		var _g_key = _g_current++;
		var i = _g_key;
		var v = _g_value;
		var v2 = vl2[i];
		if(v.name != v2.name) {
			return false;
		}
		v2.id = v.id;
		var _g = v.type;
		var _g1 = v2.type;
		if(_g._hx_index == 13) {
			if(_g1._hx_index == 13) {
				var vl21 = _g1.vl;
				var vl = _g.vl;
				if(vl.length != vl21.length) {
					return false;
				}
				if(!hxsl_SharedShader.mergeVars(vl,vl21)) {
					return false;
				}
			}
		}
	}
	return true;
};
hxsl_SharedShader.loadShader = function(fs,name) {
	var text = fs.getText();
	throw haxe_Exception.thrown("Shader live reload requires --library hscript");
};
hxsl_SharedShader.compactMem = function(mem) {
	return mem;
};
hxsl_SharedShader.prototype = {
	initialize: function() {
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	,makeBufferType: function(v,tbuf,fmt) {
		var name = v.name;
		if(tbuf._hx_index == 13) {
			var vl = tbuf.vl;
			var _g = [];
			var _g_current = 0;
			var _g_array = fmt.inputs;
			while(_g_current < _g_array.length) {
				var i = _g_array[_g_current++];
				_g.push(i);
			}
			var inputs = _g;
			var vli = [];
			var p = 0;
			while(p < inputs.length) {
				var i = inputs[p++];
				var name = i.name;
				var t;
				switch(i.type) {
				case 1:
					t = hxsl_Type.TFloat;
					break;
				case 2:
					t = hxsl_Type.TVec(2,hxsl_VecType.VFloat);
					break;
				case 3:
					t = hxsl_Type.TVec(3,hxsl_VecType.VFloat);
					break;
				case 4:
					t = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
					break;
				case 9:
					t = hxsl_Type.TBytes(4);
					break;
				}
				if(StringTools.endsWith(i.name,"__m0")) {
					var h = i.type & 7;
					var w = 2;
					while(inputs[p + w - 1] != null && StringTools.endsWith(inputs[p + w - 1].name,"__m" + w)) ++w;
					switch(w) {
					case 2:
						if(h == 2) {
							t = hxsl_Type.TMat2;
						} else {
							throw haxe_Exception.thrown("Unsupported matrix format");
						}
						break;
					case 3:
						switch(h) {
						case 3:
							t = hxsl_Type.TMat3;
							break;
						case 4:
							t = hxsl_Type.TMat3x4;
							break;
						default:
							throw haxe_Exception.thrown("Unsupported matrix format");
						}
						break;
					case 4:
						if(h == 4) {
							t = hxsl_Type.TMat4;
						} else {
							throw haxe_Exception.thrown("Unsupported matrix format");
						}
						break;
					default:
						throw haxe_Exception.thrown("Unsupported matrix format");
					}
					name = HxOverrides.substr(i.name,0,-4);
					p += w - 1;
				}
				vli.push({ id : hxsl_Tools.allocVarId(), name : name, type : t, kind : v.kind, parent : v});
			}
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				var found = false;
				var _g1 = 0;
				while(_g1 < vli.length) {
					var v2 = vli[_g1];
					++_g1;
					if(v.name == v2.name) {
						var _g2 = v.type;
						var _g3 = v2.type;
						switch(_g2._hx_index) {
						case 3:
							if(_g3._hx_index != 3) {
								if(!Type.enumEq(v.type,v2.type)) {
									throw haxe_Exception.thrown("Buffer " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type));
								}
							}
							break;
						case 5:
							if(_g2.t._hx_index == 1) {
								if(_g3._hx_index == 5) {
									if(_g3.t._hx_index == 1) {
										var b = _g3.size;
										var a = _g2.size;
										if(a > b) {
											if(!Type.enumEq(v.type,v2.type)) {
												throw haxe_Exception.thrown("Buffer " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type));
											}
										}
									} else if(!Type.enumEq(v.type,v2.type)) {
										throw haxe_Exception.thrown("Buffer " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type));
									}
								} else if(!Type.enumEq(v.type,v2.type)) {
									throw haxe_Exception.thrown("Buffer " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type));
								}
							} else if(!Type.enumEq(v.type,v2.type)) {
								throw haxe_Exception.thrown("Buffer " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type));
							}
							break;
						default:
							if(!Type.enumEq(v.type,v2.type)) {
								throw haxe_Exception.thrown("Buffer " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type));
							}
						}
						found = true;
						break;
					}
				}
				if(!found) {
					throw haxe_Exception.thrown("Buffer is missing " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type));
				}
			}
			return hxsl_Type.TStruct(vli);
		} else {
			throw haxe_Exception.thrown("assert");
		}
	}
	,makeInstance: function(constBits) {
		var $eval = new hxsl_Eval();
		var c = this.consts;
		var buffers = [];
		while(c != null) {
			var _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				$eval.setConstant(c.v,hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1));
				break;
			case 2:
				$eval.setConstant(c.v,hxsl_Const.CBool((constBits >>> c.pos & 1) != 0));
				break;
			case 16:
				var t = _g.t;
				var size = _g.size;
				var kind = _g.kind;
				var bits = constBits >>> c.pos & (1 << c.bits) - 1;
				var fmt = hxd_BufferFormat.fromID(bits);
				var v = { id : c.v.id, name : c.v.name, kind : c.v.kind, type : null};
				var fullT = this.makeBufferType(v,t,fmt);
				var tmp;
				switch(kind._hx_index) {
				case 3:
					tmp = hxsl_BufferKind.Uniform;
					break;
				case 4:
					tmp = hxsl_BufferKind.Storage;
					break;
				case 5:
					tmp = hxsl_BufferKind.RW;
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
				v.type = hxsl_Type.TBuffer(fullT,size,tmp);
				$eval.varMap.set(c.v,v);
				buffers.push(v);
				break;
			case 17:
				$eval.setConstant(c.v,hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1));
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			c = c.next;
		}
		var _g = 0;
		while(_g < buffers.length) {
			var v = buffers[_g];
			++_g;
			var _g1 = v.type;
			if(_g1._hx_index == 16) {
				var _gsize = _g1.size;
				if(_gsize._hx_index == 1) {
					var vs = _gsize.v;
					var t = _g1.t;
					var kind = _g1.kind;
					var c = $eval.constants.h[vs.id];
					if(c != null) {
						if(c != null) {
							if(c._hx_index == 0) {
								var _gc = c.c;
								if(_gc._hx_index == 2) {
									var i = _gc.v;
									v.type = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(i),kind);
								}
							}
						}
					}
				}
			}
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = hxsl_SharedShader.UNROLL_LOOPS;
		var edata = $eval.eval(this.data);
		edata = hxsl_SharedShader.compactMem(edata);
		var i = new hxsl_ShaderInstance(edata);
		hxsl_Printer.check(i.shader,[this.data]);
		this.paramsCount = 0;
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	,addParam: function($eval,i,v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				this.addParam($eval,i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[$eval.varMap.h[v.__id__].id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,initVarId: function(v) {
		v.id = hxsl_Tools.allocVarId();
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.initVarId(v);
			}
		}
	}
	,browseVar: function(v,path) {
		if(path == null) {
			path = hxsl_Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var vs = vl[_g];
				++_g;
				this.browseVar(vs,path);
			}
		} else {
			var globalId = 0;
			if(v.kind == hxsl_VarKind.Global) {
				globalId = hxsl_Globals.allocID(path);
				this.globals.push(new hxsl_ShaderGlobal(v,globalId));
			}
			if(!hxsl_Tools.isConst(v)) {
				return;
			}
			var bits = hxsl_Tools.getConstBits(v);
			if(bits > 0) {
				var pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				var c = new hxsl_ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
	,initLiveReload: function() {
		if(this.module == null) {
			return;
		}
		if(!hxd_fs_SourceLoader.isActive()) {
			return;
		}
		hxsl_SharedShader.SHADER_RESOLVE.h[this.data.name] = this;
		var path = this.module.split(".").join("/") + ".hx";
		this.file = hxd_fs_SourceLoader.resolve(path);
		if(this.file != null) {
			this.file.watch($bind(this,this.onFileReload));
		}
	}
	,onFileReload: function() {
		var h = hxsl_SharedShader.SHADER_RESOLVE.h;
		var sh_h = h;
		var sh_keys = Object.keys(h);
		var sh_length = sh_keys.length;
		var sh_current = 0;
		while(sh_current < sh_length) {
			var sh = sh_h[sh_keys[sh_current++]];
			if(sh.file == this.file) {
				sh.reloadShader();
			}
		}
	}
	,reloadShader: function() {
		try {
			var expr = hxsl_SharedShader.loadShader(this.file,this.data.name);
			if(expr == null) {
				return;
			}
			var checker = new hxsl_Checker();
			checker.loadShader = function(name) {
				var sh = hxsl_SharedShader.SHADER_RESOLVE.h[name];
				if(sh == null) {
					throw haxe_Exception.thrown("Could not resolve shader " + name);
				}
				if(sh.file == null) {
					throw haxe_Exception.thrown("Shader " + name + " can't be live reload because of missing live path");
				}
				return hxsl_SharedShader.loadShader(sh.file,sh.data.name);
			};
			var data = checker.check(this.data.name,expr);
			this.applyChanges(data);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				var line = HxOverrides.substr(this.file.getText(),0,e.pos.min).split("\n").length;
				haxe_Log.trace(e.msg,{ methodName : null, className : null, fileName : e.pos.file, lineNumber : line});
				return;
			} else {
				throw _g;
			}
		}
	}
	,applyChanges: function(data2) {
		if(!hxsl_SharedShader.mergeVars(this.data.vars,data2.vars)) {
			return false;
		}
		this.data = hxsl_SharedShader.compactMem(data2);
		this.instanceCache = new haxe_ds_IntMap();
		return true;
	}
	,__class__: hxsl_SharedShader
};
var hxsl__$Splitter_VarProps = function(v) {
	this.v = v;
	this.read = 0;
	this.write = 0;
};
$hxClasses["hxsl._Splitter.VarProps"] = hxsl__$Splitter_VarProps;
hxsl__$Splitter_VarProps.__name__ = "hxsl._Splitter.VarProps";
hxsl__$Splitter_VarProps.prototype = {
	__class__: hxsl__$Splitter_VarProps
};
var hxsl_Splitter = function() {
};
$hxClasses["hxsl.Splitter"] = hxsl_Splitter;
hxsl_Splitter.__name__ = "hxsl.Splitter";
hxsl_Splitter.prototype = {
	split: function(s,isBatchShader) {
		var _gthis = this;
		this.isBatchShader = isBatchShader;
		var vfun = null;
		var vvars = new haxe_ds_IntMap();
		var avvars = [];
		var ffun = null;
		var fvars = new haxe_ds_IntMap();
		var afvars = [];
		var isCompute = false;
		this.varNames = new haxe_ds_StringMap();
		this.varMap = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			switch(f.kind._hx_index) {
			case 1:
				this.vars = fvars;
				this.avars = afvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			case 0:case 4:
				this.vars = vvars;
				this.avars = avvars;
				vfun = f;
				this.checkExpr(f.expr);
				if(f.kind == hxsl_FunctionKind.Main) {
					isCompute = true;
				}
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		var vafterMap = [];
		var length = avvars.length;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			var inf = [avvars[i]];
			var v = [inf[0].v];
			if(inf[0].local) {
				continue;
			}
			switch(v[0].kind._hx_index) {
			case 3:case 4:
				var fv = fvars.h[inf[0].origin.id];
				v[0].kind = fv != null && fv.read > 0 ? hxsl_VarKind.Var : hxsl_VarKind.Local;
				break;
			default:
			}
			switch(v[0].kind._hx_index) {
			case 3:case 5:
				if(inf[0].read > 0 || inf[0].write > 1) {
					var nv = { id : hxsl_Tools.allocVarId(), name : v[0].name, kind : hxsl_VarKind.Local, type : v[0].type};
					this.uniqueName(nv);
					this.varMap.set(inf[0].origin,nv);
					var ninf = new hxsl__$Splitter_VarProps(nv);
					ninf.read++;
					vvars.h[nv.id] = ninf;
					var p = vfun.expr.p;
					var e = [{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(v[0]), t : nv.type, p : p},{ e : hxsl_TExprDef.TVar(nv), t : v[0].type, p : p}), t : nv.type, p : p}];
					vafterMap.push((function(e) {
						return function() {
							_gthis.addExpr(vfun,e[0]);
						};
					})(e));
					if(v[0].kind == hxsl_VarKind.Var) {
						vafterMap.push((function(v,inf) {
							return function() {
								_gthis.varMap.set(inf[0].origin,v[0]);
							};
						})(v,inf));
					}
				}
				break;
			default:
			}
		}
		vfun = { ret : vfun.ret, ref : vfun.ref, kind : vfun.kind, args : vfun.args, expr : this.mapVars(vfun.expr)};
		var _g = 0;
		while(_g < vafterMap.length) {
			var f = vafterMap[_g];
			++_g;
			f();
		}
		var finits = [];
		var _g = 0;
		while(_g < afvars.length) {
			var inf1 = afvars[_g];
			++_g;
			var v1 = inf1.v;
			switch(v1.kind._hx_index) {
			case 1:
				var nv = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Var, type : v1.type};
				this.uniqueName(nv);
				var i = vvars.h[inf1.origin.id];
				if(i == null) {
					i = new hxsl__$Splitter_VarProps(v1);
					vvars.h[inf1.origin.id] = i;
				}
				i.read++;
				this.varMap.set(inf1.origin,nv);
				var ninf = new hxsl__$Splitter_VarProps(nv);
				ninf.origin = inf1.origin;
				fvars.h[inf1.origin.id] = ninf;
				vvars.h[nv.id] = ninf;
				this.addExpr(vfun,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : v1.type, p : vfun.expr.p},{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : vfun.expr.p}), t : v1.type, p : vfun.expr.p});
				break;
			case 3:
				if(inf1.write > 0) {
					var nv1 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Local, type : v1.type};
					this.uniqueName(nv1);
					finits.push({ e : hxsl_TExprDef.TVarDecl(nv1,{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : ffun.expr.p}), t : hxsl_Type.TVoid, p : ffun.expr.p});
					this.varMap.set(inf1.origin,nv1);
				}
				break;
			default:
			}
		}
		var v1 = vvars.iterator();
		while(v1.hasNext()) {
			var v2 = v1.next();
			this.checkVar(v2,true,vvars,vfun.expr.p);
		}
		var v1 = fvars.iterator();
		while(v1.hasNext()) {
			var v2 = v1.next();
			this.checkVar(v2,false,vvars,ffun.expr.p);
		}
		if(ffun != null) {
			ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
			var _g = ffun.expr.e;
			if(_g._hx_index == 4) {
				var el = _g.el;
				var _g = 0;
				while(_g < finits.length) {
					var e1 = finits[_g];
					++_g;
					el.unshift(e1);
				}
			} else {
				finits.push(ffun.expr);
				ffun.expr = { e : hxsl_TExprDef.TBlock(finits), t : hxsl_Type.TVoid, p : ffun.expr.p};
			}
		}
		var _g = [];
		var v1 = vvars.iterator();
		while(v1.hasNext()) {
			var v2 = v1.next();
			if(!v2.local) {
				_g.push(v2);
			}
		}
		var vvars = _g;
		var _g = [];
		var v1 = fvars.iterator();
		while(v1.hasNext()) {
			var v2 = v1.next();
			if(!v2.local) {
				_g.push(v2);
			}
		}
		var fvars = _g;
		vvars.sort(function(v1,v2) {
			var result = (v1.origin == null ? v1.v.id : v1.origin.id) - (v2.origin == null ? v2.v.id : v2.origin.id);
			if(result != 0) {
				return result;
			} else {
				return v1.v.id - v2.v.id;
			}
		});
		fvars.sort(function(v1,v2) {
			var result = (v1.origin == null ? v1.v.id : v1.origin.id) - (v2.origin == null ? v2.v.id : v2.origin.id);
			if(result != 0) {
				return result;
			} else {
				return v1.v.id - v2.v.id;
			}
		});
		if(isCompute) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < vvars.length) {
				var v1 = vvars[_g1];
				++_g1;
				_g.push(v1.v);
			}
			return [{ name : "main", vars : _g, funs : [vfun]}];
		} else {
			var _g = [];
			var _g1 = 0;
			while(_g1 < vvars.length) {
				var v1 = vvars[_g1];
				++_g1;
				_g.push(v1.v);
			}
			var tmp = { name : "vertex", vars : _g, funs : [vfun]};
			var _g = [];
			var _g1 = 0;
			while(_g1 < fvars.length) {
				var v1 = fvars[_g1];
				++_g1;
				_g.push(v1.v);
			}
			return [tmp,{ name : "fragment", vars : _g, funs : [ffun]}];
		}
	}
	,addExpr: function(f,e) {
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			el.push(e);
		} else {
			f.expr = { e : hxsl_TExprDef.TBlock([f.expr,e]), t : hxsl_Type.TVoid, p : f.expr.p};
		}
	}
	,checkVar: function(v,vertex,vvars,p) {
		switch(v.v.kind._hx_index) {
		case 3:
			if(!vertex) {
				var i = vvars.h[v.origin.id];
				if(i != null && i.v.kind == hxsl_VarKind.Input) {
					return;
				}
				if(v.requireInit && (i == null || i.write == 0)) {
					throw haxe_Exception.thrown(new hxsl_Error("Varying " + v.v.name + " is not written by vertex shader",p));
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				if(v.origin.parent == null || v.origin.parent.name != "global" && !this.isBatchShader) {
					throw haxe_Exception.thrown(new hxsl_Error("Variable " + v.v.name + " is used without being initialized",p));
				}
			}
			break;
		default:
		}
	}
	,mapVars: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl_TExprDef.TVar(v2), t : e.t, p : e.p};
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TVarDecl(v2,init == null ? null : this.mapVars(init)), t : e.t, p : e.p};
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TFor(v2,this.mapVars(it),this.mapVars(loop)), t : e.t, p : e.p};
			}
			break;
		default:
			return hxsl_Tools.map(e,$bind(this,this.mapVars));
		}
	}
	,get: function(v) {
		var i = this.vars.h[v.id];
		if(i == null) {
			var nv = this.varMap.h[v.__id__];
			if(nv == null) {
				if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
					nv = v;
				} else {
					nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					if(v.qualifiers != null) {
						var _g = 0;
						var _g1 = v.qualifiers;
						while(_g < _g1.length) {
							var q = _g1[_g];
							++_g;
							switch(q._hx_index) {
							case 0:
								break;
							case 4:
								break;
							case 6:
								break;
							case 7:
								break;
							case 1:case 2:case 3:case 5:case 8:
								break;
							case 9:
								break;
							case 10:
								break;
							case 11:
								break;
							case 12:
								break;
							case 13:case 14:
								if(nv.qualifiers == null) {
									nv.qualifiers = [];
								}
								nv.qualifiers.push(q);
								break;
							}
						}
					}
					this.uniqueName(nv);
				}
				this.varMap.set(v,nv);
			}
			i = new hxsl__$Splitter_VarProps(nv);
			i.origin = v;
			this.vars.h[v.id] = i;
			this.avars.push(i);
		}
		return i;
	}
	,uniqueName: function(v) {
		if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
			return;
		}
		var n = this.varNames.h[v.name];
		if(n != null && n != v) {
			var prefix = v.name;
			while(HxOverrides.cca(prefix,prefix.length - 1) >= 48 && HxOverrides.cca(prefix,prefix.length - 1) <= 57) prefix = HxOverrides.substr(prefix,0,-1);
			var k = prefix == v.name ? 2 : Std.parseInt(HxOverrides.substr(v.name,prefix.length,null));
			while(Object.prototype.hasOwnProperty.call(this.varNames.h,prefix + k)) ++k;
			v.name = prefix + k;
		}
		this.varNames.h[v.name] = v;
	}
	,checkExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var inf = this.get(v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			var _ge = _g.e1;
			var _ge1 = _g.e2;
			switch(_g.op._hx_index) {
			case 4:
				var _ge2 = _ge.e;
				switch(_ge2._hx_index) {
				case 1:
					var v = _ge2.v;
					var e1 = _ge1;
					var inf = this.get(v);
					inf.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _ge3 = _ge2.e.e;
					if(_ge3._hx_index == 1) {
						var v = _ge3.v;
						var e1 = _ge1;
						var inf = this.get(v);
						inf.write++;
						this.checkExpr(e1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				var _ge2 = _ge.e;
				switch(_ge2._hx_index) {
				case 1:
					var v = _ge2.v;
					var e1 = _ge1;
					var inf = this.get(v);
					if(inf.write == 0) {
						inf.requireInit = true;
					}
					inf.read++;
					inf.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _ge = _ge2.e.e;
					if(_ge._hx_index == 1) {
						var v = _ge.v;
						var e1 = _ge1;
						var inf = this.get(v);
						if(inf.write == 0) {
							inf.requireInit = true;
						}
						inf.read++;
						inf.write++;
						this.checkExpr(e1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl_Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			var inf = this.get(v);
			inf.local = true;
			if(init != null) {
				this.checkExpr(init);
				inf.write++;
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			this.checkExpr(it);
			var inf = this.get(v);
			inf.local = true;
			inf.write++;
			this.checkExpr(loop);
			break;
		default:
			hxsl_Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
	,__class__: hxsl_Splitter
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
Math.__name__ = "Math";
var stdgo_AnyInterfaceData = function(value,type) {
	this.value = value;
	this.type = type;
};
$hxClasses["stdgo.AnyInterfaceData"] = stdgo_AnyInterfaceData;
stdgo_AnyInterfaceData.__name__ = "stdgo.AnyInterfaceData";
stdgo_AnyInterfaceData.prototype = {
	toString: function() {
		return "" + (this.value == null ? "null" : Std.string(this.value));
	}
	,__class__: stdgo_AnyInterfaceData
};
var stdgo_Chan = function(length,defaultValue) {
	this.length = 0;
};
$hxClasses["stdgo.Chan"] = stdgo_Chan;
stdgo_Chan.__name__ = "stdgo.Chan";
stdgo_Chan.prototype = {
	__class__: stdgo_Chan
};
var stdgo_GoString = {};
stdgo_GoString.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.high - this1.low;
	}
};
stdgo_GoString.__copy__ = function(this1) {
	if(this1 == null || this1.bytes == null) {
		return stdgo_GoString.ofString("");
	}
	var b = new haxe_io_Bytes(new ArrayBuffer(this1.bytes.length));
	b.blit(0,this1.bytes,0,this1.bytes.length);
	return new stdgo__$GoString_GoStringData(b,this1.low,this1.high);
};
stdgo_GoString.toString = function(this1) {
	return this1.toString();
};
stdgo_GoString.ofBytes = function(x) {
	return new stdgo__$GoString_GoStringData(x,0,x.length);
};
stdgo_GoString.ofString = function(x) {
	var b = haxe_io_Bytes.ofString(x);
	return new stdgo__$GoString_GoStringData(b,0,b.length);
};
stdgo_GoString.ofSliceByte = function(x) {
	if(x != null && stdgo_Slice.get___bytes__(x) != null) {
		return new stdgo__$GoString_GoStringData(stdgo_Slice.get___bytes__(x),stdgo_Slice.get___offset__(x),stdgo_GoInt32.add(stdgo_Slice.get___offset__(x),stdgo_Slice.get_length(x)));
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer(stdgo_Slice.get_length(x)));
	var _g = 0;
	var _g1 = bytes.length;
	while(_g < _g1) {
		var i = _g++;
		var n = stdgo_Slice.__get__(x,i);
		if(n != null) {
			bytes.b[i] = n;
		}
	}
	return stdgo_GoString.ofBytes(bytes);
};
stdgo_GoString.__get__ = function(this1,index) {
	return this1.bytes.b[this1.low + index | 0];
};
stdgo_GoString.__toSliceByte__ = function(this1) {
	var slice = new stdgo_GoArrayData(0,-1);
	if(this1 == null) {
		slice.bytes = new haxe_io_Bytes(new ArrayBuffer(0));
		slice.offset = 0;
		slice.length = 0;
		slice.capacity = 0;
		slice.isNumber32 = true;
		return slice;
	}
	slice.bytes = this1.bytes;
	slice.offset = this1.low;
	slice.length = this1.high - this1.low;
	slice.capacity = this1.high - this1.low;
	slice.isNumber32 = true;
	return slice;
};
stdgo_GoString.__slice__ = function(this1,low,high) {
	if(high == null) {
		high = -1;
	}
	if(this1 == null) {
		return null;
	}
	if(high == -1) {
		high = this1.high - this1.low;
	}
	if(stdgo_GoInt32.gt(high,this1.bytes.length)) {
		throw haxe_Exception.thrown("slice bounds out of range [:" + high + "] with length " + this1.bytes.length);
	}
	if(stdgo_GoInt32.gt(low,high)) {
		throw haxe_Exception.thrown("slice bounds out of range [" + low + ":] with length " + stdgo_GoInt32.sub(high,low));
	}
	return new stdgo__$GoString_GoStringData(this1.bytes,stdgo_GoInt32.add(this1.low,low),stdgo_GoInt32.add(this1.low,high));
};
stdgo_GoString.add = function(a,b) {
	var a1 = a;
	var b1 = b;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(a1.high - a1.low + (b1.high - b1.low)));
	var len = a1.high - a1.low;
	bytes.blit(0,a1.bytes,a1.low,len);
	bytes.blit(len,b1.bytes,b1.low,b1.high - b1.low);
	return stdgo_GoString.ofBytes(bytes);
};
var stdgo__$GoString_GoStringData = function(bytes,low,high) {
	this.high = 0;
	this.low = 0;
	this.bytes = bytes;
	this.low = low;
	this.high = high;
};
$hxClasses["stdgo._GoString.GoStringData"] = stdgo__$GoString_GoStringData;
stdgo__$GoString_GoStringData.__name__ = "stdgo._GoString.GoStringData";
stdgo__$GoString_GoStringData.prototype = {
	toString: function() {
		if(!stdgo__$internal_unicode_utf8_Utf8_$validstring_validString(this)) {
			return "invalid string";
		}
		return this.bytes.sub(this.low,this.high - this.low).toString();
	}
	,__class__: stdgo__$GoString_GoStringData
};
var stdgo_PointerData = function(get,set,hasSet,previous,underlying,underlyingIndex) {
	if(hasSet == null) {
		hasSet = false;
	}
	this.address = 0;
	this.underlyingIndex = null;
	this.underlying = null;
	this.previous = null;
	this.hasSet = false;
	if(get == null) {
		get = function() {
			throw haxe_Exception.thrown("null pointer dereference");
		};
	}
	if(set == null) {
		set = function(value) {
			return value;
		};
	}
	this.get = get;
	this.set = set;
	this.hasSet = hasSet;
	this.previous = previous;
	this.underlying = underlying;
	this.underlyingIndex = underlyingIndex;
	stdgo_Pointer_globalAddressMutex.acquire();
	this.address = ++stdgo_Pointer_globalAddress;
	stdgo_Pointer_globalAddressMutex.release();
};
$hxClasses["stdgo.PointerData"] = stdgo_PointerData;
stdgo_PointerData.__name__ = "stdgo.PointerData";
stdgo_PointerData.prototype = {
	__class__: stdgo_PointerData
};
var stdgo__$internal_internal_TypeInfo = function() { };
$hxClasses["stdgo._internal.internal.TypeInfo"] = stdgo__$internal_internal_TypeInfo;
stdgo__$internal_internal_TypeInfo.__name__ = "stdgo._internal.internal.TypeInfo";
var stdgo__$internal_internal_reflect__$Type = function(gt) {
	this.gt = gt;
};
$hxClasses["stdgo._internal.internal.reflect._Type"] = stdgo__$internal_internal_reflect__$Type;
stdgo__$internal_internal_reflect__$Type.__name__ = "stdgo._internal.internal.reflect._Type";
stdgo__$internal_internal_reflect__$Type.prototype = {
	_common: function() {
		return this.gt;
	}
	,__class__: stdgo__$internal_internal_reflect__$Type
};
var stdgo__$internal_math_bits_T_$errorString_$asInterface = function(__self__,__type__) {
	this.__self__ = __self__;
	this.__type__ = __type__;
};
$hxClasses["stdgo._internal.math.bits.T_errorString_asInterface"] = stdgo__$internal_math_bits_T_$errorString_$asInterface;
stdgo__$internal_math_bits_T_$errorString_$asInterface.__name__ = "stdgo._internal.math.bits.T_errorString_asInterface";
stdgo__$internal_math_bits_T_$errorString_$asInterface.prototype = {
	error: function() {
		return stdgo__$internal_math_bits_T_$errorString_$static_$extension.error(stdgo_Pointer.get_value(this.__self__));
	}
	,runtimeError: function() {
		stdgo__$internal_math_bits_T_$errorString_$static_$extension.runtimeError(stdgo_Pointer.get_value(this.__self__));
	}
	,__underlying__: function() {
		return new stdgo_AnyInterfaceData(stdgo_GoUInt32.equals(stdgo__$internal_internal_reflect__$Type_$static_$extension.kind(this.__type__),22) && !stdgo__$internal_internal_reflect_Reflect_isReflectTypeRef(this.__type__) ? this.__self__ : stdgo_Pointer.get_value(this.__self__),this.__type__);
	}
	,__class__: stdgo__$internal_math_bits_T_$errorString_$asInterface
};
var stdgo_Go = function() { };
$hxClasses["stdgo.Go"] = stdgo_Go;
stdgo_Go.__name__ = "stdgo.Go";
stdgo_Go.println = function() {
	var $l=arguments.length;
	var args = new Array($l>0?$l-0:0);
	for(var $i=0;$i<$l;++$i){args[$i-0]=arguments[$i];}
	var s = "";
	var _g = 0;
	var _g1 = args.length;
	while(_g < _g1) {
		var i = _g++;
		s += Std.string(args[i]) + (i != args.length - 1 ? " " : "");
	}
	stdgo_Go._print(s);
};
stdgo_Go._print = function(arg) {
	console.log(arg);
};
var stdgo_GoArrayData = function(length,capacity) {
	var $l=arguments.length;
	var args = new Array($l>2?$l-2:0);
	for(var $i=2;$i<$l;++$i){args[$i-2]=arguments[$i];}
	this.isString = false;
	this.isNumber64 = false;
	this.isNumber32 = false;
	this.capacity = 0;
	this.length = 0;
	this.offset = 0;
	this.bytes = null;
	this.vector = null;
	if(capacity != -1) {
		var vectorLength = length > capacity ? length : capacity;
		this.length = length;
		this.capacity = vectorLength;
		this.vector = new Array(vectorLength);
		var _g = 0;
		var _g1 = args.length;
		while(_g < _g1) {
			var i = _g++;
			this.vector[i] = args[i];
		}
	} else if(args.length != 0) {
		this.length = args.length;
		this.capacity = args.length;
		this.vector = new Array(args.length);
		var _g = 0;
		var _g1 = args.length;
		while(_g < _g1) {
			var i = _g++;
			this.vector[i] = args[i];
		}
	}
};
$hxClasses["stdgo.GoArrayData"] = stdgo_GoArrayData;
stdgo_GoArrayData.__name__ = "stdgo.GoArrayData";
stdgo_GoArrayData.prototype = {
	__copy__: function() {
		var slice = new stdgo_GoArrayData(0,-1);
		slice.capacity = this.capacity;
		slice.length = this.length;
		slice.offset = this.offset;
		if(this.bytes != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(this.bytes.length));
			bytes.blit(0,this.bytes,0,this.bytes.length);
			slice.bytes = bytes;
			return slice;
		}
		var this1 = this.vector;
		var r = new Array(this1.length);
		haxe_ds_Vector.blit(this1,0,r,0,this1.length);
		slice.vector = r;
		slice.isNumber32 = this.isNumber32;
		slice.isNumber64 = this.isNumber64;
		slice.isString = this.isString;
		return slice;
	}
	,__class__: stdgo_GoArrayData
};
var stdgo_GoArray = {};
stdgo_GoArray.__setNumber32__ = function(this1) {
	this1.isNumber32 = true;
	return stdgo_Slice.toGoArray(this1);
};
stdgo_GoArray.__setNumber64__ = function(this1) {
	this1.isNumber64 = true;
	return stdgo_Slice.toGoArray(this1);
};
stdgo_GoArray.get_length = function(this1) {
	if(this1 != null) {
		return this1.length;
	} else {
		return 0;
	}
};
stdgo_GoArray.__boundsCheck__ = function(this1,i) {
	if(i < 0 || i >= this1.length) {
		throw haxe_Exception.thrown("array out of bounds, index: " + i + " length: " + stdgo_GoArray.get_length(this1));
	}
};
stdgo_GoArray.__set__ = function(this1,index,value) {
	stdgo_GoArray.__boundsCheck__(this1,index);
	var index1 = index;
	if(this1.bytes != null) {
		this1.bytes.b[index1 + this1.offset] = value;
		return value;
	} else {
		return this1.vector[index1 + this1.offset] = value;
	}
};
stdgo_GoArray.__get__ = function(this1,index) {
	stdgo_GoArray.__boundsCheck__(this1,index);
	var index1 = index;
	if(this1.bytes != null) {
		var tmp = this1.bytes.b[index1 + this1.offset];
		return tmp != null ? tmp : 0;
	} else if(this1.isNumber64) {
		var tmp = this1.vector[index1 + this1.offset];
		if(tmp != null) {
			return tmp;
		} else {
			return new haxe__$Int64__$_$_$Int64(0,0);
		}
	} else if(this1.isNumber32) {
		var tmp = this1.vector[index1 + this1.offset];
		if(tmp != null) {
			return tmp;
		} else {
			return 0;
		}
	} else if(this1.isString) {
		var tmp = this1.vector[index1 + this1.offset];
		if(tmp != null) {
			return tmp;
		} else {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
	} else {
		return this1.vector[index1 + this1.offset];
	}
};
var stdgo_GoInt32 = {};
stdgo_GoInt32.add = function(a,b) {
	return a + b | 0;
};
stdgo_GoInt32.sub = function(a,b) {
	return a - b | 0;
};
stdgo_GoInt32.and = function(a,b) {
	return a & b;
};
stdgo_GoInt32.gt = function(a,b) {
	return a > b;
};
stdgo_GoInt32.gte = function(a,b) {
	return a >= b;
};
stdgo_GoInt32.lt = function(a,b) {
	return a < b;
};
var stdgo_GoInt64 = {};
stdgo_GoInt64.fromInt = function(x) {
	return stdgo_GoNumber_ofIntInt64(x);
};
stdgo_GoInt64.toUInt64 = function(this1) {
	return stdgo_GoNumber_toUInt64Int64(this1);
};
stdgo_GoInt64.add = function(a,b) {
	var a1 = a;
	var b1 = b;
	var high = a1.high + b1.high | 0;
	var low = a1.low + b1.low | 0;
	if(haxe_Int32.ucompare(low,a1.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
stdgo_GoInt64.mul = function(a,b) {
	var a1 = a;
	var b1 = b;
	var mask = 65535;
	var al = a1.low & mask;
	var ah = a1.low >>> 16;
	var bl = b1.low & mask;
	var bh = b1.low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(a1.low,b1.high) + haxe_Int32._mul(a1.high,b1.low) | 0) | 0;
	return new haxe__$Int64__$_$_$Int64(high,low);
};
stdgo_GoInt64.neg = function(t) {
	return stdgo_GoInt64.mul(t,stdgo_GoInt64.fromInt(-1));
};
stdgo_GoInt64.mod = function(a,b) {
	return haxe_Int64.divMod(a,b).modulus;
};
stdgo_GoInt64.div = function(a,b) {
	if(stdgo_GoInt64.equals(b,stdgo_GoInt64.fromInt(0))) {
		throw haxe_Exception.thrown(stdgo_Error__divideError == null ? new stdgo_AnyInterfaceData(null,new stdgo__$internal_internal_reflect__$Type(stdgo__$internal_internal_reflect_GoType.basic(25))) : new stdgo_AnyInterfaceData(stdgo_Error__divideError,stdgo_Error__divideError.__underlying__().type));
	}
	return haxe_Int64.divMod(a,b).quotient;
};
stdgo_GoInt64.sub = function(a,b) {
	var a1 = a;
	var b1 = b;
	var high = a1.high - b1.high | 0;
	var low = a1.low - b1.low | 0;
	if(haxe_Int32.ucompare(a1.low,b1.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
stdgo_GoInt64.gt = function(a,b) {
	var a1 = a;
	var b1 = b;
	var v = a1.high - b1.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a1.low,b1.low);
	}
	return (a1.high < 0 ? b1.high < 0 ? v : -1 : b1.high >= 0 ? v : 1) > 0;
};
stdgo_GoInt64.gte = function(a,b) {
	var a1 = a;
	var b1 = b;
	var v = a1.high - b1.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a1.low,b1.low);
	}
	return (a1.high < 0 ? b1.high < 0 ? v : -1 : b1.high >= 0 ? v : 1) >= 0;
};
stdgo_GoInt64.lt = function(a,b) {
	var a1 = a;
	var b1 = b;
	var v = a1.high - b1.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a1.low,b1.low);
	}
	return (a1.high < 0 ? b1.high < 0 ? v : -1 : b1.high >= 0 ? v : 1) < 0;
};
stdgo_GoInt64.lte = function(a,b) {
	var a1 = a;
	var b1 = b;
	var v = a1.high - b1.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a1.low,b1.low);
	}
	return (a1.high < 0 ? b1.high < 0 ? v : -1 : b1.high >= 0 ? v : 1) <= 0;
};
stdgo_GoInt64.equals = function(a,b) {
	var a1 = a;
	var b1 = b;
	if(a1.high == b1.high) {
		return a1.low == b1.low;
	} else {
		return false;
	}
};
var stdgo_Complex = function(r,i) {
	this.real = r;
	this.imag = i;
};
$hxClasses["stdgo.Complex"] = stdgo_Complex;
stdgo_Complex.__name__ = "stdgo.Complex";
stdgo_Complex.prototype = {
	__class__: stdgo_Complex
};
var stdgo_GoUInt32 = {};
stdgo_GoUInt32.add = function(a,b) {
	return stdgo_GoUInt32.clamp(stdgo_GoUInt32.clamp(a) + stdgo_GoUInt32.clamp(b));
};
stdgo_GoUInt32.sub = function(a,b) {
	return stdgo_GoUInt32.clamp(stdgo_GoUInt32.clamp(a) - stdgo_GoUInt32.clamp(b));
};
stdgo_GoUInt32.and = function(a,b) {
	return stdgo_GoUInt32.clamp(stdgo_GoUInt32.clamp(a) & stdgo_GoUInt32.clamp(b));
};
stdgo_GoUInt32.or = function(a,b) {
	return stdgo_GoUInt32.clamp(stdgo_GoUInt32.clamp(a) | stdgo_GoUInt32.clamp(b));
};
stdgo_GoUInt32.mod = function(a,b) {
	var a1 = stdgo_GoUInt32.clamp(a);
	var b1 = stdgo_GoUInt32.clamp(b);
	return stdgo_GoUInt32.clamp(UInt.toFloat(a1) % UInt.toFloat(b1) | 0);
};
stdgo_GoUInt32.div = function(a,b) {
	if(stdgo_GoUInt32.equals(b,0)) {
		throw haxe_Exception.thrown(stdgo_Error__divideError == null ? new stdgo_AnyInterfaceData(null,new stdgo__$internal_internal_reflect__$Type(stdgo__$internal_internal_reflect_GoType.basic(25))) : new stdgo_AnyInterfaceData(stdgo_Error__divideError,stdgo_Error__divideError.__underlying__().type));
	}
	var a1 = stdgo_GoUInt32.clamp(a);
	var b1 = stdgo_GoUInt32.clamp(b);
	return stdgo_GoUInt32.clamp(UInt.toFloat(a1) / UInt.toFloat(b1) | 0);
};
stdgo_GoUInt32.shl = function(a,b) {
	if(stdgo_GoNumber_shiftGuard(stdgo_GoUInt32.clamp(b))) {
		return 0;
	}
	return stdgo_GoUInt32.clamp(stdgo_GoUInt32.clamp(a) << stdgo_GoUInt32.clamp(b));
};
stdgo_GoUInt32.clamp = function(x) {
	return stdgo_GoNumber_clampUInt(x);
};
stdgo_GoUInt32.equals = function(a,b) {
	return stdgo_GoUInt32.clamp(a) == stdgo_GoUInt32.clamp(b);
};
stdgo_GoUInt32.notEquals = function(a,b) {
	return !stdgo_GoUInt32.equals(a,b);
};
stdgo_GoUInt32.gt = function(a,b) {
	return UInt.gt(stdgo_GoUInt32.clamp(a),stdgo_GoUInt32.clamp(b));
};
stdgo_GoUInt32.lt = function(a,b) {
	var a1 = stdgo_GoUInt32.clamp(a);
	return UInt.gt(stdgo_GoUInt32.clamp(b),a1);
};
var stdgo_GoUInt8 = {};
stdgo_GoUInt8.lt = function(a,b) {
	return a < b;
};
stdgo_GoUInt8.add = function(a,b) {
	return stdgo_GoUInt8.clamp(a + b);
};
stdgo_GoUInt8.and = function(a,b) {
	return stdgo_GoUInt8.clamp(a & b);
};
stdgo_GoUInt8.shr = function(a,b) {
	if(stdgo_GoNumber_shiftGuard(b)) {
		return 0;
	}
	return stdgo_GoUInt8.clamp(a >> b);
};
stdgo_GoUInt8.clamp = function(x) {
	return stdgo_GoNumber_clampUInt8(x);
};
var stdgo_Pointer = {};
stdgo_Pointer.get_value = function(this1) {
	if(this1 == null) {
		throw haxe_Exception.thrown("invalid memory address or nil pointer dereference");
	}
	if(this1.assign != null) {
		var value = this1.assign();
		if(this1.previous == null) {
			this1.set(value);
		} else {
			this1.ref = value;
		}
		this1.assign = null;
	}
	var bool = this1.previous != null && this1.convert != null;
	if(bool) {
		this1.ref = this1.get();
		this1.previous.assign = function() {
			return this1.convert(this1.ref);
		};
		var recursive = function(p,value) {
			if(p.previous == null) {
				return;
			}
			p.previous.assign = function() {
				return p.convert(value());
			};
		};
		recursive(this1.previous,this1.previous.assign);
		return this1.ref;
	}
	return this1.get();
};
stdgo_Pointer.hasSet = function(this1) {
	return this1.hasSet;
};
var stdgo_Slice = {};
stdgo_Slice.__copy__ = function(this1) {
	return this1.__copy__();
};
stdgo_Slice.__slice__ = function(this1) {
	var $l=arguments.length;
	var args = new Array($l>1?$l-1:0);
	for(var $i=1;$i<$l;++$i){args[$i-1]=arguments[$i];}
	if(this1 == null) {
		return null;
	}
	if(args.length > 3 || args.length < 1) {
		throw haxe_Exception.thrown("slice invalid number of args");
	}
	var low = args[0];
	var offset = low;
	var high = args.length < 2 ? this1.length : args[1];
	var max = args.length < 3 ? this1.capacity : args[2];
	var length = stdgo_GoInt32.sub(high,low);
	var capacity = stdgo_GoInt32.sub(max,low);
	var obj;
	if(this1 == null) {
		var s = new stdgo_GoArrayData(0,-1);
		s.capacity = 0;
		obj = s;
	} else {
		var slice = new stdgo_GoArrayData(0,-1);
		slice.length = this1.length;
		slice.capacity = this1.capacity;
		slice.vector = this1.vector;
		slice.bytes = this1.bytes;
		slice.offset = this1.offset;
		if(slice.capacity == -1) {
			slice.capacity = 0;
		}
		slice.isNumber32 = this1.isNumber32;
		slice.isNumber64 = this1.isNumber64;
		slice.isString = this1.isString;
		obj = slice;
	}
	obj.offset = stdgo_GoInt32.add(this1.offset,offset);
	obj.capacity = capacity;
	obj.length = length;
	return obj;
};
stdgo_Slice.toGoArray = function(this1) {
	return this1;
};
stdgo_Slice.get___offset__ = function(this1) {
	return this1.offset;
};
stdgo_Slice.get___bytes__ = function(this1) {
	return this1.bytes;
};
stdgo_Slice.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
stdgo_Slice.__boundsCheck__ = function(this1,i) {
	if(i < 0 || i >= this1.length) {
		throw haxe_Exception.thrown("array out of bounds, index: " + i + " length: " + stdgo_Slice.get_length(this1));
	}
};
stdgo_Slice.__get__ = function(this1,index) {
	stdgo_Slice.__boundsCheck__(this1,index);
	var index1 = index;
	if(this1.bytes != null) {
		var tmp = this1.bytes.b[index1 + this1.offset];
		return tmp != null ? tmp : 0;
	} else if(this1.isNumber64) {
		var tmp = this1.vector[index1 + this1.offset];
		if(tmp != null) {
			return tmp;
		} else {
			return new haxe__$Int64__$_$_$Int64(0,0);
		}
	} else if(this1.isNumber32) {
		var tmp = this1.vector[index1 + this1.offset];
		if(tmp != null) {
			return tmp;
		} else {
			return 0;
		}
	} else if(this1.isString) {
		var tmp = this1.vector[index1 + this1.offset];
		if(tmp != null) {
			return tmp;
		} else {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
	} else {
		return this1.vector[index1 + this1.offset];
	}
};
stdgo_Slice.__set__ = function(this1,index,value) {
	stdgo_Slice.__boundsCheck__(this1,index);
	var index1 = index;
	if(this1.bytes != null) {
		this1.bytes.b[index1 + this1.offset] = value;
		return value;
	} else {
		return this1.vector[index1 + this1.offset] = value;
	}
};
stdgo_Slice.__toArray__ = function(this1) {
	if(this1 == null) {
		return [];
	} else if(this1.bytes != null) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this1.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this1.bytes.b[i + this1.offset]);
		}
		return _g;
	} else {
		var _g = [];
		var _g1 = 0;
		var _g2 = this1.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this1.vector[i + this1.offset]);
		}
		return _g;
	}
};
stdgo_Slice.__copyTo__ = function(this1,src) {
	var src1 = src != null ? stdgo_Slice.__copy__(src) : null;
	var dst = this1;
	if(src1 == null || dst == null) {
		return 0;
	} else {
		var min = stdgo_GoInt32.gt(stdgo_Slice.get_length(src1),stdgo_Slice.get_length(dst)) ? stdgo_Slice.get_length(dst) : stdgo_Slice.get_length(src1);
		var _g = 0;
		var _g1 = min;
		while(_g < _g1) {
			var i = _g++;
			stdgo_Slice.__set__(dst,i,stdgo_Slice.__get__(src1,i));
		}
		return min;
	}
};
var stdgo__$internal_internal_reflect_MethodType = function(name,type,recv) {
	this.name = name;
	this.type = type;
	this.recv = recv;
};
$hxClasses["stdgo._internal.internal.reflect.MethodType"] = stdgo__$internal_internal_reflect_MethodType;
stdgo__$internal_internal_reflect_MethodType.__name__ = "stdgo._internal.internal.reflect.MethodType";
stdgo__$internal_internal_reflect_MethodType.prototype = {
	__class__: stdgo__$internal_internal_reflect_MethodType
};
var stdgo__$internal_internal_reflect_FieldType = function(name,type,tag,embedded,optional) {
	this.name = name;
	this.type = type;
	this.tag = tag;
	this.embedded = embedded;
	this.optional = optional;
};
$hxClasses["stdgo._internal.internal.reflect.FieldType"] = stdgo__$internal_internal_reflect_FieldType;
stdgo__$internal_internal_reflect_FieldType.__name__ = "stdgo._internal.internal.reflect.FieldType";
stdgo__$internal_internal_reflect_FieldType.prototype = {
	__class__: stdgo__$internal_internal_reflect_FieldType
};
var stdgo__$internal_internal_reflect_GoType = $hxEnums["stdgo._internal.internal.reflect.GoType"] = { __ename__:true,__constructs__:null
	,typeParam: ($_=function(name,params) { return {_hx_index:0,name:name,params:params,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.name,this.params];}}; },$_._hx_name="typeParam",$_)
	,invalidType: {_hx_name:"invalidType",_hx_index:1,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr}
	,signature: ($_=function(variadic,params,results,recv,typeParams) { return {_hx_index:2,variadic:variadic,params:params,results:results,recv:recv,typeParams:typeParams,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.variadic,this.params,this.results,this.recv,this.typeParams];}}; },$_._hx_name="signature",$_)
	,basic: ($_=function(kind) { return {_hx_index:3,kind:kind,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.kind];}}; },$_._hx_name="basic",$_)
	,_var: ($_=function(name,type) { return {_hx_index:4,name:name,type:type,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.name,this.type];}}; },$_._hx_name="_var",$_)
	,tuple: ($_=function(len,vars) { return {_hx_index:5,len:len,vars:vars,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.len,this.vars];}}; },$_._hx_name="tuple",$_)
	,interfaceType: ($_=function(empty,methods) { return {_hx_index:6,empty:empty,methods:methods,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.empty,this.methods];}}; },$_._hx_name="interfaceType",$_)
	,sliceType: ($_=function(elem) { return {_hx_index:7,elem:elem,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.elem];}}; },$_._hx_name="sliceType",$_)
	,named: ($_=function(path,methods,type,alias,params) { return {_hx_index:8,path:path,methods:methods,type:type,alias:alias,params:params,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.path,this.methods,this.type,this.alias,this.params];}}; },$_._hx_name="named",$_)
	,previouslyNamed: ($_=function(path) { return {_hx_index:9,path:path,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.path];}}; },$_._hx_name="previouslyNamed",$_)
	,structType: ($_=function(fields) { return {_hx_index:10,fields:fields,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.fields];}}; },$_._hx_name="structType",$_)
	,pointerType: ($_=function(elem) { return {_hx_index:11,elem:elem,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.elem];}}; },$_._hx_name="pointerType",$_)
	,arrayType: ($_=function(elem,len) { return {_hx_index:12,elem:elem,len:len,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.elem,this.len];}}; },$_._hx_name="arrayType",$_)
	,mapType: ($_=function(key,value) { return {_hx_index:13,key:key,value:value,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.key,this.value];}}; },$_._hx_name="mapType",$_)
	,chanType: ($_=function(dir,elem) { return {_hx_index:14,dir:dir,elem:elem,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.dir,this.elem];}}; },$_._hx_name="chanType",$_)
	,refType: ($_=function(elem) { return {_hx_index:15,elem:elem,__enum__:"stdgo._internal.internal.reflect.GoType",toString:$estr,__params__:function(){ return [this.elem];}}; },$_._hx_name="refType",$_)
};
stdgo__$internal_internal_reflect_GoType.__constructs__ = [stdgo__$internal_internal_reflect_GoType.typeParam,stdgo__$internal_internal_reflect_GoType.invalidType,stdgo__$internal_internal_reflect_GoType.signature,stdgo__$internal_internal_reflect_GoType.basic,stdgo__$internal_internal_reflect_GoType._var,stdgo__$internal_internal_reflect_GoType.tuple,stdgo__$internal_internal_reflect_GoType.interfaceType,stdgo__$internal_internal_reflect_GoType.sliceType,stdgo__$internal_internal_reflect_GoType.named,stdgo__$internal_internal_reflect_GoType.previouslyNamed,stdgo__$internal_internal_reflect_GoType.structType,stdgo__$internal_internal_reflect_GoType.pointerType,stdgo__$internal_internal_reflect_GoType.arrayType,stdgo__$internal_internal_reflect_GoType.mapType,stdgo__$internal_internal_reflect_GoType.chanType,stdgo__$internal_internal_reflect_GoType.refType];
stdgo__$internal_internal_reflect_GoType.__empty_constructs__ = [stdgo__$internal_internal_reflect_GoType.invalidType];
var stdgo__$internal_internal_reflect__$Type_$static_$extension = function() { };
$hxClasses["stdgo._internal.internal.reflect._Type_static_extension"] = stdgo__$internal_internal_reflect__$Type_$static_$extension;
stdgo__$internal_internal_reflect__$Type_$static_$extension.__name__ = "stdgo._internal.internal.reflect._Type_static_extension";
stdgo__$internal_internal_reflect__$Type_$static_$extension._uncommon = function(t) {
	throw haxe_Exception.thrown("not implemented _uncommon");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension._common = function(t) {
	throw haxe_Exception.thrown("not implemented _common");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.out = function(t,_i) {
	throw haxe_Exception.thrown("not implemented _out");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.numOut = function(t) {
	throw haxe_Exception.thrown("not implemented numOut");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.numIn = function(t) {
	var gt = t._common();
	if(gt._hx_index == 2) {
		var _gvariadic = gt.variadic;
		var params = gt.params.get();
		return params.length;
	} else {
		throw haxe_Exception.thrown("issue");
	}
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.numField = function(t) {
	var type = t._common();
	type = stdgo__$internal_internal_reflect_Reflect_getUnderlying(type);
	if(type._hx_index == 10) {
		var fields = type.fields;
		return fields.length;
	} else {
		throw haxe_Exception.thrown(stdgo_GoString.add(stdgo_GoString.ofString("reflect.NumField not implemented for "),stdgo__$internal_internal_reflect__$Type_$static_$extension.string(t)));
	}
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.len = function(t) {
	var gt = t._common();
	switch(gt._hx_index) {
	case 7:
		return -1;
	case 12:
		var len = gt.len;
		return len;
	default:
		throw haxe_Exception.thrown(stdgo_GoString.add(stdgo_GoString.ofString("reflect.Len not implemented for "),stdgo__$internal_internal_reflect__$Type_$static_$extension.string(t)));
	}
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.key = function(t) {
	throw haxe_Exception.thrown("not implemented key");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.in_ = function(t,_i) {
	var gt = t._common();
	if(gt._hx_index == 2) {
		var _gvariadic = gt.variadic;
		var params = gt.params.get();
		var t = new stdgo__$internal_internal_reflect__$Type(params[_i]);
		return new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData(function() {
			return t;
		},function(__tmp__) {
			t = __tmp__;
			return t;
		},false),t);
	} else {
		throw haxe_Exception.thrown("issue");
	}
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.fieldByNameFunc = function(t,_match) {
	throw haxe_Exception.thrown("not implemented fieldByNameFunc");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.fieldByName = function(t,_name) {
	throw haxe_Exception.thrown("not implemented fieldByName");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.fieldByIndex = function(t,_index) {
	throw haxe_Exception.thrown("not implemented fieldByIndex");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.field = function(t,_i) {
	var module = "";
	var gt = t._common();
	var underlyingType = stdgo__$internal_internal_reflect_Reflect_getUnderlying(gt);
	if(underlyingType._hx_index == 10) {
		var fields = underlyingType.fields;
		var field = fields[_i];
		var name = field.name;
		name = stdgo__$internal_internal_reflect_Reflect_formatGoFieldName(name);
		var t = new stdgo__$internal_internal_reflect__$Type(stdgo__$internal_internal_reflect_Reflect_unroll(gt,field.type.get()));
		return new stdgo__$internal_reflect_StructField(stdgo_GoString.ofString(name),stdgo_GoString.ofString(module),new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData(function() {
			return t;
		},function(__tmp__) {
			t = __tmp__;
			return t;
		},false),t),stdgo_GoString.ofString(field.tag),null,new stdgo_GoArrayData(_i,_i,null),field.embedded);
	} else {
		throw haxe_Exception.thrown("cannot get struct: " + Std.string(gt));
	}
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.elem = function(t) {
	var gt = stdgo__$internal_internal_reflect_Reflect_getUnderlying(t._common());
	switch(gt._hx_index) {
	case 6:
		return null;
	case 7:
		var elem = gt.elem.get();
		var t1 = new stdgo__$internal_internal_reflect__$Type(elem);
		return new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData(function() {
			return t1;
		},function(value) {
			t1 = value;
			return t1;
		}),t1);
	case 11:
		var elem = gt.elem.get();
		var t2 = new stdgo__$internal_internal_reflect__$Type(elem);
		return new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData(function() {
			return t2;
		},function(value) {
			t2 = value;
			return t2;
		}),t2);
	case 12:
		var elem = gt.elem.get();
		var t3 = new stdgo__$internal_internal_reflect__$Type(elem);
		return new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData(function() {
			return t3;
		},function(value) {
			t3 = value;
			return t3;
		}),t3);
	case 14:
		var _gdir = gt.dir;
		var elem = gt.elem.get();
		var t4 = new stdgo__$internal_internal_reflect__$Type(elem);
		return new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData(function() {
			return t4;
		},function(value) {
			t4 = value;
			return t4;
		}),t4);
	case 15:
		var elem = gt.elem.get();
		var t5 = new stdgo__$internal_internal_reflect__$Type(elem);
		return new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData(function() {
			return t5;
		},function(value) {
			t5 = value;
			return t5;
		}),t5);
	default:
		haxe_Log.trace(gt,{ fileName : "stdgo/_internal/internal/reflect/Reflect.hx", lineNumber : 1054, className : "stdgo._internal.internal.reflect._Type_static_extension", methodName : "elem"});
		throw haxe_Exception.thrown(stdgo_GoString.add(stdgo_GoString.ofString("reflect.Type.Elem not implemented for "),stdgo__$internal_internal_reflect__$Type_$static_$extension.string(t)));
	}
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.isVariadic = function(t) {
	throw haxe_Exception.thrown("not implemented isVariadic");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.chanDir = function(t) {
	throw haxe_Exception.thrown("not implemented chanDir");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.bits = function(t) {
	if(t == null) {
		throw haxe_Exception.thrown(new stdgo_AnyInterfaceData(stdgo_GoString.ofString("reflect: Bits of nil Type"),new stdgo__$internal_internal_reflect__$Type(stdgo__$internal_internal_reflect_GoType.basic(17))));
	}
	var k = stdgo__$internal_internal_reflect__$Type_$static_$extension.kind(t);
	if(stdgo_GoUInt32.lt(k,2) || stdgo_GoUInt32.gt(k,16)) {
		throw haxe_Exception.thrown(new stdgo_AnyInterfaceData(stdgo_GoString.add(stdgo_GoString.ofString("reflect: Bits of non-arithmetic Type "),stdgo__$internal_internal_reflect__$Type_$static_$extension.string(t)),new stdgo__$internal_internal_reflect__$Type(stdgo__$internal_internal_reflect_GoType.basic(17))));
	}
	var this1 = stdgo__$internal_internal_reflect__$Type_$static_$extension.size(t);
	var this2;
	if(((this1) instanceof haxe__$Int64__$_$_$Int64)) {
		var x = this1;
		if(x.high != x.low >> 31) {
			throw haxe_Exception.thrown("Overflow");
		}
		this2 = x.low;
	} else {
		this2 = typeof(this1) == "number" && ((this1 | 0) === this1) ? this1 : typeof(this1) == "number" ? this1 | 0 : 1;
	}
	return this2 * 8;
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.comparable = function(t) {
	var _g = t._common();
	switch(_g._hx_index) {
	case 2:
		return false;
	case 7:
		return false;
	case 8:
		var type = _g.type;
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.comparable(new stdgo__$internal_internal_reflect__$Type(type));
	case 10:
		var fields = _g.fields;
		var _g1 = 0;
		while(_g1 < fields.length) {
			var field = fields[_g1];
			++_g1;
			if(!stdgo__$internal_internal_reflect__$Type_$static_$extension.comparable(new stdgo__$internal_internal_reflect__$Type(field.type.get()))) {
				return false;
			}
		}
		return true;
	case 12:
		var elem = _g.elem.get();
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.comparable(new stdgo__$internal_internal_reflect__$Type(elem));
	case 13:
		return false;
	default:
		return true;
	}
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.convertibleTo = function(t,_u) {
	throw haxe_Exception.thrown("not implemented convertibleTo");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.assignableTo = function(t,_u) {
	if(_u == null) {
		throw haxe_Exception.thrown("reflect: nil type passed to Type.AssignableTo");
	}
	var i = new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData(function() {
		return t;
	},function(__tmp__) {
		t = __tmp__;
		return t;
	},false),t);
	var a = stdgo__$internal_internal_reflect_Reflect_directlyAssignable(_u,i);
	var b = stdgo__$internal_internal_reflect__$Type_$static_$extension.implements_(t,_u);
	var c = a || b;
	return c;
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.implements_ = function(t,_u) {
	if(_u == null) {
		throw haxe_Exception.thrown("reflect: nil type passed to Type.Implements");
	}
	return stdgo__$internal_internal_reflect_Reflect_implementsMethod(_u,new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData(function() {
		return t;
	},function(__tmp__) {
		t = __tmp__;
		return t;
	},false),t));
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.kind = function(t) {
	if(t == null) {
		return 0;
	}
	var gt = t._common();
	gt = stdgo__$internal_internal_reflect_Reflect_getUnderlying(gt);
	switch(gt._hx_index) {
	case 0:
		return 0;
	case 1:
		return 0;
	case 2:
		return 19;
	case 3:
		var kind = gt.kind;
		switch(kind) {
		case 2:
			return 2;
		case 3:
			return 3;
		case 4:
			return 4;
		case 7:
			return 7;
		case 8:
			return 8;
		case 9:
			return 9;
		case 10:
			return 10;
		case 11:
			return 11;
		case 12:
			return 12;
		case 13:
			return 13;
		case 15:
			return 15;
		case 18:
			return 26;
		case 1:case 19:
			return 1;
		case 6:case 20:
			return 6;
		case 5:case 21:
			return 5;
		case 14:case 22:
			return 14;
		case 16:case 23:
			return 16;
		case 17:case 24:
			return 24;
		case 25:
			return 26;
		default:
			throw haxe_Exception.thrown("Unknown BasicKind: " + kind);
		}
		break;
	case 4:
		var _gname = gt.name;
		var type = gt.type.get();
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.kind(new stdgo__$internal_internal_reflect__$Type(type));
	case 5:
		throw haxe_Exception.thrown("tuple type to kind not supported");
	case 6:
		return 20;
	case 7:
		return 23;
	case 8:
		var type = gt.type;
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.kind(new stdgo__$internal_internal_reflect__$Type(type));
	case 9:
		var name = gt.path;
		throw haxe_Exception.thrown("previouslyNamed type to kind not supported should be unrolled before access: " + name);
	case 10:
		return 25;
	case 11:
		return 22;
	case 12:
		return 17;
	case 13:
		return 21;
	case 14:
		return 18;
	case 15:
		return 22;
	}
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.formatGoPath = function(path) {
	if(stdgo__$internal_internal_reflect_Reflect_useHaxePath) {
		return path;
	}
	var stdgo = "stdgo._internal";
	var index = path.indexOf(stdgo);
	if(index == 0) {
		path = HxOverrides.substr(path,stdgo.length,null);
	}
	var list = path.split(".");
	var cl = list.pop();
	if(cl.indexOf("T_") == 0) {
		cl = HxOverrides.substr(cl,2,null);
	}
	var localName = "___localname___";
	index = cl.indexOf(localName);
	if(index != -1) {
		cl = HxOverrides.substr(cl,index + localName.length,null);
	}
	list.push(cl);
	return list.join(".");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.string = function(t) {
	var gt = t._common();
	switch(gt._hx_index) {
	case 1:
		return stdgo_GoString.ofString("<nil>");
	case 2:
		var variadic = gt.variadic;
		var args = gt.params.get();
		var rets = gt.results.get();
		var recv = gt.recv.get();
		var r = stdgo_GoString.ofString("func(");
		var preface = "";
		if(recv._hx_index != 1) {
			r = stdgo_GoString.add(r,stdgo__$internal_internal_reflect__$Type_$static_$extension.string(new stdgo__$internal_internal_reflect__$Type(recv)));
			r = stdgo_GoString.add(r,stdgo_GoString.ofString(", "));
		}
		var _g = 0;
		var _g1 = args.length;
		while(_g < _g1) {
			var i = _g++;
			r = stdgo_GoString.add(r,stdgo_GoString.ofString(preface));
			preface = ", ";
			var isVariadic = variadic && i == args.length - 1;
			var str = stdgo__$internal_internal_reflect__$Type_$static_$extension.string(new stdgo__$internal_internal_reflect__$Type(args[i]));
			if(isVariadic) {
				str = stdgo_GoString.add(stdgo_GoString.ofString("..."),stdgo_GoString.__slice__(str,2));
			}
			r = stdgo_GoString.add(r,str);
		}
		r = stdgo_GoString.add(r,stdgo_GoString.ofString(")"));
		if(rets != null) {
			if(rets.length > 0) {
				r = stdgo_GoString.add(r,stdgo_GoString.ofString(" "));
				if(rets.length > 1) {
					r = stdgo_GoString.add(r,stdgo_GoString.ofString("("));
				}
				preface = "";
				var _g = 0;
				while(_g < rets.length) {
					var ret = rets[_g];
					++_g;
					r = stdgo_GoString.add(r,stdgo_GoString.ofString(preface));
					preface = ", ";
					r = stdgo_GoString.add(r,stdgo__$internal_internal_reflect__$Type_$static_$extension.string(new stdgo__$internal_internal_reflect__$Type(ret)));
				}
				if(rets.length > 1) {
					r = stdgo_GoString.add(r,stdgo_GoString.ofString(")"));
				}
			}
		}
		return r;
	case 3:
		var kind = gt.kind;
		if(kind == 20) {
			kind = 2;
		}
		if(kind == 25) {
			return stdgo_GoString.ofString("nil");
		} else {
			switch(kind) {
			case 1:
				return stdgo_GoString.ofString("bool");
			case 2:
				return stdgo_GoString.ofString("int");
			case 3:
				return stdgo_GoString.ofString("int8");
			case 4:
				return stdgo_GoString.ofString("int16");
			case 5:
				return stdgo_GoString.ofString("int32");
			case 6:
				return stdgo_GoString.ofString("int64");
			case 7:
				return stdgo_GoString.ofString("uint");
			case 8:
				return stdgo_GoString.ofString("uint8");
			case 9:
				return stdgo_GoString.ofString("uint16");
			case 10:
				return stdgo_GoString.ofString("uint32");
			case 11:
				return stdgo_GoString.ofString("uint64");
			case 12:
				return stdgo_GoString.ofString("uintptr");
			case 13:
				return stdgo_GoString.ofString("float32");
			case 14:
				return stdgo_GoString.ofString("float64");
			case 15:
				return stdgo_GoString.ofString("complex64");
			case 16:
				return stdgo_GoString.ofString("complex128");
			case 17:
				return stdgo_GoString.ofString("string");
			case 18:
				return stdgo_GoString.ofString("unsafepointer");
			default:
				return stdgo_GoString.ofString("unknown");
			}
		}
		break;
	case 6:
		var empty = gt.empty;
		var methods = gt.methods;
		var r = "";
		if(empty) {
			return stdgo_GoString.ofString("interface {}");
		}
		var _g = 0;
		while(_g < methods.length) {
			var method = methods[_g];
			++_g;
			r += "; " + stdgo__$internal_internal_reflect_Reflect_formatGoFieldName(method.name) + HxOverrides.substr(stdgo_GoString.toString(stdgo__$internal_internal_reflect__$Type_$static_$extension.string(new stdgo__$internal_internal_reflect__$Type(method.type.get()))),4,null);
		}
		r = HxOverrides.substr(r,1,null);
		return stdgo_GoString.ofString("interface {" + r + " }");
	case 7:
		var typ = gt.elem.get();
		return stdgo_GoString.add(stdgo_GoString.ofString("[]"),stdgo__$internal_internal_reflect__$Type_$static_$extension.string(new stdgo__$internal_internal_reflect__$Type(typ)));
	case 8:
		var path = gt.path;
		var type = gt.type;
		var alias = gt.alias;
		if(alias) {
			return stdgo__$internal_internal_reflect__$Type_$static_$extension.string(new stdgo__$internal_internal_reflect__$Type(type));
		} else {
			var pack = path.split(".");
			HxOverrides.remove(pack,pack[pack.length - 2]);
			return stdgo_GoString.ofString(stdgo__$internal_internal_reflect__$Type_$static_$extension.formatGoPath(pack.join(".")));
		}
		break;
	case 9:
		var path = gt.path;
		var pack = path.split(".");
		HxOverrides.remove(pack,pack[pack.length - 2]);
		return stdgo_GoString.ofString(stdgo__$internal_internal_reflect__$Type_$static_$extension.formatGoPath(pack.join(".")));
	case 10:
		var fields = gt.fields;
		var _g = [];
		var _g1 = 0;
		while(_g1 < fields.length) {
			var field = fields[_g1];
			++_g1;
			_g.push(stdgo_GoString.add(stdgo_GoString.ofString(stdgo__$internal_internal_reflect_Reflect_formatGoFieldName(field.name) + " "),stdgo__$internal_internal_reflect__$Type_$static_$extension.string(new stdgo__$internal_internal_reflect__$Type(field.type.get()))));
		}
		return stdgo_GoString.ofString("struct { " + _g.join("; ") + " }");
	case 11:
		var elem = gt.elem.get();
		return stdgo_GoString.add(stdgo_GoString.ofString("*"),stdgo__$internal_internal_reflect__$Type_$static_$extension.string(new stdgo__$internal_internal_reflect__$Type(elem)));
	case 12:
		var typ = gt.elem.get();
		var len = gt.len;
		if(len == -1) {
			len = 0;
		}
		return stdgo_GoString.add(stdgo_GoString.ofString("[" + (len == null ? "null" : "" + len) + "]"),stdgo__$internal_internal_reflect__$Type_$static_$extension.string(new stdgo__$internal_internal_reflect__$Type(typ)));
	case 13:
		var key = gt.key.get();
		var value = gt.value.get();
		return stdgo_GoString.add(stdgo_GoString.add(stdgo_GoString.add(stdgo_GoString.ofString("map["),stdgo__$internal_internal_reflect__$Type_$static_$extension.string(new stdgo__$internal_internal_reflect__$Type(key))),stdgo_GoString.ofString("]")),stdgo__$internal_internal_reflect__$Type_$static_$extension.string(new stdgo__$internal_internal_reflect__$Type(value)));
	case 14:
		var _gdir = gt.dir;
		var typ = gt.elem.get();
		return stdgo_GoString.add(stdgo_GoString.ofString("chan "),stdgo__$internal_internal_reflect__$Type_$static_$extension.string(new stdgo__$internal_internal_reflect__$Type(typ)));
	case 15:
		var elem = gt.elem.get();
		return stdgo_GoString.add(stdgo_GoString.ofString("*"),stdgo__$internal_internal_reflect__$Type_$static_$extension.string(new stdgo__$internal_internal_reflect__$Type(elem)));
	default:
		throw haxe_Exception.thrown("not found enum toString " + Std.string(gt));
	}
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.size = function(t) {
	var k = stdgo__$internal_internal_reflect__$Type_$static_$extension.kind(t);
	if(stdgo_GoUInt32.equals(k,0)) {
		return 0;
	}
	var addr;
	switch(k) {
	case 2:case 5:case 7:case 10:
		addr = 4;
		break;
	case 1:case 3:case 8:
		addr = 1;
		break;
	case 4:case 9:
		addr = 2;
		break;
	case 6:case 11:
		addr = 8;
		break;
	case 12:
		addr = 8;
		break;
	case 13:
		addr = 4;
		break;
	case 14:
		addr = 8;
		break;
	case 15:
		addr = 8;
		break;
	case 16:
		addr = 16;
		break;
	case 17:
		var gt = t._common();
		var gt1 = stdgo__$internal_internal_reflect_Reflect_getUnderlying(gt);
		if(gt1 == null) {
			addr = 0;
		} else if(gt1._hx_index == 12) {
			var elem = gt1.elem.get();
			var len = gt1.len;
			var this1 = stdgo__$internal_internal_reflect__$Type_$static_$extension.size(new stdgo__$internal_internal_reflect__$Type(elem));
			var this2;
			if(((this1) instanceof haxe__$Int64__$_$_$Int64)) {
				var x = this1;
				if(x.high != x.low >> 31) {
					throw haxe_Exception.thrown("Overflow");
				}
				this2 = x.low;
			} else {
				this2 = typeof(this1) == "number" && ((this1 | 0) === this1) ? this1 : typeof(this1) == "number" ? this1 | 0 : 1;
			}
			addr = this2 * len;
		} else {
			addr = 0;
		}
		break;
	case 19:
		addr = 8;
		break;
	case 20:
		addr = 16;
		break;
	case 22:
		addr = 8;
		break;
	case 23:
		addr = 24;
		break;
	case 24:
		addr = 16;
		break;
	case 25:
		addr = 0;
		break;
	default:
		throw haxe_Exception.thrown(stdgo_GoString.add(stdgo_GoString.ofString("unimplemented: size of type: "),stdgo__$internal_reflect_Kind_$static_$extension.string(k)));
	}
	return addr;
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.pkgPath = function(t) {
	throw haxe_Exception.thrown("not implemented pkgPath");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.$name = function(t) {
	throw haxe_Exception.thrown("not implemented name");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.numMethod = function(t) {
	var _g = t._common();
	switch(_g._hx_index) {
	case 6:
		var methods = _g.methods;
		var count = 0;
		var _g1 = 0;
		while(_g1 < methods.length) {
			var method = methods[_g1];
			++_g1;
			if(stdgo__$internal_internal_reflect_Reflect_isExported(method.name)) {
				++count;
			}
		}
		return count;
	case 8:
		var methods = _g.methods;
		var count = 0;
		var _g = 0;
		while(_g < methods.length) {
			var method = methods[_g];
			++_g;
			if(stdgo__$internal_internal_reflect_Reflect_isExported(method.name)) {
				++count;
			}
		}
		return count;
	case 10:
		return 0;
	case 11:
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.elem(t).numMethod();
	case 15:
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.elem(t).numMethod();
	default:
		throw haxe_Exception.thrown(stdgo_GoString.add(stdgo_GoString.ofString("reflect.NumMethod not implemented for "),stdgo__$internal_internal_reflect__$Type_$static_$extension.string(t)));
	}
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.methodByName = function(t,_0) {
	throw haxe_Exception.thrown("not implemented methodByName");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.method = function(t,_0) {
	throw haxe_Exception.thrown("not implemented method");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.fieldAlign = function(t) {
	throw haxe_Exception.thrown("not implemented fieldAlign");
};
stdgo__$internal_internal_reflect__$Type_$static_$extension.align = function(t) {
	throw haxe_Exception.thrown("not implemented align");
};
var stdgo__$internal_internal_reflect__$Type_$asInterface = function(__self__,__type__) {
	this.__self__ = __self__;
	this.__type__ = __type__;
};
$hxClasses["stdgo._internal.internal.reflect._Type_asInterface"] = stdgo__$internal_internal_reflect__$Type_$asInterface;
stdgo__$internal_internal_reflect__$Type_$asInterface.__name__ = "stdgo._internal.internal.reflect._Type_asInterface";
stdgo__$internal_internal_reflect__$Type_$asInterface.prototype = {
	_common: function() {
		return stdgo_Pointer.get_value(this.__self__)._common();
	}
	,out: function(_i) {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.out(stdgo_Pointer.get_value(this.__self__),_i);
	}
	,numOut: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.numOut(stdgo_Pointer.get_value(this.__self__));
	}
	,numIn: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.numIn(stdgo_Pointer.get_value(this.__self__));
	}
	,numField: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.numField(stdgo_Pointer.get_value(this.__self__));
	}
	,len: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.len(stdgo_Pointer.get_value(this.__self__));
	}
	,key: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.key(stdgo_Pointer.get_value(this.__self__));
	}
	,in_: function(_i) {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.in_(stdgo_Pointer.get_value(this.__self__),_i);
	}
	,fieldByNameFunc: function(_match) {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.fieldByNameFunc(stdgo_Pointer.get_value(this.__self__),_match);
	}
	,fieldByName: function(_name) {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.fieldByName(stdgo_Pointer.get_value(this.__self__),_name);
	}
	,fieldByIndex: function(_index) {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.fieldByIndex(stdgo_Pointer.get_value(this.__self__),_index);
	}
	,field: function(_i) {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.field(stdgo_Pointer.get_value(this.__self__),_i);
	}
	,elem: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.elem(stdgo_Pointer.get_value(this.__self__));
	}
	,isVariadic: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.isVariadic(stdgo_Pointer.get_value(this.__self__));
	}
	,chanDir: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.chanDir(stdgo_Pointer.get_value(this.__self__));
	}
	,bits: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.bits(stdgo_Pointer.get_value(this.__self__));
	}
	,comparable_: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.comparable(stdgo_Pointer.get_value(this.__self__));
	}
	,convertibleTo: function(_u) {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.convertibleTo(stdgo_Pointer.get_value(this.__self__),_u);
	}
	,assignableTo: function(_u) {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.assignableTo(stdgo_Pointer.get_value(this.__self__),_u);
	}
	,implements_: function(_u) {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.implements_(stdgo_Pointer.get_value(this.__self__),_u);
	}
	,kind: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.kind(stdgo_Pointer.get_value(this.__self__));
	}
	,string: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.string(stdgo_Pointer.get_value(this.__self__));
	}
	,size: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.size(stdgo_Pointer.get_value(this.__self__));
	}
	,pkgPath: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.pkgPath(stdgo_Pointer.get_value(this.__self__));
	}
	,name: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.$name(stdgo_Pointer.get_value(this.__self__));
	}
	,numMethod: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.numMethod(stdgo_Pointer.get_value(this.__self__));
	}
	,methodByName: function(_0) {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.methodByName(stdgo_Pointer.get_value(this.__self__),_0);
	}
	,method: function(_0) {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.method(stdgo_Pointer.get_value(this.__self__),_0);
	}
	,fieldAlign: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.fieldAlign(stdgo_Pointer.get_value(this.__self__));
	}
	,align: function() {
		return stdgo__$internal_internal_reflect__$Type_$static_$extension.align(stdgo_Pointer.get_value(this.__self__));
	}
	,__underlying__: function() {
		return new stdgo_AnyInterfaceData(stdgo_GoUInt32.equals(stdgo__$internal_internal_reflect__$Type_$static_$extension.kind(this.__type__),22) && !stdgo__$internal_internal_reflect_Reflect_isReflectTypeRef(this.__type__) ? this.__self__ : stdgo_Pointer.get_value(this.__self__),this.__type__);
	}
	,__class__: stdgo__$internal_internal_reflect__$Type_$asInterface
};
function stdgo__$internal_internal_reflect_Reflect_isExported(name) {
	return HxOverrides.cca(name,0) != 95;
}
function stdgo__$internal_internal_reflect_Reflect_formatGoFieldName(name) {
	return (name.charAt(0) == "_" ? "" : name.charAt(0).toUpperCase()) + HxOverrides.substr(name,1,null);
}
function stdgo__$internal_internal_reflect_Reflect_directlyAssignable(t,v) {
	var tgt = t._common();
	var vgt = v._common();
	if(vgt._hx_index == 8) {
		var path = vgt.path;
		if(tgt._hx_index == 8) {
			var path2 = tgt.path;
			return path == path2;
		} else {
			return false;
		}
	}
	tgt = stdgo__$internal_internal_reflect_Reflect_getUnderlying(tgt);
	vgt = stdgo__$internal_internal_reflect_Reflect_getUnderlying(vgt);
	switch(tgt._hx_index) {
	case 2:
		var variadic = tgt.variadic;
		var input = tgt.params.get();
		var output = tgt.results.get();
		if(vgt._hx_index == 2) {
			var variadic2 = vgt.variadic;
			var input2 = vgt.params.get();
			var output2 = vgt.results.get();
			if(variadic != variadic2) {
				return false;
			}
			if(input.length != input2.length) {
				return false;
			}
			if(output.length != output2.length) {
				return false;
			}
			var _g = 0;
			var _g1 = input.length;
			while(_g < _g1) {
				var i = _g++;
				if(!stdgo__$internal_internal_reflect_Reflect_identicalType(input[i],input2[i])) {
					return false;
				}
			}
			var _g = 0;
			var _g1 = output.length;
			while(_g < _g1) {
				var i = _g++;
				if(!stdgo__$internal_internal_reflect_Reflect_identicalType(output[i],output2[i])) {
					return false;
				}
			}
			return true;
		} else {
			return false;
		}
		break;
	case 3:
		var kind = tgt.kind;
		if(vgt._hx_index == 3) {
			var kind2 = vgt.kind;
			var untype = function(kind,kind2) {
				var index = kind2;
				var min = 0;
				var max = 0;
				switch(kind) {
				case 20:
					min = 2;
					max = 6;
					break;
				case 22:
					min = 13;
					max = 14;
					break;
				case 23:
					min = 15;
					max = 16;
					break;
				default:
					return false;
				}
				if(min <= index) {
					return max >= index;
				} else {
					return false;
				}
			};
			if(untype(kind,kind2)) {
				return true;
			}
			if(untype(kind2,kind)) {
				return true;
			}
			if((kind == 2 || kind == 5) && (kind2 == 2 || kind2 == 5)) {
				return true;
			}
			return kind == kind2;
		} else {
			return false;
		}
		break;
	case 6:
		return false;
	case 7:
		var elem = tgt.elem.get();
		switch(vgt._hx_index) {
		case 7:
			var elem2 = vgt.elem.get();
			return stdgo__$internal_internal_reflect_Reflect_identicalType(elem,elem2);
		case 14:
			var _gdir = vgt.dir;
			var elem2 = vgt.elem.get();
			return stdgo__$internal_internal_reflect_Reflect_identicalType(elem,elem2);
		default:
			return false;
		}
		break;
	case 9:
		var path = tgt.path;
		if(vgt._hx_index == 9) {
			var path2 = vgt.path;
			return path == path2;
		} else {
			return false;
		}
		break;
	case 10:
		var fields = tgt.fields;
		if(vgt._hx_index == 10) {
			var fields2 = vgt.fields;
			if(fields.length != fields2.length) {
				return false;
			}
			var _g = 0;
			var _g1 = fields.length;
			while(_g < _g1) {
				var i = _g++;
				var e = [new stdgo__$internal_internal_reflect__$Type(fields[i].type.get())];
				var i2 = new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData((function(e) {
					return function() {
						return e[0];
					};
				})(e),(function(e) {
					return function(v) {
						return e[0] = v;
					};
				})(e),false),new stdgo__$internal_internal_reflect__$Type(fields[i].type.get()));
				var e1 = [new stdgo__$internal_internal_reflect__$Type(fields2[i].type.get())];
				var i3 = new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData((function(e) {
					return function() {
						return e[0];
					};
				})(e1),(function(e) {
					return function(v) {
						return e[0] = v;
					};
				})(e1),false),new stdgo__$internal_internal_reflect__$Type(fields2[i].type.get()));
				if(!stdgo__$internal_internal_reflect_Reflect_directlyAssignable(i2,i3)) {
					return false;
				}
			}
			return true;
		} else {
			return false;
		}
		break;
	case 11:
		var e2 = tgt.elem.get();
		switch(vgt._hx_index) {
		case 11:
			var e21 = vgt.elem.get();
			return stdgo__$internal_internal_reflect_Reflect_identicalType(e2,e21);
		case 15:
			var e21 = vgt.elem.get();
			return stdgo__$internal_internal_reflect_Reflect_identicalType(e2,e21);
		default:
			return stdgo__$internal_internal_reflect_Reflect_identicalType(e2,vgt);
		}
		break;
	case 12:
		var elem = tgt.elem.get();
		var len = tgt.len;
		if(vgt._hx_index == 12) {
			var elem2 = vgt.elem.get();
			var len2 = vgt.len;
			if(len != -1 && len2 != -1 && len != len2) {
				return false;
			}
			return stdgo__$internal_internal_reflect_Reflect_identicalType(elem,elem2);
		} else {
			return false;
		}
		break;
	case 13:
		var key = tgt.key.get();
		var value = tgt.value.get();
		if(vgt._hx_index == 13) {
			var key2 = vgt.key.get();
			var value2 = vgt.value.get();
			if(stdgo__$internal_internal_reflect_Reflect_identicalType(key,key2)) {
				return stdgo__$internal_internal_reflect_Reflect_identicalType(value,value2);
			} else {
				return false;
			}
		} else {
			return false;
		}
		break;
	case 14:
		var _gdir = tgt.dir;
		var elem = tgt.elem.get();
		switch(vgt._hx_index) {
		case 7:
			var elem2 = vgt.elem.get();
			return stdgo__$internal_internal_reflect_Reflect_identicalType(elem,elem2);
		case 14:
			var _gdir = vgt.dir;
			var elem2 = vgt.elem.get();
			return stdgo__$internal_internal_reflect_Reflect_identicalType(elem,elem2);
		default:
			return false;
		}
		break;
	case 15:
		var e2 = tgt.elem.get();
		switch(vgt._hx_index) {
		case 11:
			var e21 = vgt.elem.get();
			return stdgo__$internal_internal_reflect_Reflect_identicalType(e2,e21);
		case 15:
			var e21 = vgt.elem.get();
			return stdgo__$internal_internal_reflect_Reflect_identicalType(e2,e21);
		default:
			return stdgo__$internal_internal_reflect_Reflect_identicalType(e2,vgt);
		}
		break;
	default:
		throw haxe_Exception.thrown("unable to check for assignability: " + Std.string(tgt));
	}
}
function stdgo__$internal_internal_reflect_Reflect_identicalType(t,v) {
	switch(t._hx_index) {
	case 2:
		return false;
	case 3:
		var kind = t.kind;
		if(v._hx_index == 3) {
			var kind2 = v.kind;
			return kind == kind2;
		} else {
			return false;
		}
		break;
	case 6:
		var empty = t.empty;
		var methods = t.methods;
		if(v._hx_index == 6) {
			var empty2 = v.empty;
			var methods2 = v.methods;
			if(empty == true && empty2 == true) {
				return true;
			}
			if(methods.length != methods2.length) {
				return false;
			}
			var _g = 0;
			var _g1 = methods.length;
			while(_g < _g1) {
				var i = _g++;
				if(methods[i].name != methods2[i].name) {
					return false;
				}
				if(stdgo__$internal_internal_reflect_Reflect_identicalType(methods[i].type.get(),methods2[i].type.get())) {
					return false;
				}
			}
			return true;
		} else {
			return false;
		}
		break;
	case 7:
		var t1 = t.elem.get();
		switch(v._hx_index) {
		case 7:
			var t2 = v.elem.get();
			if(t1._hx_index == t2._hx_index) {
				return stdgo__$internal_internal_reflect_Reflect_identicalType(t1,t2);
			} else {
				return false;
			}
			break;
		case 11:
			var t2 = v.elem.get();
			if(t1._hx_index == t2._hx_index) {
				return stdgo__$internal_internal_reflect_Reflect_identicalType(t1,t2);
			} else {
				return false;
			}
			break;
		case 15:
			var t2 = v.elem.get();
			if(t1._hx_index == t2._hx_index) {
				return stdgo__$internal_internal_reflect_Reflect_identicalType(t1,t2);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
		break;
	case 8:
		var path = t.path;
		if(v._hx_index == 8) {
			var path2 = v.path;
			return path == path2;
		} else {
			return false;
		}
		break;
	case 9:
		var path = t.path;
		switch(v._hx_index) {
		case 8:
			var path2 = v.path;
			return path == path2;
		case 9:
			var path2 = v.path;
			return path == path2;
		default:
			return false;
		}
		break;
	case 11:
		var t1 = t.elem.get();
		switch(v._hx_index) {
		case 7:
			var t2 = v.elem.get();
			if(t1._hx_index == t2._hx_index) {
				return stdgo__$internal_internal_reflect_Reflect_identicalType(t1,t2);
			} else {
				return false;
			}
			break;
		case 11:
			var t2 = v.elem.get();
			if(t1._hx_index == t2._hx_index) {
				return stdgo__$internal_internal_reflect_Reflect_identicalType(t1,t2);
			} else {
				return false;
			}
			break;
		case 15:
			var t2 = v.elem.get();
			if(t1._hx_index == t2._hx_index) {
				return stdgo__$internal_internal_reflect_Reflect_identicalType(t1,t2);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
		break;
	case 12:
		var elem = t.elem.get();
		var len = t.len;
		if(v._hx_index == 12) {
			var elem2 = v.elem.get();
			var len2 = v.len;
			if(len != -1 && len2 != -1 && len != len2) {
				return false;
			}
			return stdgo__$internal_internal_reflect_Reflect_identicalType(elem,elem2);
		} else {
			return false;
		}
		break;
	case 13:
		var key = t.key.get();
		var value = t.value.get();
		if(v._hx_index == 13) {
			var key2 = v.key.get();
			var value2 = v.value.get();
			if(stdgo__$internal_internal_reflect_Reflect_identicalType(key,key2)) {
				return stdgo__$internal_internal_reflect_Reflect_identicalType(value,value2);
			} else {
				return false;
			}
		} else {
			return false;
		}
		break;
	case 14:
		var len = t.dir;
		var elem = t.elem.get();
		if(v._hx_index == 14) {
			var len2 = v.dir;
			var elem2 = v.elem.get();
			if(len == -1 || len2 == -1 || len == len2) {
				return stdgo__$internal_internal_reflect_Reflect_identicalType(elem,elem2);
			} else {
				return false;
			}
		} else {
			return false;
		}
		break;
	case 15:
		var t1 = t.elem.get();
		switch(v._hx_index) {
		case 7:
			var t2 = v.elem.get();
			if(t1._hx_index == t2._hx_index) {
				return stdgo__$internal_internal_reflect_Reflect_identicalType(t1,t2);
			} else {
				return false;
			}
			break;
		case 11:
			var t2 = v.elem.get();
			if(t1._hx_index == t2._hx_index) {
				return stdgo__$internal_internal_reflect_Reflect_identicalType(t1,t2);
			} else {
				return false;
			}
			break;
		case 15:
			var t2 = v.elem.get();
			if(t1._hx_index == t2._hx_index) {
				return stdgo__$internal_internal_reflect_Reflect_identicalType(t1,t2);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
		break;
	default:
		haxe_Log.trace(t,{ fileName : "stdgo/_internal/internal/reflect/Reflect.hx", lineNumber : 372, className : "stdgo._internal.internal.reflect._Reflect.Reflect_Fields_", methodName : "identicalType"});
		throw haxe_Exception.thrown("identical type not supported");
	}
}
function stdgo__$internal_internal_reflect_Reflect_implementsMethod(t,v) {
	var interfacePath = "";
	var gt = t._common();
	var vgt = v._common();
	var gtIsPointer = false;
	var vgtIsPointer = false;
	if(stdgo__$internal_internal_reflect_Reflect_isPointer(gt) || stdgo__$internal_internal_reflect_Reflect_isRef(gt)) {
		gtIsPointer = true;
		gt = stdgo__$internal_internal_reflect_Reflect_getElem(gt);
	}
	if(stdgo__$internal_internal_reflect_Reflect_isPointer(vgt) || stdgo__$internal_internal_reflect_Reflect_isRef(vgt)) {
		vgtIsPointer = true;
		vgt = stdgo__$internal_internal_reflect_Reflect_getElem(vgt);
	}
	switch(gt._hx_index) {
	case 6:
		var methods = gt.methods;
		if(methods == null || methods.length == 0) {
			return true;
		}
		switch(vgt._hx_index) {
		case 6:
			var methods2 = vgt.methods;
			if(methods.length > methods2.length) {
				return false;
			}
			var found = false;
			var _g = 0;
			var _g1 = methods.length;
			while(_g < _g1) {
				var i = _g++;
				found = false;
				var _g2 = 0;
				var _g3 = methods2.length;
				while(_g2 < _g3) {
					var j = _g2++;
					if(methods[i].name != methods2[j].name) {
						continue;
					}
					var tmp = new stdgo__$internal_internal_reflect__$Type(methods[i].type.get());
					var e = [new stdgo__$internal_internal_reflect__$Type(methods2[j].type.get())];
					if(!stdgo__$internal_internal_reflect__$Type_$static_$extension.assignableTo(tmp,new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData((function(e) {
						return function() {
							return e[0];
						};
					})(e),(function(e) {
						return function(v) {
							return e[0] = v;
						};
					})(e),false),new stdgo__$internal_internal_reflect__$Type(methods2[j].type.get())))) {
						return false;
					}
					found = true;
					break;
				}
				if(!found) {
					return false;
				}
			}
			return true;
		case 8:
			var methods2 = vgt.methods;
			if(methods.length > methods2.length) {
				return false;
			}
			var found = false;
			var _g = 0;
			var _g1 = methods.length;
			while(_g < _g1) {
				var i = _g++;
				found = false;
				var _g2 = 0;
				var _g3 = methods2.length;
				while(_g2 < _g3) {
					var j = _g2++;
					if(methods[i].name != methods2[j].name) {
						continue;
					}
					var tmp = new stdgo__$internal_internal_reflect__$Type(methods[i].type.get());
					var e1 = [new stdgo__$internal_internal_reflect__$Type(methods2[j].type.get())];
					if(!stdgo__$internal_internal_reflect__$Type_$static_$extension.assignableTo(tmp,new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData((function(e) {
						return function() {
							return e[0];
						};
					})(e1),(function(e) {
						return function(v) {
							return e[0] = v;
						};
					})(e1),false),new stdgo__$internal_internal_reflect__$Type(methods2[j].type.get())))) {
						return false;
					}
					found = true;
					break;
				}
				if(!found) {
					return false;
				}
			}
			return true;
		default:
			return false;
		}
		break;
	case 8:
		if(gt.type._hx_index == 6) {
			var methods = gt.methods;
			if(methods == null || methods.length == 0) {
				return true;
			}
			switch(vgt._hx_index) {
			case 6:
				var methods2 = vgt.methods;
				if(methods.length > methods2.length) {
					return false;
				}
				var found = false;
				var _g = 0;
				var _g1 = methods.length;
				while(_g < _g1) {
					var i = _g++;
					found = false;
					var _g2 = 0;
					var _g3 = methods2.length;
					while(_g2 < _g3) {
						var j = _g2++;
						if(methods[i].name != methods2[j].name) {
							continue;
						}
						var tmp = new stdgo__$internal_internal_reflect__$Type(methods[i].type.get());
						var e2 = [new stdgo__$internal_internal_reflect__$Type(methods2[j].type.get())];
						if(!stdgo__$internal_internal_reflect__$Type_$static_$extension.assignableTo(tmp,new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData((function(e) {
							return function() {
								return e[0];
							};
						})(e2),(function(e) {
							return function(v) {
								return e[0] = v;
							};
						})(e2),false),new stdgo__$internal_internal_reflect__$Type(methods2[j].type.get())))) {
							return false;
						}
						found = true;
						break;
					}
					if(!found) {
						return false;
					}
				}
				return true;
			case 8:
				var methods2 = vgt.methods;
				if(methods.length > methods2.length) {
					return false;
				}
				var found = false;
				var _g = 0;
				var _g1 = methods.length;
				while(_g < _g1) {
					var i = _g++;
					found = false;
					var _g2 = 0;
					var _g3 = methods2.length;
					while(_g2 < _g3) {
						var j = _g2++;
						if(methods[i].name != methods2[j].name) {
							continue;
						}
						var tmp = new stdgo__$internal_internal_reflect__$Type(methods[i].type.get());
						var e3 = [new stdgo__$internal_internal_reflect__$Type(methods2[j].type.get())];
						if(!stdgo__$internal_internal_reflect__$Type_$static_$extension.assignableTo(tmp,new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData((function(e) {
							return function() {
								return e[0];
							};
						})(e3),(function(e) {
							return function(v) {
								return e[0] = v;
							};
						})(e3),false),new stdgo__$internal_internal_reflect__$Type(methods2[j].type.get())))) {
							return false;
						}
						found = true;
						break;
					}
					if(!found) {
						return false;
					}
				}
				return true;
			default:
				return false;
			}
		} else {
			return false;
		}
		break;
	default:
		return false;
	}
}
function stdgo__$internal_internal_reflect_Reflect_isNamed(type) {
	switch(type._hx_index) {
	case 8:
		var underlying = type.type;
		switch(underlying._hx_index) {
		case 6:
			return false;
		case 8:
			var underlying1 = underlying.type;
			return stdgo__$internal_internal_reflect_Reflect_isNamed(underlying1);
		case 10:
			return true;
		default:
			return true;
		}
		break;
	case 15:
		var underlying = type.elem.get();
		return stdgo__$internal_internal_reflect_Reflect_isNamed(underlying);
	default:
		return false;
	}
}
function stdgo__$internal_internal_reflect_Reflect_getElem(type) {
	if(type == null) {
		return type;
	}
	switch(type._hx_index) {
	case 4:
		var _gname = type.name;
		var type1 = type.type.get();
		return stdgo__$internal_internal_reflect_Reflect_getElem(type1);
	case 7:
		var elem = type.elem.get();
		return elem;
	case 8:
		var underlying = type.type;
		var newUnderlying = stdgo__$internal_internal_reflect_Reflect_getElem(underlying);
		if(newUnderlying == underlying) {
			return type;
		} else {
			return newUnderlying;
		}
		break;
	case 11:
		var elem = type.elem.get();
		return elem;
	case 12:
		var elem = type.elem.get();
		return elem;
	case 15:
		var elem = type.elem.get();
		return elem;
	default:
		return type;
	}
}
function stdgo__$internal_internal_reflect_Reflect_isPointer(type) {
	switch(type._hx_index) {
	case 4:
		var _gname = type.name;
		var elem = type.type.get();
		return stdgo__$internal_internal_reflect_Reflect_isPointer(elem);
	case 8:
		var elem = type.type;
		return stdgo__$internal_internal_reflect_Reflect_isPointer(elem);
	case 11:
		return true;
	case 15:
		return false;
	default:
		return false;
	}
}
function stdgo__$internal_internal_reflect_Reflect_isRef(type) {
	if(type._hx_index == 15) {
		return true;
	} else {
		return false;
	}
}
function stdgo__$internal_internal_reflect_Reflect_isReflectTypeRef(type) {
	return stdgo__$internal_internal_reflect_Reflect_isRef(type._common());
}
function stdgo__$internal_internal_reflect_Reflect_asInterfaceValue(value,gt) {
	if(gt._hx_index == 8) {
		var path = gt.path;
		var pack = path.split(".");
		HxOverrides.remove(pack,pack[pack.length - 2]);
		var name = pack.join(".") + "_asInterface";
		var cl = $hxClasses[name];
		if(cl == null) {
			return value;
		}
		var isPointer = false;
		var typ = Type.typeof(value);
		if(typ._hx_index == 6) {
			var cl1 = typ.c;
			var className = cl1.__name__;
			if(className == "stdgo.PointerData") {
				isPointer = true;
			}
		}
		return Type.createInstance(cl,[isPointer ? value : new stdgo_PointerData(function() {
			return value;
		},function(__tmp__) {
			value = __tmp__;
			return value;
		},false),new stdgo__$internal_internal_reflect__$Type(gt)]);
	}
	return value;
}
function stdgo__$internal_internal_reflect_Reflect_unroll(parent,child) {
	var parentName = "";
	var parentType = null;
	if(parent._hx_index == 8) {
		var path = parent.path;
		parentName = path;
	} else {
		return child;
	}
	switch(child._hx_index) {
	case 1:
		return stdgo__$internal_internal_reflect_GoType.invalidType;
	case 2:
		var variadic = child.variadic;
		var params = child.params.get();
		var results = child.results.get();
		var recv = child.recv.get();
		var typeParams = child.typeParams;
		var tmp = typeParams == null ? null : { get : function() {
			var _this = typeParams.get();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = stdgo__$internal_internal_reflect_Reflect_unroll(parent,_this[i]);
			}
			return result;
		}};
		return stdgo__$internal_internal_reflect_GoType.signature(variadic,{ get : function() {
			var result = new Array(params.length);
			var _g = 0;
			var _g1 = params.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = stdgo__$internal_internal_reflect_Reflect_unroll(parent,params[i]);
			}
			return result;
		}},{ get : function() {
			var result = new Array(results.length);
			var _g = 0;
			var _g1 = results.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = stdgo__$internal_internal_reflect_Reflect_unroll(parent,results[i]);
			}
			return result;
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_Reflect_unroll(parent,recv);
		}},tmp);
	case 3:
		return child;
	case 6:
		return child;
	case 7:
		var elem = child.elem.get();
		return stdgo__$internal_internal_reflect_GoType.sliceType({ get : function() {
			return stdgo__$internal_internal_reflect_Reflect_unroll(parent,elem);
		}});
	case 8:
		var path = child.path;
		var methods = child.methods;
		var type = child.type;
		return stdgo__$internal_internal_reflect_GoType.named(path,methods,stdgo__$internal_internal_reflect_Reflect_unroll(parent,type),false,{ get : function() {
			return null;
		}});
	case 9:
		var childName = child.path;
		if(childName == parentName) {
			return parent;
		} else {
			return child;
		}
		break;
	case 10:
		var fields = child.fields;
		var _g = [];
		var _g1 = 0;
		while(_g1 < fields.length) {
			var field = [fields[_g1]];
			++_g1;
			_g.push(new stdgo__$internal_internal_reflect_FieldType(field[0].name,{ get : (function(field) {
				return function() {
					return stdgo__$internal_internal_reflect_Reflect_unroll(parent,field[0].type.get());
				};
			})(field)},field[0].tag,field[0].embedded,field[0].optional));
		}
		return stdgo__$internal_internal_reflect_GoType.structType(_g);
	case 11:
		var elem1 = child.elem.get();
		return stdgo__$internal_internal_reflect_GoType.pointerType({ get : function() {
			return stdgo__$internal_internal_reflect_Reflect_unroll(parent,elem1);
		}});
	case 12:
		var elem2 = child.elem.get();
		var len = child.len;
		return stdgo__$internal_internal_reflect_GoType.arrayType({ get : function() {
			return stdgo__$internal_internal_reflect_Reflect_unroll(parent,elem2);
		}},len);
	case 13:
		var key = child.key.get();
		var value = child.value.get();
		return stdgo__$internal_internal_reflect_GoType.mapType({ get : function() {
			return stdgo__$internal_internal_reflect_Reflect_unroll(parent,key);
		}},{ get : function() {
			return stdgo__$internal_internal_reflect_Reflect_unroll(parent,value);
		}});
	case 15:
		var elem3 = child.elem.get();
		return stdgo__$internal_internal_reflect_GoType.refType({ get : function() {
			return stdgo__$internal_internal_reflect_Reflect_unroll(parent,elem3);
		}});
	default:
		throw haxe_Exception.thrown("unsupported unroll gt type: " + Std.string(child));
	}
}
function stdgo__$internal_internal_reflect_Reflect_getUnderlying(gt,once) {
	if(once == null) {
		once = false;
	}
	if(gt == null) {
		return null;
	}
	if(gt._hx_index == 8) {
		var type = gt.type;
		if(once) {
			return type;
		} else {
			return stdgo__$internal_internal_reflect_Reflect_getUnderlying(type);
		}
	} else {
		return gt;
	}
}
function stdgo__$internal_internal_reflect_Reflect__set(value) {
	if(value.underlyingValue != null) {
		if(value.underlyingIndex == -1) {
			if(value.underlyingKey != null) {
				value.underlyingValue.set(value.underlyingKey,value.value.value);
			} else {
				value.underlyingValue.set(value.value.value);
			}
		} else {
			value.underlyingValue.set(value.underlyingIndex,value.value.value);
		}
	}
}
function stdgo__$internal_math_Math_$_$exp__exp(_x) {
	if(stdgo__$internal_math_Math_$isnan_isNaN(_x) || stdgo__$internal_math_Math_$isinf_isInf(_x,1)) {
		return _x;
	} else if(stdgo__$internal_math_Math_$isinf_isInf(_x,-1)) {
		return 0;
	} else if(stdgo_GoFloat64.gt(_x,709.782712893384)) {
		return stdgo__$internal_math_Math_$inf_inf(1);
	} else if(stdgo_GoFloat64.lt(_x,-745.1332191019411)) {
		return 0;
	} else if(stdgo_GoFloat64.lt(-3.725290298461914e-09,_x) && stdgo_GoFloat64.lt(_x,3.725290298461914e-09)) {
		return stdgo_GoFloat64.add(1,_x);
	}
	var _k = 0;
	if(stdgo_GoFloat64.lt(_x,0)) {
		_k = stdgo_GoFloat64.toInt(stdgo_GoFloat64.sub(stdgo_GoFloat64.mul(1.4426950408889634,_x),0.5));
	} else if(stdgo_GoFloat64.gt(_x,0)) {
		_k = stdgo_GoFloat64.toInt(stdgo_GoFloat64.add(stdgo_GoFloat64.mul(1.4426950408889634,_x),0.5));
	}
	var _hi = stdgo_GoFloat64.sub(_x,stdgo_GoFloat64.mul(_k,0.6931471803691238));
	var _lo = stdgo_GoFloat64.mul(_k,1.9082149292705877e-10);
	return stdgo__$internal_math_Math_$_$expmulti__expmulti(_hi,_lo,_k);
}
function stdgo__$internal_math_Math_$isinf_isInf(_f,_sign) {
	if(!(_sign >= 0 && stdgo_GoFloat64.eq(_f,Infinity))) {
		if(_sign <= 0) {
			return stdgo_GoFloat64.eq(_f,-Infinity);
		} else {
			return false;
		}
	} else {
		return true;
	}
}
function stdgo__$internal_math_Math_$inf_inf(_sign) {
	if(stdgo_GoInt32.gte(_sign,0)) {
		return Infinity;
	}
	return -Infinity;
}
function stdgo__$internal_math_Math_$_$expmulti__expmulti(_hi,_lo,_k) {
	var _r = stdgo_GoFloat64.sub(_hi,_lo);
	var _t = stdgo_GoFloat64.mul(_r,_r);
	var _c = stdgo_GoFloat64.sub(_r,stdgo_GoFloat64.mul(_t,stdgo_GoFloat64.add(0.16666666666666666,stdgo_GoFloat64.mul(_t,stdgo_GoFloat64.add(-0.0027777777777015593,stdgo_GoFloat64.mul(_t,stdgo_GoFloat64.add(6.613756321437934e-05,stdgo_GoFloat64.mul(_t,stdgo_GoFloat64.add(-1.6533902205465252e-06,stdgo_GoFloat64.mul(_t,4.1381367970572385e-08))))))))));
	var _y = stdgo_GoFloat64.sub(1,stdgo_GoFloat64.sub(stdgo_GoFloat64.sub(_lo,stdgo_GoFloat64.div(stdgo_GoFloat64.mul(_r,_c),stdgo_GoFloat64.sub(2,_c))),_hi));
	return stdgo__$internal_math_Math_$ldexp_ldexp(_y,_k);
}
function stdgo__$internal_math_Math_$signbit_signbit(_x) {
	if(isNaN(_x)) {
		return false;
	}
	return stdgo_GoUInt64.neq(stdgo_GoUInt64.and(stdgo__$internal_math_Math_$float64bits_float64bits(_x),stdgo_GoUInt64.shl(stdgo_GoNumber_ofIntUInt64(1),stdgo_GoNumber_ofIntUInt64(63))),stdgo_GoNumber_ofIntUInt64(0));
}
function stdgo__$internal_math_Math_$ldexp_ldexp(_frac,_exp) {
	return stdgo__$internal_math_Math_$_$ldexp__ldexp(_frac,_exp);
}
function stdgo__$internal_math_Math_$_$ldexp__ldexp(_frac,_exp) {
	if(stdgo_GoFloat64.eq(_frac,0)) {
		return _frac;
	} else if(stdgo__$internal_math_Math_$isinf_isInf(_frac,0) || stdgo__$internal_math_Math_$isnan_isNaN(_frac)) {
		return _frac;
	}
	var __tmp__ = stdgo__$internal_math_Math_$_$normalize__normalize(_frac);
	var _frac = __tmp__._0;
	var _e = __tmp__._1;
	_exp = stdgo_GoInt32.add(_exp,_e);
	var _x = stdgo__$internal_math_Math_$float64bits_float64bits(_frac);
	_exp = stdgo_GoInt32.add(_exp,stdgo_GoInt32.sub(stdgo_GoInt32.and(stdgo_GoNumber_toIntInt64(stdgo_GoUInt64.shr(_x,new haxe__$Int64__$_$_$Int64(0,52))),2047),1023));
	if(stdgo_GoInt32.lt(_exp,-1075)) {
		return stdgo__$internal_math_Math_$copysign_copysign(0,_frac);
	}
	if(stdgo_GoInt32.gt(_exp,1023)) {
		if(stdgo_GoFloat64.lt(_frac,0)) {
			return stdgo__$internal_math_Math_$inf_inf(-1);
		}
		return stdgo__$internal_math_Math_$inf_inf(1);
	}
	var _m = 1;
	if(stdgo_GoInt32.lt(_exp,-1022)) {
		_exp = stdgo_GoInt32.add(_exp,53);
		_m = 1.1102230246251565e-16;
	}
	_x = stdgo_GoUInt64.and(_x,stdgo_GoUInt64.xor(new haxe__$Int64__$_$_$Int64(2146435072,0),stdgo_GoNumber_ofIntUInt64(-1)));
	_x = stdgo_GoUInt64.or(_x,stdgo_GoUInt64.shl(stdgo_GoNumber_ofIntUInt64(stdgo_GoInt32.add(_exp,1023)),new haxe__$Int64__$_$_$Int64(0,52)));
	return stdgo_GoFloat64.mul(_m,stdgo__$internal_math_Math_$float64frombits_float64frombits(_x));
}
function stdgo__$internal_math_Math_$_$normalize__normalize(_x) {
	var _y = 0;
	var _exp = 0;
	if(stdgo_GoFloat64.lt(stdgo__$internal_math_Math_$abs_abs(_x),2.2250738585072014e-308)) {
		var __tmp__ = { _0 : stdgo_GoFloat64.mul(_x,4.503599627370496e+15), _1 : -52};
		_y = __tmp__._0;
		_exp = __tmp__._1;
		return __tmp__;
	}
	var __tmp__ = { _0 : _x, _1 : 0};
	_y = __tmp__._0;
	_exp = __tmp__._1;
	return __tmp__;
}
function stdgo__$internal_math_Math_$abs_abs(_x) {
	return Math.abs(_x);
}
function stdgo__$internal_math_Math_$_$exp2__exp2(_x) {
	if(stdgo__$internal_math_Math_$isnan_isNaN(_x) || stdgo__$internal_math_Math_$isinf_isInf(_x,1)) {
		return _x;
	} else if(stdgo__$internal_math_Math_$isinf_isInf(_x,-1)) {
		return 0;
	} else if(stdgo_GoFloat64.gt(_x,1023.9999999999999)) {
		return stdgo__$internal_math_Math_$inf_inf(1);
	} else if(stdgo_GoFloat64.lt(_x,-1074)) {
		return 0;
	}
	var _k = 0;
	if(stdgo_GoFloat64.gt(_x,0)) {
		_k = stdgo_GoFloat64.toInt(stdgo_GoFloat64.add(_x,0.5));
	} else if(stdgo_GoFloat64.lt(_x,0)) {
		_k = stdgo_GoFloat64.toInt(stdgo_GoFloat64.sub(_x,0.5));
	}
	var _t = stdgo_GoFloat64.sub(_x,_k);
	var _hi = stdgo_GoFloat64.mul(_t,0.6931471803691238);
	var _lo = stdgo_GoFloat64.mul(stdgo_GoFloat64.neg(_t),1.9082149292705877e-10);
	return stdgo__$internal_math_Math_$_$expmulti__expmulti(_hi,_lo,_k);
}
function stdgo__$internal_math_Math_$_$hypot__hypot(_p,_q) {
	var __tmp__0 = stdgo__$internal_math_Math_$abs_abs(_p);
	var __tmp__1 = stdgo__$internal_math_Math_$abs_abs(_q);
	_p = __tmp__0;
	_q = __tmp__1;
	if(stdgo__$internal_math_Math_$isinf_isInf(_p,1) || stdgo__$internal_math_Math_$isinf_isInf(_q,1)) {
		return stdgo__$internal_math_Math_$inf_inf(1);
	} else if(stdgo__$internal_math_Math_$isnan_isNaN(_p) || stdgo__$internal_math_Math_$isnan_isNaN(_q)) {
		return stdgo__$internal_math_Math_$nan_naN();
	}
	if(stdgo_GoFloat64.lt(_p,_q)) {
		var __tmp__0 = _q;
		var __tmp__1 = _p;
		_p = __tmp__0;
		_q = __tmp__1;
	}
	if(stdgo_GoFloat64.eq(_p,0)) {
		return 0;
	}
	_q = stdgo_GoFloat64.div(_q,_p);
	return stdgo_GoFloat64.mul(_p,stdgo__$internal_math_Math_$sqrt_sqrt(stdgo_GoFloat64.add(1,stdgo_GoFloat64.mul(_q,_q))));
}
function stdgo__$internal_math_Math_$sqrt_sqrt(_x) {
	return Math.sqrt(_x);
}
function stdgo__$internal_math_Math_$_$sqrt__sqrt(_x) {
	return Math.sqrt(_x);
}
function stdgo__$internal_math_Math_$_$trigreduce__trigReduce(_x) {
	var _j = stdgo_GoNumber_ofIntUInt64(0);
	var _z = 0;
	if(stdgo_GoFloat64.lt(_x,0.7853981633974483)) {
		var __tmp__ = { _0 : new haxe__$Int64__$_$_$Int64(0,0), _1 : _x};
		_j = __tmp__._0;
		_z = __tmp__._1;
		return __tmp__;
	}
	var _ix = stdgo__$internal_math_Math_$float64bits_float64bits(_x);
	var _exp = stdgo_GoInt32.sub(stdgo_GoInt32.sub(stdgo_GoNumber_toIntInt64(stdgo_GoUInt64.and(stdgo_GoUInt64.shr(_ix,new haxe__$Int64__$_$_$Int64(0,52)),new haxe__$Int64__$_$_$Int64(0,2047))),1023),52);
	_ix = stdgo_GoUInt64.and(_ix,stdgo_GoUInt64.xor(new haxe__$Int64__$_$_$Int64(2146435072,0),stdgo_GoNumber_ofIntUInt64(-1)));
	_ix = stdgo_GoUInt64.or(_ix,new haxe__$Int64__$_$_$Int64(1048576,0));
	var __0 = stdgo_GoUInt32.div(stdgo_GoNumber_clampUInt(stdgo_GoInt32.add(_exp,61)),64);
	var __1 = stdgo_GoUInt32.mod(stdgo_GoNumber_clampUInt(stdgo_GoInt32.add(_exp,61)),64);
	var _bitshift = __1;
	var _digit = __0;
	var _z0 = stdgo_GoUInt64.or(stdgo_GoUInt64.shl(stdgo_GoArray.__get__(stdgo__$internal_math_Math_$_$mpi4__mPi4,_digit),stdgo_GoNumber_ofUIntUInt64(_bitshift)),stdgo_GoUInt64.shr(stdgo_GoArray.__get__(stdgo__$internal_math_Math_$_$mpi4__mPi4,stdgo_GoUInt32.add(_digit,1)),stdgo_GoNumber_ofUIntUInt64(stdgo_GoUInt32.sub(64,_bitshift))));
	var _z1 = stdgo_GoUInt64.or(stdgo_GoUInt64.shl(stdgo_GoArray.__get__(stdgo__$internal_math_Math_$_$mpi4__mPi4,stdgo_GoUInt32.add(_digit,1)),stdgo_GoNumber_ofUIntUInt64(_bitshift)),stdgo_GoUInt64.shr(stdgo_GoArray.__get__(stdgo__$internal_math_Math_$_$mpi4__mPi4,stdgo_GoUInt32.add(_digit,2)),stdgo_GoNumber_ofUIntUInt64(stdgo_GoUInt32.sub(64,_bitshift))));
	var _z2 = stdgo_GoUInt64.or(stdgo_GoUInt64.shl(stdgo_GoArray.__get__(stdgo__$internal_math_Math_$_$mpi4__mPi4,stdgo_GoUInt32.add(_digit,2)),stdgo_GoNumber_ofUIntUInt64(_bitshift)),stdgo_GoUInt64.shr(stdgo_GoArray.__get__(stdgo__$internal_math_Math_$_$mpi4__mPi4,stdgo_GoUInt32.add(_digit,3)),stdgo_GoNumber_ofUIntUInt64(stdgo_GoUInt32.sub(64,_bitshift))));
	var __tmp__ = stdgo__$internal_math_bits_Bits_$mul64_mul64(_z2,_ix);
	var _z2hi = __tmp__._0;
	var __0 = __tmp__._1;
	var __tmp__ = stdgo__$internal_math_bits_Bits_$mul64_mul64(_z1,_ix);
	var _z1hi = __tmp__._0;
	var _z1lo = __tmp__._1;
	var _z0lo = stdgo_GoUInt64.mul(_z0,_ix);
	var __tmp__ = stdgo__$internal_math_bits_Bits_$add64_add64(_z1lo,_z2hi,new haxe__$Int64__$_$_$Int64(0,0));
	var _lo = __tmp__._0;
	var _c = __tmp__._1;
	var __tmp__ = stdgo__$internal_math_bits_Bits_$add64_add64(_z0lo,_z1hi,_c);
	var _hi = __tmp__._0;
	var __1 = __tmp__._1;
	_j = stdgo_GoUInt64.shr(_hi,new haxe__$Int64__$_$_$Int64(0,61));
	_hi = stdgo_GoUInt64.or(stdgo_GoUInt64.shl(_hi,new haxe__$Int64__$_$_$Int64(0,3)),stdgo_GoUInt64.shr(_lo,new haxe__$Int64__$_$_$Int64(0,61)));
	var _lz = stdgo_GoNumber_clampUInt(stdgo__$internal_math_bits_Bits_$leadingzeros64_leadingZeros64(_hi));
	var _e = stdgo_GoNumber_ofUIntUInt64(stdgo_GoUInt32.sub(1023,stdgo_GoUInt32.add(_lz,1)));
	_hi = stdgo_GoUInt64.or(stdgo_GoUInt64.shl(_hi,stdgo_GoNumber_ofUIntUInt64(stdgo_GoUInt32.add(_lz,1))),stdgo_GoUInt64.shr(_lo,stdgo_GoNumber_ofUIntUInt64(stdgo_GoUInt32.sub(64,stdgo_GoUInt32.add(_lz,1)))));
	_hi = stdgo_GoUInt64.shr(_hi,new haxe__$Int64__$_$_$Int64(0,12));
	_hi = stdgo_GoUInt64.or(_hi,stdgo_GoUInt64.shl(_e,new haxe__$Int64__$_$_$Int64(0,52)));
	_z = stdgo__$internal_math_Math_$float64frombits_float64frombits(_hi);
	if(stdgo_GoUInt64.equals(stdgo_GoUInt64.and(_j,new haxe__$Int64__$_$_$Int64(0,1)),new haxe__$Int64__$_$_$Int64(0,1))) {
		_j = haxe_UInt64.add(_j,stdgo_GoNumber_ofIntUInt64(1));
		_j = stdgo_GoUInt64.and(_j,new haxe__$Int64__$_$_$Int64(0,7));
		_z = _z - 1;
	}
	var __tmp__ = { _0 : _j, _1 : stdgo_GoFloat64.mul(_z,0.7853981633974483)};
	_j = __tmp__._0;
	_z = __tmp__._1;
	return __tmp__;
}
function stdgo__$internal_math_bits_Bits_$mul64_mul64(_x,_y) {
	var _hi = stdgo_GoNumber_ofIntUInt64(0);
	var _lo = stdgo_GoNumber_ofIntUInt64(0);
	var _x0 = stdgo_GoUInt64.and(_x,new haxe__$Int64__$_$_$Int64(0,-1));
	var _x1 = stdgo_GoUInt64.shr(_x,new haxe__$Int64__$_$_$Int64(0,32));
	var _y0 = stdgo_GoUInt64.and(_y,new haxe__$Int64__$_$_$Int64(0,-1));
	var _y1 = stdgo_GoUInt64.shr(_y,new haxe__$Int64__$_$_$Int64(0,32));
	var _w0 = stdgo_GoUInt64.mul(_x0,_y0);
	var _t = stdgo_GoUInt64.add(stdgo_GoUInt64.mul(_x1,_y0),stdgo_GoUInt64.shr(_w0,new haxe__$Int64__$_$_$Int64(0,32)));
	var _w1 = stdgo_GoUInt64.and(_t,new haxe__$Int64__$_$_$Int64(0,-1));
	var _w2 = stdgo_GoUInt64.shr(_t,new haxe__$Int64__$_$_$Int64(0,32));
	_w1 = stdgo_GoUInt64.add(_w1,stdgo_GoUInt64.mul(_x0,_y1));
	_hi = stdgo_GoUInt64.add(stdgo_GoUInt64.add(stdgo_GoUInt64.mul(_x1,_y1),_w2),stdgo_GoUInt64.shr(_w1,new haxe__$Int64__$_$_$Int64(0,32)));
	_lo = stdgo_GoUInt64.mul(_x,_y);
	return { _0 : _hi, _1 : _lo};
}
function stdgo__$internal_math_bits_Bits_$add64_add64(_x,_y,_carry) {
	var _sum = stdgo_GoNumber_ofIntUInt64(0);
	var _carryOut = stdgo_GoNumber_ofIntUInt64(0);
	_sum = stdgo_GoUInt64.add(stdgo_GoUInt64.add(_x,_y),_carry);
	_carryOut = stdgo_GoUInt64.shr(stdgo_GoUInt64.or(stdgo_GoUInt64.and(_x,_y),stdgo_GoUInt64.and(stdgo_GoUInt64.or(_x,_y),stdgo_GoUInt64.xor(_sum,stdgo_GoNumber_ofIntUInt64(-1)))),new haxe__$Int64__$_$_$Int64(0,63));
	return { _0 : _sum, _1 : _carryOut};
}
function stdgo__$internal_math_bits_Bits_$leadingzeros64_leadingZeros64(_x) {
	return stdgo_GoInt32.sub(64,stdgo__$internal_math_bits_Bits_$len64_len64(_x));
}
function stdgo__$internal_math_bits_Bits_$len64_len64(_x) {
	var _n = 0;
	if(stdgo_GoUInt64.gte(_x,new haxe__$Int64__$_$_$Int64(1,0))) {
		_x = stdgo_GoUInt64.shr(_x,new haxe__$Int64__$_$_$Int64(0,32));
		_n = 32;
	}
	if(stdgo_GoUInt64.gte(_x,new haxe__$Int64__$_$_$Int64(0,65536))) {
		_x = stdgo_GoUInt64.shr(_x,new haxe__$Int64__$_$_$Int64(0,16));
		_n = stdgo_GoInt32.add(_n,16);
	}
	if(stdgo_GoUInt64.gte(_x,new haxe__$Int64__$_$_$Int64(0,256))) {
		_x = stdgo_GoUInt64.shr(_x,new haxe__$Int64__$_$_$Int64(0,8));
		_n = stdgo_GoInt32.add(_n,8);
	}
	var b = new haxe_io_BytesBuffer();
	b.addByte(0);
	b.addByte(1);
	b.addByte(2);
	b.addByte(2);
	b.addByte(3);
	b.addByte(3);
	b.addByte(3);
	b.addByte(3);
	b.addByte(4);
	b.addByte(4);
	b.addByte(4);
	b.addByte(4);
	b.addByte(4);
	b.addByte(4);
	b.addByte(4);
	b.addByte(4);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(5);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addByte(6);
	b.addString("\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08");
	_n = stdgo_GoInt32.add(_n,stdgo_GoString.__get__(stdgo_GoString.ofBytes(b.getBytes()),stdgo_GoNumber_toIntInt64(_x)));
	return _n;
}
function stdgo__$internal_math_Math_$cos_cos(_x) {
	return Math.cos(_x);
}
function stdgo__$internal_math_Math_$exp_exp(_x) {
	return Math.exp(_x);
}
function stdgo__$internal_math_Math_$max_max(_x,_y) {
	if(stdgo_GoFloat64.gt(_x,0) && !isFinite(_x) || stdgo_GoFloat64.gt(_y,0) && !isFinite(_y)) {
		return stdgo__$internal_math_Math_$inf_inf(1);
	}
	if(stdgo_GoFloat64.eq(_x,0.0) && stdgo_GoFloat64.eq(_y,0.0) && !stdgo__$internal_math_Math_$signbit_signbit(_x) && !stdgo__$internal_math_Math_$isnan_isNaN(_y) || stdgo_GoFloat64.eq(_x,0.0) && stdgo_GoFloat64.eq(_y,0.0) && !stdgo__$internal_math_Math_$signbit_signbit(_y) && !stdgo__$internal_math_Math_$isnan_isNaN(_x)) {
		return 0.0;
	}
	if(stdgo__$internal_math_Math_$isnan_isNaN(_x) || stdgo__$internal_math_Math_$isnan_isNaN(_y)) {
		return stdgo__$internal_math_Math_$nan_naN();
	}
	return Math.max(_x,_y);
}
function stdgo__$internal_math_Math_$sin_sin(_x) {
	return Math.sin(_x);
}
var stdgo__$internal_math_bits_T_$errorString_$static_$extension = function() { };
$hxClasses["stdgo._internal.math.bits.T_errorString_static_extension"] = stdgo__$internal_math_bits_T_$errorString_$static_$extension;
stdgo__$internal_math_bits_T_$errorString_$static_$extension.__name__ = "stdgo._internal.math.bits.T_errorString_static_extension";
stdgo__$internal_math_bits_T_$errorString_$static_$extension.error = function(_e) {
	var _e1 = _e;
	var tmp = stdgo_GoString.add(stdgo_GoString.ofString("runtime error: "),_e1 != null ? stdgo_GoString.__copy__(_e1) : null);
	if(tmp != null) {
		return stdgo_GoString.__copy__(tmp);
	} else {
		return null;
	}
};
stdgo__$internal_math_bits_T_$errorString_$static_$extension.runtimeError = function(_e) {
	var _e1 = _e;
};
var stdgo__$internal_reflect_ChanDir_$asInterface = function(__self__,__type__) {
	this.__self__ = __self__;
	this.__type__ = __type__;
};
$hxClasses["stdgo._internal.reflect.ChanDir_asInterface"] = stdgo__$internal_reflect_ChanDir_$asInterface;
stdgo__$internal_reflect_ChanDir_$asInterface.__name__ = "stdgo._internal.reflect.ChanDir_asInterface";
stdgo__$internal_reflect_ChanDir_$asInterface.prototype = {
	string: function() {
		return stdgo__$internal_reflect_ChanDir_$static_$extension.string(stdgo_Pointer.get_value(this.__self__));
	}
	,__class__: stdgo__$internal_reflect_ChanDir_$asInterface
};
var stdgo__$internal_reflect_ChanDir_$static_$extension = function() { };
$hxClasses["stdgo._internal.reflect.ChanDir_static_extension"] = stdgo__$internal_reflect_ChanDir_$static_$extension;
stdgo__$internal_reflect_ChanDir_$static_$extension.__name__ = "stdgo._internal.reflect.ChanDir_static_extension";
stdgo__$internal_reflect_ChanDir_$static_$extension.string = function(_d) {
	throw haxe_Exception.thrown("ChanDir:reflect.string is not yet implemented");
};
var stdgo__$internal_reflect_Kind_$asInterface = function(__self__,__type__) {
	this.__self__ = __self__;
	this.__type__ = __type__;
};
$hxClasses["stdgo._internal.reflect.Kind_asInterface"] = stdgo__$internal_reflect_Kind_$asInterface;
stdgo__$internal_reflect_Kind_$asInterface.__name__ = "stdgo._internal.reflect.Kind_asInterface";
stdgo__$internal_reflect_Kind_$asInterface.prototype = {
	string: function() {
		return stdgo__$internal_reflect_Kind_$static_$extension.string(stdgo_Pointer.get_value(this.__self__));
	}
	,__class__: stdgo__$internal_reflect_Kind_$asInterface
};
var stdgo__$internal_reflect_Kind_$static_$extension = function() { };
$hxClasses["stdgo._internal.reflect.Kind_static_extension"] = stdgo__$internal_reflect_Kind_$static_$extension;
stdgo__$internal_reflect_Kind_$static_$extension.__name__ = "stdgo._internal.reflect.Kind_static_extension";
stdgo__$internal_reflect_Kind_$static_$extension.string = function(_k) {
	var _k1 = _k;
	var idx = stdgo_GoUInt32.clamp(_k1);
	switch(idx) {
	case 0:
		return stdgo_GoString.ofString("invalid");
	case 1:
		return stdgo_GoString.ofString("bool");
	case 2:
		return stdgo_GoString.ofString("int");
	case 3:
		return stdgo_GoString.ofString("int8");
	case 4:
		return stdgo_GoString.ofString("int16");
	case 5:
		return stdgo_GoString.ofString("int32");
	case 6:
		return stdgo_GoString.ofString("int64");
	case 7:
		return stdgo_GoString.ofString("uint");
	case 8:
		return stdgo_GoString.ofString("uint8");
	case 9:
		return stdgo_GoString.ofString("uint16");
	case 10:
		return stdgo_GoString.ofString("uint32");
	case 11:
		return stdgo_GoString.ofString("uint64");
	case 12:
		return stdgo_GoString.ofString("uintptr");
	case 13:
		return stdgo_GoString.ofString("float32");
	case 14:
		return stdgo_GoString.ofString("float64");
	case 15:
		return stdgo_GoString.ofString("complex64");
	case 16:
		return stdgo_GoString.ofString("complex128");
	case 17:
		return stdgo_GoString.ofString("array");
	case 18:
		return stdgo_GoString.ofString("chan");
	case 19:
		return stdgo_GoString.ofString("func");
	case 20:
		return stdgo_GoString.ofString("interface");
	case 21:
		return stdgo_GoString.ofString("map");
	case 22:
		return stdgo_GoString.ofString("ptr");
	case 23:
		return stdgo_GoString.ofString("slice");
	case 24:
		return stdgo_GoString.ofString("string");
	case 25:
		return stdgo_GoString.ofString("struct");
	case 26:
		return stdgo_GoString.ofString("unsafe.Pointer");
	default:
		throw haxe_Exception.thrown("unknown kind string: " + idx);
	}
};
var stdgo__$internal_reflect_MapIter = function(map,keys,values,t,index) {
	this.index = 0;
	if(map != null) {
		this.map = map;
	}
	if(keys != null) {
		this.keys = keys;
	}
	if(values != null) {
		this.values = values;
	}
	if(t != null) {
		this.t = t;
	}
	if(index != null) {
		this.index = index;
	}
};
$hxClasses["stdgo._internal.reflect.MapIter"] = stdgo__$internal_reflect_MapIter;
stdgo__$internal_reflect_MapIter.__name__ = "stdgo._internal.reflect.MapIter";
stdgo__$internal_reflect_MapIter.prototype = {
	__class__: stdgo__$internal_reflect_MapIter
};
var stdgo__$internal_reflect_MapIter_$static_$extension = function() { };
$hxClasses["stdgo._internal.reflect.MapIter_static_extension"] = stdgo__$internal_reflect_MapIter_$static_$extension;
stdgo__$internal_reflect_MapIter_$static_$extension.__name__ = "stdgo._internal.reflect.MapIter_static_extension";
stdgo__$internal_reflect_MapIter_$static_$extension.reset = function(_iter,_v) {
	_iter.index = 0;
	_iter.map = _v.value.value;
	_iter.keys = null;
	_iter.values = null;
};
stdgo__$internal_reflect_MapIter_$static_$extension.next = function(_iter) {
	if(_iter.map == null) {
		return false;
	}
	if(_iter.keys == null) {
		var _g = [];
		var key = _iter.map.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			_g.push(key1);
		}
		_iter.keys = _g;
		var _g = [];
		var key = _iter.map.iterator();
		while(key.hasNext()) {
			var key1 = key.next();
			_g.push(key1);
		}
		_iter.values = _g;
	} else {
		_iter.index++;
	}
	return _iter.index < _iter.keys.length;
};
stdgo__$internal_reflect_MapIter_$static_$extension.value = function(_iter) {
	if(_iter.keys == null) {
		var _g = [];
		var key = _iter.map.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			_g.push(key1);
		}
		_iter.keys = _g;
		var _g = [];
		var key = _iter.map.iterator();
		while(key.hasNext()) {
			var key1 = key.next();
			_g.push(key1);
		}
		_iter.values = _g;
	}
	var gt = stdgo__$internal_internal_reflect_Reflect_getUnderlying(_iter.t._common());
	var value;
	if(gt == null) {
		throw haxe_Exception.thrown("invalid mapType: " + Std.string(gt));
	} else if(gt._hx_index == 13) {
		var _gkey = gt.key;
		var valueType = gt.value.get();
		value = new stdgo__$internal_internal_reflect__$Type(valueType);
	} else {
		throw haxe_Exception.thrown("invalid mapType: " + Std.string(gt));
	}
	return new stdgo__$internal_reflect_Value(new stdgo_AnyInterfaceData(_iter.values[_iter.index],value));
};
stdgo__$internal_reflect_MapIter_$static_$extension.key = function(_iter) {
	if(_iter.keys == null) {
		var _g = [];
		var key = _iter.map.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			_g.push(key1);
		}
		_iter.keys = _g;
		var _g = [];
		var key = _iter.map.iterator();
		while(key.hasNext()) {
			var key1 = key.next();
			_g.push(key1);
		}
		_iter.values = _g;
	}
	var gt = stdgo__$internal_internal_reflect_Reflect_getUnderlying(_iter.t._common());
	var key;
	if(gt == null) {
		throw haxe_Exception.thrown("invalid mapType: " + Std.string(gt));
	} else if(gt._hx_index == 13) {
		var keyType = gt.key.get();
		key = new stdgo__$internal_internal_reflect__$Type(keyType);
	} else {
		throw haxe_Exception.thrown("invalid mapType: " + Std.string(gt));
	}
	return new stdgo__$internal_reflect_Value(new stdgo_AnyInterfaceData(_iter.keys[_iter.index],key));
};
var stdgo__$internal_reflect_Method = function() { };
$hxClasses["stdgo._internal.reflect.Method"] = stdgo__$internal_reflect_Method;
stdgo__$internal_reflect_Method.__name__ = "stdgo._internal.reflect.Method";
var stdgo__$internal_reflect_Method_$static_$extension = function() { };
$hxClasses["stdgo._internal.reflect.Method_static_extension"] = stdgo__$internal_reflect_Method_$static_$extension;
stdgo__$internal_reflect_Method_$static_$extension.__name__ = "stdgo._internal.reflect.Method_static_extension";
stdgo__$internal_reflect_Method_$static_$extension.isExported = function(_m) {
	throw haxe_Exception.thrown("Method:reflect.isExported is not yet implemented");
};
var stdgo__$internal_reflect_StructField = function(name,pkgPath,type,tag,offset,index,anonymous) {
	this.anonymous = false;
	this.index = null;
	this.offset = 0;
	this.tag = stdgo_GoString.ofString("");
	this.type = null;
	this.pkgPath = stdgo_GoString.ofString("");
	this.name = stdgo_GoString.ofString("");
	if(name != null) {
		this.name = name;
	}
	if(pkgPath != null) {
		this.pkgPath = pkgPath;
	}
	if(type != null) {
		this.type = type;
	}
	if(tag != null) {
		this.tag = tag;
	}
	if(offset != null) {
		this.offset = offset;
	}
	if(index != null) {
		this.index = index;
	}
	if(anonymous != null) {
		this.anonymous = anonymous;
	}
};
$hxClasses["stdgo._internal.reflect.StructField"] = stdgo__$internal_reflect_StructField;
stdgo__$internal_reflect_StructField.__name__ = "stdgo._internal.reflect.StructField";
stdgo__$internal_reflect_StructField.prototype = {
	__class__: stdgo__$internal_reflect_StructField
};
var stdgo__$internal_reflect_StructField_$static_$extension = function() { };
$hxClasses["stdgo._internal.reflect.StructField_static_extension"] = stdgo__$internal_reflect_StructField_$static_$extension;
stdgo__$internal_reflect_StructField_$static_$extension.__name__ = "stdgo._internal.reflect.StructField_static_extension";
stdgo__$internal_reflect_StructField_$static_$extension.isExported = function(_f) {
	throw haxe_Exception.thrown("StructField:reflect.isExported is not yet implemented");
};
var stdgo__$internal_reflect_StructTag_$asInterface = function(__self__,__type__) {
	this.__self__ = __self__;
	this.__type__ = __type__;
};
$hxClasses["stdgo._internal.reflect.StructTag_asInterface"] = stdgo__$internal_reflect_StructTag_$asInterface;
stdgo__$internal_reflect_StructTag_$asInterface.__name__ = "stdgo._internal.reflect.StructTag_asInterface";
stdgo__$internal_reflect_StructTag_$asInterface.prototype = {
	lookup: function(_key) {
		return stdgo__$internal_reflect_StructTag_$static_$extension.lookup(stdgo_Pointer.get_value(this.__self__),_key);
	}
	,get: function(_key) {
		return stdgo__$internal_reflect_StructTag_$static_$extension.get(stdgo_Pointer.get_value(this.__self__),_key);
	}
	,__class__: stdgo__$internal_reflect_StructTag_$asInterface
};
var stdgo__$internal_reflect_StructTag_$static_$extension = function() { };
$hxClasses["stdgo._internal.reflect.StructTag_static_extension"] = stdgo__$internal_reflect_StructTag_$static_$extension;
stdgo__$internal_reflect_StructTag_$static_$extension.__name__ = "stdgo._internal.reflect.StructTag_static_extension";
stdgo__$internal_reflect_StructTag_$static_$extension.lookup = function(_tag,_key) {
	throw haxe_Exception.thrown("StructTag:reflect.lookup is not yet implemented");
};
stdgo__$internal_reflect_StructTag_$static_$extension.get = function(_tag,_key) {
	throw haxe_Exception.thrown("StructTag:reflect.get is not yet implemented");
};
var stdgo__$internal_reflect_Value = function(value,underlyingValue,underlyingIndex,underlyingKey,canAddrBool,notSetBool,string) {
	this.notSetBool = false;
	this.canAddrBool = false;
	this.underlyingKey = null;
	this.underlyingIndex = -1;
	if(value != null) {
		this.value = value;
	}
	if(underlyingValue != null) {
		this.underlyingValue = underlyingValue;
	}
	if(underlyingIndex != null) {
		this.underlyingIndex = underlyingIndex;
	}
	if(underlyingKey != null) {
		this.underlyingKey = underlyingKey;
	}
	if(canAddrBool != null) {
		this.canAddrBool = canAddrBool;
	}
	if(notSetBool != null) {
		this.notSetBool = notSetBool;
	}
	if(string != null) {
		this.string = string;
	}
};
$hxClasses["stdgo._internal.reflect.Value"] = stdgo__$internal_reflect_Value;
stdgo__$internal_reflect_Value.__name__ = "stdgo._internal.reflect.Value";
stdgo__$internal_reflect_Value.prototype = {
	string: function() {
		var _v = this;
		if(_v.value == null) {
			return stdgo_GoString.ofString("<invalid Value>");
		}
		var value = _v.value.value;
		var t = _v.value.type._common();
		if(stdgo__$internal_internal_reflect_Reflect_isNamed(t)) {
			var _g = Type.typeof(value);
			if(_g._hx_index == 6) {
				var c = _g.c;
				var name = c.__name__;
				if(StringTools.endsWith(name,"_asInterface")) {
					value = value.__underlying__().value;
				}
			} else {
				var _ = false;
			}
		}
		if(stdgo__$internal_internal_reflect_Reflect_isPointer(t)) {
			_v.value.type.gt = stdgo__$internal_internal_reflect_Reflect_getElem(t);
			value = stdgo_Pointer.get_value(value);
		}
		var underlyingType = stdgo__$internal_internal_reflect_Reflect_getUnderlying(t);
		if(underlyingType == null) {
			var _ = false;
		} else if(underlyingType._hx_index == 3) {
			var kind = underlyingType.kind;
			if(kind == 17) {
				return value;
			} else {
				var _ = false;
			}
		} else {
			var _ = false;
		}
		return stdgo_GoString.add(stdgo_GoString.add(stdgo_GoString.ofString("<"),stdgo__$internal_reflect_Value_$static_$extension.type(_v).string()),stdgo_GoString.ofString(" Value>"));
	}
	,__copy__: function() {
		return new stdgo__$internal_reflect_Value(this.value,this.underlyingValue,this.underlyingIndex,this.underlyingKey,this.canAddrBool,this.notSetBool);
	}
	,__class__: stdgo__$internal_reflect_Value
};
var stdgo__$internal_reflect_Value_$static_$extension = function() { };
$hxClasses["stdgo._internal.reflect.Value_static_extension"] = stdgo__$internal_reflect_Value_$static_$extension;
stdgo__$internal_reflect_Value_$static_$extension.__name__ = "stdgo._internal.reflect.Value_static_extension";
stdgo__$internal_reflect_Value_$static_$extension.equal = function(_v,_u) {
	throw haxe_Exception.thrown("Value:reflect.equal is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.comparable_ = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.comparable_ is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.canConvert = function(_v,_t) {
	throw haxe_Exception.thrown("Value:reflect.canConvert is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.convert = function(_v,_t) {
	throw haxe_Exception.thrown("Value:reflect.convert is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.clear = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.clear is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.grow = function(_v,_n) {
	throw haxe_Exception.thrown("Value:reflect.grow is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.unsafePointer = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.unsafePointer is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.unsafeAddr = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.unsafeAddr is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.uint = function(_v) {
	var value = _v.value.value;
	var t = _v.value.type._common();
	if(stdgo__$internal_internal_reflect_Reflect_isNamed(t)) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			var c = _g.c;
			var name = c.__name__;
			if(StringTools.endsWith(name,"_asInterface")) {
				value = value.__underlying__().value;
			}
		} else {
			var _ = false;
		}
	}
	if(stdgo__$internal_internal_reflect_Reflect_isPointer(t)) {
		_v.value.type.gt = stdgo__$internal_internal_reflect_Reflect_getElem(t);
		value = stdgo_Pointer.get_value(value);
	}
	var value1;
	switch(stdgo__$internal_reflect_Value_$static_$extension.kind(_v)) {
	case 7:
		value1 = stdgo_GoNumber_ofIntUInt64(value);
		break;
	case 8:
		value1 = stdgo_GoNumber_ofIntUInt64(value);
		break;
	case 9:
		value1 = stdgo_GoNumber_ofIntUInt64(value);
		break;
	case 10:
		value1 = stdgo_GoNumber_ofUIntUInt64(value);
		break;
	case 11:
		value1 = value;
		break;
	case 12:
		var this1 = value;
		var this2;
		if(((this1) instanceof haxe__$Int64__$_$_$Int64)) {
			var x = this1;
			if(x.high != x.low >> 31) {
				throw haxe_Exception.thrown("Overflow");
			}
			this2 = x.low;
		} else {
			this2 = typeof(this1) == "number" && ((this1 | 0) === this1) ? this1 : typeof(this1) == "number" ? this1 | 0 : 1;
		}
		value1 = stdgo_GoNumber_ofIntUInt64(this2);
		break;
	default:
		throw haxe_Exception.thrown(new stdgo__$internal_reflect_ValueError(stdgo_GoString.ofString("reflect.Value.Uint"),stdgo__$internal_reflect_Value_$static_$extension.kind(_v)));
	}
	return value1;
};
stdgo__$internal_reflect_Value_$static_$extension.canUint = function(_v) {
	switch(stdgo__$internal_reflect_Value_$static_$extension.kind(_v)) {
	case 7:case 8:case 9:case 10:case 11:case 12:
		return true;
	default:
		return false;
	}
};
stdgo__$internal_reflect_Value_$static_$extension.type = function(_v) {
	if(_v.value == null) {
		var t = new stdgo__$internal_internal_reflect__$Type(stdgo__$internal_internal_reflect_GoType.invalidType);
		return new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData(function() {
			return t;
		},function(__tmp__) {
			t = __tmp__;
			return t;
		},false),t);
	}
	var underlying = _v.value;
	var underlyingIndex = "type";
	return new stdgo__$internal_internal_reflect__$Type_$asInterface(new stdgo_PointerData(function() {
		return _v.value.type;
	},function(v) {
		return _v.value.type = v;
	},false,null,underlying,underlyingIndex),_v.value.type);
};
stdgo__$internal_reflect_Value_$static_$extension.trySend = function(_v,_x) {
	throw haxe_Exception.thrown("Value:reflect.trySend is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.tryRecv = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.tryRecv is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.string = function(_v) {
	var _v1 = _v != null ? _v.__copy__() : null;
	if(_v1.value == null) {
		return stdgo_GoString.ofString("<invalid Value>");
	}
	var value = _v1.value.value;
	var t = _v1.value.type._common();
	if(stdgo__$internal_internal_reflect_Reflect_isNamed(t)) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			var c = _g.c;
			var name = c.__name__;
			if(StringTools.endsWith(name,"_asInterface")) {
				value = value.__underlying__().value;
			}
		} else {
			var _ = false;
		}
	}
	if(stdgo__$internal_internal_reflect_Reflect_isPointer(t)) {
		_v1.value.type.gt = stdgo__$internal_internal_reflect_Reflect_getElem(t);
		value = stdgo_Pointer.get_value(value);
	}
	var underlyingType = stdgo__$internal_internal_reflect_Reflect_getUnderlying(t);
	if(underlyingType == null) {
		var _ = false;
	} else if(underlyingType._hx_index == 3) {
		var kind = underlyingType.kind;
		if(kind == 17) {
			return value;
		} else {
			var _ = false;
		}
	} else {
		var _ = false;
	}
	return stdgo_GoString.add(stdgo_GoString.add(stdgo_GoString.ofString("<"),stdgo__$internal_reflect_Value_$static_$extension.type(_v1).string()),stdgo_GoString.ofString(" Value>"));
};
stdgo__$internal_reflect_Value_$static_$extension.slice3 = function(_v,_i,_j,_k) {
	throw haxe_Exception.thrown("Value:reflect.slice3 is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.slice = function(_v,_i,_j) {
	var value = _v.value.value;
	var t = _v.value.type._common();
	if(stdgo__$internal_internal_reflect_Reflect_isNamed(t)) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			var c = _g.c;
			var name = c.__name__;
			if(StringTools.endsWith(name,"_asInterface")) {
				value = value.__underlying__().value;
			}
		} else {
			var _ = false;
		}
	}
	switch(t._hx_index) {
	case 8:
		var _gtype = t.type;
		if(_gtype._hx_index == 12) {
			var elem = _gtype.elem;
			var methods = t.methods;
			var path = t.path;
			var alias = t.alias;
			var params = t.params;
			t = stdgo__$internal_internal_reflect_GoType.named(path,methods,stdgo__$internal_internal_reflect_GoType.sliceType(elem),alias,params);
		} else {
			var _ = false;
		}
		break;
	case 12:
		var elem = t.elem;
		t = stdgo__$internal_internal_reflect_GoType.sliceType(elem);
		break;
	default:
		var _ = false;
	}
	var k = stdgo__$internal_reflect_Value_$static_$extension.kind(_v);
	switch(k) {
	case 17:
		var _this = value;
		var args = [_i,_j];
		if(args.length > 3 || args.length < 1) {
			throw haxe_Exception.thrown("slice invalid number of args");
		}
		var low = args[0];
		var offset = low;
		var high = args.length < 2 ? _this.length : args[1];
		var max = args.length < 3 ? _this.capacity : args[2];
		var length = stdgo_GoInt32.sub(high,low);
		var capacity = stdgo_GoInt32.sub(max,low);
		var obj;
		if(_this == null) {
			var s = new stdgo_GoArrayData(0,-1);
			s.capacity = 0;
			obj = s;
		} else {
			var slice = new stdgo_GoArrayData(0,-1);
			slice.length = _this.length;
			slice.capacity = _this.capacity;
			slice.vector = _this.vector;
			slice.bytes = _this.bytes;
			slice.offset = _this.offset;
			if(slice.capacity == -1) {
				slice.capacity = 0;
			}
			slice.isNumber32 = _this.isNumber32;
			slice.isNumber64 = _this.isNumber64;
			slice.isString = _this.isString;
			obj = slice;
		}
		obj.offset = stdgo_GoInt32.add(_this.offset,offset);
		obj.capacity = capacity;
		obj.length = length;
		value = obj;
		break;
	case 23:
		value = stdgo_Slice.__slice__(value,_i,_j);
		break;
	default:
		throw haxe_Exception.thrown(new stdgo__$internal_reflect_ValueError(stdgo_GoString.ofString("reflect.Value.Slice"),k));
	}
	return new stdgo__$internal_reflect_Value(new stdgo_AnyInterfaceData(value,new stdgo__$internal_internal_reflect__$Type(t)));
};
stdgo__$internal_reflect_Value_$static_$extension.setString = function(_v,_x) {
	var _v1 = _v != null ? _v.__copy__() : null;
	_v1.value.value = _x;
	stdgo__$internal_internal_reflect_Reflect__set(_v1);
};
stdgo__$internal_reflect_Value_$static_$extension.setPointer = function(_v,_x) {
	throw haxe_Exception.thrown("Value:reflect.setPointer is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.setUint = function(_v,_x) {
	var _v1 = _v != null ? _v.__copy__() : null;
	var k = stdgo__$internal_reflect_Value_$static_$extension.kind(_v1);
	var tmp;
	switch(k) {
	case 2:
		tmp = stdgo_GoNumber_toIntInt64(_x);
		break;
	case 3:
		tmp = stdgo_GoNumber_clampInt8(stdgo_GoNumber_toIntInt64(_x));
		break;
	case 4:
		tmp = stdgo_GoNumber_clampInt16(stdgo_GoNumber_toIntInt64(_x));
		break;
	case 5:
		tmp = stdgo_GoNumber_toIntInt64(_x);
		break;
	case 6:
		tmp = stdgo_GoNumber_toInt64UInt64(_x);
		break;
	case 7:
		tmp = stdgo_GoNumber_clampUInt(stdgo_GoNumber_toIntInt64(_x));
		break;
	case 8:
		tmp = stdgo_GoNumber_clampUInt8(stdgo_GoNumber_toIntInt64(_x));
		break;
	case 9:
		tmp = stdgo_GoNumber_clampUInt16(stdgo_GoNumber_toIntInt64(_x));
		break;
	case 10:
		tmp = stdgo_GoNumber_clampUInt(stdgo_GoNumber_toIntInt64(_x));
		break;
	case 11:
		tmp = _x;
		break;
	case 12:
		tmp = _x;
		break;
	default:
		throw haxe_Exception.thrown(stdgo_GoString.add(stdgo_GoString.ofString("unknown setUInt kind: "),stdgo__$internal_reflect_Kind_$static_$extension.string(k)));
	}
	_v1.value.value = tmp;
	stdgo__$internal_internal_reflect_Reflect__set(_v1);
};
stdgo__$internal_reflect_Value_$static_$extension.setMapIndex = function(_v,_key,_elem) {
	throw haxe_Exception.thrown("Value:reflect.setMapIndex is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.setCap = function(_v,_n) {
	throw haxe_Exception.thrown("Value:reflect.setCap is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.setLen = function(_v,_n) {
	throw haxe_Exception.thrown("Value:reflect.setLen is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.setInt = function(_v,_x) {
	var _v1 = _v != null ? _v.__copy__() : null;
	var k = stdgo__$internal_reflect_Value_$static_$extension.kind(_v1);
	var tmp;
	switch(k) {
	case 2:
		tmp = stdgo_GoNumber_toIntInt64(_x);
		break;
	case 3:
		tmp = stdgo_GoNumber_clampInt8(stdgo_GoNumber_toIntInt64(_x));
		break;
	case 4:
		tmp = stdgo_GoNumber_clampInt16(stdgo_GoNumber_toIntInt64(_x));
		break;
	case 5:
		tmp = stdgo_GoNumber_toIntInt64(_x);
		break;
	case 6:
		tmp = _x;
		break;
	case 7:
		tmp = stdgo_GoNumber_clampUInt(stdgo_GoNumber_toIntInt64(_x));
		break;
	case 8:
		tmp = stdgo_GoNumber_clampUInt8(stdgo_GoNumber_toIntInt64(_x));
		break;
	case 9:
		tmp = stdgo_GoNumber_clampUInt16(stdgo_GoNumber_toIntInt64(_x));
		break;
	case 10:
		tmp = stdgo_GoNumber_clampUInt(stdgo_GoNumber_toIntInt64(_x));
		break;
	case 11:
		tmp = stdgo_GoInt64.toUInt64(_x);
		break;
	default:
		throw haxe_Exception.thrown(stdgo_GoString.add(stdgo_GoString.ofString("unknown setInt kind: "),stdgo__$internal_reflect_Kind_$static_$extension.string(k)));
	}
	_v1.value.value = tmp;
	stdgo__$internal_internal_reflect_Reflect__set(_v1);
};
stdgo__$internal_reflect_Value_$static_$extension.setFloat = function(_v,_x) {
	var _v1 = _v != null ? _v.__copy__() : null;
	var k = stdgo__$internal_reflect_Value_$static_$extension.kind(_v1);
	var tmp;
	switch(k) {
	case 13:
		tmp = _x;
		break;
	case 14:
		tmp = _x;
		break;
	default:
		throw haxe_Exception.thrown(stdgo_GoString.add(stdgo_GoString.ofString("unknown setFloat kind: "),stdgo__$internal_reflect_Kind_$static_$extension.string(k)));
	}
	_v1.value.value = tmp;
	stdgo__$internal_internal_reflect_Reflect__set(_v1);
};
stdgo__$internal_reflect_Value_$static_$extension.setComplex = function(_v,_x) {
	var _v1 = _v != null ? _v.__copy__() : null;
	var k = stdgo__$internal_reflect_Value_$static_$extension.kind(_v1);
	var tmp;
	switch(k) {
	case 15:
		var r = _x.real;
		var i = _x.imag;
		var this1;
		if(r == null || i == null) {
			this1 = new stdgo_Complex(0,0);
		} else {
			this1 = new stdgo_Complex(r,i);
		}
		tmp = this1;
		break;
	case 16:
		tmp = _x;
		break;
	default:
		throw haxe_Exception.thrown(stdgo_GoString.add(stdgo_GoString.ofString("unknown setFloat kind: "),stdgo__$internal_reflect_Kind_$static_$extension.string(k)));
	}
	_v1.value.value = tmp;
	stdgo__$internal_internal_reflect_Reflect__set(_v1);
};
stdgo__$internal_reflect_Value_$static_$extension.setBytes = function(_v,_x) {
	throw haxe_Exception.thrown("Value:reflect.setBytes is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.setBool = function(_v,_x) {
	var _v1 = _v != null ? _v.__copy__() : null;
	_v1.value.value = _x;
	stdgo__$internal_internal_reflect_Reflect__set(_v1);
};
stdgo__$internal_reflect_Value_$static_$extension.set = function(_v,_x) {
	var _v1 = _v != null ? _v.__copy__() : null;
	var value = _x.value.value;
	var gt = _x.value.type._common();
	if(value != null) {
		var c = js_Boot.getClass(value);
		var cl = c.__name__;
		if(StringTools.endsWith(cl,"_asInterface")) {
			value = value.__underlying__().value;
		}
	}
	var k = stdgo__$internal_reflect_Value_$static_$extension.kind(_v1);
	switch(k) {
	case 2:
		stdgo__$internal_reflect_Value_$static_$extension.setInt(_v1,stdgo_GoNumber_ofIntInt64(value));
		break;
	case 3:
		stdgo__$internal_reflect_Value_$static_$extension.setInt(_v1,stdgo_GoNumber_ofIntInt64(value));
		break;
	case 4:
		stdgo__$internal_reflect_Value_$static_$extension.setInt(_v1,stdgo_GoNumber_ofIntInt64(value));
		break;
	case 5:
		stdgo__$internal_reflect_Value_$static_$extension.setInt(_v1,stdgo_GoNumber_ofIntInt64(value));
		break;
	case 6:
		stdgo__$internal_reflect_Value_$static_$extension.setInt(_v1,value);
		break;
	case 7:
		stdgo__$internal_reflect_Value_$static_$extension.setInt(_v1,stdgo_GoNumber_ofIntInt64(value));
		break;
	case 9:
		stdgo__$internal_reflect_Value_$static_$extension.setInt(_v1,stdgo_GoNumber_ofIntInt64(value));
		break;
	case 10:
		stdgo__$internal_reflect_Value_$static_$extension.setInt(_v1,stdgo_GoNumber_ofUIntUInt64(value));
		break;
	case 11:
		stdgo__$internal_reflect_Value_$static_$extension.setInt(_v1,stdgo_GoNumber_toInt64UInt64(value));
		break;
	case 13:
		stdgo__$internal_reflect_Value_$static_$extension.setFloat(_v1,value);
		break;
	case 14:
		stdgo__$internal_reflect_Value_$static_$extension.setFloat(_v1,value);
		break;
	case 21:
		var value1 = _v1.value.value;
		var x = _x.value.value;
		var _g = x.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var value1 = _g1.value;
			value1.set(key,value1);
		}
		stdgo__$internal_internal_reflect_Reflect__set(_v1);
		break;
	case 23:
		var value1 = _v1.value.value;
		var x = _x.value.value;
		stdgo__$internal_internal_reflect_Reflect__set(_v1);
		break;
	case 24:
		stdgo__$internal_reflect_Value_$static_$extension.setString(_v1,value);
		break;
	case 25:
		var _g = stdgo__$internal_internal_reflect_Reflect_getUnderlying(gt);
		if(_g == null) {
			var _ = false;
		} else if(_g._hx_index == 10) {
			var fields = _g.fields;
			var _g = 0;
			while(_g < fields.length) {
				var field = fields[_g];
				++_g;
				var fieldValue = Reflect.field(value,field.name);
				value[field.name] = fieldValue;
			}
		} else {
			var _ = false;
		}
		break;
	default:
		_v1.value = _x.value;
		stdgo__$internal_internal_reflect_Reflect__set(_v1);
	}
};
stdgo__$internal_reflect_Value_$static_$extension.send = function(_v,_x) {
	throw haxe_Exception.thrown("Value:reflect.send is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.recv = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.recv is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.pointer = function(_v) {
	var _v1 = _v != null ? _v.__copy__() : null;
	if(_v1.value == null) {
		return 0;
	}
	var value = _v1.value.value;
	return value != null ? 1 : 0;
};
stdgo__$internal_reflect_Value_$static_$extension.overflowUint = function(_v,_x) {
	throw haxe_Exception.thrown("Value:reflect.overflowUint is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.overflowInt = function(_v,_x) {
	throw haxe_Exception.thrown("Value:reflect.overflowInt is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.overflowFloat = function(_v,_x) {
	throw haxe_Exception.thrown("Value:reflect.overflowFloat is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.overflowComplex = function(_v,_x) {
	throw haxe_Exception.thrown("Value:reflect.overflowComplex is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.numField = function(_v) {
	var _v1 = _v != null ? _v.__copy__() : null;
	return stdgo__$internal_reflect_Value_$static_$extension.type(_v1).numField();
};
stdgo__$internal_reflect_Value_$static_$extension.methodByName = function(_v,_name) {
	throw haxe_Exception.thrown("Value:reflect.methodByName is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.numMethod = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.numMethod is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.method = function(_v,_i) {
	throw haxe_Exception.thrown("Value:reflect.method is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.mapRange = function(_v) {
	return new stdgo__$internal_reflect_MapIter(_v.value.value,null,null,_v.value.type);
};
stdgo__$internal_reflect_Value_$static_$extension.setIterValue = function(_v,_iter) {
	throw haxe_Exception.thrown("Value:reflect.setIterValue is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.setIterKey = function(_v,_iter) {
	throw haxe_Exception.thrown("Value:reflect.setIterKey is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.mapKeys = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.mapKeys is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.mapIndex = function(_v,_key) {
	throw haxe_Exception.thrown("Value:reflect.mapIndex is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.len = function(_v) {
	var _v1 = _v.__copy__();
	var value = _v1.value.value;
	if(value == null) {
		return 0;
	}
	var t = _v1.value.type._common();
	if(stdgo__$internal_internal_reflect_Reflect_isNamed(t)) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			var c = _g.c;
			var name = c.__name__;
			if(StringTools.endsWith(name,"_asInterface")) {
				value = value.__underlying__().value;
			}
		} else {
			var _ = false;
		}
	}
	if(stdgo__$internal_internal_reflect_Reflect_isPointer(t)) {
		_v1.value.type.gt = stdgo__$internal_internal_reflect_Reflect_getElem(t);
		value = stdgo_Pointer.get_value(value);
	}
	var k = stdgo__$internal_reflect_Value_$static_$extension.kind(_v1);
	switch(k) {
	case 17:
		return stdgo_GoArray.get_length(value);
	case 18:
		return value.length;
	case 21:
		return Lambda.count(value);
	case 23:
		return stdgo_Slice.get_length(value);
	case 24:
		return value.length;
	default:
		var tmp = stdgo__$internal_reflect_Kind_$static_$extension.string(k);
		haxe_Log.trace(tmp == null ? "null" : stdgo_GoString.toString(tmp),{ fileName : "stdgo/_internal/reflect/Reflect_value_static_extension.hx", lineNumber : 438, className : "stdgo._internal.reflect.Value_static_extension", methodName : "len"});
		throw haxe_Exception.thrown("not supported");
	}
};
stdgo__$internal_reflect_Value_$static_$extension.kind = function(_v) {
	return stdgo__$internal_reflect_Value_$static_$extension.type(_v).kind();
};
stdgo__$internal_reflect_Value_$static_$extension.setZero = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.setZero is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.isZero = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.isZero is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.isValid = function(_v) {
	var _v1 = _v != null ? _v.__copy__() : null;
	if(_v1.value == null) {
		return false;
	}
	if(_v1.value.type._common() != stdgo__$internal_internal_reflect_GoType.invalidType) {
		return true;
	}
	var _g = _v1.value.type._common();
	if(_g._hx_index == 3) {
		if(_g.kind == 25) {
			return false;
		} else {
			return true;
		}
	} else {
		return true;
	}
};
stdgo__$internal_reflect_Value_$static_$extension.isNil = function(_v) {
	var _v1 = _v != null ? _v.__copy__() : null;
	var value = _v1.value.value;
	var k = stdgo__$internal_reflect_Value_$static_$extension.kind(_v1);
	var gt = stdgo__$internal_reflect_Value_$static_$extension.type(_v1)._common();
	switch(k) {
	case 0:
		return false;
	case 12:case 26:
		return value == null;
	case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 13:case 14:case 15:case 16:case 24:
		return false;
	case 17:
		return false;
	case 18:
		return value == null;
	case 19:
		return value == null;
	case 20:
		return value == null;
	case 21:
		return value == null;
	case 22:
		if(gt._hx_index == 15) {
			var _g = Type.typeof(value);
			if(_g._hx_index == 6) {
				var c = _g.c;
				var name = c.__name__;
				if(StringTools.endsWith(name,"_asInterface")) {
					value = value.__underlying__().value;
				}
			} else {
				var _ = false;
			}
			return value == null;
		} else if(value == null) {
			return true;
		} else {
			var b = stdgo_Pointer.hasSet(value);
			haxe_Log.trace("hasSet: " + (b == null ? "null" : "" + b),{ fileName : "stdgo/_internal/reflect/Reflect_value_static_extension.hx", lineNumber : 490, className : "stdgo._internal.reflect.Value_static_extension", methodName : "isNil"});
			return b;
		}
		break;
	case 23:
		return value == null;
	case 25:
		return false;
	default:
		throw haxe_Exception.thrown(stdgo_GoString.add(stdgo_GoString.ofString("nil check not supported kind: "),stdgo__$internal_reflect_Kind_$static_$extension.string(stdgo__$internal_reflect_Value_$static_$extension.kind(_v1))));
	}
};
stdgo__$internal_reflect_Value_$static_$extension.interfaceData = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.interfaceData is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.interface_ = function(_v) {
	return _v.value;
};
stdgo__$internal_reflect_Value_$static_$extension.canInterface = function(_v) {
	var _v1 = _v != null ? _v.__copy__() : null;
	return true;
};
stdgo__$internal_reflect_Value_$static_$extension.int_ = function(_v) {
	var _v1 = _v != null ? _v.__copy__() : null;
	var value = _v1.value.value;
	var t = _v1.value.type._common();
	if(stdgo__$internal_internal_reflect_Reflect_isNamed(t)) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			var c = _g.c;
			var name = c.__name__;
			if(StringTools.endsWith(name,"_asInterface")) {
				value = value.__underlying__().value;
			}
		} else {
			var _ = false;
		}
	}
	if(stdgo__$internal_internal_reflect_Reflect_isPointer(t)) {
		_v1.value.type.gt = stdgo__$internal_internal_reflect_Reflect_getElem(t);
		value = stdgo_Pointer.get_value(value);
	}
	var value1;
	switch(stdgo__$internal_reflect_Value_$static_$extension.kind(_v1)) {
	case 2:
		value1 = stdgo_GoNumber_ofIntInt64(value);
		break;
	case 3:
		value1 = stdgo_GoNumber_ofIntInt64(value);
		break;
	case 4:
		value1 = stdgo_GoNumber_ofIntInt64(value);
		break;
	case 5:
		value1 = stdgo_GoNumber_ofIntInt64(value);
		break;
	case 6:
		value1 = value;
		break;
	default:
		throw haxe_Exception.thrown(new stdgo__$internal_reflect_ValueError(stdgo_GoString.ofString("reflect.Value.Int"),stdgo__$internal_reflect_Value_$static_$extension.kind(_v1)));
	}
	return value1;
};
stdgo__$internal_reflect_Value_$static_$extension.canInt = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.canInt is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.index = function(_v,_i) {
	var _v1 = _v.__copy__();
	var value = _v1.value.value;
	var t = _v1.value.type._common();
	if(stdgo__$internal_internal_reflect_Reflect_isNamed(t)) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			var c = _g.c;
			var name = c.__name__;
			if(StringTools.endsWith(name,"_asInterface")) {
				value = value.__underlying__().value;
			}
		} else {
			var _ = false;
		}
	}
	if(stdgo__$internal_internal_reflect_Reflect_isPointer(t)) {
		_v1.value.type.gt = stdgo__$internal_internal_reflect_Reflect_getElem(t);
		value = stdgo_Pointer.get_value(value);
	}
	var gt = stdgo__$internal_internal_reflect_Reflect_getUnderlying(_v1.value.type._common());
	if(gt == null) {
		throw haxe_Exception.thrown("not supported");
	} else {
		switch(gt._hx_index) {
		case 3:
			var kind = gt.kind;
			if(kind == 17) {
				var value1 = value;
				if(typeof(value1) == "string") {
					value1 = value1;
				}
				return new stdgo__$internal_reflect_Value(new stdgo_AnyInterfaceData(stdgo_GoString.__get__(value1,_i),new stdgo__$internal_internal_reflect__$Type(stdgo__$internal_internal_reflect_GoType.basic(8))));
			} else {
				throw haxe_Exception.thrown("unsupported basic kind");
			}
			break;
		case 7:
			var elem = gt.elem.get();
			var t = new stdgo__$internal_internal_reflect__$Type(stdgo__$internal_internal_reflect_Reflect_unroll(gt,elem));
			var valueInterface = stdgo__$internal_internal_reflect_Reflect_asInterfaceValue(stdgo_Slice.__get__(value,_i),t._common());
			var value1 = new stdgo__$internal_reflect_Value(new stdgo_AnyInterfaceData(valueInterface,t),value,_i);
			value1.canAddrBool = true;
			return value1;
		case 12:
			var elem = gt.elem.get();
			var t = new stdgo__$internal_internal_reflect__$Type(stdgo__$internal_internal_reflect_Reflect_unroll(gt,elem));
			var valueInterface = stdgo__$internal_internal_reflect_Reflect_asInterfaceValue(stdgo_GoArray.__get__(value,_i),t._common());
			return new stdgo__$internal_reflect_Value(new stdgo_AnyInterfaceData(valueInterface,t),value,_i);
		default:
			throw haxe_Exception.thrown("not supported");
		}
	}
};
stdgo__$internal_reflect_Value_$static_$extension.float_ = function(_v) {
	var value = _v.value.value;
	var t = _v.value.type._common();
	if(stdgo__$internal_internal_reflect_Reflect_isNamed(t)) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			var c = _g.c;
			var name = c.__name__;
			if(StringTools.endsWith(name,"_asInterface")) {
				value = value.__underlying__().value;
			}
		} else {
			var _ = false;
		}
	}
	if(stdgo__$internal_internal_reflect_Reflect_isPointer(t)) {
		_v.value.type.gt = stdgo__$internal_internal_reflect_Reflect_getElem(t);
		value = stdgo_Pointer.get_value(value);
	}
	var value1;
	switch(stdgo__$internal_reflect_Value_$static_$extension.kind(_v)) {
	case 13:
		value1 = value;
		break;
	case 14:
		value1 = value;
		break;
	default:
		throw haxe_Exception.thrown(new stdgo__$internal_reflect_ValueError(stdgo_GoString.ofString("reflect.Value.Float"),stdgo__$internal_reflect_Value_$static_$extension.kind(_v)));
	}
	return value1;
};
stdgo__$internal_reflect_Value_$static_$extension.canFloat = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.canFloat is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.fieldByNameFunc = function(_v,_match) {
	throw haxe_Exception.thrown("Value:reflect.fieldByNameFunc is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.fieldByName = function(_v,_name) {
	throw haxe_Exception.thrown("Value:reflect.fieldByName is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.fieldByIndexErr = function(_v,_index) {
	throw haxe_Exception.thrown("Value:reflect.fieldByIndexErr is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.fieldByIndex = function(_v,_index) {
	throw haxe_Exception.thrown("Value:reflect.fieldByIndex is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.field = function(_v,_i) {
	var _v1 = _v != null ? _v.__copy__() : null;
	var initgt = _v1.value.type._common();
	var gt = stdgo__$internal_internal_reflect_Reflect_getUnderlying(initgt);
	if(gt == null) {
		throw haxe_Exception.thrown("unsupported: " + Std.string(gt));
	} else if(gt._hx_index == 10) {
		var fields = gt.fields;
		var field = fields[_i];
		var t = stdgo__$internal_internal_reflect__$Type_$static_$extension.field(_v1.value.type,_i).type.__type__;
		t = new stdgo__$internal_internal_reflect__$Type(stdgo__$internal_internal_reflect_Reflect_unroll(initgt,t._common()));
		var value = _v1.value.value;
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			var c = _g.c;
			var name = c.__name__;
			if(StringTools.endsWith(name,"_asInterface")) {
				value = value.__underlying__().value;
			}
		} else {
			var _ = false;
		}
		var fieldValue = Reflect.field(value,field.name);
		fieldValue = stdgo__$internal_internal_reflect_Reflect_asInterfaceValue(fieldValue,t._common());
		var valueType = new stdgo__$internal_reflect_Value(new stdgo_AnyInterfaceData(fieldValue,t));
		if(field.name.charAt(0) == "_") {
			valueType.notSetBool = false;
		}
		return valueType;
	} else {
		throw haxe_Exception.thrown("unsupported: " + Std.string(gt));
	}
};
stdgo__$internal_reflect_Value_$static_$extension.elem = function(_v) {
	var _v1 = _v != null ? _v.__copy__() : null;
	var value = _v1.value.value;
	var t = _v1.value.type._common();
	if(stdgo__$internal_internal_reflect_Reflect_isNamed(t) && !stdgo__$internal_internal_reflect_Reflect_isRef(t) && !stdgo__$internal_internal_reflect_Reflect_isPointer(t)) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			var c = _g.c;
			var name = c.__name__;
			if(StringTools.endsWith(name,"_asInterface")) {
				var tmp = stdgo__$internal_internal_reflect_Reflect_getElem(t);
				_v1.value.type.gt = stdgo__$internal_internal_reflect_Reflect_unroll(t,tmp);
				value = value.__underlying__().value;
			}
		} else {
			var _ = false;
		}
	}
	var k = stdgo__$internal_reflect_Value_$static_$extension.kind(_v1);
	switch(k) {
	case 20:
		if(value == null) {
			return new stdgo__$internal_reflect_Value();
		}
		return new stdgo__$internal_reflect_Value(value,_v1.value.type);
	case 22:
		var t1 = stdgo__$internal_internal_reflect_Reflect_unroll(t,stdgo__$internal_internal_reflect_Reflect_getUnderlying(t));
		switch(t1._hx_index) {
		case 11:
			var elem = t1.elem.get();
			if(value == null) {
				var value1 = new stdgo__$internal_reflect_Value(new stdgo_AnyInterfaceData(null,new stdgo__$internal_internal_reflect__$Type(elem)),value);
				value1.canAddrBool = true;
				return value1;
			}
			var ptrValue = stdgo_Pointer.get_value(value);
			var value1 = new stdgo__$internal_reflect_Value(new stdgo_AnyInterfaceData(ptrValue,new stdgo__$internal_internal_reflect__$Type(elem)),value);
			value1.canAddrBool = true;
			return value1;
		case 15:
			var elem = t1.elem.get();
			var value1 = new stdgo__$internal_reflect_Value(new stdgo_AnyInterfaceData(value,new stdgo__$internal_internal_reflect__$Type(elem)),null);
			value1.canAddrBool = true;
			return value1;
		default:
			var _ = false;
		}
		break;
	}
	throw haxe_Exception.thrown(new stdgo__$internal_reflect_ValueError(stdgo_GoString.ofString("reflect.Value.Elem"),k));
};
stdgo__$internal_reflect_Value_$static_$extension.complex = function(_v) {
	var value = _v.value.value;
	var t = _v.value.type._common();
	if(stdgo__$internal_internal_reflect_Reflect_isNamed(t)) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			var c = _g.c;
			var name = c.__name__;
			if(StringTools.endsWith(name,"_asInterface")) {
				value = value.__underlying__().value;
			}
		} else {
			var _ = false;
		}
	}
	if(stdgo__$internal_internal_reflect_Reflect_isPointer(t)) {
		_v.value.type.gt = stdgo__$internal_internal_reflect_Reflect_getElem(t);
		value = stdgo_Pointer.get_value(value);
	}
	var value1;
	switch(stdgo__$internal_reflect_Value_$static_$extension.kind(_v)) {
	case 15:case 16:
		value1 = value;
		break;
	default:
		throw haxe_Exception.thrown(new stdgo__$internal_reflect_ValueError(stdgo_GoString.ofString("Value.Complex"),stdgo__$internal_reflect_Value_$static_$extension.kind(_v)));
	}
	return value1;
};
stdgo__$internal_reflect_Value_$static_$extension.canComplex = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.canComplex is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.close = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.close is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.cap = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.cap is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.callSlice = function(_v,_in) {
	throw haxe_Exception.thrown("Value:reflect.callSlice is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.call = function(_v,_in) {
	var gt = stdgo__$internal_internal_reflect_Reflect_getUnderlying(_v.value.type._common());
	if(gt == null) {
		throw haxe_Exception.thrown("unsupported: " + Std.string(gt));
	} else if(gt._hx_index == 2) {
		var _gvariadic = gt.variadic;
		var params = gt.params.get();
		var out = gt.results.get();
		var values = new stdgo_GoArrayData(0,0);
		var o = null;
		var func = stdgo__$internal_reflect_Value_$static_$extension.interface_(_v).value;
		var _this = stdgo_Slice.__toArray__(_in);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = stdgo__$internal_reflect_Value_$static_$extension.interface_(_this[i]).value;
		}
		func.apply(o,result);
		return values;
	} else {
		throw haxe_Exception.thrown("unsupported: " + Std.string(gt));
	}
};
stdgo__$internal_reflect_Value_$static_$extension.canSet = function(_v) {
	throw haxe_Exception.thrown("Value:reflect.canSet is not yet implemented");
};
stdgo__$internal_reflect_Value_$static_$extension.canAddr = function(_v) {
	return _v.canAddrBool;
};
stdgo__$internal_reflect_Value_$static_$extension.bytes = function(_v) {
	var _v1 = _v != null ? _v.__copy__() : null;
	var _v = _v1.__copy__();
	var value = _v.value.value;
	var t = _v.value.type._common();
	if(stdgo__$internal_internal_reflect_Reflect_isNamed(t)) {
		t = stdgo__$internal_internal_reflect_Reflect_getUnderlying(t);
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			var c = _g.c;
			var name = c.__name__;
			if(StringTools.endsWith(name,"_asInterface")) {
				value = value.__underlying__().value;
			}
		} else {
			var _ = false;
		}
	}
	if(stdgo__$internal_internal_reflect_Reflect_isPointer(t)) {
		_v.value.type.gt = stdgo__$internal_internal_reflect_Reflect_getElem(t);
		value = stdgo_Pointer.get_value(value);
		t = _v.value.type._common();
	}
	switch(t._hx_index) {
	case 7:
		var elem = t.elem.get();
		elem = stdgo__$internal_internal_reflect_Reflect_getUnderlying(elem);
		if(elem._hx_index == 3) {
			if(elem.kind == 8) {
				return value;
			} else {
				throw haxe_Exception.thrown(new stdgo__$internal_reflect_ValueError(stdgo_GoString.ofString("reflect.Value.Bytes"),stdgo__$internal_reflect_Value_$static_$extension.kind(_v)));
			}
		} else {
			throw haxe_Exception.thrown(new stdgo__$internal_reflect_ValueError(stdgo_GoString.ofString("reflect.Value.Bytes"),stdgo__$internal_reflect_Value_$static_$extension.kind(_v)));
		}
		break;
	case 12:
		var elem = t.elem.get();
		if(elem._hx_index == 3) {
			if(elem.kind == 8) {
				var _this = value;
				var args = [0];
				if(args.length > 3 || args.length < 1) {
					throw haxe_Exception.thrown("slice invalid number of args");
				}
				var low = args[0];
				var offset = low;
				var high = args.length < 2 ? _this.length : args[1];
				var max = args.length < 3 ? _this.capacity : args[2];
				var length = stdgo_GoInt32.sub(high,low);
				var capacity = stdgo_GoInt32.sub(max,low);
				var obj;
				if(_this == null) {
					var s = new stdgo_GoArrayData(0,-1);
					s.capacity = 0;
					obj = s;
				} else {
					var slice = new stdgo_GoArrayData(0,-1);
					slice.length = _this.length;
					slice.capacity = _this.capacity;
					slice.vector = _this.vector;
					slice.bytes = _this.bytes;
					slice.offset = _this.offset;
					if(slice.capacity == -1) {
						slice.capacity = 0;
					}
					slice.isNumber32 = _this.isNumber32;
					slice.isNumber64 = _this.isNumber64;
					slice.isString = _this.isString;
					obj = slice;
				}
				obj.offset = stdgo_GoInt32.add(_this.offset,offset);
				obj.capacity = capacity;
				obj.length = length;
				return obj;
			} else {
				throw haxe_Exception.thrown(new stdgo__$internal_reflect_ValueError(stdgo_GoString.ofString("reflect.Value.Bytes"),stdgo__$internal_reflect_Value_$static_$extension.kind(_v)));
			}
		} else {
			throw haxe_Exception.thrown(new stdgo__$internal_reflect_ValueError(stdgo_GoString.ofString("reflect.Value.Bytes"),stdgo__$internal_reflect_Value_$static_$extension.kind(_v)));
		}
		break;
	default:
		throw haxe_Exception.thrown(new stdgo__$internal_reflect_ValueError(stdgo_GoString.ofString("reflect.Value.Bytes"),stdgo__$internal_reflect_Value_$static_$extension.kind(_v)));
	}
};
stdgo__$internal_reflect_Value_$static_$extension.bool_ = function(_v) {
	var value = _v.value.value;
	var t = _v.value.type._common();
	if(stdgo__$internal_internal_reflect_Reflect_isNamed(t)) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			var c = _g.c;
			var name = c.__name__;
			if(StringTools.endsWith(name,"_asInterface")) {
				value = value.__underlying__().value;
			}
		} else {
			var _ = false;
		}
	}
	if(stdgo__$internal_internal_reflect_Reflect_isPointer(t)) {
		_v.value.type.gt = stdgo__$internal_internal_reflect_Reflect_getElem(t);
		value = stdgo_Pointer.get_value(value);
	}
	var value1;
	if(stdgo__$internal_reflect_Value_$static_$extension.kind(_v) == 1) {
		value1 = value;
	} else {
		throw haxe_Exception.thrown(new stdgo__$internal_reflect_ValueError(stdgo_GoString.ofString("reflect.Value.Bool"),stdgo__$internal_reflect_Value_$static_$extension.kind(_v)));
	}
	return value1;
};
stdgo__$internal_reflect_Value_$static_$extension.addr = function(_v) {
	var _v1 = _v != null ? _v.__copy__() : null;
	var gt = stdgo__$internal_internal_reflect_GoType.pointerType({ get : function() {
		return _v1.value.type._common();
	}});
	var t = new stdgo__$internal_internal_reflect__$Type(gt);
	var e = _v1.value.value;
	return new stdgo__$internal_reflect_Value(new stdgo_AnyInterfaceData(new stdgo_PointerData(function() {
		return e;
	},function(v) {
		e = v;
		return e;
	},false),t));
};
var stdgo__$internal_reflect_ValueError = function(method,kind,toString) {
	this.kind = 0;
	this.method = stdgo_GoString.ofString("");
	if(method != null) {
		this.method = method;
	}
	if(kind != null) {
		this.kind = kind;
	}
	if(toString != null) {
		this.toString = toString;
	}
};
$hxClasses["stdgo._internal.reflect.ValueError"] = stdgo__$internal_reflect_ValueError;
stdgo__$internal_reflect_ValueError.__name__ = "stdgo._internal.reflect.ValueError";
stdgo__$internal_reflect_ValueError.prototype = {
	toString: function() {
		return stdgo_GoString.toString(stdgo_GoString.add(stdgo_GoString.ofString(""),this.method));
	}
	,__class__: stdgo__$internal_reflect_ValueError
};
var stdgo__$internal_reflect_ValueError_$static_$extension = function() { };
$hxClasses["stdgo._internal.reflect.ValueError_static_extension"] = stdgo__$internal_reflect_ValueError_$static_$extension;
stdgo__$internal_reflect_ValueError_$static_$extension.__name__ = "stdgo._internal.reflect.ValueError_static_extension";
stdgo__$internal_reflect_ValueError_$static_$extension.error = function(_e) {
	throw haxe_Exception.thrown("ValueError:reflect.error is not yet implemented");
};
function stdgo__$internal_time_Time_$_$fmtfrac__fmtFrac(_buf,_v,_prec) {
	var _nw = 0;
	var _nv = stdgo_GoNumber_ofIntUInt64(0);
	var _w = stdgo_Slice.get_length(_buf);
	var _print = false;
	var _i = 0;
	while(stdgo_GoInt32.lt(_i,_prec)) {
		var _digit = stdgo_GoUInt64.mod(_v,new haxe__$Int64__$_$_$Int64(0,10));
		_print = _print || stdgo_GoUInt64.neq(_digit,new haxe__$Int64__$_$_$Int64(0,0));
		if(_print) {
			_w = _w - 1 | 0;
			stdgo_Slice.__set__(_buf,_w,stdgo_GoUInt8.add(stdgo_GoNumber_clampUInt8(stdgo_GoNumber_toIntInt64(_digit)),48));
		}
		_v = stdgo_GoUInt64.div(_v,new haxe__$Int64__$_$_$Int64(0,10));
		_i = _i + 1 | 0;
	}
	if(_print) {
		_w = _w - 1 | 0;
		stdgo_Slice.__set__(_buf,_w,46);
	}
	var __tmp__ = { _0 : _w, _1 : _v};
	_nw = __tmp__._0;
	_nv = __tmp__._1;
	return __tmp__;
}
function stdgo__$internal_time_Time_$_$fmtint__fmtInt(_buf,_v) {
	var _w = stdgo_Slice.get_length(_buf);
	if(stdgo_GoUInt64.equals(_v,new haxe__$Int64__$_$_$Int64(0,0))) {
		_w = _w - 1 | 0;
		stdgo_Slice.__set__(_buf,_w,48);
	} else {
		while(stdgo_GoUInt64.gt(_v,new haxe__$Int64__$_$_$Int64(0,0))) {
			_w = _w - 1 | 0;
			stdgo_Slice.__set__(_buf,_w,stdgo_GoUInt8.add(stdgo_GoNumber_clampUInt8(stdgo_GoNumber_toIntInt64(stdgo_GoUInt64.mod(_v,new haxe__$Int64__$_$_$Int64(0,10)))),48));
			_v = stdgo_GoUInt64.div(_v,new haxe__$Int64__$_$_$Int64(0,10));
		}
	}
	return _w;
}
function stdgo__$internal_time_Time_$_$lessthanhalf__lessThanHalf(_x,_y) {
	return stdgo_GoUInt64.lt(stdgo_GoUInt64.add(stdgo_GoInt64.toUInt64(_x),stdgo_GoInt64.toUInt64(_x)),stdgo_GoInt64.toUInt64(_y));
}
var stdgo__$internal_time_Duration_$static_$extension = function() { };
$hxClasses["stdgo._internal.time.Duration_static_extension"] = stdgo__$internal_time_Duration_$static_$extension;
stdgo__$internal_time_Duration_$static_$extension.__name__ = "stdgo._internal.time.Duration_static_extension";
stdgo__$internal_time_Duration_$static_$extension.abs = function(_d) {
	var _d1 = _d;
	if(stdgo_GoInt64.gte(_d1,new haxe__$Int64__$_$_$Int64(0,0))) {
		return _d1;
	} else if(stdgo_GoInt64.equals(_d1,new haxe__$Int64__$_$_$Int64(-2147483648,0))) {
		return new haxe__$Int64__$_$_$Int64(2147483647,-1);
	} else {
		return stdgo_GoInt64.neg(_d1);
	}
};
stdgo__$internal_time_Duration_$static_$extension.round = function(_d,_m) {
	var _d1 = _d;
	if(stdgo_GoInt64.lte(_m,new haxe__$Int64__$_$_$Int64(0,0))) {
		return _d1;
	}
	var _r = stdgo_GoInt64.mod(_d1,_m);
	if(stdgo_GoInt64.lt(_d1,new haxe__$Int64__$_$_$Int64(0,0))) {
		_r = stdgo_GoInt64.neg(_r);
		if(stdgo__$internal_time_Time_$_$lessthanhalf__lessThanHalf(_r,_m)) {
			return stdgo_GoInt64.add(_d1,_r);
		}
		var _d11 = stdgo_GoInt64.add(stdgo_GoInt64.sub(_d1,_m),_r);
		if(stdgo_GoInt64.lt(_d11,_d1)) {
			return _d11;
		}
		return new haxe__$Int64__$_$_$Int64(-2147483648,0);
	}
	if(stdgo__$internal_time_Time_$_$lessthanhalf__lessThanHalf(_r,_m)) {
		return stdgo_GoInt64.sub(_d1,_r);
	}
	var _d11 = stdgo_GoInt64.sub(stdgo_GoInt64.add(_d1,_m),_r);
	if(stdgo_GoInt64.gt(_d11,_d1)) {
		return _d11;
	}
	return new haxe__$Int64__$_$_$Int64(2147483647,-1);
};
stdgo__$internal_time_Duration_$static_$extension.truncate = function(_d,_m) {
	var _d1 = _d;
	if(stdgo_GoInt64.lte(_m,new haxe__$Int64__$_$_$Int64(0,0))) {
		return _d1;
	}
	return stdgo_GoInt64.sub(_d1,stdgo_GoInt64.mod(_d1,_m));
};
stdgo__$internal_time_Duration_$static_$extension.hours = function(_d) {
	var _d1 = _d;
	var _hour = stdgo_GoInt64.div(_d1,new haxe__$Int64__$_$_$Int64(838,817405952));
	var _nsec = stdgo_GoInt64.mod(_d1,new haxe__$Int64__$_$_$Int64(838,817405952));
	return stdgo_GoFloat64.add(stdgo_GoNumber_toIntInt64(_hour),stdgo_GoFloat64.div(stdgo_GoNumber_toIntInt64(_nsec),3.6e+12));
};
stdgo__$internal_time_Duration_$static_$extension.minutes = function(_d) {
	var _d1 = _d;
	var _min = stdgo_GoInt64.div(_d1,new haxe__$Int64__$_$_$Int64(13,-129542144));
	var _nsec = stdgo_GoInt64.mod(_d1,new haxe__$Int64__$_$_$Int64(13,-129542144));
	return stdgo_GoFloat64.add(stdgo_GoNumber_toIntInt64(_min),stdgo_GoFloat64.div(stdgo_GoNumber_toIntInt64(_nsec),6e+10));
};
stdgo__$internal_time_Duration_$static_$extension.seconds = function(_d) {
	var _d1 = _d;
	var _sec = stdgo_GoInt64.div(_d1,new haxe__$Int64__$_$_$Int64(0,1000000000));
	var _nsec = stdgo_GoInt64.mod(_d1,new haxe__$Int64__$_$_$Int64(0,1000000000));
	return stdgo_GoFloat64.add(stdgo_GoNumber_toIntInt64(_sec),stdgo_GoFloat64.div(stdgo_GoNumber_toIntInt64(_nsec),1e+09));
};
stdgo__$internal_time_Duration_$static_$extension.milliseconds = function(_d) {
	var _d1 = _d;
	return stdgo_GoInt64.div(_d1,new haxe__$Int64__$_$_$Int64(0,1000000));
};
stdgo__$internal_time_Duration_$static_$extension.microseconds = function(_d) {
	var _d1 = _d;
	return stdgo_GoInt64.div(_d1,new haxe__$Int64__$_$_$Int64(0,1000));
};
stdgo__$internal_time_Duration_$static_$extension.nanoseconds = function(_d) {
	var _d1 = _d;
	return _d1;
};
stdgo__$internal_time_Duration_$static_$extension.string = function(_d) {
	var _d1 = _d;
	var _buf = stdgo_GoArray.__setNumber32__(new stdgo_GoArrayData(32,32));
	var _w = stdgo_GoArray.get_length(_buf);
	var _u = stdgo_GoInt64.toUInt64(_d1);
	var _neg = stdgo_GoInt64.lt(_d1,new haxe__$Int64__$_$_$Int64(0,0));
	if(_neg) {
		_u = stdgo_GoInt64.toUInt64(haxe_UInt64.mul(_u,new haxe__$Int64__$_$_$Int64(-1,-1)));
	}
	if(stdgo_GoUInt64.lt(_u,stdgo_GoInt64.toUInt64(new haxe__$Int64__$_$_$Int64(0,1000000000)))) {
		var _prec = 0;
		_w = _w - 1 | 0;
		stdgo_GoArray.__set__(_buf,_w,115);
		_w = _w - 1 | 0;
		if(stdgo_GoUInt64.equals(_u,new haxe__$Int64__$_$_$Int64(0,0))) {
			return stdgo_GoString.ofString("0s");
		} else if(stdgo_GoUInt64.lt(_u,stdgo_GoInt64.toUInt64(new haxe__$Int64__$_$_$Int64(0,1000)))) {
			_prec = 0;
			stdgo_GoArray.__set__(_buf,_w,110);
		} else if(stdgo_GoUInt64.lt(_u,stdgo_GoInt64.toUInt64(new haxe__$Int64__$_$_$Int64(0,1000000)))) {
			_prec = 3;
			_w = _w - 1 | 0;
			var _this = _buf;
			var args = [_w];
			if(args.length > 3 || args.length < 1) {
				throw haxe_Exception.thrown("slice invalid number of args");
			}
			var low = args[0];
			var offset = low;
			var high = args.length < 2 ? _this.length : args[1];
			var max = args.length < 3 ? _this.capacity : args[2];
			var length = stdgo_GoInt32.sub(high,low);
			var capacity = stdgo_GoInt32.sub(max,low);
			var obj;
			if(_this == null) {
				var s = new stdgo_GoArrayData(0,-1);
				s.capacity = 0;
				obj = s;
			} else {
				var slice = new stdgo_GoArrayData(0,-1);
				slice.length = _this.length;
				slice.capacity = _this.capacity;
				slice.vector = _this.vector;
				slice.bytes = _this.bytes;
				slice.offset = _this.offset;
				if(slice.capacity == -1) {
					slice.capacity = 0;
				}
				slice.isNumber32 = _this.isNumber32;
				slice.isNumber64 = _this.isNumber64;
				slice.isString = _this.isString;
				obj = slice;
			}
			obj.offset = stdgo_GoInt32.add(_this.offset,offset);
			obj.capacity = capacity;
			obj.length = length;
			stdgo_Slice.__copyTo__(obj,stdgo_GoString.__toSliceByte__(stdgo_GoString.ofString("µ")));
		} else {
			_prec = 6;
			stdgo_GoArray.__set__(_buf,_w,109);
		}
		var _this = _buf;
		var args = [0,_w];
		if(args.length > 3 || args.length < 1) {
			throw haxe_Exception.thrown("slice invalid number of args");
		}
		var low = args[0];
		var offset = low;
		var high = args.length < 2 ? _this.length : args[1];
		var max = args.length < 3 ? _this.capacity : args[2];
		var length = stdgo_GoInt32.sub(high,low);
		var capacity = stdgo_GoInt32.sub(max,low);
		var obj;
		if(_this == null) {
			var s = new stdgo_GoArrayData(0,-1);
			s.capacity = 0;
			obj = s;
		} else {
			var slice = new stdgo_GoArrayData(0,-1);
			slice.length = _this.length;
			slice.capacity = _this.capacity;
			slice.vector = _this.vector;
			slice.bytes = _this.bytes;
			slice.offset = _this.offset;
			if(slice.capacity == -1) {
				slice.capacity = 0;
			}
			slice.isNumber32 = _this.isNumber32;
			slice.isNumber64 = _this.isNumber64;
			slice.isString = _this.isString;
			obj = slice;
		}
		obj.offset = stdgo_GoInt32.add(_this.offset,offset);
		obj.capacity = capacity;
		obj.length = length;
		var __tmp__ = stdgo__$internal_time_Time_$_$fmtfrac__fmtFrac(obj,_u,_prec);
		_w = __tmp__._0;
		_u = __tmp__._1;
		var _this = _buf;
		var args = [0,_w];
		if(args.length > 3 || args.length < 1) {
			throw haxe_Exception.thrown("slice invalid number of args");
		}
		var low = args[0];
		var offset = low;
		var high = args.length < 2 ? _this.length : args[1];
		var max = args.length < 3 ? _this.capacity : args[2];
		var length = stdgo_GoInt32.sub(high,low);
		var capacity = stdgo_GoInt32.sub(max,low);
		var obj;
		if(_this == null) {
			var s = new stdgo_GoArrayData(0,-1);
			s.capacity = 0;
			obj = s;
		} else {
			var slice = new stdgo_GoArrayData(0,-1);
			slice.length = _this.length;
			slice.capacity = _this.capacity;
			slice.vector = _this.vector;
			slice.bytes = _this.bytes;
			slice.offset = _this.offset;
			if(slice.capacity == -1) {
				slice.capacity = 0;
			}
			slice.isNumber32 = _this.isNumber32;
			slice.isNumber64 = _this.isNumber64;
			slice.isString = _this.isString;
			obj = slice;
		}
		obj.offset = stdgo_GoInt32.add(_this.offset,offset);
		obj.capacity = capacity;
		obj.length = length;
		_w = stdgo__$internal_time_Time_$_$fmtint__fmtInt(obj,_u);
	} else {
		_w = _w - 1 | 0;
		stdgo_GoArray.__set__(_buf,_w,115);
		var _this = _buf;
		var args = [0,_w];
		if(args.length > 3 || args.length < 1) {
			throw haxe_Exception.thrown("slice invalid number of args");
		}
		var low = args[0];
		var offset = low;
		var high = args.length < 2 ? _this.length : args[1];
		var max = args.length < 3 ? _this.capacity : args[2];
		var length = stdgo_GoInt32.sub(high,low);
		var capacity = stdgo_GoInt32.sub(max,low);
		var obj;
		if(_this == null) {
			var s = new stdgo_GoArrayData(0,-1);
			s.capacity = 0;
			obj = s;
		} else {
			var slice = new stdgo_GoArrayData(0,-1);
			slice.length = _this.length;
			slice.capacity = _this.capacity;
			slice.vector = _this.vector;
			slice.bytes = _this.bytes;
			slice.offset = _this.offset;
			if(slice.capacity == -1) {
				slice.capacity = 0;
			}
			slice.isNumber32 = _this.isNumber32;
			slice.isNumber64 = _this.isNumber64;
			slice.isString = _this.isString;
			obj = slice;
		}
		obj.offset = stdgo_GoInt32.add(_this.offset,offset);
		obj.capacity = capacity;
		obj.length = length;
		var __tmp__ = stdgo__$internal_time_Time_$_$fmtfrac__fmtFrac(obj,_u,9);
		_w = __tmp__._0;
		_u = __tmp__._1;
		var _this = _buf;
		var args = [0,_w];
		if(args.length > 3 || args.length < 1) {
			throw haxe_Exception.thrown("slice invalid number of args");
		}
		var low = args[0];
		var offset = low;
		var high = args.length < 2 ? _this.length : args[1];
		var max = args.length < 3 ? _this.capacity : args[2];
		var length = stdgo_GoInt32.sub(high,low);
		var capacity = stdgo_GoInt32.sub(max,low);
		var obj;
		if(_this == null) {
			var s = new stdgo_GoArrayData(0,-1);
			s.capacity = 0;
			obj = s;
		} else {
			var slice = new stdgo_GoArrayData(0,-1);
			slice.length = _this.length;
			slice.capacity = _this.capacity;
			slice.vector = _this.vector;
			slice.bytes = _this.bytes;
			slice.offset = _this.offset;
			if(slice.capacity == -1) {
				slice.capacity = 0;
			}
			slice.isNumber32 = _this.isNumber32;
			slice.isNumber64 = _this.isNumber64;
			slice.isString = _this.isString;
			obj = slice;
		}
		obj.offset = stdgo_GoInt32.add(_this.offset,offset);
		obj.capacity = capacity;
		obj.length = length;
		_w = stdgo__$internal_time_Time_$_$fmtint__fmtInt(obj,stdgo_GoUInt64.mod(_u,new haxe__$Int64__$_$_$Int64(0,60)));
		_u = stdgo_GoUInt64.div(_u,new haxe__$Int64__$_$_$Int64(0,60));
		if(stdgo_GoUInt64.gt(_u,new haxe__$Int64__$_$_$Int64(0,0))) {
			_w = _w - 1 | 0;
			stdgo_GoArray.__set__(_buf,_w,109);
			var _this = _buf;
			var args = [0,_w];
			if(args.length > 3 || args.length < 1) {
				throw haxe_Exception.thrown("slice invalid number of args");
			}
			var low = args[0];
			var offset = low;
			var high = args.length < 2 ? _this.length : args[1];
			var max = args.length < 3 ? _this.capacity : args[2];
			var length = stdgo_GoInt32.sub(high,low);
			var capacity = stdgo_GoInt32.sub(max,low);
			var obj;
			if(_this == null) {
				var s = new stdgo_GoArrayData(0,-1);
				s.capacity = 0;
				obj = s;
			} else {
				var slice = new stdgo_GoArrayData(0,-1);
				slice.length = _this.length;
				slice.capacity = _this.capacity;
				slice.vector = _this.vector;
				slice.bytes = _this.bytes;
				slice.offset = _this.offset;
				if(slice.capacity == -1) {
					slice.capacity = 0;
				}
				slice.isNumber32 = _this.isNumber32;
				slice.isNumber64 = _this.isNumber64;
				slice.isString = _this.isString;
				obj = slice;
			}
			obj.offset = stdgo_GoInt32.add(_this.offset,offset);
			obj.capacity = capacity;
			obj.length = length;
			_w = stdgo__$internal_time_Time_$_$fmtint__fmtInt(obj,stdgo_GoUInt64.mod(_u,new haxe__$Int64__$_$_$Int64(0,60)));
			_u = stdgo_GoUInt64.div(_u,new haxe__$Int64__$_$_$Int64(0,60));
			if(stdgo_GoUInt64.gt(_u,new haxe__$Int64__$_$_$Int64(0,0))) {
				_w = _w - 1 | 0;
				stdgo_GoArray.__set__(_buf,_w,104);
				var _this = _buf;
				var args = [0,_w];
				if(args.length > 3 || args.length < 1) {
					throw haxe_Exception.thrown("slice invalid number of args");
				}
				var low = args[0];
				var offset = low;
				var high = args.length < 2 ? _this.length : args[1];
				var max = args.length < 3 ? _this.capacity : args[2];
				var length = stdgo_GoInt32.sub(high,low);
				var capacity = stdgo_GoInt32.sub(max,low);
				var obj;
				if(_this == null) {
					var s = new stdgo_GoArrayData(0,-1);
					s.capacity = 0;
					obj = s;
				} else {
					var slice = new stdgo_GoArrayData(0,-1);
					slice.length = _this.length;
					slice.capacity = _this.capacity;
					slice.vector = _this.vector;
					slice.bytes = _this.bytes;
					slice.offset = _this.offset;
					if(slice.capacity == -1) {
						slice.capacity = 0;
					}
					slice.isNumber32 = _this.isNumber32;
					slice.isNumber64 = _this.isNumber64;
					slice.isString = _this.isString;
					obj = slice;
				}
				obj.offset = stdgo_GoInt32.add(_this.offset,offset);
				obj.capacity = capacity;
				obj.length = length;
				_w = stdgo__$internal_time_Time_$_$fmtint__fmtInt(obj,_u);
			}
		}
	}
	if(_neg) {
		_w = _w - 1 | 0;
		stdgo_GoArray.__set__(_buf,_w,45);
	}
	var _this = _buf;
	var args = [_w];
	if(args.length > 3 || args.length < 1) {
		throw haxe_Exception.thrown("slice invalid number of args");
	}
	var low = args[0];
	var offset = low;
	var high = args.length < 2 ? _this.length : args[1];
	var max = args.length < 3 ? _this.capacity : args[2];
	var length = stdgo_GoInt32.sub(high,low);
	var capacity = stdgo_GoInt32.sub(max,low);
	var obj;
	if(_this == null) {
		var s = new stdgo_GoArrayData(0,-1);
		s.capacity = 0;
		obj = s;
	} else {
		var slice = new stdgo_GoArrayData(0,-1);
		slice.length = _this.length;
		slice.capacity = _this.capacity;
		slice.vector = _this.vector;
		slice.bytes = _this.bytes;
		slice.offset = _this.offset;
		if(slice.capacity == -1) {
			slice.capacity = 0;
		}
		slice.isNumber32 = _this.isNumber32;
		slice.isNumber64 = _this.isNumber64;
		slice.isString = _this.isString;
		obj = slice;
	}
	obj.offset = stdgo_GoInt32.add(_this.offset,offset);
	obj.capacity = capacity;
	obj.length = length;
	var tmp = stdgo_GoString.ofSliceByte(obj);
	if(tmp != null) {
		return stdgo_GoString.__copy__(tmp);
	} else {
		return null;
	}
};
var stdgo__$internal_unicode_utf8_T_$acceptRange = function(_lo,_hi) {
	this._hi = 0;
	this._lo = 0;
	if(_lo != null) {
		this._lo = _lo;
	}
	if(_hi != null) {
		this._hi = _hi;
	}
};
$hxClasses["stdgo._internal.unicode.utf8.T_acceptRange"] = stdgo__$internal_unicode_utf8_T_$acceptRange;
stdgo__$internal_unicode_utf8_T_$acceptRange.__name__ = "stdgo._internal.unicode.utf8.T_acceptRange";
stdgo__$internal_unicode_utf8_T_$acceptRange.prototype = {
	__class__: stdgo__$internal_unicode_utf8_T_$acceptRange
};
var stdgo__$internal_unicode_utf8_T_$acceptRange_$static_$extension = function() { };
$hxClasses["stdgo._internal.unicode.utf8.T_acceptRange_static_extension"] = stdgo__$internal_unicode_utf8_T_$acceptRange_$static_$extension;
stdgo__$internal_unicode_utf8_T_$acceptRange_$static_$extension.__name__ = "stdgo._internal.unicode.utf8.T_acceptRange_static_extension";
function stdgo__$internal_unicode_utf8_Utf8_$validstring_validString(_s) {
	while(stdgo_GoInt32.gte(stdgo_GoString.get_length(_s),8)) {
		var _first32 = stdgo_GoUInt32.or(stdgo_GoUInt32.or(stdgo_GoUInt32.or(stdgo_GoNumber_clampUInt(stdgo_GoString.__get__(_s,0)),stdgo_GoUInt32.shl(stdgo_GoNumber_clampUInt(stdgo_GoString.__get__(_s,1)),stdgo_GoNumber_clampUInt(stdgo_GoNumber_toIntInt64(new haxe__$Int64__$_$_$Int64(0,8))))),stdgo_GoUInt32.shl(stdgo_GoNumber_clampUInt(stdgo_GoString.__get__(_s,2)),stdgo_GoNumber_clampUInt(stdgo_GoNumber_toIntInt64(new haxe__$Int64__$_$_$Int64(0,16))))),stdgo_GoUInt32.shl(stdgo_GoNumber_clampUInt(stdgo_GoString.__get__(_s,3)),stdgo_GoNumber_clampUInt(stdgo_GoNumber_toIntInt64(new haxe__$Int64__$_$_$Int64(0,24)))));
		var _second32 = stdgo_GoUInt32.or(stdgo_GoUInt32.or(stdgo_GoUInt32.or(stdgo_GoNumber_clampUInt(stdgo_GoString.__get__(_s,4)),stdgo_GoUInt32.shl(stdgo_GoNumber_clampUInt(stdgo_GoString.__get__(_s,5)),stdgo_GoNumber_clampUInt(stdgo_GoNumber_toIntInt64(new haxe__$Int64__$_$_$Int64(0,8))))),stdgo_GoUInt32.shl(stdgo_GoNumber_clampUInt(stdgo_GoString.__get__(_s,6)),stdgo_GoNumber_clampUInt(stdgo_GoNumber_toIntInt64(new haxe__$Int64__$_$_$Int64(0,16))))),stdgo_GoUInt32.shl(stdgo_GoNumber_clampUInt(stdgo_GoString.__get__(_s,7)),stdgo_GoNumber_clampUInt(stdgo_GoNumber_toIntInt64(new haxe__$Int64__$_$_$Int64(0,24)))));
		if(stdgo_GoUInt32.notEquals(stdgo_GoUInt32.and(stdgo_GoUInt32.or(_first32,_second32),-2139062144),0)) {
			break;
		}
		var tmp = stdgo_GoString.__slice__(_s,8);
		_s = tmp != null ? stdgo_GoString.__copy__(tmp) : null;
	}
	var _n = stdgo_GoString.get_length(_s);
	var _i = 0;
	while(stdgo_GoInt32.lt(_i,_n)) {
		var _si = stdgo_GoString.__get__(_s,_i);
		if(stdgo_GoUInt8.lt(_si,128)) {
			_i = _i + 1 | 0;
			continue;
		}
		var _x = stdgo_GoArray.__get__(stdgo__$internal_unicode_utf8_Utf8_$_$first__first,_si);
		if(_x == 241) {
			return false;
		}
		var _size = stdgo_GoUInt8.and(_x,7);
		if(stdgo_GoInt32.gt(stdgo_GoInt32.add(_i,_size),_n)) {
			return false;
		}
		var _accept = stdgo_GoArray.__get__(stdgo__$internal_unicode_utf8_Utf8_$_$acceptranges__acceptRanges,stdgo_GoUInt8.shr(_x,stdgo_GoNumber_clampUInt8(stdgo_GoNumber_toIntInt64(new haxe__$Int64__$_$_$Int64(0,4)))));
		var _c = stdgo_GoString.__get__(_s,stdgo_GoInt32.add(_i,1));
		if(stdgo_GoUInt8.lt(_c,_accept._lo) || stdgo_GoUInt8.lt(_accept._hi,_c)) {
			return false;
		} else if(_size != 2) {
			var _c1 = stdgo_GoString.__get__(_s,stdgo_GoInt32.add(_i,2));
			if(stdgo_GoUInt8.lt(_c1,128) || stdgo_GoUInt8.lt(191,_c1)) {
				return false;
			} else if(_size != 3) {
				var _c2 = stdgo_GoString.__get__(_s,stdgo_GoInt32.add(_i,3));
				if(stdgo_GoUInt8.lt(_c2,128) || stdgo_GoUInt8.lt(191,_c2)) {
					return false;
				}
			}
		}
		_i = stdgo_GoInt32.add(_i,_size);
	}
	return true;
}
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : $hxClasses["String"] = String, enumerable : false, writable : true});
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
haxe_MainLoop.add(hxd_System.updateCursor,-1);
js_Boot.__toStr = ({ }).toString;
var hx__registerFont;
hx__registerFont = function(name,data) {
	var s = window.document.createElement("style");
	s.type = "text/css";
	s.innerHTML = "@font-face{ font-family: " + (name == null ? "null" : "" + name) + "; src: url('data:font/ttf;base64," + Std.string(data) + "') format('truetype'); }";
	window.document.getElementsByTagName("head")[0].appendChild(s);
	var div = window.document.createElement("div");
	div.style.fontFamily = name;
	div.style.opacity = 0;
	div.style.width = "1px";
	div.style.height = "1px";
	div.style.position = "fixed";
	div.style.bottom = "0px";
	div.style.right = "0px";
	div.innerHTML = ".";
	div.className = "hx__loadFont";
	window.document.body.appendChild(div);
};
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
var _$internal_github_$dot_$com_charmbracelet_harmonica_Harmonica_$_$epsilon__epsilon = stdgo_GoFloat64.sub(stdgo__$internal_math_Math_$nextafter_nextafter(1,2),1);
h2d_Object.tmpPoint = new h2d_col_PointImpl(0.,0.);
h3d_impl_RenderContext.STRICT = true;
h2d_filter_Filter.defaultUseScreenResolution = false;
h3d_Buffer.GUID = 0;
h3d_Engine.SOFTWARE_DRIVER = false;
h3d_Engine.ANTIALIASING = 0;
h3d_impl_GlDriver.ALLOW_WEBGL2 = true;
h3d_impl_GlDriver.BLACK = (function($this) {
	var $r;
	var x = 0;
	var y = 0;
	var z = 0;
	var w = 0;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	$r = new h3d_Vector4Impl(x,y,z,w);
	return $r;
}(this));
h3d_impl_GlDriver.outOfMemoryCheck = false;
h3d_impl_GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d_impl_GlDriver.TWRAP = [33071,10497];
h3d_impl_GlDriver.FACES = [0,1028,1029,1032];
h3d_impl_GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d_impl_GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d_impl_GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d_impl_GlDriver.OP = [32774,32778,32779,32775,32776];
h3d_impl_GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d_impl_GlDriver.CBUFFERS = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 32) {
			var i = _g1++;
			var _g2 = [];
			var _g3 = 0;
			var _g4 = i;
			while(_g3 < _g4) {
				var k = _g3++;
				_g2.push(36064 + k);
			}
			_g.push(_g2);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d_impl_TextureCache.checkFlags = -1;
h3d_mat_Defaults.defaultKillAlphaThreshold = 0.5;
h3d_mat_Defaults.loadingTextureColor = -65281;
h3d_mat_MaterialSetup.current = new h3d_mat_MaterialSetup("Default");
h3d_mat_Texture.UID = 0;
h3d_mat_Texture.PREVENT_AUTO_DISPOSE = 2147483647;
h3d_mat_Texture.nativeFormat = hxd_PixelFormat.RGBA;
h3d_mat_Texture.TRILINEAR_FILTERING_ENABLED = true;
h3d_mat_Texture.DEFAULT_WRAP = h3d_mat_Wrap.Clamp;
h3d_pass_Blur.__meta__ = { obj : { ignore : ["shader"]}};
h3d_shader_ScreenShader.SRC = "HXSMF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKw4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA";
h3d_shader_ScreenShader._MODULE = "h3d.shader.ScreenShader";
h3d_pass__$Border_BorderShader.SRC = "HXSMHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMrDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA";
h3d_pass__$Border_BorderShader._MODULE = "h3d.pass.Border";
h3d_pass__$Copy_ArrayCopyShader.SRC = "HXSMHmgzZC5wYXNzLl9Db3B5LkFycmF5Q29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQoDAgAACwVsYXllcgECAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAysOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQEGBAIIBQwJAyIOAgIKCgMJAyoOAgIJBQoJAycOAQILAQMFCwUMBQwA";
h3d_pass__$Copy_ArrayCopyShader._MODULE = "h3d.pass.Copy";
h3d_pass__$Copy_CopyShader.SRC = "HXSMGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgIAAAsIX19pbml0X18OBgAADAZ2ZXJ0ZXgOBgAADQhmcmFnbWVudA4GAAADAgsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAMAAAFAQYEAgYFDAkDKw4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAENAAAFAQYEAggFDAkDIg4CAgoKAgIJBQoFDAUMAA";
h3d_pass__$Copy_CopyShader._MODULE = "h3d.pass.Copy";
h3d_pass__$CubeCopy_CubeCopyShader.SRC = "HXSMIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQoGAgAACwNtYXQGAgAADAhfX2luaXRfXw4GAAANBnZlcnRleA4GAAAOCGZyYWdtZW50DgYAAAMCDAAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA0AAAUBBgQCBgUMCQMrDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ4AAAUCCA8CdXYFCgQAAAYDBgECCQUKAQMAAAAAAAAAQAMFCgEDAAAAAAAA8D8DBQoABgQCCAUMCQMiDgICCgoGCQMgDgEGAQkDKg4CAg8FCgEDAAAAAAAA8D8DBQsCCwYFCwULBQwFDAA";
h3d_pass__$CubeCopy_CubeCopyShader._MODULE = "h3d.pass.CubeCopy";
h3d_shader_AmbientLight.SRC = "HXSMF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMqDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKg4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA";
h3d_shader_AmbientLight._MODULE = "h3d.shader.AmbientLight";
h3d_shader_Base2d.SRC = "HXSMEWgzZC5zaGFkZXIuQmFzZTJkGwEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgIAAAsOc3ByaXRlUG9zaXRpb24FDAQAAAwQYWJzb2x1dGVQb3NpdGlvbgUMBAAADQpwaXhlbENvbG9yBQwEAAAODHRleHR1cmVDb2xvcgUMBAAADwxjYWxjdWxhdGVkVVYFCgMAABAKaXNSZWxhdGl2ZQICAAEAAAAAABEFY29sb3IFDAIAABIPYWJzb2x1dGVNYXRyaXhBBQsCAAATD2Fic29sdXRlTWF0cml4QgULAgAAFA1maWx0ZXJNYXRyaXhBBQsCAAAVDWZpbHRlck1hdHJpeEIFCwIAABYIaGFzVVZQb3MCAgABAAAAAAAXBXV2UG9zBQwCAAAYCWtpbGxBbHBoYQICAAEAAAAAABkKcGl4ZWxBbGlnbgICAAEAAAAAABoQaGFsZlBpeGVsSW52ZXJzZQUKAgAAGwl2aWV3cG9ydEEFCwIAABwJdmlld3BvcnRCBQsCAAAdDm91dHB1dFBvc2l0aW9uBQwEAAAeCF9faW5pdF9fDgYAAB8GdmVydGV4DgYAACAIZnJhZ21lbnQOBgAAAwIeAAAFBgYEAgsFDAkDKw4DAgIFCgIJAwEDAAAAAAAA8D8DBQwFDAsCEAIFAwYECgIMBQwAAAMJAx4OAgkDKg4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwISBQsDAwYECgIMBQwEAAMJAx4OAgkDKg4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwITBQsDAwYECgIMBQw5AAUKCgILBQw5AAUKBQoABgQCDAUMAgsFDAUMAAYEAg8FCgsCFgIGAAYBAgMFCgoCFwUMOQAFCgUKCgIXBQwRAAUKBQoCAwUKBQoFCgYEAg0FDAsCEAIGAQIRBQwCBAUMBQwCBAUMBQwFDAYEAg4FDAkDIg4CAgoKAgIPBQoFDAUMBoECDQUMAg4FDAUMAAAfAAAFBQghA3RtcAULBAAACQMqDgIKAgwFDBEABQoBAwAAAAAAAPA/AwULAAYEAiEFCwkDKg4DCQMeDgICIQULAhQFCwMJAx4OAgIhBQsCFQULAwEDAAAAAAAA8D8DBQsFCwYEAh0FDAkDKw4DCQMeDgICIQULAhsFCwMJAx4OAgIhBQsCHAULAwoCDAUMOQAFCgUMBQwLAhkCBoMKAh0FDBEABQoCGgUKBQoAAAYEAgYFDAIdBQwFDAABIAAABQILBg4CGAIGCQoCDQUMDAADAQP8qfHSTWJQPwMCAgwAAAAGBAIHBQwCDQUMBQwA";
h3d_shader_Base2d._MODULE = "h3d.shader.Base2d";
h3d_shader_BaseMesh.SRC = "HXSME2gzZC5zaGFkZXIuQmFzZU1lc2gcAQZjYW1lcmENAQwCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAIEHByZXZpb3VzVmlld1Byb2oHAAEACQ9pbnZlcnNlVmlld1Byb2oHAAEACgV6TmVhcgMAAQALBHpGYXIDAAEADANkaXIFCwMBAA0Naml0dGVyT2Zmc2V0cwUMAAEAAAAADgZnbG9iYWwNAgUPBHRpbWUDAA4AEAlwaXhlbFNpemUFCgAOABEJbW9kZWxWaWV3BwAOAQMSEG1vZGVsVmlld0ludmVyc2UHAA4BAxMRcHJldmlvdXNNb2RlbFZpZXcHAA4BAwAAABQFaW5wdXQNAwIVCHBvc2l0aW9uBQsBFAAWBm5vcm1hbAULARQAAQAAFwZvdXRwdXQNBAYYCHBvc2l0aW9uBQwEFwAZBWNvbG9yBQwEFwAaBWRlcHRoAwQXABsGbm9ybWFsBQsEFwAcCXdvcmxkRGlzdAMEFwAdCHZlbG9jaXR5BQoEFwAEAAAeEHJlbGF0aXZlUG9zaXRpb24FCwQAAB8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAIBtwcmV2aW91c1RyYW5zZm9ybWVkUG9zaXRpb24FCwQAACEYcGl4ZWxUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAiEXRyYW5zZm9ybWVkTm9ybWFsBQsEAAAjEXByb2plY3RlZFBvc2l0aW9uBQwEAAAkGXByZXZpb3VzUHJvamVjdGVkUG9zaXRpb24FDAQAACUKcGl4ZWxDb2xvcgUMBAAAJgVkZXB0aAMEAAAnC25kY1Bvc2l0aW9uBQoEAAAoE3ByZXZpb3VzTmRjUG9zaXRpb24FCgQAACkIc2NyZWVuVVYFCgQAACoJc3BlY1Bvd2VyAwQAACsJc3BlY0NvbG9yBQsEAAAsCXdvcmxkRGlzdAMEAAAtDXBpeGVsVmVsb2NpdHkFCgQAAC4FY29sb3IFDAIAAC8Nc3BlY3VsYXJQb3dlcgMCAAEHAAAAAAAAAAAAAAAAAABZQDAOc3BlY3VsYXJBbW91bnQDAgABBwAAAAAAAAAAAAAAAAAAJEAxDXNwZWN1bGFyQ29sb3IFCwIAADIIX19pbml0X18OBgAAMxBfX2luaXRfX2ZyYWdtZW50DgYAADQGdmVydGV4DgYAADUIZnJhZ21lbnQOBgAABAIyAAAFDQYEAh4FCwIVBQsFCwYEAh8FCwYBAh4FCwkDNQ4BAhEHCAULBQsGBAIjBQwGAQkDKw4CAh8FCwEDAAAAAAAA8D8DBQwCBwcFDAUMBgQCIAULBgECHgULCQM1DgECEwcIBQsFCwYEAiQFDAYBCQMrDgICIAULAQMAAAAAAADwPwMFDAIIBwUMBQwGBAIiBQsJAyAOAQQGAQIWBQsJAzMOAQIRBwYFCwULBQsFCwYEAgwFCwkDIA4BBAYDAgQFCwIfBQsFCwULBQsFCwYEAiUFDAIuBQwFDAYEAioDAi8DAwYEAisFCwYBAjEFCwIwAwULBQsGBAIpBQoJAzsOAQYCCgIjBQwRAAUKCgIjBQwMAAMFCgUKBQoGBAImAwYCCgIjBQwIAAMKAiMFDAwAAwMDBgQCLAMGAgkDHA4BBgMCHwULAgQFCwULAwILAwMDAAIzAAAFCgYEAiIFCwkDIA4BAiIFCwULBQsGBAInBQoGAgoCIwUMEQAFCgoCIwUMDAADBQoFCgYEAigFCgYCCgIkBQwRAAUKCgIkBQwMAAMFCgUKBgQCKQUKCQM7DgECJwUKBQoFCgYEAiYDBgIKAiMFDAgAAwoCIwUMDAADAwMGBAIqAwIvAwMGBAIrBQsGAQIxBQsCMAMFCwULBoMCJwUKCgINBQwRAAUKBQoGgwIoBQoKAg0FDDkABQoFCgYEAi0FCgYBBAYDAigFCgInBQoFCgUKCQMpDgIBAwAAAAAAAOA/AwEDAAAAAAAA4L8DBQoFCgUKAAA0AAAFAgYEAhgFDAYBAiMFDAkDKw4EAQMAAAAAAADwPwMCBQMBAwAAAAAAAPA/AwEDAAAAAAAA8D8DBQwFDAUMBgQCIQULAh8FCwULAAE1AAAFBQYEAhkFDAIlBQwFDAYEAhoDAiYDAwYEAhsFCwIiBQsFCwYEAhwDAiwDAwYEAh0FCgItBQoFCgA";
h3d_shader_BaseMesh._MODULE = "h3d.shader.BaseMesh";
h3d_shader_Blur.SRC = "HXSMD2gzZC5zaGFkZXIuQmx1chsBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoLaW52ZXJzZVByb2oHAgAACwd0ZXh0dXJlCgICAAAMDGRlcHRoVGV4dHVyZQoCAgAADQdRdWFsaXR5AQIAAQAAAAAADgdpc0RlcHRoAgIAAQAAAAAADwZ2YWx1ZXMPAw0CAAAQB29mZnNldHMPAw0CAAARBXBpeGVsBQoCAAASDWhhc0ZpeGVkQ29sb3ICAgABAAAAAAATEHNtb290aEZpeGVkQ29sb3ICAgABAAAAAAAUCmZpeGVkQ29sb3IFDAIAABUQaXNEZXB0aERlcGVuZGFudAICAAEAAAAAABYOZGVwdGhUaHJlc2hvbGQDAgAAFxVkZXB0aFRocmVzaG9sZE1heERpc3QDAgAAGAZpc0N1YmUCAgABAAAAAAAZC2N1YmVUZXh0dXJlCgYCAAAaB2N1YmVEaXIGAgAAGwhfX2luaXRfXw4GAAAcBnZlcnRleA4GAAAdDnNjYWxlVGhyZXNob2xkDgYAAB4IZnJhZ21lbnQOBgAAHw9nZXRWaWV3UG9zaXRpb24OBgAABQIbAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAAHAAABQEGBAIGBQwJAysOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAADHQEgAXoDBAAAAwUDCCEBdAMEAAACFgMACwYHAhcDAQMAAAAAAAAAAAMCBoECIQMGAAEDAAAAAAAA8D8DCQMWDgIGAwIgAwIXAwMBAwAAAAAAAAAAAwMDAwAADQIhAwAAAR4AAAUCCwIVAgUMCCIKZGltZW5zaW9ucwUKBAAACQMlDgECCwoCBQoACCMNaW52RGltZW5zaW9ucwUKBAAABgIBAwAAAAAAAPA/AwIiBQoFCgAIJAVjb29yZAUKBAAACgNHBQwRAAUKAAglBmZyYWdVVgUKBAAABgEKAiQFChEABQoCIwUKBQoACCYBcAULBAAACQIfDgECJQUKBQsACCcEbWluWgMEAAAKAiYFCwgAAwAIKAFjBQwEAAAJAyIOAgILCgICJQUKBQwACCkFY29sb3IFDAQAAAkDKw4EAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMFDAAIKgZpc0VkZ2UCBAAAAQEAAgAVBnVucm9sbAAOKwFpAQQAAAYVBwMCDQEBBgACDQEBAgEAAAABAQ8BAAAFBQgsCGN1ckNvb3JkBQoEAAAGAAkDEQ4BBgACJAUKBgEGAQQGAQIRBQoCIgUKBQoFCgkDKQ4BAQMAAAAAAADwPwMFCgUKCQMnDgECKwEDBQoFCgUKCQMpDgEBAwAAAAAAAOA/AwUKBQoACC0JbmVhcmVzdFVWBQoEAAAGAQIsBQoCIwUKBQoACC4EcGN1cgULBAAACQIfDgECLQUKBQsACC8BZAMEAAAJAw8OAQYDCgIuBQsIAAMKAiYFCwgAAwMDAAYEAioCBg8CKgIEBgcCLwMJAh0OAQkDFQ4CCgIuBQsIAAMKAiYFCwgAAwMDAgICAgAAABUGdW5yb2xsAA4wAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUICDEIY3VyQ29vcmQFCgQAAAYACQMRDgEGAAIkBQoGAQYBBAYBAhEFCgIiBQoFCgUKEQIQDwMNCwYJAjABAQIAAAAAAQIHAwIwAQECMAEBAwUKCQMnDgECMAEDBQoFCgUKCQMpDgEBAwAAAAAAAOA/AwUKBQoACDIJbmVhcmVzdFVWBQoEAAAGAQIxBQoCIwUKBQoACDMCdXYFCgQAAAYAAiUFCgYBBgECEQUKEQIQDwMNCwYJAjABAQIAAAAAAQIHAwIwAQECMAEBAwUKCQMnDgECMAEDBQoFCgAINARjY3VyBQwEAAAJAyIOAgILCgILBAIqAgICMgUKAjMFCgUKBQwACDUEcGN1cgULBAAACQIfDgECMgUKBQsACDYBZAMEAAAJAw8OAQYDCgI1BQsIAAMKAiYFCwgAAwMDAAYEAigFDAsEBgcCNgMJAh0OAQkDFQ4CCgI1BQsIAAMKAiYFCwgAAwMDAgICKAUMAjQFDAUMBQwGgAIpBQwGAQIoBQwRAg8PAw0LBgkCMAEBAgAAAAABAgcDAjABAQIwAQEDBQwFDAAAAAYEAggFDAIpBQwFDAALAg4CBQMINwN2YWwDBAAAAQMAAAAAAAAAAAMAFQZ1bnJvbGwADjgBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACNwMGAQkDOA4BCQMiDgICGQoGBgEJAyoOAgYDBgEEBgACAwUKBgEGAQIRBQoRAhAPAw0LBgkCOAEBAgAAAAABAgcDAjgBAQI4AQEDBQoJAycOAQI4AQMFCgUKBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgEDAAAAAAAA8D8DBQsCGgYFCwUMAxECDw8DDQsGCQI4AQECAAAAAAECBwMCOAEBAjgBAQMDAwaAAjcDBgEJAzgOAQkDIg4CAgsKAgYAAgMFCgYBBgECEQUKEQIQDwMNCwYJAjgBAQIAAAAAAQIHAwI4AQECOAEBAwUKCQMnDgECOAEDBQoFCgUMAxECDw8DDQsGCQI4AQECAAAAAAECBwMCOAEBAjgBAQMDAwAAAAAGBAIIBQwJAzcOAQkDFQ4CAjcDAQPLGlDK///vPwMDBQwFDAAFAwg5BWNvbG9yBQwEAAAJAysOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwAFQZ1bnJvbGwADjoBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACOQUMBgEJAyIOAgIZCgYGAQkDKg4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQI6AQECAAAAAAECBwMCOgEBAjoBAQMFCgkDJw4BAjoBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwRAg8PAw0LBgkCOgEBAgAAAAABAgcDAjoBAQI6AQEDBQwFDAaAAjkFDAYBCQMiDgICCwoCBgACAwUKBgEGAQIRBQoRAhAPAw0LBgkCOgEBAgAAAAABAgcDAjoBAQI6AQEDBQoJAycOAQI6AQMFCgUKBQwRAg8PAw0LBgkCOgEBAgAAAAABAgcDAjoBAQI6AQEDBQwFDAAAAAAGBAIIBQwCOQUMBQwAAAALAhICBQILAhMCBoEKAggFDAwAAwoCFAUMDAADAwYECgIIBQwMAAMGAQoCFAUMDAADCQMnDgEGBwoCCAUMDAADAQMAAAAAAAAAAAMCAwMDAAYECgIIBQySAAULBgEKAhQFDJIABQsKAggFDAwAAwULBQsAAAAAAx8BOwJ1dgUKBAAABQsFBAg8BWRlcHRoAwQAAAoJAyIOAgIMCgICOwUKBQwAAAMACD0EdGVtcAUMBAAABgEJAysOAwkDPA4BAjsFCgUKAjwDAQMAAAAAAADwPwMFDAIKBwUMAAg+CG9yaWdpbldTBQsEAAAGAgoCPQUMkgAFCwoCPQUMDAADBQsADQI+BQsAAA";
h3d_shader_Blur._MODULE = "h3d.shader.Blur";
h3d_shader_ColorAdd.SRC = "HXSME2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA";
h3d_shader_ColorAdd._MODULE = "h3d.shader.ColorAdd";
h3d_shader_ColorKey.SRC = "HXSME2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMeDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA";
h3d_shader_ColorKey._MODULE = "h3d.shader.ColorKey";
h3d_shader_ColorMatrix.SRC = "HXSMFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgEAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADB2VuYWJsZWQCAgABAAAAAAAECGZyYWdtZW50DgYAAAEBBAAABQELAgMCBgQCAQUMCQMrDgIKBAYBCQMrDgIKAgEFDJIABQsBAwAAAAAAAPA/AwUMAgIHBQwFDJIABQsKBAYBAgEFDAICBwUMBQwMAAMFDAUMAAAA";
h3d_shader_ColorMatrix._MODULE = "h3d.shader.ColorMatrix";
h3d_shader_DirShadow.SRC = "HXSMFGgzZC5zaGFkZXIuRGlyU2hhZG93EAEGZW5hYmxlAgIAAQAAAAAAAgdVU0VfRVNNAgIAAQAAAAAAAwtzaGFkb3dQb3dlcgMCAAAEB1VTRV9QQ0YCAgABAAAAAAAFC1BDRl9TQU1QTEVTAQIAAQAAAAAABghwY2ZTY2FsZQMCAAAHCXNoYWRvd1JlcwUKAgAACAlzaGFkb3dNYXARAQIAAAkKc2hhZG93UHJvaggCAAAKCnNoYWRvd0JpYXMDAgAACxN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAMBnNoYWRvdwMEAAANCWRpclNoYWRvdwMEAAAOC3BvaXNzb25EaXNrDwUMBQIAAA8EcmFuZA4GAAAQCGZyYWdtZW50DgYAAAIDDwERAXYDBAAAAwUCCBICZHADBAAACQMeDgIJAysOAQIRAwUMCQMrDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhIDAwEDUPwYc9Fd5UADAwMAAAEQAAAFAgsCAQIFAQsCBAIFCwYEAgwDAQMAAAAAAADwPwMDCBMJdGV4ZWxTaXplBQoEAAAGAgEDAAAAAAAA8D8DAgcFCgUKAAgUCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACBUIc2hhZG93VXYFCgQAAAkDOw4BCgIUBQsRAAUKBQoACBYEek1heAMEAAAJAzYOAQoCFAULCAADAwAIFwNyb3QDBAAABgEGAQkCDw4BBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwEDH4XrUbgeCUADAwEDAAAAAAAAAEADAwAIGARjb3NSAwQAAAkDAw4BAhcDAwAIGQRzaW5SAwQAAAkDAg4BAhcDAwAIGg5zYW1wbGVTdHJlbmd0aAMEAAAGAgEDAAAAAAAA8D8DCQMnDgECBQEDAwAIGwhvZmZTY2FsZQUKBAAABgECEwUKAgYDBQoADhwBaQEEAAAGFQECAAAAAAECBQEPAQAABQQIHQZvZmZzZXQFCgQAAAYBChECDg8FDAUCHAEFDBEABQoCGwUKBQoABgQCHQUKCQMpDgIGAwYBAhgDCgIdBQoAAAMDBgECGQMKAh0FCgQAAwMDBgAGAQIYAwoCHQUKBAADAwYBAhkDCgIdBQoAAAMDAwUKBQoIHgVkZXB0aAMEAAAJA0EOAwIIEQEGAAIVBQoCHQUKBQoBAwAAAAAAAAAAAwMABoMCDAMLBAYHBgMCFgMCCgMDAh4DAgICGgMBAwAAAAAAAAAAAwMDAAAACwICAgUFCB8Jc2hhZG93UG9zBQsEAAAGAQILBQsCCQgFCwAIIAVkZXB0aAMEAAAJA0AOAgIIEQEJAzsOAQoCHwULEQAFCgUKAwAIIQR6TWF4AwQAAAkDNg4BCgIfBQsIAAMDAAgiBWRlbHRhAwQAAAYDCQMVDgIEBgACIAMCCgMDAwIhAwMCIQMDAAYEAgwDCQM2DgEJAwkOAQYBAgMDAiIDAwMDAwAFBAgjCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACCQIc2hhZG93VXYFCgQAAAkDOw4BCgIjBQsRAAUKBQoACCUFZGVwdGgDBAAACQNADgICCBEBCgIkBQoRAAUKAwAGBAIMAwsGBwYDCQM2DgEKAiMFCwgAAwMCCgMDAiUDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAYEAg0DAgwDAwA";
h3d_shader_DirShadow._MODULE = "h3d.shader.DirShadow";
h3d_shader_GenTexture.SRC = "HXSMFWgzZC5zaGFkZXIuR2VuVGV4dHVyZQoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEbW9kZQECAAEAAAAAAAsFY29sb3IFDAIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKw4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFARMEAgoBAQEBAQIAAAAAAQUBBgQCCAUMCwYHCQMcDgEKAgYFDBEABQoDAQMAAAAAAADwPwMCCQMrDgEBAwAAAAAAAAAAAwUMAgsFDAUMBQwAAAAA";
h3d_shader_GenTexture._MODULE = "h3d.shader.GenTexture";
h3d_shader_LineShader.SRC = "HXSMFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMw4BAgcHBgULAAYEAhMFDAYBCQMrDgIGAQIWBQsJAzMOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMgDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKQ4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA";
h3d_shader_LineShader._MODULE = "h3d.shader.LineShader";
h3d_shader_MinMaxShader.SRC = "HXSMF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgICAAALBHRleEIKAgIAAAwFaXNNYXgCAgABAAAAAAANCF9faW5pdF9fDgYAAA4GdmVydGV4DgYAAA8IZnJhZ21lbnQOBgAAAwINAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADgAABQEGBAIGBQwJAysOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDwAABQMIEAFhBQwEAAAJAyIOAgIKCgICCQUKBQwACBEBYgUMBAAACQMiDgICCwoCAgkFCgUMAAYEAggFDAsCDAIJAxYOAgIQBQwCEQUMBQwJAxUOAgIQBQwCEQUMBQwFDAUMAA";
h3d_shader_MinMaxShader._MODULE = "h3d.shader.MinMaxShader";
h3d_shader_CubeMinMaxShader.SRC = "HXSMG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQoGAgAACwR0ZXhCCgYCAAAMBWlzTWF4AgIAAQAAAAAADQNtYXQGAgAADghfX2luaXRfXw4GAAAPBnZlcnRleA4GAAAQCGZyYWdtZW50DgYAAAMCDgAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA8AAAUBBgQCBgUMCQMrDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAARAAAAUFCBECdXYFCgQAAAYDBgECCQUKAQMAAAAAAAAAQAMFCgEDAAAAAAAA8D8DBQoACBIDZGlyBQsEAAAGAQkDKg4CAhEFCgEDAAAAAAAA8D8DBQsCDQYFCwAIEwFhBQwEAAAJAyIOAgIKCgYCEgULBQwACBQBYgUMBAAACQMiDgICCwoGAhIFCwUMAAYEAggFDAsCDAIJAxYOAgITBQwCFAUMBQwJAxUOAgITBQwCFAUMBQwFDAUMAA";
h3d_shader_CubeMinMaxShader._MODULE = "h3d.shader.MinMaxShader";
h3d_shader_NormalMap.SRC = "HXSMFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgIAAAoMY2FsY3VsYXRlZFVWBQoEAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwRdHJhbnNmb3JtZWROb3JtYWwFCwQAAA0SdHJhbnNmb3JtZWRUYW5nZW50BQwDAAAODl9faW5pdF9fdmVydGV4DgYAAA8IZnJhZ21lbnQOBgAAAgIOAAAFAQYEAg0FDAkDKw4CBgECCAULCQMzDgECBQcGBQsLBgcJAx4OAgIIBQsCCAULAwEDAAAAAAAA4D8DAgEDAAAAAAAA8D8DAQMAAAAAAADwvwMDBQwFDAABDwAABQUIEAFuBQsEAAACDAULAAgRAm5mBQsEAAAJAzoOAQkDIg4CAgkKAgIKBQoFDAULAAgSBHRhblgFCwQAAAkDIA4BCgINBQySAAULBQsACBMEdGFuWQULBAAABgEJAx8OAgIQBQsCEgULBQsHAwoCDQUMDAADAwULAAYEAgwFCwkDIA4BBAYABgAGAQoCEQULAAADAhIFCwULBgEKAhEFCwQAAwITBQsFCwULBgEKAhEFCwgAAwIQBQsFCwULBQsFCwULAA";
h3d_shader_NormalMap._MODULE = "h3d.shader.NormalMap";
h3d_shader_Shadow.SRC = "HXSMEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsEAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJA0AOAgICEQEJAzsOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNg4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNg4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA";
h3d_shader_Shadow._MODULE = "h3d.shader.Shadow";
h3d_shader_SignedDistanceField.SRC = "HXSMHmgzZC5zaGFkZXIuU2lnbmVkRGlzdGFuY2VGaWVsZA8BBWlucHV0DQEDAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEABAVjb2xvcgUMAQEAAQAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAIBHRpbWUDAAAACQ5zcHJpdGVQb3NpdGlvbgUMBAAAChBhYnNvbHV0ZVBvc2l0aW9uBQwEAAALCnBpeGVsQ29sb3IFDAQAAAwMdGV4dHVyZUNvbG9yBQwEAAANDGNhbGN1bGF0ZWRVVgUKAwAADg5vdXRwdXRQb3NpdGlvbgUMBAAADwdjaGFubmVsAQIAAQAAAAAAEA1hdXRvU21vb3RoaW5nAgIAAQAAAAAAEQthbHBoYUN1dG9mZgMCAAASCXNtb290aGluZwMCAAATBm1lZGlhbg4GAAAUCGZyYWdtZW50DgYAAAIDEwMVAXIDBAAAFgFnAwQAABcBYgMEAAADBQENCQMWDgIJAxUOAgIVAwIWAwMJAxUOAgkDFg4CAhUDAhYDAwIXAwMDAAABFAAABQUIGA10ZXh0dXJlU2FtcGxlBQwEAAACDAUMAAgZCGRpc3RhbmNlAwQAAAAABgQCGQMLBgUCDwEBAgAAAAABAgoCGAUMAAADCwYFAg8BAQIBAAAAAQIKAhgFDAQAAwsGBQIPAQECAgAAAAECCgIYBQwIAAMLBgUCDwEBAgMAAAABAgoCGAUMDAADCQITDgMKAhgFDAAAAwoCGAUMBAADCgIYBQwIAAMDAwMDAwMIGglzbW9vdGhWYWwDBAAACwIQAgkDDw4BBgEJAz8OAQIZAwMBAwAAAAAAAOA/AwMDAhIDAwAGBAIMBQwJAysOBAEDAAAAAAAA8D8DAQMAAAAAAADwPwMBAwAAAAAAAPA/AwkDGw4DBgMCEQMCGgMDBgACEQMCGgMDAhkDAwUMBQwA";
h3d_shader_SignedDistanceField._MODULE = "h3d.shader.SignedDistanceField";
h3d_shader_SkinBase.SRC = "HXSME2gzZC5zaGFkZXIuU2tpbkJhc2UGARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFEWZvdXJCb25lc0J5VmVydGV4AgIAAQAAAAAABg1ib25lc01hdHJpeGVzDwgEAgABCAA";
h3d_shader_SkinBase._MODULE = "h3d.shader.SkinBase";
h3d_shader_Skin.SRC = "HXSMD2gzZC5zaGFkZXIuU2tpbgoBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAURZm91ckJvbmVzQnlWZXJ0ZXgCAgABAAAAAAAGDWJvbmVzTWF0cml4ZXMPCAQCAAEIBwVpbnB1dA0BBAgIcG9zaXRpb24FCwEHAAkGbm9ybWFsBQsBBwAKB3dlaWdodHMFCwEHAAsHaW5kZXhlcwkEAAAAAQcAAQAADBJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAQAAA0bcHJldmlvdXNUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAOBnZlcnRleA4GAAABAA4AAAUFBgQCAgULBgAGAAYBBAYBAgEFCxECBg8IBAkDJg4BCgILCQQAAAAAAAMBCAULBQsKAgoFCwAAAwULBgEEBgECAQULEQIGDwgECQMmDgEKAgsJBAAAAAQAAwEIBQsFCwoCCgULBAADBQsFCwYBBAYBAgEFCxECBg8IBAkDJg4BCgILCQQAAAAIAAMBCAULBQsKAgoFCwgAAwULBQsFCwYEAgMFCwYABgAGAQQGAQIJBQsJAzMOARECBg8IBAkDJg4BCgILCQQAAAAAAAMBCAYFCwULCgIKBQsAAAMFCwYBBAYBAgkFCwkDMw4BEQIGDwgECQMmDgEKAgsJBAAAAAQAAwEIBgULBQsKAgoFCwQAAwULBQsGAQQGAQIJBQsJAzMOARECBg8IBAkDJg4BCgILCQQAAAAIAAMBCAYFCwULCgIKBQsIAAMFCwULBQsLAgUCBQMIDwJ3NAMEAAAGAwEDAAAAAAAA8D8DBAYABgAKAgoFCwAAAwoCCgULBAADAwoCCgULCAADAwMDAAaAAgIFCwYBBAYBAgEFCxECBg8IBAkDJg4BCgILCQQAAAAMAAMBCAULBQsCDwMFCwULBoACAwULBgEEBgECCQULCQMzDgERAgYPCAQJAyYOAQoCCwkEAAAACAADAQgGBQsFCwIPAwULBQsAAAAGBAINBQsCAgULBQsGBAIDBQsJAyAOAQIDBQsFCwULAA";
h3d_shader_Skin._MODULE = "h3d.shader.Skin";
h3d_shader_SkinTangent.SRC = "HXSMFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQJARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFEWZvdXJCb25lc0J5VmVydGV4AgIAAQAAAAAABg1ib25lc01hdHJpeGVzDwgEAgABCAcFaW5wdXQNAQUICHBvc2l0aW9uBQsBBwAJBm5vcm1hbAULAQcACgd0YW5nZW50BQsBBwALB3dlaWdodHMFCwEHAAwHaW5kZXhlcwkEAAAAAQcAAQAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAQAAA4GdmVydGV4DgYAAAEADgAABQYGBAICBQsGAAYABgEEBgECAQULEQIGDwgECQMmDgEKAgwJBAAAAAAAAwEIBQsFCwoCCwULAAADBQsGAQQGAQIBBQsRAgYPCAQJAyYOAQoCDAkEAAAABAADAQgFCwULCgILBQsEAAMFCwULBgEEBgECAQULEQIGDwgECQMmDgEKAgwJBAAAAAgAAwEIBQsFCwoCCwULCAADBQsFCwULBgQCAwULBgAGAAYBBAYBAgkFCwkDMw4BEQIGDwgECQMmDgEKAgwJBAAAAAAAAwEIBgULBQsKAgsFCwAAAwULBgEEBgECCQULCQMzDgERAgYPCAQJAyYOAQoCDAkEAAAABAADAQgGBQsFCwoCCwULBAADBQsFCwYBBAYBAgkFCwkDMw4BEQIGDwgECQMmDgEKAgwJBAAAAAgAAwEIBgULBQsKAgsFCwgAAwULBQsFCwYECgINBQySAAULBgAGAAYBBAYBCgIKBQuSAAULCQMzDgERAgYPCAQJAyYOAQoCDAkEAAAAAAADAQgGBQsFCwoCCwULAAADBQsGAQQGAQoCCgULkgAFCwkDMw4BEQIGDwgECQMmDgEKAgwJBAAAAAQAAwEIBgULBQsKAgsFCwQAAwULBQsGAQQGAQoCCgULkgAFCwkDMw4BEQIGDwgECQMmDgEKAgwJBAAAAAgAAwEIBgULBQsKAgsFCwgAAwULBQsFCwsCBQIFBAgPAnc0AwQAAAYDAQMAAAAAAADwPwMEBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwMABoACAgULBgEEBgECAQULEQIGDwgECQMmDgEKAgwJBAAAAAwAAwEIBQsFCwIPAwULBQsGgAIDBQsGAQQGAQIJBQsJAzMOARECBg8IBAkDJg4BCgIMCQQAAAAIAAMBCAYFCwULAg8DBQsFCwaACgINBQySAAULBgEEBgEKAgoFC5IABQsJAzMOARECBg8IBAkDJg4BCgIMCQQAAAAMAAMBCAYFCwULAg8DBQsFCwAAAAYEAgMFCwkDIA4BAgMFCwULBQsGBAoCDQUMkgAFCwkDIA4BCgINBQySAAULBQsFCwA";
h3d_shader_SkinTangent._MODULE = "h3d.shader.SkinTangent";
h3d_shader_SpecularTexture.SRC = "HXSMGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAgAAAgxjYWxjdWxhdGVkVVYFCgQAAAMJc3BlY0NvbG9yBQsEAAAECGZyYWdtZW50DgYAAAEBBAAABQEGgQIDBQsKCQMiDgICAQoCAgIFCgUMkgAFCwULAA";
h3d_shader_SpecularTexture._MODULE = "h3d.shader.SpecularTexture";
h3d_shader_Texture.SRC = "HXSMEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgIAAAgMY2FsY3VsYXRlZFVWBQoEAAAJCnBpeGVsQ29sb3IFDAQAAAoJc3BlY0NvbG9yBQsEAAALBnZlcnRleA4GAAAMCGZyYWdtZW50DgYAAAIACwAABQEGBAIIBQoCAgUKBQoAAQwAAAUECA0BYwUMBAAACQMiDgICBwoCAggFCgUMAAsGDgIEAgYJBgMKAg0FDAwAAwIGAwMBAwAAAAAAAAAAAwICDAAAAAsCAwIGgAIJBQwCDQUMBQwGgQIJBQwCDQUMBQwACwIFAgaBAgoFCwoCDQUM/gAFCwULAAAA";
h3d_shader_Texture._MODULE = "h3d.shader.Texture";
h3d_shader_UVDelta.SRC = "HXSMEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA";
h3d_shader_UVDelta._MODULE = "h3d.shader.UVDelta";
h3d_shader_VertexColorAlpha.SRC = "HXSMG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA";
h3d_shader_VertexColorAlpha._MODULE = "h3d.shader.VertexColorAlpha";
h3d_shader_VolumeDecal.SRC = "HXSMFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwdAQZjYW1lcmENAQwCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAIEHByZXZpb3VzVmlld1Byb2oHAAEACQ9pbnZlcnNlVmlld1Byb2oHAAEACgV6TmVhcgMAAQALBHpGYXIDAAEADANkaXIFCwMBAA0Naml0dGVyT2Zmc2V0cwUMAAEAAAAADgZnbG9iYWwNAgUPBHRpbWUDAA4AEAlwaXhlbFNpemUFCgAOABEJbW9kZWxWaWV3BwAOAQMSEG1vZGVsVmlld0ludmVyc2UHAA4BAxMRcHJldmlvdXNNb2RlbFZpZXcHAA4BAwAAABQFaW5wdXQNAwIVCHBvc2l0aW9uBQsBFAAWBm5vcm1hbAULARQAAQAAFwZvdXRwdXQNBAYYCHBvc2l0aW9uBQwEFwAZBWNvbG9yBQwEFwAaBWRlcHRoAwQXABsGbm9ybWFsBQsEFwAcCXdvcmxkRGlzdAMEFwAdCHZlbG9jaXR5BQoEFwAEAAAeEHJlbGF0aXZlUG9zaXRpb24FCwQAAB8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAIBtwcmV2aW91c1RyYW5zZm9ybWVkUG9zaXRpb24FCwQAACEYcGl4ZWxUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAiEXRyYW5zZm9ybWVkTm9ybWFsBQsEAAAjEXByb2plY3RlZFBvc2l0aW9uBQwEAAAkGXByZXZpb3VzUHJvamVjdGVkUG9zaXRpb24FDAQAACUKcGl4ZWxDb2xvcgUMBAAAJgVkZXB0aAMEAAAnC25kY1Bvc2l0aW9uBQoEAAAoE3ByZXZpb3VzTmRjUG9zaXRpb24FCgQAACkIc2NyZWVuVVYFCgQAACoJc3BlY1Bvd2VyAwQAACsJc3BlY0NvbG9yBQsEAAAsCXdvcmxkRGlzdAMEAAAtDXBpeGVsVmVsb2NpdHkFCgQAAC4IZGVwdGhNYXARAQAAAC8Fc2NhbGUFCgIAADAGbm9ybWFsBQsCAAAxB3RhbmdlbnQFCwIAADIKaXNDZW50ZXJlZAICAAEAAAAAADMMY2FsY3VsYXRlZFVWBQoEAAA0EnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAANQ5fX2luaXRfX3ZlcnRleA4GAAA2CGZyYWdtZW50DgYAAAICNQAABQIGBAIiBQsJAyAOAQQGAQIwBQsJAzMOAQIRBwYFCwULBQsFCwYEAjQFDAkDKw4CCQMgDgEEBgECMQULCQMzDgECEQcGBQsFCwULAQMAAAAAAADwPwMFDAUMAAE2AAAFCQg3Bm1hdHJpeAcEAAAGAQIJBwISBwcACDgJc2NyZWVuUG9zBQoEAAAGAgoCIwUMEQAFCgoCIwUMDAADBQoACDkDcnV2BQwEAAAJAysOAwI4BQoJA0AOAgIuEQEJAzsOAQI4BQoFCgMBAwAAAAAAAPA/AwUMAAg6BHdwb3MFDAQAAAYBAjkFDAI3BwUMAAg7BHBwb3MFDAQAAAYBAjkFDAIJBwUMAAYEAiEFCwYCCgI7BQySAAULCgI7BQwMAAMFCwULBgQCMwUKBgECLwUKBAYCCgI6BQwRAAUKCgI6BQwMAAMFCgUKBQoFCgsCMgIGgAIzBQoBAwAAAAAAAOA/AwUKAAALBgkJAxUOAgkDFQ4CCgIzBQoAAAMKAjMFCgQAAwMJAxUOAgYDAQMAAAAAAADwPwMKAjMFCgAAAwMGAwEDAAAAAAAA8D8DCgIzBQoEAAMDAwMBAwAAAAAAAAAAAwIMAAAAAA";
h3d_shader_VolumeDecal._MODULE = "h3d.shader.VolumeDecal";
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxd_Precision.SIZES = [4,2,1,1];
hxd_BufferFormat._UID = 0;
hxd_BufferFormat.ALL_FORMATS = new haxe_ds_StringMap();
hxd_MultiFormat._UID = 0;
hxd_Charset.complementChars = (function($this) {
	var $r;
	var str = "ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻。，";
	var _g = new haxe_ds_IntMap();
	{
		var _g1 = 0;
		var _g2 = str.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.h[HxOverrides.cca(str,i)] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxd_Key.initDone = false;
hxd_Key.keyPressed = [];
hxd_Key.ALLOW_KEY_REPEAT = false;
hxd_Timer.wantedFPS = 60.;
hxd_Timer.maxDeltaTime = 0.5;
hxd_Timer.smoothFactor = 0.95;
hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
hxd_Timer.elapsedTime = 0.;
hxd_Timer.frameCount = 0;
hxd_Timer.dt = 1 / hxd_Timer.wantedFPS;
hxd_Timer.currentDT = 1 / hxd_Timer.wantedFPS;
hxd_System.setCursor = hxd_System.setNativeCursor;
hxd_System.loopInit = false;
hxd_System.fpsLimit = -1;
hxd_fs_SourceLoader.RELOAD_LFS = [];
hxd_impl_AllocPos.ENABLED = false;
hxd_impl_AllocPos.ENGINE_PACKAGES = ["h3d","hxd","h2d","haxe","sys","hrt"];
hxd_res_Resource.LIVE_UPDATE = true;
hxd_res_Image.DEFAULT_FILTER = h3d_mat_Filter.Linear;
hxd_res_Image.MIPMAP_MAX_SIZE = 0;
hxd_res_Image.ENABLE_AUTO_WATCH = true;
hxd_res_Image.BLACK_1x1 = hxd_Pixels.alloc(1,1,hxd_PixelFormat.RGBA);
hxd_res_Image.LOG_TEXTURE_LOAD = false;
hxsl_Tools.UID = 0;
hxsl_Tools.SWIZ = hxsl_Component.__empty_constructs__.slice();
hxsl_Tools.MAX_CHANNELS_BITS = 3;
hxsl_Tools.MAX_PARTIAL_MAPPINGS_BITS = 7;
hxsl_BatchShader.SRC = "HXSMEGh4c2wuQmF0Y2hTaGFkZXIFAQ9CYXRjaF9IYXNPZmZzZXQCAgABAAAAAAACEEJhdGNoX1VzZVN0b3JhZ2UCAgABAAAAAAADC0JhdGNoX0NvdW50AQIAAQAAEAAABAxCYXRjaF9CdWZmZXIQBQwDAgAABRNCYXRjaF9TdG9yYWdlQnVmZmVyEIIFDAAAAgAAAA";
hxsl_BatchShader._MODULE = "hxsl.BatchShader";
hxsl_Checker.vec2 = hxsl_Type.TVec(2,hxsl_VecType.VFloat);
hxsl_Checker.vec3 = hxsl_Type.TVec(3,hxsl_VecType.VFloat);
hxsl_Checker.vec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
hxsl_Checker.ivec2 = hxsl_Type.TVec(2,hxsl_VecType.VInt);
hxsl_Checker.ivec3 = hxsl_Type.TVec(3,hxsl_VecType.VInt);
hxsl_Checker.ivec4 = hxsl_Type.TVec(4,hxsl_VecType.VInt);
hxsl_Debug.VAR_IDS = false;
hxsl_Debug.TRACE = false;
hxsl_Flatten.SWIZ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_GlslOut.KWD_LIST = "attribute const uniform varying buffer shared\r\n\tcoherent volatile restrict readonly writeonly\r\n\tatomic_uint\r\n\tlayout\r\n\tcentroid flat smooth noperspective\r\n\tpatch sample\r\n\tbreak continue do for while switch case default\r\n\tif else\r\n\tsubroutine\r\n\tin out inout\r\n\tfloat double int void bool true false\r\n\tinvariant precise\r\n\tdiscard return\r\n\tmat2 mat3 mat4 dmat2 dmat3 dmat4\r\n\tmat2x2 mat2x3 mat2x4 dmat2x2 dmat2x3 dmat2x4\r\n\tmat3x2 mat3x3 mat3x4 dmat3x2 dmat3x3 dmat3x4\r\n\tmat4x2 mat4x3 mat4x4 dmat4x2 dmat4x3 dmat4x4\r\n\tvec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 dvec2 dvec3 dvec4\r\n\tuint uvec2 uvec3 uvec4\r\n\tlowp mediump highp precision\r\n\timage1D iimage1D uimage1D\r\n\timage2D iimage2D uimage2D\r\n\timage3D iimage3D uimage3D\r\n\tstruct\r\n\tcommon partition active\r\n\tasm\r\n\tclass union enum typedef template this packed\r\n\tresource\r\n\tgoto\r\n\tinline noinline public static extern external interface\r\n\tlong short half fixed unsigned superp\r\n\tinput output\r\n\thvec2 hvec3 hvec4 fvec2 fvec3 fvec4\r\n\tsampler3DRect\r\n\tfilter\r\n\tsizeof cast\r\n\tnamespace using\r\n\trow_major";
hxsl_GlslOut.KWDS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = new EReg("[ \t\r\n]+","g").split(hxsl_GlslOut.KWD_LIST);
		while(_g1 < _g2.length) {
			var k = _g2[_g1];
			++_g1;
			_g.h[k] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl_GlslOut.GLOBALS = (function($this) {
	var $r;
	var gl = [];
	{
		var _g = 0;
		var _g1 = hxsl_TGlobal.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			gl[g._hx_index] = n;
		}
	}
	gl[hxsl_TGlobal.ToInt._hx_index] = "int";
	gl[hxsl_TGlobal.ToFloat._hx_index] = "float";
	gl[hxsl_TGlobal.ToBool._hx_index] = "bool";
	gl[hxsl_TGlobal.LReflect._hx_index] = "reflect";
	gl[hxsl_TGlobal.Mat3x4._hx_index] = "_mat3x4";
	gl[hxsl_TGlobal.VertexID._hx_index] = "gl_VertexID";
	gl[hxsl_TGlobal.InstanceID._hx_index] = "gl_InstanceID";
	gl[hxsl_TGlobal.IVec2._hx_index] = "ivec2";
	gl[hxsl_TGlobal.IVec3._hx_index] = "ivec3";
	gl[hxsl_TGlobal.IVec4._hx_index] = "ivec4";
	gl[hxsl_TGlobal.BVec2._hx_index] = "bvec2";
	gl[hxsl_TGlobal.BVec3._hx_index] = "bvec3";
	gl[hxsl_TGlobal.BVec4._hx_index] = "bvec4";
	gl[hxsl_TGlobal.FragCoord._hx_index] = "gl_FragCoord";
	gl[hxsl_TGlobal.FrontFacing._hx_index] = "gl_FrontFacing";
	gl[hxsl_TGlobal.FloatBitsToUint._hx_index] = "_floatBitsToUint";
	gl[hxsl_TGlobal.UintBitsToFloat._hx_index] = "_uintBitsToFloat";
	gl[hxsl_TGlobal.ComputeVar_LocalInvocation._hx_index] = "ivec3(gl_LocalInvocationID)";
	gl[hxsl_TGlobal.ComputeVar_GlobalInvocation._hx_index] = "ivec3(gl_GlobalInvocationID)";
	gl[hxsl_TGlobal.ComputeVar_LocalInvocationIndex._hx_index] = "int(gl_LocalInvocationIndex)";
	gl[hxsl_TGlobal.ComputeVar_WorkGroup._hx_index] = "ivec3(gl_WorkGroupID)";
	{
		var _g = 0;
		while(_g < gl.length) {
			var g = gl[_g];
			++_g;
			hxsl_GlslOut.KWDS.h[g] = true;
		}
	}
	$r = gl;
	return $r;
}(this));
hxsl_GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl__$Linker_ShaderInfos.UID = 0;
hxsl_Printer.SWIZ = ["x","y","z","w"];
hxsl_RuntimeShader.UID = 0;
hxsl_Serializer.TVECS = new haxe_ds_IntMap();
hxsl_Serializer.TDIMS = hxsl_TexDimension.__empty_constructs__.slice();
hxsl_Serializer.BOPS = (function($this) {
	var $r;
	var ops = haxe_macro_Binop.__empty_constructs__.slice();
	ops.splice(haxe_macro_Binop.OpAssignOp(null)._hx_index,0,null);
	$r = ops;
	return $r;
}(this));
hxsl_Serializer.UNOPS = haxe_macro_Unop.__empty_constructs__.slice();
hxsl_Serializer.TGLOBALS = hxsl_TGlobal.__empty_constructs__.slice();
hxsl_Serializer.TSWIZ = new haxe_ds_IntMap();
hxsl_Serializer.REGS = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Serializer.VKINDS = hxsl_VarKind.__empty_constructs__.slice();
hxsl_Serializer.PRECS = hxsl_Prec.__empty_constructs__.slice();
hxsl_Serializer.FKIND = hxsl_FunctionKind.__empty_constructs__.slice();
hxsl_Serializer.SIGN = 9204765;
hxsl_ShaderList.MAX_LIST_SIZE = 0;
hxsl_ShaderList.ALLOW_DUPLICATES = true;
hxsl_ShaderInstance.UID = 0;
hxsl_SharedShader.UNROLL_LOOPS = false;
hxsl_SharedShader.SHADER_RESOLVE = new haxe_ds_StringMap();
var stdgo_Pointer_globalAddress = 0;
var stdgo_Pointer_globalAddressMutex = { acquire : function() {
	return;
}, release : function() {
	return;
}};
stdgo__$internal_internal_TypeInfo.names = (function($this) {
	var $r;
	var names = Type.createInstance($hxClasses["TypeInfoData_go2hx_"],[]).names;
	$r = names;
	return $r;
}(this));
var stdgo__$internal_math_bits_Bits_$_$divideerror__divideError = (function($this) {
	var $r;
	var e = stdgo_GoString.ofString("integer divide by zero");
	$r = new stdgo__$internal_math_bits_T_$errorString_$asInterface(new stdgo_PointerData(function() {
		return e;
	},function(v) {
		e = v;
		return e;
	},false),new stdgo__$internal_internal_reflect__$Type(stdgo__$internal_internal_TypeInfo.names.h["stdgo._internal.math.bits.Bits_t_errorstring.T_errorString"]));
	return $r;
}(this));
var stdgo_Error__divideError = stdgo__$internal_math_bits_Bits_$_$divideerror__divideError;
var stdgo__$internal_internal_reflect_Reflect_useHaxePath = true;
var stdgo__$internal_math_Math_$_$_$gamp___gamP = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,7,7].concat([0.00016011952247675185,0.0011913514700658638,0.010421379756176158,0.04763678004571372,0.20744822764843598,0.4942148268014971,1])))));
var stdgo__$internal_math_Math_$_$_$gamq___gamQ = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,8,8].concat([-2.3158187332412014e-05,0.0005396055804933034,-0.004456419138517973,0.011813978522206043,0.035823639860549865,-0.23459179571824335,0.0714304917030273,1])))));
var stdgo__$internal_math_Math_$_$_$gams___gamS = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,5,5].concat([0.0007873113957930937,-0.00022954996161337813,-0.0026813261780578124,0.0034722222160545866,0.08333333333334822])))));
var stdgo__$internal_math_Math_$_$p0r8__p0R8 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([0,-0.07031249999999004,-8.081670412753498,-257.06310567970485,-2485.216410094288,-5253.043804907295])))));
var stdgo__$internal_math_Math_$_$p0s8__p0S8 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,5,5].concat([116.53436461966818,3833.7447536412183,40597.857264847255,116752.97256437592,47627.728414673096])))));
var stdgo__$internal_math_Math_$_$p0r5__p0R5 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([-1.141254646918945e-11,-0.07031249408735993,-4.159610644705878,-67.67476522651673,-331.23129964917297,-346.4333883656049])))));
var stdgo__$internal_math_Math_$_$p0s5__p0S5 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,5,5].concat([60.753938269230034,1051.2523059570458,5978.970943338558,9625.445143577745,2406.058159229391])))));
var stdgo__$internal_math_Math_$_$p0r3__p0R3 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([-2.547046017719519e-09,-0.07031196163814817,-2.409032215495296,-21.96597747348831,-58.07917047017376,-31.44794705948885])))));
var stdgo__$internal_math_Math_$_$p0s3__p0S3 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,5,5].concat([35.85603380552097,361.51398305030386,1193.6078379211153,1127.9967985690741,173.58093081333575])))));
var stdgo__$internal_math_Math_$_$p0r2__p0R2 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([-8.875343330325264e-08,-0.07030309954836247,-1.4507384678095299,-7.635696138235278,-11.193166886035675,-3.2336457935133534])))));
var stdgo__$internal_math_Math_$_$p0s2__p0S2 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,5,5].concat([22.22029975320888,136.2067942182152,270.4702786580835,153.87539420832033,14.65761769482562])))));
var stdgo__$internal_math_Math_$_$q0r8__q0R8 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([0,0.0732421874999935,11.76820646822527,557.6733802564019,8859.197207564686,37014.62677768878])))));
var stdgo__$internal_math_Math_$_$q0s8__q0S8 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([163.77602689568982,8098.344946564498,142538.29141912048,803309.2571195144,840501.5798190605,-343899.2935378666])))));
var stdgo__$internal_math_Math_$_$q0r5__q0R5 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([1.8408596359451553e-11,0.07324217666126848,5.8356350896205695,135.11157728644983,1027.243765961641,1989.9778586460538])))));
var stdgo__$internal_math_Math_$_$q0s5__q0S5 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([82.77661022365378,2077.81416421393,18847.28877857181,56751.11228949473,35976.75384251145,-5354.342756019448])))));
var stdgo__$internal_math_Math_$_$q0r3__q0R3 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([4.377410140897386e-09,0.07324111800429114,3.344231375161707,42.621844074541265,170.8080913405656,166.73394869665117])))));
var stdgo__$internal_math_Math_$_$q0s3__q0S3 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([48.75887297245872,709.689221056606,3704.1482262011136,6460.425167525689,2516.3336892036896,-149.2474518361564])))));
var stdgo__$internal_math_Math_$_$q0r2__q0R2 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([1.5044444488698327e-07,0.07322342659630793,1.99819174093816,14.495602934788574,31.666231750478154,16.252707571092927])))));
var stdgo__$internal_math_Math_$_$q0s2__q0S2 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([30.36558483552192,269.34811860804984,844.7837575953201,882.9358451124886,212.66638851179883,-5.3109549388266695])))));
var stdgo__$internal_math_Math_$_$p1r8__p1R8 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([0,0.11718749999998865,13.239480659307358,412.05185430737856,3874.7453891396053,7914.479540318917])))));
var stdgo__$internal_math_Math_$_$p1s8__p1S8 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,5,5].concat([114.20737037567841,3650.9308342085346,36956.206026903346,97602.79359349508,30804.27206278888])))));
var stdgo__$internal_math_Math_$_$p1r5__p1R5 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([1.3199051955624352e-11,0.1171874931906141,6.802751278684329,108.30818299018911,517.6361395331998,528.7152013633375])))));
var stdgo__$internal_math_Math_$_$p1s5__p1S5 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,5,5].concat([59.28059872211313,991.4014187336144,5353.26695291488,7844.690317495512,1504.0468881036106])))));
var stdgo__$internal_math_Math_$_$p1r3__p1R3 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([3.025039161373736e-09,0.11718686556725359,3.9329775003331564,35.11940355916369,91.05501107507813,48.55906851973649])))));
var stdgo__$internal_math_Math_$_$p1s3__p1S3 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,5,5].concat([34.79130950012515,336.76245874782575,1046.8713997577513,890.8113463982564,103.78793243963928])))));
var stdgo__$internal_math_Math_$_$p1r2__p1R2 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([1.0771083010687374e-07,0.11717621946268335,2.368514966676088,12.242610914826123,17.693971127168773,5.073523125888185])))));
var stdgo__$internal_math_Math_$_$p1s2__p1S2 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,5,5].concat([21.43648593638214,125.29022716840275,232.2764690571628,117.6793732871471,8.364638933716183])))));
var stdgo__$internal_math_Math_$_$q1r8__q1R8 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([0,-0.10253906249999271,-16.271753454459,-759.6017225139501,-11849.806670242959,-48438.512428575035])))));
var stdgo__$internal_math_Math_$_$q1s8__q1S8 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([161.3953697007229,7825.385999233485,133875.33628724958,719657.7236832409,666601.2326177764,-294490.26430383464])))));
var stdgo__$internal_math_Math_$_$q1r5__q1R5 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([-2.089799311417641e-11,-0.10253905024137543,-8.05644828123936,-183.66960747488838,-1373.1937606550816,-2612.4444045321566])))));
var stdgo__$internal_math_Math_$_$q1s5__q1S5 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([81.27655013843358,1991.7987346048596,17468.48519249089,49851.42709103523,27948.075163891812,-4719.183547951285])))));
var stdgo__$internal_math_Math_$_$q1r3__q1R3 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([-5.078312264617666e-09,-0.10253782982083709,-4.610115811394734,-57.847221656278364,-228.2445407376317,-219.21012847890933])))));
var stdgo__$internal_math_Math_$_$q1s3__q1S3 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([47.66515503237295,673.8651126766997,3380.1528667952634,5547.729097207228,1903.119193388108,-135.20119144430734])))));
var stdgo__$internal_math_Math_$_$q1r2__q1R2 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([-1.7838172751095887e-07,-0.10251704260798555,-2.7522056827818746,-19.663616264370372,-42.32531333728305,-21.371921170370406])))));
var stdgo__$internal_math_Math_$_$q1s2__q1S2 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([29.533362906052385,252.98154998219053,757.5028348686454,739.3932053204672,155.94900333666612,-4.959498988226282])))));
var stdgo__$internal_math_Math_$_$_$lgama___lgamA = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,12,12].concat([0.07721566490153287,0.3224670334241136,0.06735230105312927,0.020580808432516733,0.007385550860814029,0.0028905138367341563,0.0011927076318336207,0.0005100697921535113,0.00022086279071390839,0.00010801156724758394,2.5214456545125733e-05,4.4864094961891516e-05])))));
var stdgo__$internal_math_Math_$_$_$lgamr___lgamR = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,7,7].concat([1,1.3920053346762105,0.7219355475671381,0.17193386563280308,0.01864591917156529,0.0007779424963818936,7.326684307446256e-06])))));
var stdgo__$internal_math_Math_$_$_$lgams___lgamS = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,7,7].concat([-0.07721566490153287,0.21498241596060885,0.325778796408931,0.14635047265246445,0.02664227030336386,0.0018402845140733772,3.194753265841009e-05])))));
var stdgo__$internal_math_Math_$_$_$lgamt___lgamT = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,15,15].concat([0.48383612272381005,-0.1475877229945939,0.06462494023913339,-0.032788541075985965,0.01797067508118204,-0.010314224129834144,0.006100538702462913,-0.0036845201678113826,0.0022596478090061247,-0.0014034646998923284,0.000881081882437654,-0.0005385953053567405,0.00031563207090362595,-0.00031275416837512086,0.0003355291926355191])))));
var stdgo__$internal_math_Math_$_$_$lgamu___lgamU = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([-0.07721566490153287,0.6328270640250934,1.4549225013723477,0.9777175279633727,0.22896372806469245,0.013381091853678766])))));
var stdgo__$internal_math_Math_$_$_$lgamv___lgamV = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([1,2.4559779371304113,2.128489763798934,0.7692851504566728,0.10422264559336913,0.003217092422824239])))));
var stdgo__$internal_math_Math_$_$_$lgamw___lgamW = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,7,7].concat([0.4189385332046727,0.08333333333333297,-0.0027777777772877554,0.0007936505586430196,-0.00059518755745034,0.0008363399189962821,-0.0016309293409657527])))));
var stdgo__$internal_math_Math_$_$pow10tab__pow10tab = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,32,32].concat([1,10,100,1000,10000,100000,1e+06,1e+07,1e+08,1e+09,1e+10,1e+11,1e+12,1e+13,1e+14,1e+15,1e+16,1e+17,1e+18,1e+19,1e+20,1e+21,1e+22,1e+23,1e+24,1e+25,1e+26,1e+27,1e+28,1e+29,1e+30,1e+31])))));
var stdgo__$internal_math_Math_$_$pow10postab32__pow10postab32 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,10,10].concat([1,1e+32,1e+64,1e+96,1e+128,1e+160,1e+192,1e+224,1e+256,1e+288])))));
var stdgo__$internal_math_Math_$_$pow10negtab32__pow10negtab32 = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,11,11].concat([1,1e-32,1e-64,1e-96,1e-128,1e-160,1e-192,1e-224,1e-256,1e-288,1e-320])))));
var stdgo__$internal_math_Math_$_$_$sin___sin = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([1.5896230157654656e-10,-2.5050747762857807e-08,2.7557313621385722e-06,-0.0001984126982958954,0.008333333333322118,-0.1666666666666663])))));
var stdgo__$internal_math_Math_$_$_$cos___cos = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,6,6].concat([-1.1358536521387682e-11,2.087570084197473e-09,-2.755731417929674e-07,2.4801587288851704e-05,-0.0013888888888873056,0.041666666666666595])))));
var stdgo__$internal_math_Math_$_$_$tanp___tanP = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,3,3].concat([-13093.693918138379,1.1535166483858742e+06,-1.7956525197648488e+07])))));
var stdgo__$internal_math_Math_$_$_$tanq___tanQ = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,5,5].concat([1,13681.296347069296,-1.3208923444021097e+06,2.500838018233579e+07,-5.3869575592945464e+07])))));
var stdgo__$internal_math_Math_$_$tanhp__tanhP = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,3,3].concat([-0.9643991794250523,-99.28772310019185,-1614.6876844170845])))));
var stdgo__$internal_math_Math_$_$tanhq__tanhQ = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,3,3].concat([112.81167849163293,2235.4883906010045,4844.063053251255])))));
var stdgo__$internal_math_Math_$_$mpi4__mPi4 = stdgo_GoArray.__setNumber64__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,20,20].concat([new haxe__$Int64__$_$_$Int64(0,1),new haxe__$Int64__$_$_$Int64(1173554908,-1668797869),new haxe__$Int64__$_$_$Int64(-129060957,-362169471),new haxe__$Int64__$_$_$Int64(-1228592334,2022121603),new haxe__$Int64__$_$_$Int64(-56441001,-1116239165),new haxe__$Int64__$_$_$Int64(1850268788,-2070174272),new haxe__$Int64__$_$_$Int64(210918868,329458745),new haxe__$Int64__$_$_$Int64(-63187399,1649626749),new haxe__$Int64__$_$_$Int64(-788239382,1568049417),new haxe__$Int64__$_$_$Int64(-751247283,1757346946),new haxe__$Int64__$_$_$Int64(1931717747,111571945),new haxe__$Int64__$_$_$Int64(956874519,2079477878),new haxe__$Int64__$_$_$Int64(1072771071,-1140117473),new haxe__$Int64__$_$_$Int64(-564255978,-1273701826),new haxe__$Int64__$_$_$Int64(-630391394,1335235438),new haxe__$Int64__$_$_$Int64(-1634959667,1019204698),new haxe__$Int64__$_$_$Int64(-363891313,-674503946),new haxe__$Int64__$_$_$Int64(2047767535,346367444),new haxe__$Int64__$_$_$Int64(-671695006,1058716176),new haxe__$Int64__$_$_$Int64(-1408868211,-118040745)])))));
var stdgo__$internal_math_Math_$expgo_expGo = stdgo__$internal_math_Math_$_$exp__exp;
var stdgo__$internal_math_Math_$exp2go_exp2Go = stdgo__$internal_math_Math_$_$exp2__exp2;
var stdgo__$internal_math_Math_$hypotgo_hypotGo = stdgo__$internal_math_Math_$_$hypot__hypot;
var stdgo__$internal_math_Math_$sqrtgo_sqrtGo = stdgo__$internal_math_Math_$_$sqrt__sqrt;
var stdgo__$internal_math_Math_$trigreduce_trigReduce = stdgo__$internal_math_Math_$_$trigreduce__trigReduce;
var stdgo__$internal_math_Math___init_go2hx__ = (function($this) {
	var $r;
	try {
		var __tmp__0 = stdgo__$internal_math_Math_$_$_$gamp___gamP;
		var __tmp__1 = stdgo__$internal_math_Math_$_$_$gamq___gamQ;
		var __tmp__2 = stdgo__$internal_math_Math_$_$_$gams___gamS;
		var __tmp__3 = stdgo__$internal_math_Math_$_$p0r8__p0R8;
		var __tmp__4 = stdgo__$internal_math_Math_$_$p0s8__p0S8;
		var __tmp__5 = stdgo__$internal_math_Math_$_$p0r5__p0R5;
		var __tmp__6 = stdgo__$internal_math_Math_$_$p0s5__p0S5;
		var __tmp__7 = stdgo__$internal_math_Math_$_$p0r3__p0R3;
		var __tmp__8 = stdgo__$internal_math_Math_$_$p0s3__p0S3;
		var __tmp__9 = stdgo__$internal_math_Math_$_$p0r2__p0R2;
		var __tmp__10 = stdgo__$internal_math_Math_$_$p0s2__p0S2;
		var __tmp__11 = stdgo__$internal_math_Math_$_$q0r8__q0R8;
		var __tmp__12 = stdgo__$internal_math_Math_$_$q0s8__q0S8;
		var __tmp__13 = stdgo__$internal_math_Math_$_$q0r5__q0R5;
		var __tmp__14 = stdgo__$internal_math_Math_$_$q0s5__q0S5;
		var __tmp__15 = stdgo__$internal_math_Math_$_$q0r3__q0R3;
		var __tmp__16 = stdgo__$internal_math_Math_$_$q0s3__q0S3;
		var __tmp__17 = stdgo__$internal_math_Math_$_$q0r2__q0R2;
		var __tmp__18 = stdgo__$internal_math_Math_$_$q0s2__q0S2;
		var __tmp__19 = stdgo__$internal_math_Math_$_$p1r8__p1R8;
		var __tmp__20 = stdgo__$internal_math_Math_$_$p1s8__p1S8;
		var __tmp__21 = stdgo__$internal_math_Math_$_$p1r5__p1R5;
		var __tmp__22 = stdgo__$internal_math_Math_$_$p1s5__p1S5;
		var __tmp__23 = stdgo__$internal_math_Math_$_$p1r3__p1R3;
		var __tmp__24 = stdgo__$internal_math_Math_$_$p1s3__p1S3;
		var __tmp__25 = stdgo__$internal_math_Math_$_$p1r2__p1R2;
		var __tmp__26 = stdgo__$internal_math_Math_$_$p1s2__p1S2;
		var __tmp__27 = stdgo__$internal_math_Math_$_$q1r8__q1R8;
		var __tmp__28 = stdgo__$internal_math_Math_$_$q1s8__q1S8;
		var __tmp__29 = stdgo__$internal_math_Math_$_$q1r5__q1R5;
		var __tmp__30 = stdgo__$internal_math_Math_$_$q1s5__q1S5;
		var __tmp__31 = stdgo__$internal_math_Math_$_$q1r3__q1R3;
		var __tmp__32 = stdgo__$internal_math_Math_$_$q1s3__q1S3;
		var __tmp__33 = stdgo__$internal_math_Math_$_$q1r2__q1R2;
		var __tmp__34 = stdgo__$internal_math_Math_$_$q1s2__q1S2;
		var __tmp__35 = stdgo__$internal_math_Math_$_$_$lgama___lgamA;
		var __tmp__36 = stdgo__$internal_math_Math_$_$_$lgamr___lgamR;
		var __tmp__37 = stdgo__$internal_math_Math_$_$_$lgams___lgamS;
		var __tmp__38 = stdgo__$internal_math_Math_$_$_$lgamt___lgamT;
		var __tmp__39 = stdgo__$internal_math_Math_$_$_$lgamu___lgamU;
		var __tmp__40 = stdgo__$internal_math_Math_$_$_$lgamv___lgamV;
		var __tmp__41 = stdgo__$internal_math_Math_$_$_$lgamw___lgamW;
		var __tmp__42 = stdgo__$internal_math_Math_$_$pow10tab__pow10tab;
		var __tmp__43 = stdgo__$internal_math_Math_$_$pow10postab32__pow10postab32;
		var __tmp__44 = stdgo__$internal_math_Math_$_$pow10negtab32__pow10negtab32;
		var __tmp__45 = stdgo__$internal_math_Math_$_$_$sin___sin;
		var __tmp__46 = stdgo__$internal_math_Math_$_$_$cos___cos;
		var __tmp__47 = stdgo__$internal_math_Math_$_$_$tanp___tanP;
		var __tmp__48 = stdgo__$internal_math_Math_$_$_$tanq___tanQ;
		var __tmp__49 = stdgo__$internal_math_Math_$_$tanhp__tanhP;
		var __tmp__50 = stdgo__$internal_math_Math_$_$tanhq__tanhQ;
		var __tmp__51 = stdgo__$internal_math_Math_$_$mpi4__mPi4;
		var __tmp__52 = stdgo__$internal_math_Math_$expgo_expGo;
		var __tmp__53 = stdgo__$internal_math_Math_$exp2go_exp2Go;
		var __tmp__54 = stdgo__$internal_math_Math_$hypotgo_hypotGo;
		var __tmp__55 = stdgo__$internal_math_Math_$sqrtgo_sqrtGo;
		var __tmp__56 = stdgo__$internal_math_Math_$trigreduce_trigReduce;
	} catch( _g ) {
		var __exception__ = haxe_Exception.caught(_g);
		if(__exception__.get_message() != "__return__") {
			throw haxe_Exception.thrown(__exception__);
		}
	}
	$r = true;
	return $r;
}(this));
var stdgo__$internal_unicode_utf8_Utf8_$_$acceptranges__acceptRanges = (function($this) {
	var $r;
	var _g = [];
	{
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
		_g.push(new stdgo__$internal_unicode_utf8_T_$acceptRange(null,null));
	}
	var s = (new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,16,16].concat(_g))));
	stdgo_GoArray.__set__(s,0,new stdgo__$internal_unicode_utf8_T_$acceptRange(128,191));
	stdgo_GoArray.__set__(s,1,new stdgo__$internal_unicode_utf8_T_$acceptRange(160,191));
	stdgo_GoArray.__set__(s,2,new stdgo__$internal_unicode_utf8_T_$acceptRange(128,159));
	stdgo_GoArray.__set__(s,3,new stdgo__$internal_unicode_utf8_T_$acceptRange(144,191));
	stdgo_GoArray.__set__(s,4,new stdgo__$internal_unicode_utf8_T_$acceptRange(128,143));
	$r = s;
	return $r;
}(this));
var stdgo__$internal_unicode_utf8_Utf8_$_$first__first = stdgo_GoArray.__setNumber32__((new(Function.prototype.bind.apply(stdgo_GoArrayData,[null,256,256].concat
{
	cases_Harmonica_main();
	haxe_EntryPoint.run();
}
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=harmonica.min.js.map